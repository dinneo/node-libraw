var polarr_rf = function(fname, data, polarr_rf_arguments, polarr_rf_finish_callback, polarr_rf_error_callback) {
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 632432;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,205,204,204,204,204,204,220,63,0,0,0,0,0,0,18,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,198,136,68,161,101,218,63,24,9,109,57,151,226,214,63,88,29,57,210,25,24,199,63,246,95,231,166,205,56,203,63,24,9,109,57,151,226,230,63,85,247,200,230,170,121,178,63,75,175,205,198,74,204,147,63,56,129,233,180,110,131,190,63,145,214,24,116,66,104,238,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,64,220,213,171,200,232,219,63,99,183,207,42,51,165,216,63,114,191,67,81,160,79,194,63,248,198,16,0,28,123,204,63,152,162,92,26,191,240,230,63,225,126,192,3,3,8,175,63,129,91,119,243,84,135,140,63,145,42,138,87,89,219,184,63,1,252,83,170,68,217,230,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,217,175,59,221,121,226,230,63,168,112,4,169,20,59,210,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,13,106,191,181,19,165,63,150,35,100,32,207,174,238,63,27,217,149,150,145,250,226,63,102,78,151,197,196,230,217,63,161,246,91,59,81,18,98,63,210,253,156,130,252,108,184,63,157,246,148,156,19,251,234,63,253,219,101,191,238,116,175,63,68,20,147,55,192,204,135,63,239,171,114,161,242,175,177,63,49,94,243,170,206,106,237,63,74,240,134,52,42,240,224,63,119,245,42,50,58,32,213,63,218,226,26,159,201,254,193,63,207,17,249,46,165,46,185,63,165,107,38,223,108,243,235,63,224,73,11,151,85,216,156,63,167,236,244,131,186,72,145,63,235,1,243,144,41,31,190,63,71,4,227,224,210,177,235,63,205,31,211,218,52,182,219,63,131,163,228,213,57,6,216,63,162,213,201,25,138,59,200,63,214,31,97,24,176,228,182,63,95,209,173,215,244,32,234,63,192,5,217,178,124,93,186,63,228,78,233,96,253,159,147,63,2,188,5,18,20,63,190,63,27,160,52,212,40,36,238,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,22,81,115,63,0,0,128,63,75,92,139,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,101,110,116,97,120,0,0,0,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,3,0,0,0,78,105,107,111,110,0,0,0,0,0,0,0,69,51,50,48,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,78,105,107,111,110,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,79,108,121,109,112,117,115,0,0,0,0,0,67,55,52,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,0,0,0,192,0,0,0,187,0,0,0,92,0,0,0,0,0,0,0,124,2,0,0,168,1,0,0,212], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([232,217,76,63,49,8,140,62,107,43,246,61,178,157,111,61,32,99,238,60,108,9,121,60,111,18,3,60,224,45,144,59], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+31160);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+293388);
/* memory initializer */ allocate([205,40,222,242,229,250,18,226,74,61,10,8,145,251,152,4,178,29,0,0,0,0,0,0,211,117,9,0,0,0,0,0,12,40,53,242,185,251,54,228,2,58,132,9,85,250,187,6,221,24,0,0,0,0,0,0,225,117,9,0,0,0,0,0,41,42,49,241,134,251,182,226,73,59,184,9,146,250,41,6,153,28,0,0,0,0,0,0,237,117,9,0,0,0,0,0,158,33,51,246,10,252,210,223,98,61,143,10,82,252,211,3,80,30,0,0,0,0,0,0,249,117,9,0,0,0,252,15,201,49,108,238,120,250,82,232,206,56,44,6,114,248,208,8,203,25,0,0,0,0,0,0,6,118,9,0,0,0,0,0,70,46,97,237,79,252,141,228,6,62,65,4,117,245,26,16,119,32,0,0,0,0,0,0,18,118,9,0,0,0,252,15,117,51,132,237,37,250,81,233,212,54,103,7,3,248,148,9,230,27,0,0,0,0,0,0,31,118,9,0,0,0,0,0,148,30,31,249,164,254,100,233,247,54,38,7,219,244,166,17,157,25,0,0,0,0,0,0,45,118,9,0,0,0,0,0,1,35,87,246,196,251,213,224,118,62,19,8,241,246,219,11,57,32,0,0,0,0,0,0,59,118,9,0,0,0,188,15,208,31,187,248,169,251,173,225,22,62,137,7,183,248,238,9,183,29,0,0,0,0,0,0,72,118,9,0,0,0,153,15,15,37,197,244,165,251,147,226,246,60,218,7,174,249,52,8,221,28,0,0,0,0,0,0,84,118,9,0,0,0,0,0,25,24,53,250,235,255,61,228,169,57,232,9,168,244,252,13,120,33,0,0,0,0,0,0,98,118,9,0,0,0,106,15,152,34,234,245,254,251,175,225,150,61,34,8,39,248,15,10,45,29,0,0,0,0,0,0,112,118,9,0,0,0,215,15,42,34,135,246,185,251,86,226,252,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,126,118,9,0,0,0,210,15,41,34,135,246,185,251,86,226,253,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,140,118,9,0,0,0,0,0,200,31,80,248,213,254,151,234,174,53,79,7,4,246,109,16,230,25,0,0,0,0,0,0,154,118,9,0,0,0,106,15,81,34,31,246,247,251,41,226,8,61,64,8,9,249,252,8,137,30,0,0,0,0,0,0,168,118,9,0,0,0,210,15,152,32,238,246,4,252,84,226,19,61,0,8,44,249,221,8,119,28,0,0,0,0,0,0,182,118,9,0,0,0,236,14,192,43,57,241,211,250,32,238,49,49,158,8,73,253,206,6,80,29,0,0,0,0,0,0,194,118,9,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,208,118,9,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,222,118,9,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,235,118,9,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,248,118,9,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,5,119,9,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,18,119,9,0,0,0,0,0,145,44,224,240,143,250,36,238,213,49,211,7,59,253,18,7,247,28,0,0,0,0,0,0,33,119,9,0,0,0,0,0,144,44,63,239,65,251,66,239,97,48,70,8,125,254,187,5,107,30,0,0,0,0,0,0,47,119,9,0,0,0,243,12,182,58,80,234,242,248,109,240,99,48,231,6,176,253,134,6,111,27,0,0,0,0,0,0,61,119,9,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,75,119,9,0,0,0,203,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,89,119,9,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,103,119,9,0,0,0,0,0,237,35,138,243,109,253,210,245,78,42,247,7,54,254,226,4,82,21,0,0,0,0,0,0,117,119,9,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,131,119,9,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,145,119,9,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,159,119,9,0,0,0,0,0,7,30,64,248,162,253,25,239,152,46,161,10,155,250,35,9,52,25,0,0,0,0,0,0,172,119,9,0,0,0,0,0,206,36,70,243,57,253,161,245,146,42,223,7,0,254,74,5,136,21,0,0,0,0,0,0,191,119,9,0,0,0,225,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,204,119,9,0,0,0,0,0,4,37,146,243,3,253,203,245,206,42,101,7,63,254,35,5,148,20,0,0,0,0,0,0,218,119,9,0,0,0,0,0,172,39,159,242,203,251,205,245,169,43,88,6,127,254,56,6,216,19,0,0,0,0,0,0,231,119,9,0,0,0,0,0,46,47,28,237,211,251,241,229,226,55,18,10,238,252,171,3,250,28,0,0,0,0,0,0,245,119,9,0,0,0,0,0,246,45,163,238,213,251,11,229,85,56,147,10,251,251,193,4,148,29,0,0,0,0,0,0,1,120,9,0,0,0,255,15,21,37,169,242,102,253,165,235,46,48,188,12,244,249,214,8,82,25,0,0,0,0,0,0,17,120,9,0,0,0,254,15,97,41,233,241,14,252,7,233,71,51,12,12,80,251,13,7,65,26,0,0,0,0,0,0,33,120,9,0,0,0,254,15,77,45,90,240,231,251,200,234,255,49,141,11,251,251,214,6,116,25,0,0,0,0,0,0,49,120,9,0,0,0,249,15,163,42,163,241,42,252,45,234,186,50,95,11,112,251,176,7,79,24,0,0,0,0,0,0,65,120,9,0,0,0,0,0,2,45,52,240,134,251,128,237,140,47,88,11,36,252,37,7,151,23,0,0,0,0,0,0,81,120,9,0,0,0,0,0,168,32,140,246,144,252,168,240,65,48,203,6,155,250,112,9,53,20,0,0,0,0,0,0,97,120,9,0,0,0,0,0,162,44,193,239,154,251,238,247,182,41,57,6,136,255,47,5,134,19,0,0,0,0,0,0,110,120,9,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,124,120,9,0,0,0,0,0,149,42,1,240,206,251,139,251,248,35,245,8,194,255,137,5,38,20,0,0,0,0,0,0,137,120,9,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,4,19,9,0,0,0,0,0,238,49,37,240,133,254,34,254,106,35,133,5,60,5,233,5,56,20,0,0,0,0,0,0,150,120,9,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,166,120,9,0,0,0,0,0,77,42,234,244,165,251,109,223,201,61,136,10,187,252,168,2,163,46,0,0,0,0,0,0,181,120,9,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,197,120,9,0,0,0,0,0,131,40,227,246,74,251,16,222,103,63,42,10,50,251,92,4,18,44,0,0,0,0,0,0,212,120,9,0,0,0,0,0,179,37,245,247,91,251,79,221,128,64,183,9,76,250,65,5,191,41,0,0,0,0,0,0,226,120,9,0,0,0,0,0,94,37,209,244,221,252,254,227,68,59,64,8,206,252,35,3,233,37,0,0,0,0,0,0,238,120,9,0,0,0,0,0,87,43,171,243,212,250,71,223,218,61,160,10,172,251,179,3,168,45,0,0,0,0,0,0,248,120,9,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,4,121,9,0,0,0,0,0,226,35,138,245,117,252,11,222,133,64,212,8,151,251,70,4,76,33,0,0,0,0,0,0,17,121,9,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,30,121,9,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,41,121,9,0,0,0,0,0,139,34,235,244,143,253,95,236,100,49,108,10,101,254,210,4,242,28,0,0,0,0,0,0,52,121,9,0,0,0,0,0,167,38,251,243,174,252,72,235,235,50,217,9,141,252,232,6,24,27,0,0,0,0,0,0,63,121,9,0,0,0,0,0,118,33,70,245,79,251,228,241,172,47,14,6,131,252,144,6,120,24,0,0,0,0,0,0,74,121,9,0,0,0,0,0,6,34,184,245,113,251,101,240,13,48,89,7,43,252,183,6,135,25,0,0,0,0,0,0,86,121,9,0,0,0,0,0,178,33,209,245,125,251,101,240,13,48,89,7,241,251,30,7,13,27,0,0,0,0,0,0,100,121,9,0,0,0,0,0,247,28,252,247,47,253,190,235,244,49,122,10,90,250,109,8,117,26,0,0,0,0,0,0,111,121,9,0,0,0,0,0,234,31,91,245,129,253,168,238,241,46,184,10,253,252,185,5,199,25,0,0,0,0,0,0,125,121,9,0,0,0,0,0,9,34,239,244,25,253,10,239,124,46,212,10,46,253,7,6,103,24,0,0,0,0,0,0,136,121,9,0,0,0,0,0,182,35,125,244,90,253,56,222,71,66,127,6,80,247,82,11,167,33,0,0,0,0,0,0,147,121,9,0,0,0,0,0,64,33,117,243,237,252,185,239,190,46,183,9,130,253,8,5,166,23,0,0,0,0,0,0,159,121,9,0,0,0,0,0,214,33,48,243,226,252,168,240,251,45,140,9,182,253,208,4,166,23,0,0,0,0,0,0,171,121,9,0,0,0,0,0,195,50,39,234,173,251,169,248,155,39,235,7,192,255,209,4,55,19,0,0,0,0,0,0,183,121,9,0,0,0,0,62,150,41,247,241,122,251,255,242,179,45,39,7,101,253,58,11,143,24,0,0,0,0,0,0,195,121,9,0,15,0,0,0,66,34,134,243,204,252,201,244,17,44,11,7,255,253,16,6,82,17,0,0,0,0,0,0,213,121,9,0,0,0,127,15,26,35,61,245,222,252,59,231,7,53,5,12,60,250,96,8,235,24,0,0,0,0,0,0,231,121,9,0,0,0,0,0,204,38,12,244,89,252,79,233,19,52,193,10,13,251,107,8,199,21,0,0,0,0,0,0,250,121,9,0,15,0,150,15,125,39,96,242,31,252,220,234,12,50,100,11,231,250,92,8,167,21,0,0,0,0,0,0,13,122,9,0,15,0,0,0,186,32,18,245,255,252,4,244,146,44,85,7,230,253,0,7,15,18,0,0,0,0,0,0,33,122,9,0,15,0,0,0,186,32,18,245,255,252,4,244,146,44,85,7,230,253,0,7,15,18,0,0,0,0,0,0,53,122,9,0,0,0,148,15,224,42,67,240,139,251,18,225,131,60,40,10,122,249,23,8,54,32,0,0,0,0,0,0,72,122,9,0,15,0,0,0,210,38,36,245,134,252,4,238,105,48,176,9,163,251,0,9,12,18,0,0,0,0,0,0,90,122,9,0,15,0,0,0,71,53,97,234,165,250,94,249,161,37,126,9,60,1,128,4,12,16,0,0,0,0,0,0,108,122,9,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,127,122,9,0,15,0,0,0,12,45,28,239,214,251,185,246,95,42,213,6,204,253,163,6,255,16,0,0,0,0,0,0,145,122,9,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,158,122,9,0,15,0,150,15,89,31,106,248,230,251,16,225,32,62,52,8,104,246,189,11,127,27,0,0,0,0,0,0,176,122,9,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,193,122,9,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,209,122,9,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,227,122,9,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,243,122,9,0,15,0,0,0,140,34,46,242,0,253,131,241,242,45,152,8,70,253,0,7,100,20,0,0,0,0,0,0,7,123,9,0,15,0,0,0,140,34,46,242,0,253,131,241,242,45,152,8,70,253,0,7,100,20,0,0,0,0,0,0,29,123,9,0,15,0,0,0,163,36,61,243,208,252,101,243,40,45,89,7,98,252,136,7,220,20,0,0,0,0,0,0,47,123,9,0,15,0,0,0,163,36,61,243,208,252,101,243,40,45,89,7,98,252,136,7,220,20,0,0,0,0,0,0,65,123,9,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,83,123,9,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,96,123,9,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,114,123,9,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,127,123,9,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,145,123,9,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,159,123,9,0,15,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,177,123,9,0,15,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,191,123,9,0,15,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,209,123,9,0,15,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,223,123,9,0,15,0,0,0,150,30,120,245,5,253,3,243,147,45,74,7,127,253,176,6,216,18,0,0,0,0,0,0,244,123,9,0,15,0,0,0,150,30,120,245,5,253,3,243,147,45,74,7,127,253,176,6,216,18,0,0,0,0,0,0,10,124,9,0,15,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,30,124,9,0,15,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,44,124,9,0,15,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,64,124,9,0,15,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,78,124,9,0,15,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,98,124,9,0,15,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,112,124,9,0,15,0,255,15,122,35,165,244,99,252,25,232,65,52,242,11,251,248,81,10,233,21,0,0,0,0,0,0,132,124,9,0,0,0,0,0,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,150,124,9,0,15,0,148,15,7,32,239,247,224,251,68,224,28,63,241,7,102,246,206,11,52,28,0,0,0,0,0,0,167,124,9,0,15,0,60,15,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,184,124,9,0,15,0,255,15,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,201,124,9,0,15,0,255,15,118,30,254,245,28,253,217,240,64,45,53,10,225,251,200,8,58,21,0,0,0,0,0,0,218,124,9,0,15,0,255,15,102,32,181,244,117,253,227,240,70,45,35,10,97,251,219,8,232,20,0,0,0,0,0,0,235,124,9,0,15,0,255,15,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,252,124,9,0,15,0,146,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,14,125,9,0,15,0,255,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,32,125,9,0,15,0,255,15,91,35,92,246,76,251,164,235,220,51,73,8,83,251,206,9,234,26,0,0,0,0,0,0,50,125,9,0,15,0,255,15,36,32,127,244,108,253,158,240,16,46,126,9,186,251,230,8,161,22,0,0,0,0,0,0,68,125,9,0,15,0,0,0,194,31,15,245,78,252,64,242,25,44,248,9,222,250,207,9,159,22,0,0,0,0,0,0,86,125,9,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,104,125,9,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,122,125,9,0,15,0,146,15,155,24,70,250,236,253,121,230,28,54,153,11,229,246,40,12,96,23,0,0,0,0,0,0,140,125,9,0,15,0,149,15,100,30,150,246,218,252,183,240,204,45,180,9,6,252,86,9,178,20,0,0,0,0,0,0,158,125,9,0,15,0,0,0,159,25,40,249,21,254,168,241,143,44,26,10,62,252,83,7,10,20,0,0,0,0,0,0,176,125,9,0,15,0,0,0,210,27,196,247,0,254,173,243,193,43,183,8,227,253,143,5,181,19,0,0,0,0,0,0,194,125,9,0,15,0,0,0,114,26,153,248,24,253,144,235,89,51,255,8,128,249,131,10,71,22,0,0,0,0,0,0,212,125,9,0,15,0,0,0,46,32,84,243,89,253,175,240,38,46,80,9,188,252,230,7,220,22,0,0,0,0,0,0,230,125,9,0,15,0,0,0,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,248,125,9,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,10,126,9,0,15,0,0,0,140,29,41,247,162,253,180,243,231,43,129,8,228,253,155,5,245,18,0,0,0,0,0,0,28,126,9,0,15,0,0,0,110,30,80,245,13,253,132,242,94,46,233,6,140,253,111,6,34,19,0,0,0,0,0,0,46,126,9,0,15,0,0,0,110,30,80,245,13,253,132,242,94,46,233,6,140,253,111,6,34,19,0,0,0,0,0,0,64,126,9,0,15,0,0,0,159,33,250,244,216,252,85,241,154,46,1,8,204,252,12,8,104,20,0,0,0,0,0,0,82,126,9,0,15,0,0,0,159,33,250,244,216,252,85,241,154,46,1,8,204,252,12,8,104,20,0,0,0,0,0,0,100,126,9,0,15,0,0,0,98,34,193,243,235,252,177,243,204,44,112,7,218,253,209,6,202,18,0,0,0,0,0,0,118,126,9,0,15,0,0,0,98,34,193,243,235,252,177,243,204,44,112,7,218,253,209,6,202,18,0,0,0,0,0,0,136,126,9,0,15,0,0,0,102,33,164,244,182,252,133,243,9,45,89,7,174,254,67,6,23,18,0,0,0,0,0,0,154,126,9,0,15,0,0,0,102,33,164,244,182,252,133,243,9,45,89,7,174,254,67,6,23,18,0,0,0,0,0,0,172,126,9,0,0,0,0,0,175,23,70,247,25,255,166,235,219,53,220,5,237,251,50,11,85,27,0,0,0,0,0,0,190,126,9,0,0,0,0,0,32,30,245,247,115,253,214,240,230,44,166,10,58,253,52,5,70,23,0,0,0,0,0,0,198,126,9,0,0,0,0,0,89,46,85,238,95,250,209,234,122,56,167,3,205,249,127,10,222,18,0,0,0,0,0,0,216,126,9,0,0,0,0,0,253,25,50,250,157,253,131,239,247,51,161,3,143,252,112,9,58,28,0,0,0,0,0,0,234,126,9,0,0,0,0,0,89,46,85,238,95,250,209,234,122,56,167,3,205,249,127,10,222,18,0,0,0,0,0,0,253,126,9,0,0,0,0,0,33,5,63,7,147,255,197,229,36,62,40,3,185,254,48,7,132,23,0,0,0,0,0,0,12,127,9,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,27,127,9,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,41,127,9,0,0,0,0,0,164,17,11,255,219,255,148,228,128,58,125,8,122,243,63,18,175,27,0,0,0,0,0,0,56,127,9,0,0,0,0,0,189,19,232,255,139,255,204,233,252,54,166,6,197,245,140,17,217,22,0,0,0,0,0,0,71,127,9,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,85,127,9,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,99,127,9,0,0,0,0,0,11,57,230,239,240,253,238,248,66,38,225,7,215,254,203,10,48,23,0,0,0,0,0,0,114,127,9,0,192,2,255,255,22,82,45,225,203,245,16,244,169,47,88,3,101,247,5,20,106,31,0,0,0,0,0,0,122,127,9,0,0,0,0,0,22,18,190,252,89,254,143,236,5,50,113,9,130,253,187,5,227,23,0,0,0,0,0,0,134,127,9,0,0,0,0,0,124,14,225,253,96,255,251,234,222,47,228,13,65,250,137,7,42,32,0,0,0,0,0,0,143,127,9,0,0,0,0,62,194,34,62,246,30,252,184,243,64,44,18,8,8,253,101,5,224,17,0,0,0,0,0,0,155,127,9,0,0,0,255,7,152,41,199,240,225,251,26,248,77,41,132,6,20,254,75,6,134,18,0,0,0,0,0,0,168,127,9,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,185,127,9,0,0,0,0,0,102,20,84,251,218,253,116,230,57,57,217,7,126,249,3,11,25,22,0,0,0,0,0,0,201,127,9,0,0,0,0,0,124,31,139,244,7,253,104,238,90,50,226,6,138,253,209,5,107,20,0,0,0,0,0,0,216,127,9,0,0,0,0,0,124,31,139,244,7,253,104,238,90,50,226,6,138,253,209,5,107,20,0,0,0,0,0,0,231,127,9,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,244,127,9,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,3,128,9,0,0,0,255,15,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,15,128,9,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,30,128,9,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,45,128,9,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,58,128,9,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,71,128,9,0,0,0,0,0,190,41,54,240,228,251,245,241,182,51,20,1,48,254,235,4,43,23,0,0,0,0,0,0,85,128,9,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,97,128,9,0,0,0,0,0,190,41,54,240,228,251,245,241,182,51,20,1,48,254,235,4,43,23,0,0,0,0,0,0,109,128,9,0,0,0,255,15,61,47,27,242,125,251,24,252,62,37,197,6,234,255,251,6,224,17,0,0,0,0,0,0,124,128,9,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,137,128,9,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,150,128,9,0,0,0,0,0,109,46,128,240,63,250,138,239,11,48,124,7,189,252,119,6,173,21,0,0,0,0,0,0,162,128,9,0,0,0,0,0,58,64,116,244,138,246,195,244,96,47,238,2,144,251,178,23,207,17,0,0,0,0,0,0,168,128,9,0,0,0,0,0,244,30,138,248,247,252,222,223,99,60,182,11,19,250,151,8,162,26,182,227,137,44,153,13,182,128,9,0,0,0,0,0,64,33,175,245,74,253,150,224,54,61,222,9,227,248,69,8,246,28,0,0,0,0,0,0,194,128,9,0,0,0,0,0,87,29,245,245,76,253,42,225,240,58,244,11,76,252,87,4,192,31,0,0,0,0,0,0,206,128,9,0,0,0,0,0,196,25,225,247,206,253,82,237,216,50,141,7,54,252,45,6,61,20,0,0,0,0,0,0,222,128,9,0,0,0,0,0,203,33,62,245,223,251,120,242,175,47,93,5,200,253,118,5,82,17,0,0,0,0,0,0,237,128,9,0,0,0,0,0,23,26,223,248,23,253,73,236,200,51,161,7,212,249,118,9,63,20,0,0,0,0,0,0,251,128,9,0,0,0,0,0,229,25,148,248,29,254,246,237,61,48,246,9,146,253,101,5,114,25,0,0,0,0,0,0,11,129,9,0,0,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,24,129,9,0,0,0,235,15,221,36,5,245,250,252,43,223,87,63,242,8,58,253,84,2,13,28,0,0,0,0,0,0,39,129,9,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,54,129,9,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,67,129,9,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,82,129,9,0,0,0,0,0,119,38,237,243,95,252,219,222,218,63,177,8,54,253,83,2,191,27,0,0,0,0,0,0,97,129,9,0,0,0,252,15,150,23,52,250,190,253,70,220,106,65,209,9,149,252,234,2,49,28,0,0,0,0,0,0,112,129,9,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,127,129,9,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,142,129,9,0,0,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,157,129,9,0,0,0,235,15,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,172,129,9,0,0,0,235,15,158,23,153,251,234,254,58,234,20,51,226,10,77,253,139,5,201,29,0,0,0,0,0,0,187,129,9,0,0,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,200,129,9,0,0,0,0,0,143,22,219,252,153,254,130,222,167,63,87,9,105,248,37,9,81,28,0,0,0,0,0,0,215,129,9,0,0,0,0,0,37,21,118,251,147,254,223,233,42,51,50,11,160,253,155,4,248,32,0,0,0,0,0,0,230,129,9,0,0,0,0,0,89,20,208,251,115,254,115,221,248,62,103,11,174,249,11,7,206,33,0,0,0,0,0,0,245,129,9,0,0,0,0,0,35,25,145,248,232,253,142,237,161,48,246,9,105,253,83,5,117,25,0,0,0,0,0,0,2,130,9,0,0,0,0,0,103,23,60,249,69,254,252,239,213,46,77,9,64,253,187,5,104,23,0,0,0,0,0,0,17,130,9,0,0,0,0,0,85,23,97,249,93,254,14,241,21,46,245,8,129,253,118,5,157,22,0,0,0,0,0,0,32,130,9,0,0,0,0,0,151,20,56,253,165,254,247,231,85,53,203,10,191,249,62,9,74,28,0,0,0,0,0,0,46,130,9,0,0,0,0,0,206,22,106,250,10,255,87,242,213,44,249,8,20,253,93,7,146,22,0,0,0,0,0,0,59,130,9,0,0,0,0,0,229,25,148,248,29,254,246,237,61,48,246,9,146,253,101,5,114,25,0,0,0,0,0,0,74,130,9,0,0,0,0,0,49,19,227,253,54,255,14,232,201,52,90,11,228,249,103,8,15,28,0,0,0,0,0,0,87,130,9,0,0,0,0,0,151,20,56,253,165,254,247,231,85,53,203,10,191,249,62,9,74,28,0,0,0,0,0,0,99,130,9,0,0,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,109,130,9,0,0,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,121,130,9,0,0,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,133,130,9,0,0,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,145,130,9,0,0,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,157,130,9,0,138,0,0,0,251,26,24,251,123,253,180,236,77,49,16,9,82,249,21,10,86,24,0,0,0,0,0,0,168,130,9,0,116,0,0,0,151,26,186,250,170,254,136,239,129,45,7,10,191,251,209,7,20,25,0,0,0,0,0,0,157,130,9,0,0,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,168,130,9,0,0,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,179,130,9,0,0,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,190,130,9,0,0,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,201,130,9,0,0,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,210,130,9,0,0,0,0,0,181,23,59,251,146,254,155,235,235,49,174,10,0,252,18,8,178,26,0,0,0,0,0,0,223,130,9,0,0,0,0,0,98,23,174,249,97,254,51,238,44,46,48,12,87,253,124,5,59,27,0,0,0,0,0,0,236,130,9,0,0,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,249,130,9,0,0,0,0,0,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,6,131,9,0,0,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,19,131,9,0,0,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,32,131,9,0,0,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,45,131,9,0,0,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,58,131,9,0,0,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,15,156,179,63,84,116,100,190,169,19,208,189,153,187,6,191,18,165,189,63,150,67,139,60,52,128,55,188,226,233,149,60,245,74,105,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,64,63,0,0,224,191,0,0,128,190,0,0,128,190,0,0,64,63,0,0,64,63,0,0,128,190,0,0,128,190,0,0,224,191,0,0,64,63,0,0,16,64,211,77,242,63,25,4,214,190,70,182,243,190,164,112,253,190,170,241,226,63,4,86,142,190,14,45,130,191,20,174,39,191,12,2,43,64,0,0,0,0,0,0,0,0,0,0,0,0,6,216,247,191,235,116,230,63,253,103,185,191,144,101,37,64,0,227,179,63,115,99,6,191,155,3,148,190,129,62,209,62,75,60,154,191,240,136,138,63,91,63,60,64,83,203,232,191,0,0,12,0,0,4,0,3,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,48,56,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,22,0,112,5,16,4,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,49,52,53,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,0,64,6,176,4,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,50,48,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,77,0,28,10,166,7,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,82,77,0,28,10,166,7,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,80,164,154,0,28,10,166,7,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,164,154,0,28,10,166,7,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,208,137,246,0,200,12,165,9,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,56,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,243,0,192,12,144,9,0,0,0,0,8,97,0,1,65,103,102,97,80,104,111,116,111,0,68,67,45,56,51,51,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,247,146,0,228,9,110,7,0,0,0,0,96,97,0,0,65,108,99,97,116,101,108,0,0,0,53,48,51,53,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,197,43,0,104,5,12,4,0,0,0,0,64,73,0,8,66,97,117,109,101,114,0,0,0,0,84,88,71,49,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,4,80,215,80,0,96,9,230,6,12,12,44,2,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0,0,0,0,0,0,0,96,255,99,0,104,10,176,7,4,4,44,4,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,54,48,0,0,0,0,0,0,0,0,64,76,100,0,112,10,176,7,12,8,44,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,0,0,0,0,96,133,101,0,112,10,200,7,10,6,42,2,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,0,0,0,0,240,168,117,0,72,11,88,8,44,8,4,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,0,0,0,0,16,174,140,0,80,12,36,9,36,12,4,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,0,0,0,0,104,10,141,0,80,12,42,9,12,7,44,13,40,73,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,0,0,0,0,224,204,157,0,8,13,176,9,6,5,32,3,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0,0,0,0,0,16,111,158,0,16,13,180,9,12,6,44,6,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,0,0,0,0,88,135,197,0,152,14,212,10,12,6,52,6,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,0,0,0,0,16,151,238,0,8,16,232,11,48,12,24,12,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,0,0,0,0,240,4,236,0,136,14,212,10,6,12,30,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,0,0,240,9,237,0,144,14,218,10,12,9,44,9,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0,0,0,0,64,162,28,1,240,15,232,11,24,12,24,12,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0,0,0,0,0,240,234,35,1,72,16,244,11,92,16,4,1,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,0,0,224,183,78,1,112,17,204,12,25,10,73,12,40,22,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0,0,0,0,0,0,67,121,1,96,18,176,13,8,16,56,8,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,51,51,48,48,32,73,83,0,0,0,0,0,220,214,1,128,20,80,15,8,16,56,16,40,148,0,2,67,97,110,111,110,0,0,0,0,0,73,88,85,83,32,49,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,40,30,0,96,6,187,4,0,2,0,1,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,50,48,48,48,85,88,0,0,0,0,0,0,0,0,0,0,0,0,0,96,25,49,0,32,8,11,6,0,0,10,1,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,51,42,48,48,69,88,0,0,0,0,0,0,0,0,0,0,0,0,0,128,226,94,0,25,10,132,7,0,0,9,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,53,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,0,51,11,133,8,0,0,34,36,0,22,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,44,0,85,6,184,4,0,0,1,0,0,148,7,13,67,97,115,105,111,0,0,0,0,0,69,88,45,83,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,130,75,0,42,8,42,6,0,0,32,34,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,83,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,92,0,42,9,184,6,2,0,32,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,81,86,45,82,52,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,82,113,0,8,10,136,7,0,0,0,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,53,48,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,233,114,0,42,10,137,7,0,0,22,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,81,86,45,82,53,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,115,0,42,10,140,7,0,0,32,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,99,115,0,42,10,145,7,0,0,25,0,0,22,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,78,118,0,42,10,194,7,0,0,32,26,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,142,0,42,11,124,8,0,0,14,30,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,81,165,0,42,12,15,9,0,0,27,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,55,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,118,165,0,42,12,17,9,0,0,25,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,135,167,0,42,12,46,9,0,0,32,32,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,214,187,0,213,12,194,9,0,0,6,30,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,56,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,190,0,0,13,198,9,0,0,47,35,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,236,0,170,14,192,10,0,0,82,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,49,48,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,29,1,0,16,228,11,0,0,24,0,80,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,82,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,63,117,0,212,8,164,6,0,0,0,0,13,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,52,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,12,0,0,4,1,3,0,1,0,0,0,73,0,0,67,114,101,97,116,105,118,101,0,0,80,67,45,67,65,77,32,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,230,183,1,32,17,216,12,0,0,0,0,36,97,0,0,68,74,73], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+303632);
/* memory initializer */ allocate([48,231,0,0,18,216,12,0,0,0,0,0,148,0,0,77,97,116,114,105,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,64,6,176,4,0,0,0,0,65,73,0,0,70,111,99,117,108,117,115,0,0,0,53,51,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,128,2,224,1,0,0,0,0,0,148,0,0,71,101,110,101,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,0,0,0,1,244,0,1,1,6,1,0,141,0,0,75,111,100,97,107,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,0,2,244,0,1,1,10,1,0,141,0,0,75,111,100,97,107,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,25,0,0,6,52,4,0,52,0,0,0,97,0,0,75,111,100,97,107,0,0,0,0,0,68,67,83,50,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,63,0,34,9,243,6,1,33,1,2,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,63,0,34,9,243,6,1,33,1,2,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,12,0,74,34,0,208,4,144,3,0,0,16,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,51,0,208,4,144,3,0,0,16,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,94,0,48,11,104,8,0,0,0,0,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,23,94,0,48,11,104,8,0,0,0,0,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,12,0,8,7,0,128,2,224,1,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,139,0,32,11,86,8,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,201,186,0,200,15,214,11,2,0,0,13,0,73,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,68,187,0,200,15,214,11,2,0,0,13,0,73,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,123,128,168,18,1,160,15,184,11,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,128,2,224,1,0,3,0,0,64,148,0,0,75,111,100,97,107,0,0,0,0,0,75,65,73,45,48,51,52,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,234,0,128,12,96,9,0,0,0,0,96,22,0,0,76,101,110,111,118,111,0,0,0,0,65,56,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,59,0,72,6,183,4,0,0,0,0,96,22,0,0,77,105,99,114,111,110,0,0,0,0,50,48,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,12,0,96,17,0,254,5,218,3,0,0,0,0,0,97,0,0,77,105,110,111,108,116,97,0,0,0,82,68,49,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,32,24,0,25,5,201,3,0,0,18,6,6,30,4,1,78,105,107,111,110,0,0,0,0,0,69,57,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,37,0,102,6,180,4,0,0,22,1,6,75,5,1,78,105,107,111,110,0,0,0,0,0,69,57,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,44,0,80,6,189,4,0,0,0,7,30,148,0,1,78,105,107,111,110,0,0,0,0,0,69,50,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,72,0,16,8,5,6,0,0,0,1,6,225,0,1,78,105,107,111,110,0,0,0,0,0,69,57,57,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,72,0,16,8,6,6,0,0,0,0,30,148,0,1,78,105,107,111,110,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,89,0,240,8,173,6,0,0,0,1,6,180,0,1,78,105,107,111,110,0,0,0,0,0,69,52,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,89,0,240,8,174,6,0,0,0,0,6,22,0,1,78,105,107,111,110,0,0,0,0,0,69,52,51,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,113,0,16,10,133,7,0,0,0,1,6,180,0,1,78,105,107,111,110,0,0,0,0,0,69,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,137,0,16,11,70,8,0,0,0,0,30,148,7,1,78,105,107,111,110,0,0,0,0,0,67,79,79,76,80,73,88,32,83,54,0,0,0,0,0,0,0,0,0,0,0,0,0,160,90,0,0,9,182,6,0,0,0,0,30,22,0,0,79,108,121,109,112,117,115,0,0,0,67,55,55,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,48,0,16,8,4,6,0,0,0,0,0,148,0,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,73,0,42,8,8,6,0,0,22,0,0,148,7,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,75,93,0,42,9,201,6,0,0,22,0,0,148,7,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,163,0,0,12,18,9,0,0,0,21,30,148,0,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,55,53,48,90,0,0,0,0,0,0,0,0,0,0,0,0,0,72,63,0,128,7,56,4,0,0,0,0,0,73,0,0,80,104,111,116,114,111,110,0,0,0,66,67,50,45,72,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,89,63,0,128,7,56,4,0,0,0,0,0,73,0,0,80,104,111,116,114,111,110,0,0,0,66,67,50,45,72,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,38,202,0,160,8,184,11,0,0,0,0,13,97,0,0,80,105,120,101,108,105,110,107,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,8,0,6,0,0,0,0,96,97,0,0,82,111,118,101,114,83,104,111,116,0,51,51,50,48,65,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,193,4,0,132,2,228,1,0,0,0,0,0,22,0,8,83,84,32,77,105,99,114,111,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,0,0,0,0,0,0,0,163,245,0,216,12,144,9,0,0,24,0,9,148,0,1,83,97,109,115,117,110,103,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,247,0,240,12,144,9,0,0,48,0,9,148,0,1,83,97,109,115,117,110,103,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,56,1,64,14,248,10,0,0,0,0,13,148,5,1,83,97,109,115,117,110,103,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,110,1,160,15,184,11,0,0,0,0,13,148,5,1,83,97,109,115,117,110,103,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,192,0,0,12,0,8,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,2,252,1,240,15,240,15,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,88,165,2,240,15,64,21,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,128,21,0,96,5,0,4,0,0,1,0,0,73,0,0,83,111,110,121,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,96,5,0,4,0,0,1,0,97,73,0,0,83,111,110,121,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,77,131,9,0,171,93,9,0,87,131,9,0,93,131,9,0,99,131,9,0,108,131,9,0,115,131,9,0,123,131,9,0,235,98,9,0,132,131,9,0,139,131,9,0,72,93,9,0,41,93,9,0,145,131,9,0,130,93,9,0,153,131,9,0,6,100,9,0,160,131,9,0,168,131,9,0,162,128,9,0,174,131,9,0,0,0,0,0,48,1,0,0,120,1,0,0,192,1,0,0,8,2,0,0,88,0,0,0,80,2,0,0,0,136,9,0,5,136,9,0,22,136,9,0,36,136,9,0,49,136,9,0,53,136,9,0,0,4,0,0,0,0,0,0,0,0,16,2,114,116,110,109,32,66,71,82,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,112,115,99,97,0,0,0,0,0,0,0,0,101,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,246,0,0,0,0,1,0,45,211,0,0,10,0,0,0,116,114,112,99,0,0,0,0,36,0,0,0,99,115,101,100,0,0,0,0,40,0,0,0,116,112,116,119,0,0,0,0,20,0,0,0,116,112,107,98,0,0,0,0,20,0,0,0,67,82,84,114,0,0,0,0,14,0,0,0,67,82,84,103,0,0,0,0,14,0,0,0,67,82,84,98,0,0,0,0,14,0,0,0,90,89,88,114,0,0,0,0,20,0,0,0,90,89,88,103,0,0,0,0,20,0,0,0,90,89,88,98,0,0,0,0,20,0,0,0,81,243,0,0,0,0,1,0,204,22,1,0,118,114,117,99,0,0,0,0,1,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+313897);
/* memory initializer */ allocate([2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,124,214,6,0,236,214,6,0,92,215,6,0,92,215,6,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,91,164,9,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,83,160,9,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,4,0,0,0,75,156,9,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+447740);
/* memory initializer */ allocate([155,2,102,1,141,1,53,2,196,1,219,2,134,1,111,1,243,1,5,2,95,4,140,1,92,1,192,1,25,2,119,5,229,1,175,1,252,1,176,2,0,0,0,0,0,0,0,0,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,77,251,179,6,144,251,112,6,108,5,148,252,11,1,245,0,151,249,105,8,81,15,175,242,153,253,103,4,229,249,27,8,157,5,99,252,253,1,3,0,12,253,244,4,215,9,41,248,66,255,190,2,162,248,94,9,105,8,151,249,251,2,5,255,60,254,196,3,224,11,32,246,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,217,252,39,5,7,249,249,8,108,5,148,252,1,3,255,254,26,255,230,2,19,8,237,249,0,0,117,4,121,4,104,4,85,4,154,4,125,4,104,4,85,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+580026);
/* memory initializer */ allocate([167,255,196,255,212,255,224,255,234,255,241,255,248,255,254,255,2,0,8,0,15,0,22,0,32,0,44,0,60,0,89,0,253,255,255,255,1,0,3,0,251,255,255,255,1,0,5,0,248,255,254,255,2,0,8,0,243,255,253,255,3,0,13,0,237,255,252,255,4,0,19,0,228,255,250,255,6,0,28,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,86,0,88,0,90,0,92,0,94,0,97,0,99,0,101,0,103,0,105,0,107,0,110,0,112,0,114,0,116,0,118,0,120,0,123,0,125,0,127,0,129,0,131,0,134,0,136,0,138,0,140,0,142,0,144,0,147,0,149,0,151,0,153,0,155,0,158,0,160,0,162,0,164,0,166,0,168,0,171,0,173,0,175,0,177,0,179,0,181,0,184,0,186,0,188,0,190,0,192,0,195,0,197,0,199,0,201,0,203,0,205,0,208,0,210,0,212,0,214,0,216,0,218,0,221,0,223,0,226,0,230,0,235,0,239,0,244,0,248,0,252,0,1,1,5,1,9,1,14,1,18,1,22,1,27,1,31,1,35,1,40,1,44,1,49,1,53,1,57,1,62,1,66,1,70,1,75,1,79,1,83,1,88,1,92,1,96,1,101,1,105,1,109,1,114,1,118,1,123,1,127,1,131,1,136,1,140,1,144,1,149,1,153,1,157,1,162,1,166,1,170,1,175,1,179,1,184,1,188,1,192,1,197,1,201,1,205,1,210,1,214,1,218,1,223,1,227,1,231,1,236,1,240,1,244,1,252,1,7,2,19,2,30,2,41,2,52,2,63,2,75,2,86,2,97,2,108,2,119,2,131,2,142,2,153,2,164,2,175,2,186,2,198,2,209,2,220,2,231,2,242,2,254,2,9,3,20,3,31,3,42,3,54,3,65,3,76,3,87,3,98,3,110,3,121,3,132,3,143,3,154,3,165,3,177,3,188,3,199,3,210,3,221,3,233,3,244,3,255,3,16,0,16,0,16,0,0,0,0,0,0,5,64,5,16,9,32,14,0,13,64,31,255,15,255,63,255,255,255,63,17,15,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,0,3,2,2,1,2,4,3,7,3,6,2,5,2,3,4,0,6,9,7,10,8,11,9,12,10,13,10,1,5,8,4,2,4,0,2,0,2,0,2,0,2,255,255,255,255,255,255,0,0,255,255,1,0,0,0,255,255,0,0,1,0,1,0,255,255,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,255,255,0,0,0,0,255,255,1,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,2,0,0,0,255,255,0,0,1,0,1,0,1,0,255,255,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,1,0,0,0,254,255,0,0,1,0,1,0,254,255,254,255,1,0,255,255,255,255,1,0,1,0,0,2,1,2,255,1,16,4,243,69,58,12,207,6,4,0,0,0,250,255,0,0,58,12,7,8,4,0,0,0,250,255,0,0,58,12,15,9,4,0,0,0,250,255,0,0,98,12,55,8,18,0,0,0,214,255,20,0,98,12,63,9,18,0,13,0,214,255,235,255,105,12,63,9,0,0,0,0,255,255,0,0,232,12,154,9,0,0,0,0,255,255,0,0,2,13,159,9,9,0,0,0,251,255,0,0,2,13,175,9,9,0,0,0,239,255,4,0,42,13,107,7,15,0,0,0,212,255,20,0,42,13,187,8,15,0,0,0,212,255,20,0,42,13,207,9,15,0,10,0,212,255,235,255,106,14,191,10,3,0,0,0,248,255,253,255,126,14,191,10,0,0,0,0,253,255,0,0,140,14,146,9,0,0,0,0,0,0,254,255,186,14,183,9,17,0,0,0,212,255,19,0,186,14,239,10,17,0,15,0,212,255,237,255,40,15,122,8,6,0,0,0,250,255,0,0,220,15,202,11,0,0,0,0,0,0,254,255,194,16,87,9,3,0,0,0,248,255,255,255,234,16,135,9,17,0,15,0,212,255,237,255,156,17,146,11,0,0,0,0,253,255,252,255,156,17,2,13,0,0,0,0,253,255,250,255,152,7,136,5,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,96,8,24,6,4,0,8,0,52,0,2,0,0,0,0,0,0,0,25,0,0,0,176,8,176,5,48,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,72,9,192,6,12,0,6,0,52,0,2,0,0,0,0,0,0,0,0,0,0,0,112,10,176,7,12,0,6,0,44,0,2,0,0,0,0,0,0,0,0,0,0,0,80,12,20,8,64,0,12,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,88,12,40,9,44,0,12,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,16,13,180,9,4,0,6,0,52,0,6,0,0,0,0,0,0,0,0,0,0,0,188,13,24,9,42,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,14,56,9,74,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,14,224,10,52,0,12,0,8,0,12,0,0,0,0,0,0,0,0,0,0,0,104,15,62,10,30,0,18,0,6,0,2,0,0,0,0,0,0,0,0,0,0,0,108,15,62,10,42,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,144,15,62,10,76,0,20,0,0,0,2,0,14,0,0,0,0,0,0,0,0,0,8,16,232,11,48,0,12,0,24,0,12,0,0,0,0,0,0,0,0,0,0,0,20,16,130,8,4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,212,10,192,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,52,12,104,0,11,0,8,0,65,0,0,0,0,0,0,0,0,0,0,0,80,16,246,11,96,0,17,0,8,0,0,0,0,0,16,0,0,0,7,0,73,0,96,16,246,11,96,0,17,0,24,0,0,0,0,0,16,0,0,0,0,0,73,0,216,16,60,11,22,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,17,58,11,62,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,17,138,11,90,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,17,20,13,12,0,10,0,36,0,12,0,0,0,0,0,0,0,18,0,73,0,128,17,38,13,80,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,17,38,13,80,0,50,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,160,18,188,13,96,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,224,18,132,12,62,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,18,156,12,62,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,19,21,13,98,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,246,12,142,0,45,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,160,20,200,13,72,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,20,188,13,142,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,20,0,14,126,0,100,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,240,20,188,13,158,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,21,124,14,72,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,126,14,96,0,17,0,0,0,0,0,0,0,16,0,0,0,0,0,73,0,80,22,190,14,62,0,20,0,10,0,2,0,0,0,0,0,0,0,0,0,0,0,160,22,220,14,158,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,23,110,15,122,0,80,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,208,23,216,15,72,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,24,216,15,8,1,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,34,32,23,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,1,69,79,83,32,49,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,69,79,83,45,49,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,1,69,79,83,32,50,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,116,1,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,52,2,69,79,83,32,51,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,50,2,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0,0,0,0,144,1,69,79,83,32,52,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,105,1,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0,0,0,0,0,97,2,69,79,83,32,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,129,2,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0,0,0,0,0,0,135,2,69,79,83,32,54,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,103,1,69,79,83,45,49,68,83,0,0,0,0,0,0,0,0,0,0,0,0,0,37,3,69,79,83,32,55,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,80,3,69,79,83,32,56,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,40,3,69,79,83,45,49,68,32,88,32,77,97,114,107,32,73,73,0,0,0,0,112,1,69,79,83,32,51,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,136,1,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0,0,0,0,0,118,1,69,79,83,32,52,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,21,2,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0,0,0,0,137,1,69,79,83,32,51,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,36,3,69,79,83,45,49,68,32,67,0,0,0,0,0,0,0,0,0,0,0,0,54,2,69,79,83,32,52,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,105,2,69,79,83,45,49,68,32,88,0,0,0,0,0,0,0,0,0,0,0,0,82,2,69,79,83,32,53,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,19,2,69,79,83,32,53,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,2,69,79,83,32,53,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,24,2,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,134,2,69,79,83,32,54,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,133,2,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0,0,0,0,0,1,3,69,79,83,32,54,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,2,3,69,79,83,32,54,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,3,69,79,83,32,55,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,80,2,69,79,83,32,55,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,3,69,79,83,32,55,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,137,2,69,79,83,32,55,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,71,3,69,79,83,32,55,54,48,68,0,0,0,0,0,0,0,0,0,0,0,0,84,2,69,79,83,32,49,48,48,48,68,0,0,0,0,0,0,0,0,0,0,0,136,2,69,79,83,32,49,49,48,48,68,0,0,0,0,0,0,0,0,0,0,0,39,3,69,79,83,32,49,50,48,48,68,0,0,0,0,0,0,0,0,0,0,0,130,3,67,97,110,111,110,32,69,79,83,32,53,68,83,0,0,0,0,0,0,0,4,4,69,79,83,32,49,51,48,48,68,0,0,0,0,0,0,0,0,0,0,0,1,4,67,97,110,111,110,32,69,79,83,32,53,68,83,32,82,0,0,0,0,0,70,3,69,79,83,32,49,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,2,0,68,83,67,45,82,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,83,76,82,45,65,49,48,48,0,0,0,0,0,0,0,0,0,0,0,1,1,68,83,76,82,45,65,57,48,48,0,0,0,0,0,0,0,0,0,0,0,2,1,68,83,76,82,45,65,55,48,48,0,0,0,0,0,0,0,0,0,0,0,3,1,68,83,76,82,45,65,50,48,48,0,0,0,0,0,0,0,0,0,0,0,4,1,68,83,76,82,45,65,51,53,48,0,0,0,0,0,0,0,0,0,0,0,5,1,68,83,76,82,45,65,51,48,48,0,0,0,0,0,0,0,0,0,0,0,8,1,68,83,76,82,45,65,51,51,48,0,0,0,0,0,0,0,0,0,0,0,9,1,68,83,76,82,45,65,50,51,48,0,0,0,0,0,0,0,0,0,0,0,10,1,68,83,76,82,45,65,50,57,48,0,0,0,0,0,0,0,0,0,0,0,13,1,68,83,76,82,45,65,56,53,48,0,0,0,0,0,0,0,0,0,0,0,17,1,68,83,76,82,45,65,53,53,48,0,0,0,0,0,0,0,0,0,0,0,18,1,68,83,76,82,45,65,53,48,48,0,0,0,0,0,0,0,0,0,0,0,19,1,68,83,76,82,45,65,52,53,48,0,0,0,0,0,0,0,0,0,0,0,22,1,78,69,88,45,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,1,78,69,88,45,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,83,76,84,45,65,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,83,76,84,45,65,53,53,86,0,0,0,0,0,0,0,0,0,0,0,0,26,1,68,83,76,82,45,65,53,54,48,0,0,0,0,0,0,0,0,0,0,0,27,1,68,83,76,82,45,65,53,56,48,0,0,0,0,0,0,0,0,0,0,0,28,1,78,69,88,45,67,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,83,76,84,45,65,51,53,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,83,76,84,45,65,54,53,86,0,0,0,0,0,0,0,0,0,0,0,0,31,1,83,76,84,45,65,55,55,86,0,0,0,0,0,0,0,0,0,0,0,0,32,1,78,69,88,45,53,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,1,78,69,88,45,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,83,76,84,45,65,51,55,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,83,76,84,45,65,53,55,0,0,0,0,0,0,0,0,0,0,0,0,0,37,1,78,69,88,45,70,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,1,83,76,84,45,65,57,57,86,0,0,0,0,0,0,0,0,0,0,0,0,39,1,78,69,88,45,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,1,78,69,88,45,53,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,68,83,67,45,82,88,49,48,48,0,0,0,0,0,0,0,0,0,0,0,42,1,68,83,67,45,82,88,49,0,0,0,0,0,0,0,0,0,0,0,0,0,46,1,73,76,67,69,45,51,48,48,48,0,0,0,0,0,0,0,0,0,0,0,47,1,83,76,84,45,65,53,56,0,0,0,0,0,0,0,0,0,0,0,0,0,49,1,78,69,88,45,51,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,1,73,76,67,69,45,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,1,78,69,88,45,53,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,1,68,83,67,45,82,88,49,48,48,77,50,0,0,0,0,0,0,0,0,0,53,1,68,83,67,45,82,88,49,48,0,0,0,0,0,0,0,0,0,0,0,0,54,1,68,83,67,45,82,88,49,82,0,0,0,0,0,0,0,0,0,0,0,0,55,1,73,76,67,69,45,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0,56,1,73,76,67,69,45,54,48,48,48,0,0,0,0,0,0,0,0,0,0,0,57,1,73,76,67,69,45,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,61,1,68,83,67,45,82,88,49,48,48,77,51,0,0,0,0,0,0,0,0,0,62,1,73,76,67,69,45,55,83,0,0,0,0,0,0,0,0,0,0,0,0,0,63,1,73,76,67,65,45,55,55,77,50,0,0,0,0,0,0,0,0,0,0,0,83,1,73,76,67,69,45,53,49,48,48,0,0,0,0,0,0,0,0,0,0,0,84,1,73,76,67,69,45,55,77,50,0,0,0,0,0,0,0,0,0,0,0,0,85,1,68,83,67,45,82,88,49,48,48,77,52,0,0,0,0,0,0,0,0,0,86,1,68,83,67,45,82,88,49,48,77,50,0,0,0,0,0,0,0,0,0,0,88,1,68,83,67,45,82,88,49,82,77,50,0,0,0,0,0,0,0,0,0,0,90,1,73,76,67,69,45,81,88,49,0,0,0,0,0,0,0,0,0,0,0,0,91,1,73,76,67,69,45,55,82,77,50,0,0,0,0,0,0,0,0,0,0,0,94,1,73,76,67,69,45,55,83,77,50,0,0,0,0,0,0,0,0,0,0,0,97,1,73,76,67,65,45,54,56,0,0,0,0,0,0,0,0,0,0,0,0,0,101,1,73,76,67,69,45,54,51,48,48,0,0,0,0,0,0,0,0,0,0,0,2,1,1,3,2,3,2,0,3,2,3,0,1,2,1,0,0,3,0,2,0,1,3,1,0,1,1,2,0,3,3,2,2,3,3,2,3,1,1,3,3,1,2,1,2,0,0,3,0,1,0,1,0,2,0,2,2,0,3,0,1,3,2,1,3,1,1,2,0,1,0,2,1,3,1,3,0,1,3,0,2,0,0,3,3,2,3,1,2,0,2,0,3,2,2,1,2,3,3,1,2,1,2,1,2,1,1,2,3,0,0,1,1,0,0,2,3,0,0,3,0,3,0,3,2,1,2,3,2,3,3,1,1,2,1,0,3,2,3,0,2,3,1,3,1,0,2,0,3,0,3,2,0,1,1,2,0,1,0,2,0,1,1,3,3,2,2,1,1,3,3,0,2,1,3,2,2,3,2,0,0,1,3,0,2,0,1,2,3,0,1,0,1,3,1,2,3,2,3,2,0,2,0,1,1,0,3,0,0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1,2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2,0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0,37,115,58,32,0,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0,67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10,0,255,255,255,255,255,255,109,97,107,101,95,100,101,99,111,100,101,114,40,41,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,4,3,5,6,2,7,1,8,9,0,10,11,255,0,2,2,3,1,1,1,1,2,0,0,0,0,0,0,0,3,2,4,1,5,0,6,7,9,8,10,11,255,0,0,6,3,1,1,2,0,0,0,0,0,0,0,0,0,6,5,7,4,8,3,9,2,0,10,1,11,255,0,2,2,2,1,4,2,1,2,5,1,1,0,0,0,139,3,4,2,5,1,6,7,8,18,19,17,20,9,21,34,0,33,22,10,240,35,23,36,49,50,24,25,51,37,65,52,66,53,81,54,55,56,41,121,38,26,57,86,87,40,39,82,85,88,67,118,89,119,84,97,249,113,120,117,150,151,73,183,83,215,116,182,152,71,72,149,105,153,145,250,184,104,181,185,214,247,216,103,70,69,148,137,248,129,213,246,180,136,177,42,68,114,217,135,102,212,245,58,167,115,169,168,134,98,199,101,200,201,161,244,209,233,90,146,133,166,231,147,232,193,198,122,100,225,74,106,230,179,241,211,165,138,178,154,186,132,164,99,229,197,243,210,196,130,170,218,228,242,202,131,163,162,195,234,194,226,227,255,255,0,2,2,1,4,1,4,1,3,3,1,0,0,0,0,140,2,3,1,4,5,18,17,6,19,7,8,20,34,9,33,0,35,21,49,50,10,22,240,36,51,65,66,25,23,37,24,81,52,67,82,41,53,97,57,113,98,54,83,38,56,26,55,129,39,145,121,85,69,40,114,89,161,177,68,105,84,88,209,250,87,225,241,185,73,71,99,106,249,86,70,168,42,74,120,153,58,117,116,134,101,193,118,182,150,214,137,133,201,245,149,180,199,247,138,151,184,115,183,216,217,135,167,122,72,130,132,234,244,166,197,90,148,164,198,146,195,104,181,200,228,229,230,233,162,163,227,194,102,103,147,170,212,213,231,248,136,154,215,119,196,100,226,152,165,202,218,232,243,246,169,178,179,242,210,131,186,211,255,255,0,0,6,2,1,3,3,2,5,1,2,2,8,10,0,117,4,5,3,6,2,7,1,8,9,18,19,20,17,21,10,22,23,240,0,34,33,24,35,25,36,50,49,37,51,56,55,52,53,54,57,121,87,88,89,40,86,120,39,65,41,119,38,66,118,153,26,85,152,151,249,72,84,150,137,71,183,73,250,117,104,182,103,105,185,184,216,82,215,136,181,116,81,70,217,248,58,214,135,69,122,149,213,246,134,180,169,148,83,42,168,67,245,247,212,102,167,90,68,138,201,232,200,231,154,106,115,74,97,199,244,198,101,233,114,230,113,145,147,166,218,146,133,98,243,197,178,164,132,186,100,165,179,210,129,229,211,170,196,202,242,177,228,209,131,99,234,195,226,130,241,163,194,161,193,227,162,225,255,255,108,106,112,101,103,95,115,116,97,114,116,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,46,37,100,46,37,100,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,112,97,99,107,101,100,95,100,110,103,95,108,111,97,100,95,114,97,119,40,41,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12,0,0,0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14,0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14,0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14,0,0,85,170,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,112,109,95,116,104,117,109,98,40,41,0,80,54,10,37,100,32,37,100,10,50,53,53,10,0,112,112,109,49,54,95,116,104,117,109,98,40,41,0,48,49,50,0,49,48,50,0,108,97,121,101,114,95,116,104,117,109,98,40,41,0,80,37,100,10,37,100,32,37,100,10,50,53,53,10,0,114,111,108,108,101,105,95,116,104,117,109,98,40,41,0,112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0,255,255,255,1,1,255,1,1,254,0,0,254,0,2,2,0,254,254,254,2,2,254,2,2,80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0,112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0,112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0,104,97,115,115,101,108,98,108,97,100,95,108,111,97,100,95,114,97,119,40,41,0,108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0,115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0,110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0,79,109,110,105,86,105,115,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+588460);
/* memory initializer */ allocate([1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37,101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0,107,111,100,97,107,95,99,51,51,48,95,108,111,97,100,95,114,97,119,40,41,0,107,111,100,97,107,95,99,54,48,51,95,108,111,97,100,95,114,97,119,40,41,0,0,1,5,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,3,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0,115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0,50,48,52,0,49,50,48,0,48,50,50,52,52,54,56,0,48,50,52,52,54,54,56,0,7,7,0,0,63,55,47,39,31,23,15,7,0,7,7,0,0,63,55,47,39,31,23,15,7,0,3,3,0,0,63,47,31,15,0,0,0,0,0,37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0,102,111,118,101,111,110,95,116,104,117,109,98,40,41,0,102,111,118,101,111,110,95,108,111,97,100,95,99,97,109,102,40,41,0,37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,67,65,77,70,32,116,121,112,101,32,37,100,46,10,0,67,77,98,0,102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0,37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0,102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0,70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0,80,111,115,116,80,111,108,121,77,97,116,114,105,120,0,83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0,75,101,101,112,73,109,97,103,101,65,114,101,97,0,65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0,67,104,114,111,109,97,68,81,0,73,110,99,108,117,100,101,66,108,111,99,107,115,0,67,111,108,111,114,68,81,0,67,111,108,111,114,68,81,67,97,109,82,71,66,0,67,111,108,117,109,110,70,105,108,116,101,114,0,68,97,114,107,68,114,105,102,116,0,68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0,68,97,114,107,83,104,105,101,108,100,84,111,112,0,87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0,37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0,87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0,37,115,82,71,66,78,101,117,116,114,97,108,0,83,112,97,116,105,97,108,71,97,105,110,0,66,97,100,80,105,120,101,108,115,0,102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,68,67,50,0,114,0,47,46,98,97,100,112,105,120,101,108,115,0,37,100,32,37,100,32,37,100,0,70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0,32,37,100,44,37,100,0,114,98,0,37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0,37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0,115,117,98,116,114,97,99,116,40,41,0,87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0,119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0,37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0,83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0,32,37,102,0,67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0,115,99,97,108,101,95,99,111,108,111,114,115,40,41,0,112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16,255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255,86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,37,100,45,112,97,115,115,32,88,45,84,114,97,110,115,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,120,116,114,97,110,115,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2,77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0,66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0,255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255,82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0,114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0,49,49,49,50,52,56,49,49,50,52,56,52,56,52,0,193,191,109,13,89,197,19,157,131,97,107,79,199,127,61,61,83,89,227,199,233,47,149,167,149,31,223,127,43,41,199,13,223,7,239,113,137,61,19,61,59,19,251,13,137,193,101,31,179,13,107,41,227,251,239,163,107,71,127,149,53,167,71,79,199,241,89,149,53,17,41,97,241,61,179,43,13,67,137,193,157,157,137,101,241,233,223,191,61,127,83,151,229,233,149,23,29,61,139,251,199,227,103,167,7,241,113,167,83,181,41,137,229,43,167,23,41,233,79,197,101,109,107,239,13,137,73,47,179,67,83,101,29,73,163,19,137,89,239,107,239,101,29,11,89,19,227,79,157,179,41,67,43,7,29,149,89,89,71,251,229,233,97,71,47,53,127,23,127,239,127,149,149,113,211,163,11,113,163,173,11,59,181,251,163,191,79,131,29,173,233,47,113,101,163,229,7,53,61,13,181,233,229,71,59,157,239,53,163,191,179,223,83,211,151,83,73,113,7,53,97,113,47,67,47,17,223,23,151,251,149,59,127,107,211,37,191,173,199,197,197,181,139,239,47,211,7,107,37,73,149,37,73,109,113,199,167,188,201,173,145,223,133,229,212,120,213,23,70,124,41,76,77,3,233,37,104,17,134,179,189,247,111,97,34,162,38,52,42,190,30,70,20,104,157,68,24,194,64,244,126,95,27,173,11,148,182,103,180,11,225,234,149,156,102,220,231,93,108,5,218,213,223,122,239,246,219,31,130,76,192,104,71,161,189,238,57,80,86,74,221,223,165,248,198,218,202,144,202,1,66,157,139,12,115,67,117,5,148,222,36,179,128,52,229,44,220,155,63,202,51,69,208,219,95,245,82,195,33,218,226,34,114,107,62,208,91,168,135,140,6,93,15,221,9,25,147,208,185,252,139,15,132,96,51,28,155,69,241,240,163,148,58,18,119,51,77,68,120,40,60,158,253,101,87,22,148,107,251,89,208,200,34,54,219,210,99,152,67,161,4,135,134,247,166,38,187,214,89,77,191,106,46,170,43,239,230,120,182,78,224,47,220,124,190,87,25,50,126,42,208,184,186,41,0,60,82,125,168,73,59,45,235,37,73,250,163,170,57,167,197,167,80,17,54,251,198,103,74,245,165,18,101,126,176,223,175,78,179,97,127,47,78,111,107,105,97,0,75,68,75,0,86,69,82,0,73,73,73,73,0,77,77,77,77,0,75,67,0,77,76,89,0,78,105,107,111,110,0,79,76,89,77,80,85,83,0,80,69,78,84,65,88,32,0,83,79,78,89,0,80,97,110,97,115,111,110,105,99,0,70,85,74,73,70,73,76,77,0,79,76,89,77,80,0,76,69,73,67,65,0,82,105,99,111,104,0,69,80,83,79,78,0,65,79,67,0,81,86,67,0,83,65,77,83,85,78,71,0,78,73,75,79,78,0,75,79,78,73,67,65,0,67,97,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,54,53,0,78,82,87,32,0,48,49,48,48,0,80,69,78,84,65,88,0,48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0,54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0,37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0,69,65,83,84,77,65,78,0,0,68,67,66,50,0,86,111,108,97,114,101,0,67,97,110,116,97,114,101,0,67,77,111,115,116,0,86,97,108,101,111,32,54,0,86,97,108,101,111,32,49,49,0,86,97,108,101,111,32,50,50,0,86,97,108,101,111,32,49,49,112,0,86,97,108,101,111,32,49,55,0,65,112,116,117,115,32,49,55,0,65,112,116,117,115,32,50,50,0,65,112,116,117,115,32,55,53,0,65,112,116,117,115,32,54,53,0,65,112,116,117,115,32,53,52,83,0,65,112,116,117,115,32,54,53,83,0,65,112,116,117,115,32,55,53,83,0,65,70,105,32,53,0,65,70,105,32,54,0,65,70,105,32,55,0,65,70,105,45,73,73,32,55,0,65,112,116,117,115,45,73,73,32,55,0,65,112,116,117,115,45,73,73,32,54,0,65,112,116,117,115,45,73,73,32,49,48,0,65,112,116,117,115,45,73,73,32,53,0,65,112,116,117,115,45,73,73,32,49,48,82,0,65,112,116,117,115,45,73,73,32,56,0,65,112,116,117,115,45,73,73,32,49,50,0,65,70,105,45,73,73,32,49,50,0,74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0,105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0,83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0,37,100,0,105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0,67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0,37,102,0,67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0,67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0,67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0,73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0,78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0,82,111,119,115,95,100,97,116,97,0,148,97,22,73,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,48,49,51,50,52,54,55,0,65,100,111,98,101,0,100,99,114,97,119,0,85,70,82,97,119,0,66,105,98,98,108,101,0,78,105,107,111,110,32,83,99,97,110,0,68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0,68,83,76,82,45,65,49,48,48,0,83,97,114,110,111,102,102,0,3,4,5,0,5,3,4,1,0,77,65,84,82,73,88,0,76,101,97,102,0,73,109,97,99,111,110,0,73,120,112,114,101,115,115,32,37,100,45,77,112,0,78,101,117,116,114,97,108,32,0,37,102,32,37,102,32,37,102,0,72,97,115,115,101,108,98,108,97,100,0,68,78,71,0,0,0,0,0,0,80,104,97,115,101,0,75,111,100,97,107,0,68,69,66,85,71,32,82,65,87,0,68,105,77,65,71,69,32,65,50,48,48,0,112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0,46,106,112,103,0,46,74,80,71,0,82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0,80,114,111,49,0,48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0,48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0,48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0,48,49,51,52,53,54,55,48,50,56,0,68,65,84,0,84,73,77,0,37,100,58,37,100,58,37,100,0,72,68,82,0,88,32,32,0,89,32,32,0,84,88,32,0,84,89,32,0,69,79,72,68,0,82,111,108,108,101,105,0,100,53,51,48,102,108,101,120,0,77,69,84,65,0,84,72,85,77,66,0,82,65,87,48,0,48,54,53,51,0,32,99,97,109,101,114,97,0,80,104,97,115,101,32,79,110,101,0,76,105,103,104,116,80,104,97,115,101,0,72,32,49,48,0,72,32,50,48,0,72,32,50,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,82,73,70,70,0,76,73,83,84,0,110,99,116,103,0,73,68,73,84,0,37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0,109,111,111,118,0,117,100,116,97,0,67,78,84,72,0,67,78,68,65,0,83,77,97,76,0,118,37,100,32,37,100,120,37,100,0,67,73,78,69,0,37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0,73,83,79,0,67,65,77,77,65,78,85,70,0,67,65,77,77,79,68,69,76,0,87,66,95,68,69,83,67,0,84,73,77,69,0,69,88,80,84,73,77,69,0,65,80,69,82,84,85,82,69,0,70,76,69,78,71,84,72,0,65,103,102,97,80,104,111,116,111,32,68,67,45,56,51,51,109,0,65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0,67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0,67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0,67,97,110,111,110,32,69,79,83,32,68,51,48,0,67,97,110,111,110,32,69,79,83,32,68,54,48,0,67,97,110,111,110,32,69,79,83,32,53,68,83,0,67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0,67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0,67,97,110,111,110,32,69,79,83,32,53,68,0,67,97,110,111,110,32,69,79,83,32,54,68,0,67,97,110,111,110,32,69,79,83,32,55,68,32,77,97,114,107,32,73,73,0,67,97,110,111,110,32,69,79,83,32,55,68,0,67,97,110,111,110,32,69,79,83,32,49,48,68,0,67,97,110,111,110,32,69,79,83,32,50,48,68,97,0,67,97,110,111,110,32,69,79,83,32,50,48,68,0,67,97,110,111,110,32,69,79,83,32,51,48,68,0,67,97,110,111,110,32,69,79,83,32,52,48,68,0,67,97,110,111,110,32,69,79,83,32,53,48,68,0,67,97,110,111,110,32,69,79,83,32,54,48,68,0,67,97,110,111,110,32,69,79,83,32,55,48,68,0,67,97,110,111,110,32,69,79,83,32,56,48,68,0,67,97,110,111,110,32,69,79,83,32,49,48,48,68,0,67,97,110,111,110,32,69,79,83,32,51,48,48,68,0,67,97,110,111,110,32,69,79,83,32,51,53,48,68,0,67,97,110,111,110,32,69,79,83,32,52,48,48,68,0,67,97,110,111,110,32,69,79,83,32,52,53,48,68,0,67,97,110,111,110,32,69,79,83,32,53,48,48,68,0,67,97,110,111,110,32,69,79,83,32,53,53,48,68,0,67,97,110,111,110,32,69,79,83,32,54,48,48,68,0,67,97,110,111,110,32,69,79,83,32,54,53,48,68,0,67,97,110,111,110,32,69,79,83,32,55,48,48,68,0,67,97,110,111,110,32,69,79,83,32,55,53,48,68,0,67,97,110,111,110,32,69,79,83,32,55,54,48,68,0,67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,50,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,51,48,48,68,0,67,97,110,111,110,32,69,79,83,32,77,51,0,67,97,110,111,110,32,69,79,83,32,77,49,48,0,67,97,110,111,110,32,69,79,83,32,77,0,67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0,67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0,67,97,110,111,110,32,69,79,83,45,49,68,83,0,67,97,110,111,110,32,69,79,83,45,49,68,32,67,0,67,97,110,111,110,32,69,79,83,45,49,68,32,88,32,77,97,114,107,32,73,73,0,67,97,110,111,110,32,69,79,83,45,49,68,32,88,0,67,97,110,111,110,32,69,79,83,45,49,68,0,67,97,110,111,110,32,69,79,83,32,67,53,48,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,53,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,54,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,32,88,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,32,88,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,32,88,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,55,32,88,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,32,88,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,49,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,50,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,53,48,32,72,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,54,48,32,72,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,51,51,48,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,0,67,97,110,111,110,32,73,88,85,83,32,49,54,48,0,67,97,115,105,111,32,69,88,45,83,50,48,0,67,97,115,105,111,32,69,88,45,90,55,53,48,0,67,97,115,105,111,32,69,88,45,90,49,48,0,67,73,78,69,32,54,53,48,0,67,73,78,69,32,54,54,48,0,67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0,68,88,79,32,79,78,69,0,69,112,115,111,110,32,82,45,68,49,0,70,117,106,105,102,105,108,109,32,69,53,53,48,0,70,117,106,105,102,105,108,109,32,69,57,48,48,0,70,117,106,105,102,105,108,109,32,70,53,0,70,117,106,105,102,105,108,109,32,70,54,0,70,117,106,105,102,105,108,109,32,70,55,55,0,70,117,106,105,102,105,108,109,32,70,55,0,70,117,106,105,102,105,108,109,32,70,56,0,70,117,106,105,102,105,108,109,32,83,49,48,48,70,83,0,70,117,106,105,102,105,108,109,32,83,49,0,70,117,106,105,102,105,108,109,32,83,50,48,80,114,111,0,70,117,106,105,102,105,108,109,32,83,50,48,0,70,117,106,105,102,105,108,109,32,83,50,80,114,111,0,70,117,106,105,102,105,108,109,32,83,51,80,114,111,0,70,117,106,105,102,105,108,109,32,83,53,80,114,111,0,70,117,106,105,102,105,108,109,32,83,53,48,48,48,0,70,117,106,105,102,105,108,109,32,83,53,49,48,48,0,70,117,106,105,102,105,108,109,32,83,53,53,48,48,0,70,117,106,105,102,105,108,109,32,83,53,50,48,48,0,70,117,106,105,102,105,108,109,32,83,53,54,48,48,0,70,117,106,105,102,105,108,109,32,83,54,0,70,117,106,105,102,105,108,109,32,83,55,48,48,48,0,70,117,106,105,102,105,108,109,32,83,57,48,48,48,0,70,117,106,105,102,105,108,109,32,83,57,53,48,48,0,70,117,106,105,102,105,108,109,32,83,57,49,48,48,0,70,117,106,105,102,105,108,109,32,83,57,54,48,48,0,70,117,106,105,102,105,108,109,32,83,76,49,48,48,48,0,70,117,106,105,102,105,108,109,32,73,83,45,49,0,70,117,106,105,102,105,108,109,32,73,83,32,80,114,111,0,70,117,106,105,102,105,108,109,32,72,83,49,48,32,72,83,49,49,0,70,117,106,105,102,105,108,109,32,72,83,50,0,70,117,106,105,102,105,108,109,32,72,83,51,0,70,117,106,105,102,105,108,109,32,72,83,53,48,69,88,82,0,70,117,106,105,102,105,108,109,32,70,57,48,48,69,88,82,0,70,117,106,105,102,105,108,109,32,88,49,48,48,83,0,70,117,106,105,102,105,108,109,32,88,49,48,48,84,0,70,117,106,105,102,105,108,109,32,88,49,48,48,0,70,117,106,105,102,105,108,109,32,88,49,48,0,70,117,106,105,102,105,108,109,32,88,50,48,0,70,117,106,105,102,105,108,109,32,88,51,48,0,70,117,106,105,102,105,108,109,32,88,55,48,0,70,117,106,105,102,105,108,109,32,88,45,80,114,111,49,0,70,117,106,105,102,105,108,109,32,88,45,80,114,111,50,0,70,117,106,105,102,105,108,109,32,88,45,65,49,0,70,117,106,105,102,105,108,109,32,88,45,65,50,0,70,117,106,105,102,105,108,109,32,88,45,69,49,0,70,117,106,105,102,105,108,109,32,88,45,69,50,83,0,70,117,106,105,102,105,108,109,32,88,45,69,50,0,70,117,106,105,102,105,108,109,32,88,45,77,49,0,70,117,106,105,102,105,108,109,32,88,45,83,49,0,70,117,106,105,102,105,108,109,32,88,45,84,49,0,70,117,106,105,102,105,108,109,32,88,70,49,0,70,117,106,105,102,105,108,109,32,88,81,0,73,109,97,99,111,110,32,73,120,112,114,101,115,115,0,75,111,100,97,107,32,78,67,50,48,48,48,0,75,111,100,97,107,32,68,67,83,51,49,53,67,0,75,111,100,97,107,32,68,67,83,51,51,48,67,0,75,111,100,97,107,32,68,67,83,52,50,48,0,75,111,100,97,107,32,68,67,83,52,54,48,0,75,111,100,97,107,32,69,79,83,68,67,83,49,0,75,111,100,97,107,32,69,79,83,68,67,83,51,66,0,75,111,100,97,107,32,68,67,83,53,50,48,67,0,75,111,100,97,107,32,68,67,83,53,54,48,67,0,75,111,100,97,107,32,68,67,83,54,50,48,67,0,75,111,100,97,107,32,68,67,83,54,50,48,88,0,75,111,100,97,107,32,68,67,83,54,54,48,67,0,75,111,100,97,107,32,68,67,83,55,50,48,88,0,75,111,100,97,107,32,68,67,83,55,54,48,67,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0,75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0,75,111,100,97,107,32,80,114,111,66,97,99,107,0,75,111,100,97,107,32,80,55,49,50,0,75,111,100,97,107,32,80,56,53,48,0,75,111,100,97,107,32,80,56,56,48,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0,75,111,100,97,107,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0,76,101,97,102,32,67,77,111,115,116,0,76,101,97,102,32,86,97,108,101,111,32,54,0,76,101,97,102,32,65,112,116,117,115,32,53,52,83,0,76,101,97,102,32,65,112,116,117,115,32,54,53,0,76,101,97,102,32,65,112,116,117,115,32,55,53,0,77,97,109,105,121,97,32,90,68,0,77,105,99,114,111,110,32,50,48,49,48,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,48,48,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0,77,105,110,111,108,116,97,32,68,89,78,65,88,32,53,0,77,105,110,111,108,116,97,32,68,89,78,65,88,32,55,0,77,111,116,111,114,111,108,97,32,80,73,88,76,0,78,105,107,111,110,32,68,49,48,48,0,78,105,107,111,110,32,68,49,72,0,78,105,107,111,110,32,68,49,88,0,78,105,107,111,110,32,68,49,0,78,105,107,111,110,32,68,50,48,48,0,78,105,107,111,110,32,68,50,72,0,78,105,107,111,110,32,68,50,88,0,78,105,107,111,110,32,68,51,48,48,48,0,78,105,107,111,110,32,68,51,49,48,48,0,78,105,107,111,110,32,68,51,50,48,48,0,78,105,107,111,110,32,68,51,51,48,48,0,78,105,107,111,110,32,68,51,48,48,0,78,105,107,111,110,32,68,51,88,0,78,105,107,111,110,32,68,51,83,0,78,105,107,111,110,32,68,51,0,78,105,107,111,110,32,68,52,48,88,0,78,105,107,111,110,32,68,52,48,0,78,105,107,111,110,32,68,52,83,0,78,105,107,111,110,32,68,52,0,78,105,107,111,110,32,68,102,0,78,105,107,111,110,32,68,53,48,48,48,0,78,105,107,111,110,32,68,53,49,48,48,0,78,105,107,111,110,32,68,53,50,48,48,0,78,105,107,111,110,32,68,53,51,48,48,0,78,105,107,111,110,32,68,53,53,48,48,0,78,105,107,111,110,32,68,53,48,48,0,78,105,107,111,110,32,68,53,48,0,78,105,107,111,110,32,68,53,0,78,105,107,111,110,32,68,54,48,48,0,78,105,107,111,110,32,68,54,49,48,0,78,105,107,111,110,32,68,54,48,0,78,105,107,111,110,32,68,55,48,48,48,0,78,105,107,111,110,32,68,55,49,48,48,0,78,105,107,111,110,32,68,55,50,48,48,0,78,105,107,111,110,32,68,55,53,48,0,78,105,107,111,110,32,68,55,48,48,0,78,105,107,111,110,32,68,55,48,0,78,105,107,111,110,32,68,56,49,48,0,78,105,107,111,110,32,68,56,48,48,0,78,105,107,111,110,32,68,56,48,0,78,105,107,111,110,32,68,57,48,0,78,105,107,111,110,32,69,55,48,48,0,78,105,107,111,110,32,69,56,48,48,0,78,105,107,111,110,32,69,57,53,48,0,78,105,107,111,110,32,69,57,57,53,0,78,105,107,111,110,32,69,50,49,48,48,0,78,105,107,111,110,32,69,50,53,48,48,0,78,105,107,111,110,32,69,51,50,48,48,0,78,105,107,111,110,32,69,52,51,48,48,0,78,105,107,111,110,32,69,52,53,48,48,0,78,105,107,111,110,32,69,53,48,48,48,0,78,105,107,111,110,32,69,53,52,48,48,0,78,105,107,111,110,32,69,53,55,48,48,0,78,105,107,111,110,32,69,56,52,48,48,0,78,105,107,111,110,32,69,56,55,48,48,0,78,105,107,111,110,32,69,56,56,48,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,65,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,51,51,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,51,52,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,55,48,48,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,56,48,48,0,78,105,107,111,110,32,49,32,86,51,0,78,105,107,111,110,32,49,32,74,52,0,78,105,107,111,110,32,49,32,74,53,0,78,105,107,111,110,32,49,32,83,50,0,78,105,107,111,110,32,49,32,86,50,0,78,105,107,111,110,32,49,32,74,51,0,78,105,107,111,110,32,49,32,65,87,49,0,78,105,107,111,110,32,49,32,0,79,108,121,109,112,117,115,32,65,73,82,32,65,48,49,0,79,108,121,109,112,117,115,32,67,53,48,53,48,0,79,108,121,109,112,117,115,32,67,53,48,54,48,0,79,108,121,109,112,117,115,32,67,55,48,55,48,0,79,108,121,109,112,117,115,32,67,55,48,0,79,108,121,109,112,117,115,32,67,56,48,0,79,108,121,109,112,117,115,32,69,45,49,48,0,79,108,121,109,112,117,115,32,69,45,49,0,79,108,121,109,112,117,115,32,69,45,50,48,0,79,108,121,109,112,117,115,32,69,45,51,48,48,0,79,108,121,109,112,117,115,32,69,45,51,51,48,0,79,108,121,109,112,117,115,32,69,45,51,48,0,79,108,121,109,112,117,115,32,69,45,51,0,79,108,121,109,112,117,115,32,69,45,52,48,48,0,79,108,121,109,112,117,115,32,69,45,52,49,48,0,79,108,121,109,112,117,115,32,69,45,52,50,48,0,79,108,121,109,112,117,115,32,69,45,52,53,48,0,79,108,121,109,112,117,115,32,69,45,53,48,48,0,79,108,121,109,112,117,115,32,69,45,53,49,48,0,79,108,121,109,112,117,115,32,69,45,53,50,48,0,79,108,121,109,112,117,115,32,69,45,53,0,79,108,121,109,112,117,115,32,69,45,54,48,48,0,79,108,121,109,112,117,115,32,69,45,54,50,48,0,79,108,121,109,112,117,115,32,69,45,80,49,0,79,108,121,109,112,117,115,32,69,45,80,50,0,79,108,121,109,112,117,115,32,69,45,80,51,0,79,108,121,109,112,117,115,32,69,45,80,53,0,79,108,121,109,112,117,115,32,69,45,80,76,49,115,0,79,108,121,109,112,117,115,32,69,45,80,76,49,0,79,108,121,109,112,117,115,32,69,45,80,76,50,0,79,108,121,109,112,117,115,32,69,45,80,76,51,0,79,108,121,109,112,117,115,32,69,45,80,76,53,0,79,108,121,109,112,117,115,32,69,45,80,76,54,0,79,108,121,109,112,117,115,32,69,45,80,76,55,0,79,108,121,109,112,117,115,32,69,45,80,77,49,0,79,108,121,109,112,117,115,32,69,45,80,77,50,0,79,108,121,109,112,117,115,32,69,45,77,49,48,0,79,108,121,109,112,117,115,32,69,45,77,49,0,79,108,121,109,112,117,115,32,69,45,77,53,77,97,114,107,73,73,0,79,108,121,109,112,117,115,32,69,45,77,53,0,79,108,121,109,112,117,115,32,80,69,78,45,70,0,79,108,121,109,112,117,115,32,83,72,45,50,0,79,108,121,109,112,117,115,32,83,80,51,53,48,0,79,108,121,109,112,117,115,32,83,80,51,0,79,108,121,109,112,117,115,32,83,80,53,48,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,49,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,53,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,54,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,55,48,85,90,0,79,108,121,109,112,117,115,32,83,84,89,76,85,83,49,0,79,108,121,109,112,117,115,32,84,71,45,52,0,79,108,121,109,112,117,115,32,88,90,45,49,48,0,79,108,121,109,112,117,115,32,88,90,45,49,0,79,108,121,109,112,117,115,32,88,90,45,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,76,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,76,0,80,101,110,116,97,120,32,42,105,115,116,32,68,83,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,83,0,80,101,110,116,97,120,32,42,105,115,116,32,68,0,80,101,110,116,97,120,32,75,49,48,68,0,80,101,110,116,97,120,32,75,49,0,80,101,110,116,97,120,32,75,50,48,68,0,80,101,110,116,97,120,32,75,50,48,48,68,0,80,101,110,116,97,120,32,75,50,48,48,48,0,80,101,110,116,97,120,32,75,45,109,0,80,101,110,116,97,120,32,75,45,120,0,80,101,110,116,97,120,32,75,45,114,0,80,101,110,116,97,120,32,75,45,49,0,80,101,110,116,97,120,32,75,45,51,48,0,80,101,110,116,97,120,32,75,45,51,32,73,73,0,80,101,110,116,97,120,32,75,45,51,0,80,101,110,116,97,120,32,75,45,53,32,73,73,0,80,101,110,116,97,120,32,75,45,53,0,80,101,110,116,97,120,32,75,45,55,0,80,101,110,116,97,120,32,75,45,83,49,0,80,101,110,116,97,120,32,75,45,83,50,0,80,101,110,116,97,120,32,81,45,83,49,0,80,101,110,116,97,120,32,54,52,53,68,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,67,77,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,51,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,55,0,76,101,105,99,97,32,86,45,76,85,88,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0,76,101,105,99,97,32,68,73,71,73,76,85,88,32,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0,76,101,105,99,97,32,68,73,71,73,76,85,88,32,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,48,48,0,76,101,105,99,97,32,68,45], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+611079);
/* memory initializer */ allocate([76,85,88,32,40,84,121,112,32,49,48,57,41,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,70,49,0,76,101,105,99,97,32,67,32,40,84,121,112,32,49,49,50,41,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0,76,101,105,99,97,32,68,45,76,85,88,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0,76,101,105,99,97,32,68,45,76,85,88,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0,76,101,105,99,97,32,68,45,76,85,88,32,52,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0,76,101,105,99,97,32,68,45,76,85,88,32,53,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,55,0,76,101,105,99,97,32,68,45,76,85,88,32,54,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,48,0,76,101,105,99,97,32,86,45,76,85,88,32,40,84,121,112,32,49,49,52,41,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0,76,101,105,99,97,32,86,45,76,85,88,32,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0,76,101,105,99,97,32,86,45,76,85,88,32,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,48,48,0,76,101,105,99,97,32,86,45,76,85,88,32,52,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,53,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,54,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,55,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,53,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,54,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,55,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,56,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,52,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,77,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,77,53,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,55,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,56,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,49,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,54,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,52,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,55,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,53,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,56,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,54,0,76,101,105,99,97,32,83,32,40,84,121,112,32,48,48,55,41,0,76,101,105,99,97,32,88,0,76,101,105,99,97,32,81,32,40,84,121,112,32,49,49,54,41,0,76,101,105,99,97,32,77,32,40,84,121,112,32,50,54,50,41,0,76,101,105,99,97,32,83,76,32,40,84,121,112,32,54,48,49,41,0,80,104,97,115,101,32,79,110,101,32,72,32,50,48,0,80,104,97,115,101,32,79,110,101,32,72,32,50,53,0,80,104,97,115,101,32,79,110,101,32,80,32,50,0,80,104,97,115,101,32,79,110,101,32,80,32,51,48,0,80,104,97,115,101,32,79,110,101,32,80,32,52,53,0,80,104,97,115,101,32,79,110,101,32,80,52,48,0,80,104,97,115,101,32,79,110,101,32,80,54,53,0,80,104,111,116,114,111,110,32,66,67,50,45,72,68,0,82,101,100,32,79,110,101,0,82,105,99,111,104,32,71,82,32,73,73,0,82,105,99,111,104,32,71,82,0,83,97,109,115,117,110,103,32,69,88,49,0,83,97,109,115,117,110,103,32,69,88,50,70,0,83,97,109,115,117,110,103,32,69,75,45,71,78,49,50,48,0,83,97,109,115,117,110,103,32,78,88,32,109,105,110,105,0,83,97,109,115,117,110,103,32,78,88,51,51,48,48,0,83,97,109,115,117,110,103,32,78,88,51,48,48,48,0,83,97,109,115,117,110,103,32,78,88,51,48,0,83,97,109,115,117,110,103,32,78,88,50,48,48,48,0,83,97,109,115,117,110,103,32,78,88,50,0,83,97,109,115,117,110,103,32,78,88,49,48,48,48,0,83,97,109,115,117,110,103,32,78,88,49,49,48,48,0,83,97,109,115,117,110,103,32,78,88,49,49,0,83,97,109,115,117,110,103,32,78,88,49,48,0,83,97,109,115,117,110,103,32,78,88,53,48,48,0,83,97,109,115,117,110,103,32,78,88,53,0,83,97,109,115,117,110,103,32,78,88,49,0,83,97,109,115,117,110,103,32,87,66,50,48,48,48,0,83,97,109,115,117,110,103,32,71,88,45,49,0,83,97,109,115,117,110,103,32,71,88,50,48,0,83,97,109,115,117,110,103,32,83,56,53,0,83,105,110,97,114,0,83,111,110,121,32,68,83,67,45,70,56,50,56,0,83,111,110,121,32,68,83,67,45,82,49,0,83,111,110,121,32,68,83,67,45,86,51,0,83,111,110,121,32,68,83,67,45,82,88,49,48,48,77,0,83,111,110,121,32,68,83,67,45,82,88,49,48,48,0,83,111,110,121,32,68,83,67,45,82,88,49,48,0,83,111,110,121,32,68,83,67,45,82,88,49,82,77,50,0,83,111,110,121,32,68,83,67,45,82,88,49,0,83,111,110,121,32,68,83,76,82,45,65,49,48,48,0,83,111,110,121,32,68,83,76,82,45,65,50,57,48,0,83,111,110,121,32,68,83,76,82,45,65,50,0,83,111,110,121,32,68,83,76,82,45,65,51,48,48,0,83,111,110,121,32,68,83,76,82,45,65,51,51,48,0,83,111,110,121,32,68,83,76,82,45,65,51,53,48,0,83,111,110,121,32,68,83,76,82,45,65,51,56,48,0,83,111,110,121,32,68,83,76,82,45,65,51,57,48,0,83,111,110,121,32,68,83,76,82,45,65,52,53,48,0,83,111,110,121,32,68,83,76,82,45,65,53,56,48,0,83,111,110,121,32,68,83,76,82,45,65,53,48,48,0,83,111,110,121,32,68,83,76,82,45,65,53,0,83,111,110,121,32,68,83,76,82,45,65,55,48,48,0,83,111,110,121,32,68,83,76,82,45,65,56,53,48,0,83,111,110,121,32,68,83,76,82,45,65,57,48,48,0,83,111,110,121,32,73,76,67,65,45,54,56,0,83,111,110,121,32,73,76,67,65,45,55,55,77,50,0,83,111,110,121,32,73,76,67,69,45,54,51,48,48,0,83,111,110,121,32,73,76,67,69,45,55,77,50,0,83,111,110,121,32,73,76,67,69,45,55,83,0,83,111,110,121,32,73,76,67,69,45,55,82,77,50,0,83,111,110,121,32,73,76,67,69,45,55,82,0,83,111,110,121,32,73,76,67,69,45,55,0,83,111,110,121,32,73,76,67,69,0,83,111,110,121,32,78,69,88,45,53,78,0,83,111,110,121,32,78,69,88,45,53,82,0,83,111,110,121,32,78,69,88,45,53,84,0,83,111,110,121,32,78,69,88,45,51,78,0,83,111,110,121,32,78,69,88,45,51,0,83,111,110,121,32,78,69,88,45,53,0,83,111,110,121,32,78,69,88,45,54,0,83,111,110,121,32,78,69,88,45,55,0,83,111,110,121,32,78,69,88,0,83,111,110,121,32,83,76,84,45,65,51,51,0,83,111,110,121,32,83,76,84,45,65,51,53,0,83,111,110,121,32,83,76,84,45,65,51,55,0,83,111,110,121,32,83,76,84,45,65,53,53,0,83,111,110,121,32,83,76,84,45,65,53,55,0,83,111,110,121,32,83,76,84,45,65,53,56,0,83,111,110,121,32,83,76,84,45,65,54,53,0,83,111,110,121,32,83,76,84,45,65,55,55,0,83,111,110,121,32,83,76,84,45,65,57,57,0,37,115,32,37,115,0,65,103,102,97,80,104,111,116,111,0,67,97,115,105,111,0,69,112,115,111,110,0,70,117,106,105,102,105,108,109,0,77,97,109,105,121,97,0,77,105,110,111,108,116,97,0,77,111,116,111,114,111,108,97,0,75,111,110,105,99,97,0,76,101,105,99,97,0,79,108,121,109,112,117,115,0,80,101,110,116,97,120,0,83,97,109,115,117,110,103,0,83,105,103,109,97,0,83,111,110,121,0,72,69,65,80,67,67,68,82,0,255,216,255,225,0,69,120,105,102,0,65,82,69,67,79,89,75,0,67,111,110,116,97,120,0,78,32,68,105,103,105,116,97,108,0,80,88,78,0,76,111,103,105,116,101,99,104,0,70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0,113,107,116,107,0,65,112,112,108,101,0,81,117,105,99,107,84,97,107,101,32,49,48,48,0,113,107,116,110,0,81,117,105,99,107,84,97,107,101,32,49,53,48,0,102,116,121,112,113,116,32,32,32,0,0,1,0,1,0,64,0,78,79,75,73,65,82,65,87,0,78,79,75,73,65,0,65,82,82,73,0,88,80,68,83,0,82,69,68,49,0,82,101,100,0,79,110,101,0,68,83,67,45,73,109,97,103,101,0,80,87,65,68,0,0,77,82,77,0,70,79,86,98,0,67,73,0,111,118,0,82,80,95,79,86,0,66,82,67,77,110,0,32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0,70,73,76,69,32,86,69,82,83,73,79,78,0,70,105,110,101,80,105,120,32,0,68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0,75,45,114,0,75,45,120,0,75,45,53,0,75,45,55,0,75,45,51,0,54,52,53,68,0,75,65,73,45,48,51,52,48,0,67,54,48,51,0,80,111,119,101,114,83,104,111,116,32,54,48,48,0,80,111,119,101,114,83,104,111,116,32,65,53,0,80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0,80,111,119,101,114,83,104,111,116,32,65,53,48,0,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0,80,111,119,101,114,83,104,111,116,32,71,49,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,83,50,32,73,83,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,69,79,83,32,68,50,48,48,48,67,0,68,49,0,68,49,88,0,68,52,48,88,0,68,54,48,0,68,56,48,0,68,51,48,48,48,0,68,51,0,68,51,83,0,68,55,48,48,0,68,51,49,48,48,0,68,53,48,48,48,0,68,57,48,0,68,53,49,48,48,0,68,55,48,48,48,0,67,79,79,76,80,73,88,32,65,0,68,51,50,48,48,0,68,54,0,68,56,48,48,0,68,52,0,68,102,0,68,52,48,0,68,53,48,0,68,55,48,0,68,49,48,48,0,68,50,48,48,0,68,50,72,0,68,50,88,0,68,51,48,48,0,67,79,79,76,80,73,88,32,80,0,49,32,0,69,57,57,53,0,69,50,53,48,48,0,79,112,116,105,111,32,51,51,87,82,0,68,105,77,65,71,69,32,90,50,0,73,83,71,0,83,50,80,114,111,0,72,83,53,48,69,88,82,0,70,57,48,48,69,88,82,0,75,68,45,52,48,48,90,0,75,68,45,53,49,48,90,0,68,105,77,65,71,69,32,65,0,65,76,80,72,65,0,68,89,78,65,88,0,77,65,88,88,85,77,0,68,89,78,65,88,32,37,45,49,48,115,0,68,105,77,65,71,69,32,71,0,42,105,115,116,32,68,0,42,105,115,116,32,68,83,0,69,88,49,0,87,66,50,48,48,48,0,87,66,53,53,48,0,69,88,50,70,0,83,84,86,54,56,48,32,86,71,65,0,78,57,53,0,54,52,48,120,52,56,48,0,86,57,54,67,0,82,66,84,71,0,67,97,116,99,104,76,105,103,104,116,0,148,97,73,22,0,67,55,55,48,85,90,0,69,45,51,48,48,0,69,45,53,48,48,0,69,45,51,51,48,0,83,80,53,53,48,85,90,0,84,71,45,52,0,68,83,67,45,70,56,50,56,0,82,71,66,69,0,68,83,67,45,86,51,0,68,83,76,82,45,65,51,53,48,0,68,83,67,0,82,88,49,0,65,57,57,0,80,73,88,76,0,67,51,51,48,0,49,50,77,80,0,69,97,115,121,83,104,97,114,101,0,78,67,50,48,48,48,0,69,79,83,68,67,83,0,68,67,83,52,0,68,67,83,52,54,48,65,0,68,67,83,54,54,48,77,0,68,67,83,55,54,48,77,0,50,48,88,0,77,89,67,89,0,68,67,50,53,0,52,48,0,68,67,52,48,0,68,67,53,48,0,68,67,49,50,48,0,68,67,83,50,48,48,0,81,117,105,99,107,84,97,107,101,0,50,48,48,0,37,100,120,37,100,0,81,117,105,99,107,116,97,107,101,0,37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0,108,105,98,106,97,115,112,101,114,0,108,105,98,106,112,101,103,0,82,71,66,71,0,71,77,67,89,0,115,82,71,66,0,65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0,87,105,100,101,71,97,109,117,116,32,68,54,53,0,80,114,111,80,104,111,116,111,32,68,54,53,0,88,89,90,0,65,67,69,83,0,99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0,97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0,66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0,67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10,0,82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0,102,117,106,105,95,114,111,116,97,116,101,40,41,0,83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0,115,116,114,101,116,99,104,40,41,0,100,99,114,97,119,32,118,57,46,50,55,0,37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,49,50,52,51,53,56,54,55,0,106,112,101,103,95,116,104,117,109,98,40,41,0,255,225,32,32,69,120,105,102,0,0,0,119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0,80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0,80,37,100,10,37,100,32,37,100,10,37,100,10,0,84,90,61,85,84,67,0,10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0,57,46,50,55,0,10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,10,0,10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0,45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0,45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0,45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0,45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0,45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0,45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0,45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0,45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0,45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0,45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0,45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0,45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0,45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0,45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0,45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0,45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0,45,111,32,91,48,45,54,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,44,65,67,69,83,41,0,45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0,45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0,45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0,45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0,45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0,45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0,45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0,45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0,45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0,45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0,45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0,45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0,45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0,45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0,110,98,114,107,83,116,113,109,72,65,67,103,0,49,49,52,49,49,49,49,49,49,52,50,50,0,78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0,97,108,108,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0,78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0,87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0,37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0,37,49,48,108,100,37,49,48,100,32,37,115,10,0,37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0,37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0,10,70,105,108,101,110,97,109,101,58,32,37,115,10,0,84,105,109,101,115,116,97,109,112,58,32,37,115,0,67,97,109,101,114,97,58,32,37,115,32,37,115,10,0,79,119,110,101,114,58,32,37,115,10,0,68,78,71,32,86,101,114,115,105,111,110,58,32,0,37,100,37,99,0,73,83,79,32,115,112,101,101,100,58,32,37,100,10,0,83,104,117,116,116,101,114,58,32,0,49,47,0,37,48,46,49,102,32,115,101,99,10,0,65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0,70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0,69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0,121,101,115,0,110,111,0,78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0,80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0,84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0,70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0,73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0,79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0,82,97,119,32,99,111,108,111,114,115,58,32,37,100,0,10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0,10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0,10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0,37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0,109,97,105,110,40,41,0,76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0,37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0,46,116,105,102,102,0,46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0,95,37,48,42,100,0,46,116,104,117,109,98,0,119,98,0,87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,114,119,97,0,119,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,116,109,112,0,47,116,109,112,47,116,37,120,45,37,120], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+621319);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+631891);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  var _emscripten_prep_setjmp=true;

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_cleanup_setjmp=true;

  var _emscripten_postinvoke=true;

  var _floor=Math_floor;

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  var _sqrt=Math_sqrt;

  var _emscripten_check_longjmp=true;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _exp=Math_exp;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  
  
  
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
      writeStringToMemory(s, buf);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = Runtime.stackSave();
      var rv = _asctime_r(_localtime_r(time, Runtime.stackAlloc(44)), buf);
      Runtime.stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  var _fabs=Math_abs;

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall265(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // clock_nanosleep
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_pow_f64=Math_pow;

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      if (size < cwd.length + 1) return -ERRNO_CODES.ERANGE;
      writeAsciiToMemory(cwd, buf);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_di": nullFunc_di, "nullFunc_vi": nullFunc_vi, "nullFunc_dd": nullFunc_dd, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_di": invoke_di, "invoke_vi": invoke_vi, "invoke_dd": invoke_dd, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_fabs": _fabs, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "___syscall265": ___syscall265, "___syscall54": ___syscall54, "_pthread_cleanup_push": _pthread_cleanup_push, "_ctime": _ctime, "___setErrNo": ___setErrNo, "_putenv": _putenv, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_localtime_r": _localtime_r, "_tzset": _tzset, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_utime": _utime, "_mktime": _mktime, "___syscall6": ___syscall6, "___syscall221": ___syscall221, "_floor": _floor, "_cos": _cos, "_pthread_self": _pthread_self, "_asctime_r": _asctime_r, "_sqrt": _sqrt, "___syscall33": ___syscall33, "_log": _log, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall10": ___syscall10, "___lock": ___lock, "_abort": _abort, "___syscall5": ___syscall5, "___syscall183": ___syscall183, "_time": _time, "_emscripten_longjmp": _emscripten_longjmp, "_abs": _abs, "_ctime_r": _ctime_r, "___syscall140": ___syscall140, "_localtime": _localtime, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_di=env.invoke_di;
  var invoke_vi=env.invoke_vi;
  var invoke_dd=env.invoke_dd;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___syscall265=env.___syscall265;
  var ___syscall54=env.___syscall54;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _ctime=env._ctime;
  var ___setErrNo=env.___setErrNo;
  var _putenv=env._putenv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _utime=env._utime;
  var _mktime=env._mktime;
  var ___syscall6=env.___syscall6;
  var ___syscall221=env.___syscall221;
  var _floor=env._floor;
  var _cos=env._cos;
  var _pthread_self=env._pthread_self;
  var _asctime_r=env._asctime_r;
  var _sqrt=env._sqrt;
  var ___syscall33=env.___syscall33;
  var _log=env._log;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall10=env.___syscall10;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___syscall5=env.___syscall5;
  var ___syscall183=env.___syscall183;
  var _time=env._time;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _abs=env._abs;
  var _ctime_r=env._ctime_r;
  var ___syscall140=env.___syscall140;
  var _localtime=env._localtime;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _fcol($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $row;
 $2 = $col;
 $3 = HEAP32[776>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $2;
  $6 = HEAP16[448956>>1]|0;
  $7 = $6&65535;
  $8 = (($5) + ($7))|0;
  $9 = $8 & 15;
  $10 = $1;
  $11 = HEAP16[448958>>1]|0;
  $12 = $11&65535;
  $13 = (($10) + ($12))|0;
  $14 = $13 & 15;
  $15 = (592870 + ($14<<4)|0);
  $16 = (($15) + ($9)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $0 = $18;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $19 = HEAP32[776>>2]|0;
 $20 = ($19|0)==(9);
 if ($20) {
  $21 = $2;
  $22 = (($21) + 6)|0;
  $23 = (($22|0) % 6)&-1;
  $24 = $1;
  $25 = (($24) + 6)|0;
  $26 = (($25|0) % 6)&-1;
  $27 = (593126 + (($26*6)|0)|0);
  $28 = (($27) + ($23)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $0 = $30;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 } else {
  $31 = HEAP32[776>>2]|0;
  $32 = $1;
  $33 = $32 << 1;
  $34 = $33 & 14;
  $35 = $2;
  $36 = $35 & 1;
  $37 = (($34) + ($36))|0;
  $38 = $37 << 1;
  $39 = $31 >>> $38;
  $40 = $39 & 3;
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _my_memmem($haystack,$haystacklen,$needle,$needlelen) {
 $haystack = $haystack|0;
 $haystacklen = $haystacklen|0;
 $needle = $needle|0;
 $needlelen = $needlelen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $haystack;
 $2 = $haystacklen;
 $3 = $needle;
 $4 = $needlelen;
 $5 = $1;
 $c = $5;
 while(1) {
  $6 = $c;
  $7 = $1;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $10 = $4;
  $11 = (0 - ($10))|0;
  $12 = (($9) + ($11)|0);
  $13 = ($6>>>0)<=($12>>>0);
  if (!($13)) {
   label = 6;
   break;
  }
  $14 = $c;
  $15 = $3;
  $16 = $4;
  $17 = (_memcmp($14,$15,$16)|0);
  $18 = ($17|0)!=(0);
  $19 = $c;
  if (!($18)) {
   label = 4;
   break;
  }
  $20 = ((($19)) + 1|0);
  $c = $20;
 }
 if ((label|0) == 4) {
  $0 = $19;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _my_strcasestr($haystack,$needle) {
 $haystack = $haystack|0;
 $needle = $needle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $haystack;
 $2 = $needle;
 $3 = $1;
 $c = $3;
 while(1) {
  $4 = $c;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $c;
  $8 = $2;
  $9 = $2;
  $10 = (_strlen($9)|0);
  $11 = (_strncasecmp($7,$8,$10)|0);
  $12 = ($11|0)!=(0);
  $13 = $c;
  if (!($12)) {
   label = 4;
   break;
  }
  $14 = ((($13)) + 1|0);
  $c = $14;
 }
 if ((label|0) == 4) {
  $0 = $13;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _merror($ptr,$where) {
 $ptr = $ptr|0;
 $where = $where|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $ptr;
 $1 = $where;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $4 = HEAP32[447952>>2]|0;
  $5 = HEAP32[780>>2]|0;
  $6 = $1;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_fprintf($4,593162,$vararg_buffer)|0);
  _longjmp((784|0),1);
  // unreachable;
 }
}
function _derror() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[940>>2]|0;
 $1 = ($0|0)!=(0);
 do {
  if (!($1)) {
   $2 = HEAP32[447952>>2]|0;
   $3 = HEAP32[780>>2]|0;
   HEAP32[$vararg_buffer>>2] = $3;
   (_fprintf($2,593187,$vararg_buffer)|0);
   $4 = HEAP32[944>>2]|0;
   $5 = (_feof($4)|0);
   $6 = ($5|0)!=(0);
   $7 = HEAP32[447952>>2]|0;
   if ($6) {
    (_fprintf($7,593192,$vararg_buffer1)|0);
    break;
   } else {
    $8 = HEAP32[944>>2]|0;
    $9 = (___ftello($8)|0);
    $10 = ($9|0)<(0);
    $11 = $10 << 31 >> 31;
    $12 = $vararg_buffer3;
    $13 = $12;
    HEAP32[$13>>2] = $9;
    $14 = (($12) + 4)|0;
    $15 = $14;
    HEAP32[$15>>2] = $11;
    (_fprintf($7,593216,$vararg_buffer3)|0);
    break;
   }
  }
 } while(0);
 $16 = HEAP32[940>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[940>>2] = $17;
 STACKTOP = sp;return;
}
function _sget2($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = HEAP16[448960>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)==(18761);
 $5 = $1;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 if ($4) {
  $8 = $1;
  $9 = ((($8)) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 8;
  $13 = $7 | $12;
  $14 = $13&65535;
  $0 = $14;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $15 = $7 << 8;
  $16 = $1;
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $15 | $19;
  $21 = $20&65535;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _get2() {
 var $0 = 0, $1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp;
 ;HEAP8[$str>>0]=HEAP8[593242>>0]|0;HEAP8[$str+1>>0]=HEAP8[593242+1>>0]|0;
 $0 = HEAP32[944>>2]|0;
 (_fread($str,1,2,$0)|0);
 $1 = (_sget2($str)|0);
 STACKTOP = sp;return ($1|0);
}
function _sget4($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = HEAP16[448960>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)==(18761);
 $5 = $1;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 if ($4) {
  $8 = $1;
  $9 = ((($8)) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 8;
  $13 = $7 | $12;
  $14 = $1;
  $15 = ((($14)) + 2|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $17 << 16;
  $19 = $13 | $18;
  $20 = $1;
  $21 = ((($20)) + 3|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 24;
  $25 = $19 | $24;
  $0 = $25;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 } else {
  $26 = $7 << 24;
  $27 = $1;
  $28 = ((($27)) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 16;
  $32 = $26 | $31;
  $33 = $1;
  $34 = ((($33)) + 2|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 << 8;
  $38 = $32 | $37;
  $39 = $1;
  $40 = ((($39)) + 3|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $38 | $42;
  $0 = $43;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _get4() {
 var $0 = 0, $1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp;
 ;HEAP8[$str>>0]=HEAP8[593244>>0]|0;HEAP8[$str+1>>0]=HEAP8[593244+1>>0]|0;HEAP8[$str+2>>0]=HEAP8[593244+2>>0]|0;HEAP8[$str+3>>0]=HEAP8[593244+3>>0]|0;
 $0 = HEAP32[944>>2]|0;
 (_fread($str,1,4,$0)|0);
 $1 = (_sget4($str)|0);
 STACKTOP = sp;return ($1|0);
}
function _getint($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = (_get2()|0);
  $4 = $3&65535;
  $6 = $4;
 } else {
  $5 = (_get4()|0);
  $6 = $5;
 }
 STACKTOP = sp;return ($6|0);
}
function _int_to_float($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 $0 = $i;
 $1 = $0;
 HEAP32[$u>>2] = $1;
 $2 = +HEAPF32[$u>>2];
 STACKTOP = sp;return (+$2);
}
function _getreal($type) {
 $type = $type|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $i = 0, $rev = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $u = sp;
 $1 = $type;
 $2 = $1;
 switch ($2|0) {
 case 3:  {
  $3 = (_get2()|0);
  $4 = (+($3&65535));
  $0 = $4;
  break;
 }
 case 4:  {
  $5 = (_get4()|0);
  $6 = (+($5>>>0));
  $0 = $6;
  break;
 }
 case 5:  {
  $7 = (_get4()|0);
  $8 = (+($7>>>0));
  HEAPF64[$u>>3] = $8;
  $9 = +HEAPF64[$u>>3];
  $10 = (_get4()|0);
  $11 = (+($10>>>0));
  $12 = $9 / $11;
  $0 = $12;
  break;
 }
 case 8:  {
  $13 = (_get2()|0);
  $14 = (+($13<<16>>16));
  $0 = $14;
  break;
 }
 case 9:  {
  $15 = (_get4()|0);
  $16 = (+($15|0));
  $0 = $16;
  break;
 }
 case 10:  {
  $17 = (_get4()|0);
  $18 = (+($17|0));
  HEAPF64[$u>>3] = $18;
  $19 = +HEAPF64[$u>>3];
  $20 = (_get4()|0);
  $21 = (+($20|0));
  $22 = $19 / $21;
  $0 = $22;
  break;
 }
 case 11:  {
  $23 = (_get4()|0);
  $24 = (+_int_to_float($23));
  $25 = $24;
  $0 = $25;
  break;
 }
 case 12:  {
  $26 = HEAP16[448960>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = ($27|0)==(18761);
  $29 = $28&1;
  $30 = (_ntohs(4660)|0);
  $31 = $30&65535;
  $32 = ($31|0)==(4660);
  $33 = $32&1;
  $34 = ($29|0)==($33|0);
  $35 = $34&1;
  $36 = ($35*7)|0;
  $rev = $36;
  $i = 0;
  while(1) {
   $37 = $i;
   $38 = ($37|0)<(8);
   if (!($38)) {
    break;
   }
   $39 = HEAP32[944>>2]|0;
   $40 = (_getc_unlocked($39)|0);
   $41 = $40&255;
   $42 = $i;
   $43 = $rev;
   $44 = $42 ^ $43;
   $45 = (($u) + ($44)|0);
   HEAP8[$45>>0] = $41;
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
  $48 = +HEAPF64[$u>>3];
  $0 = $48;
  break;
 }
 default: {
  $49 = HEAP32[944>>2]|0;
  $50 = (_getc_unlocked($49)|0);
  $51 = (+($50|0));
  $0 = $51;
 }
 }
 $52 = $0;
 STACKTOP = sp;return (+$52);
}
function _read_shorts($pixel,$count) {
 $pixel = $pixel|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pixel;
 $1 = $count;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[944>>2]|0;
 $5 = (_fread($2,2,$3,$4)|0);
 $6 = $1;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  _derror();
 }
 $8 = HEAP16[448960>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($9|0)==(18761);
 $11 = $10&1;
 $12 = (_ntohs(4660)|0);
 $13 = $12&65535;
 $14 = ($13|0)==(4660);
 $15 = $14&1;
 $16 = ($11|0)==($15|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $0;
 $18 = $0;
 $19 = $1;
 $20 = $19<<1;
 _swab($17,$18,$20);
 STACKTOP = sp;return;
}
function _cubic_spline($x_,$y_,$len) {
 $x_ = $x_|0;
 $y_ = $y_|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $A = 0, $acc = 0.0, $b = 0, $c = 0, $d = 0, $i = 0, $j = 0, $v = 0.0;
 var $v1 = 0.0, $x = 0, $x_out = 0.0, $y = 0, $y_out = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x_;
 $1 = $y_;
 $2 = $len;
 $3 = $2;
 $4 = $3<<1;
 $5 = (($4) + 4)|0;
 $6 = $5<<2;
 $7 = (($6) + 4)|0;
 $8 = $2;
 $9 = $8<<1;
 $10 = (_calloc($7,$9)|0);
 $A = $10;
 $11 = $A;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $A;
 $14 = $2;
 $15 = $14<<1;
 $16 = (($13) + ($15<<2)|0);
 $17 = $A;
 HEAP32[$17>>2] = $16;
 $i = 1;
 while(1) {
  $18 = $i;
  $19 = $2;
  $20 = $19<<1;
  $21 = ($18|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $A;
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = $24<<1;
  $26 = $i;
  $27 = Math_imul($25, $26)|0;
  $28 = (($23) + ($27<<2)|0);
  $29 = $i;
  $30 = $A;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $2;
 $35 = $i;
 $36 = $i;
 $37 = $i;
 $38 = $A;
 $39 = HEAP32[$38>>2]|0;
 $40 = $i;
 $41 = $i;
 $42 = Math_imul($40, $41)|0;
 $43 = (($39) + ($42<<2)|0);
 $b = $43;
 $44 = (($43) + ($37<<2)|0);
 $c = $44;
 $45 = (($44) + ($36<<2)|0);
 $d = $45;
 $46 = (($45) + ($35<<2)|0);
 $x = $46;
 $47 = (($46) + ($34<<2)|0);
 $y = $47;
 $i = 0;
 while(1) {
  $48 = $i;
  $49 = $2;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $0;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (+($54|0));
  $56 = $55 / 65535.0;
  $57 = $56;
  $58 = $i;
  $59 = $x;
  $60 = (($59) + ($58<<2)|0);
  HEAPF32[$60>>2] = $57;
  $61 = $i;
  $62 = $1;
  $63 = (($62) + ($61<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (+($64|0));
  $66 = $65 / 65535.0;
  $67 = $66;
  $68 = $i;
  $69 = $y;
  $70 = (($69) + ($68<<2)|0);
  HEAPF32[$70>>2] = $67;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 $73 = $2;
 $74 = (($73) - 1)|0;
 $i = $74;
 while(1) {
  $75 = $i;
  $76 = ($75|0)>(0);
  if (!($76)) {
   break;
  }
  $77 = $i;
  $78 = $y;
  $79 = (($78) + ($77<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $i;
  $82 = (($81) - 1)|0;
  $83 = $y;
  $84 = (($83) + ($82<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $80 - $85;
  $87 = $i;
  $88 = $x;
  $89 = (($88) + ($87<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $i;
  $92 = (($91) - 1)|0;
  $93 = $x;
  $94 = (($93) + ($92<<2)|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $90 - $95;
  $97 = $86 / $96;
  $98 = $i;
  $99 = $b;
  $100 = (($99) + ($98<<2)|0);
  HEAPF32[$100>>2] = $97;
  $101 = $i;
  $102 = $x;
  $103 = (($102) + ($101<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $i;
  $106 = (($105) - 1)|0;
  $107 = $x;
  $108 = (($107) + ($106<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $104 - $109;
  $111 = $i;
  $112 = (($111) - 1)|0;
  $113 = $d;
  $114 = (($113) + ($112<<2)|0);
  HEAPF32[$114>>2] = $110;
  $115 = $i;
  $116 = (($115) + -1)|0;
  $i = $116;
 }
 $i = 1;
 while(1) {
  $117 = $i;
  $118 = $2;
  $119 = (($118) - 1)|0;
  $120 = ($117|0)<($119|0);
  if (!($120)) {
   break;
  }
  $121 = $i;
  $122 = (($121) - 1)|0;
  $123 = $d;
  $124 = (($123) + ($122<<2)|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $i;
  $127 = $d;
  $128 = (($127) + ($126<<2)|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $125 + $129;
  $131 = 2.0 * $130;
  $132 = $i;
  $133 = $i;
  $134 = $A;
  $135 = (($134) + ($133<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + ($132<<2)|0);
  HEAPF32[$137>>2] = $131;
  $138 = $i;
  $139 = ($138|0)>(1);
  if ($139) {
   $140 = $i;
   $141 = (($140) - 1)|0;
   $142 = $d;
   $143 = (($142) + ($141<<2)|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $i;
   $146 = (($145) - 1)|0;
   $147 = $i;
   $148 = $A;
   $149 = (($148) + ($147<<2)|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + ($146<<2)|0);
   HEAPF32[$151>>2] = $144;
   $152 = $i;
   $153 = (($152) - 1)|0;
   $154 = $d;
   $155 = (($154) + ($153<<2)|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $i;
   $158 = $i;
   $159 = (($158) - 1)|0;
   $160 = $A;
   $161 = (($160) + ($159<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($162) + ($157<<2)|0);
   HEAPF32[$163>>2] = $156;
  }
  $164 = $i;
  $165 = (($164) + 1)|0;
  $166 = $b;
  $167 = (($166) + ($165<<2)|0);
  $168 = +HEAPF32[$167>>2];
  $169 = $i;
  $170 = $b;
  $171 = (($170) + ($169<<2)|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $168 - $172;
  $174 = 6.0 * $173;
  $175 = $2;
  $176 = (($175) - 1)|0;
  $177 = $i;
  $178 = $A;
  $179 = (($178) + ($177<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + ($176<<2)|0);
  HEAPF32[$181>>2] = $174;
  $182 = $i;
  $183 = (($182) + 1)|0;
  $i = $183;
 }
 $i = 1;
 while(1) {
  $184 = $i;
  $185 = $2;
  $186 = (($185) - 2)|0;
  $187 = ($184|0)<($186|0);
  if (!($187)) {
   break;
  }
  $188 = $i;
  $189 = $i;
  $190 = (($189) + 1)|0;
  $191 = $A;
  $192 = (($191) + ($190<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + ($188<<2)|0);
  $195 = +HEAPF32[$194>>2];
  $196 = $i;
  $197 = $i;
  $198 = $A;
  $199 = (($198) + ($197<<2)|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = (($200) + ($196<<2)|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $195 / $202;
  $v = $203;
  $j = 1;
  while(1) {
   $204 = $j;
   $205 = $2;
   $206 = (($205) - 1)|0;
   $207 = ($204|0)<=($206|0);
   if (!($207)) {
    break;
   }
   $208 = $v;
   $209 = $j;
   $210 = $i;
   $211 = $A;
   $212 = (($211) + ($210<<2)|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (($213) + ($209<<2)|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $208 * $215;
   $217 = $j;
   $218 = $i;
   $219 = (($218) + 1)|0;
   $220 = $A;
   $221 = (($220) + ($219<<2)|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + ($217<<2)|0);
   $224 = +HEAPF32[$223>>2];
   $225 = $224 - $216;
   HEAPF32[$223>>2] = $225;
   $226 = $j;
   $227 = (($226) + 1)|0;
   $j = $227;
  }
  $228 = $i;
  $229 = (($228) + 1)|0;
  $i = $229;
 }
 $230 = $2;
 $231 = (($230) - 2)|0;
 $i = $231;
 while(1) {
  $232 = $i;
  $233 = ($232|0)>(0);
  if (!($233)) {
   break;
  }
  $acc = 0.0;
  $234 = $i;
  $j = $234;
  while(1) {
   $235 = $j;
   $236 = $2;
   $237 = (($236) - 2)|0;
   $238 = ($235|0)<=($237|0);
   if (!($238)) {
    break;
   }
   $239 = $j;
   $240 = $i;
   $241 = $A;
   $242 = (($241) + ($240<<2)|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($243) + ($239<<2)|0);
   $245 = +HEAPF32[$244>>2];
   $246 = $j;
   $247 = $c;
   $248 = (($247) + ($246<<2)|0);
   $249 = +HEAPF32[$248>>2];
   $250 = $245 * $249;
   $251 = $acc;
   $252 = $251 + $250;
   $acc = $252;
   $253 = $j;
   $254 = (($253) + 1)|0;
   $j = $254;
  }
  $255 = $2;
  $256 = (($255) - 1)|0;
  $257 = $i;
  $258 = $A;
  $259 = (($258) + ($257<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (($260) + ($256<<2)|0);
  $262 = +HEAPF32[$261>>2];
  $263 = $acc;
  $264 = $262 - $263;
  $265 = $i;
  $266 = $i;
  $267 = $A;
  $268 = (($267) + ($266<<2)|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = (($269) + ($265<<2)|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $264 / $271;
  $273 = $i;
  $274 = $c;
  $275 = (($274) + ($273<<2)|0);
  HEAPF32[$275>>2] = $272;
  $276 = $i;
  $277 = (($276) + -1)|0;
  $i = $277;
 }
 $i = 0;
 while(1) {
  $278 = $i;
  $279 = ($278|0)<(65536);
  if (!($279)) {
   break;
  }
  $280 = $i;
  $281 = (+($280|0));
  $282 = $281 / 65535.0;
  $283 = $282;
  $x_out = $283;
  $y_out = 0.0;
  $j = 0;
  while(1) {
   $284 = $j;
   $285 = $2;
   $286 = (($285) - 1)|0;
   $287 = ($284|0)<($286|0);
   if (!($287)) {
    break;
   }
   $288 = $j;
   $289 = $x;
   $290 = (($289) + ($288<<2)|0);
   $291 = +HEAPF32[$290>>2];
   $292 = $x_out;
   $293 = $291 <= $292;
   if ($293) {
    $294 = $x_out;
    $295 = $j;
    $296 = (($295) + 1)|0;
    $297 = $x;
    $298 = (($297) + ($296<<2)|0);
    $299 = +HEAPF32[$298>>2];
    $300 = $294 <= $299;
    if ($300) {
     $301 = $x_out;
     $302 = $j;
     $303 = $x;
     $304 = (($303) + ($302<<2)|0);
     $305 = +HEAPF32[$304>>2];
     $306 = $301 - $305;
     $v1 = $306;
     $307 = $j;
     $308 = $y;
     $309 = (($308) + ($307<<2)|0);
     $310 = +HEAPF32[$309>>2];
     $311 = $j;
     $312 = (($311) + 1)|0;
     $313 = $y;
     $314 = (($313) + ($312<<2)|0);
     $315 = +HEAPF32[$314>>2];
     $316 = $j;
     $317 = $y;
     $318 = (($317) + ($316<<2)|0);
     $319 = +HEAPF32[$318>>2];
     $320 = $315 - $319;
     $321 = $j;
     $322 = $d;
     $323 = (($322) + ($321<<2)|0);
     $324 = +HEAPF32[$323>>2];
     $325 = $320 / $324;
     $326 = $j;
     $327 = $d;
     $328 = (($327) + ($326<<2)|0);
     $329 = +HEAPF32[$328>>2];
     $330 = 2.0 * $329;
     $331 = $j;
     $332 = $c;
     $333 = (($332) + ($331<<2)|0);
     $334 = +HEAPF32[$333>>2];
     $335 = $330 * $334;
     $336 = $j;
     $337 = (($336) + 1)|0;
     $338 = $c;
     $339 = (($338) + ($337<<2)|0);
     $340 = +HEAPF32[$339>>2];
     $341 = $j;
     $342 = $d;
     $343 = (($342) + ($341<<2)|0);
     $344 = +HEAPF32[$343>>2];
     $345 = $340 * $344;
     $346 = $335 + $345;
     $347 = $346 / 6.0;
     $348 = $325 - $347;
     $349 = $v1;
     $350 = $348 * $349;
     $351 = $310 + $350;
     $352 = $351;
     $353 = $j;
     $354 = $c;
     $355 = (($354) + ($353<<2)|0);
     $356 = +HEAPF32[$355>>2];
     $357 = $356;
     $358 = $357 * 0.5;
     $359 = $v1;
     $360 = $359;
     $361 = $358 * $360;
     $362 = $v1;
     $363 = $362;
     $364 = $361 * $363;
     $365 = $352 + $364;
     $366 = $j;
     $367 = (($366) + 1)|0;
     $368 = $c;
     $369 = (($368) + ($367<<2)|0);
     $370 = +HEAPF32[$369>>2];
     $371 = $j;
     $372 = $c;
     $373 = (($372) + ($371<<2)|0);
     $374 = +HEAPF32[$373>>2];
     $375 = $370 - $374;
     $376 = $j;
     $377 = $d;
     $378 = (($377) + ($376<<2)|0);
     $379 = +HEAPF32[$378>>2];
     $380 = 6.0 * $379;
     $381 = $375 / $380;
     $382 = $v1;
     $383 = $381 * $382;
     $384 = $v1;
     $385 = $383 * $384;
     $386 = $v1;
     $387 = $385 * $386;
     $388 = $387;
     $389 = $365 + $388;
     $390 = $389;
     $y_out = $390;
    }
   }
   $391 = $j;
   $392 = (($391) + 1)|0;
   $j = $392;
  }
  $393 = $y_out;
  $394 = $393;
  $395 = $394 < 0.0;
  if ($395) {
   $406 = 0;
  } else {
   $396 = $y_out;
   $397 = $396;
   $398 = $397 >= 1.0;
   if ($398) {
    $406 = 65535;
   } else {
    $399 = $y_out;
    $400 = $399;
    $401 = $400 * 65535.0;
    $402 = $401 + 0.5;
    $403 = (~~(($402))&65535);
    $404 = $403&65535;
    $406 = $404;
   }
  }
  $405 = $406&65535;
  $407 = $i;
  $408 = (448962 + ($407<<1)|0);
  HEAP16[$408>>1] = $405;
  $409 = $i;
  $410 = (($409) + 1)|0;
  $i = $410;
 }
 $411 = $A;
 _free($411);
 STACKTOP = sp;return;
}
function _canon_600_fixed_wb($temp) {
 $temp = $temp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $frac = 0.0, $hi = 0, $i = 0, $lo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $temp;
 $frac = 0.0;
 $lo = 4;
 while(1) {
  $1 = $lo;
  $2 = (($1) + -1)|0;
  $lo = $2;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $lo;
  $5 = (580034 + (($4*10)|0)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 << 16 >> 16;
  $8 = $0;
  $9 = ($7|0)<=($8|0);
  if ($9) {
   break;
  }
 }
 $hi = 0;
 while(1) {
  $10 = $hi;
  $11 = ($10|0)<(3);
  if (!($11)) {
   break;
  }
  $12 = $hi;
  $13 = (580034 + (($12*10)|0)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = $0;
  $17 = ($15|0)>=($16|0);
  if ($17) {
   break;
  }
  $18 = $hi;
  $19 = (($18) + 1)|0;
  $hi = $19;
 }
 $20 = $lo;
 $21 = $hi;
 $22 = ($20|0)!=($21|0);
 if ($22) {
  $23 = $0;
  $24 = $lo;
  $25 = (580034 + (($24*10)|0)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = (($23) - ($27))|0;
  $29 = (+($28|0));
  $30 = $hi;
  $31 = (580034 + (($30*10)|0)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $34 = $lo;
  $35 = (580034 + (($34*10)|0)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = (($33) - ($37))|0;
  $39 = (+($38|0));
  $40 = $29 / $39;
  $frac = $40;
 }
 $i = 1;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(5);
  if (!($42)) {
   break;
  }
  $43 = $frac;
  $44 = $i;
  $45 = $hi;
  $46 = (580034 + (($45*10)|0)|0);
  $47 = (($46) + ($44<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $50 = (+($49|0));
  $51 = $43 * $50;
  $52 = $frac;
  $53 = 1.0 - $52;
  $54 = $i;
  $55 = $lo;
  $56 = (580034 + (($55*10)|0)|0);
  $57 = (($56) + ($54<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = (+($59|0));
  $61 = $53 * $60;
  $62 = $51 + $61;
  $63 = 1.0 / $62;
  $64 = $i;
  $65 = (($64) - 1)|0;
  $66 = (948 + ($65<<2)|0);
  HEAPF32[$66>>2] = $63;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 STACKTOP = sp;return;
}
function _canon_600_color($ratio,$mar) {
 $ratio = $ratio|0;
 $mar = $mar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $clipped = 0, $miss = 0, $or$cond = 0, $target = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ratio;
 $2 = $mar;
 $clipped = 0;
 $3 = +HEAPF32[964>>2];
 $4 = $3 != 0.0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 do {
  if ($4) {
   $8 = ($7|0)<(-104);
   if ($8) {
    $9 = $1;
    $10 = ((($9)) + 4|0);
    HEAP32[$10>>2] = -104;
    $clipped = 1;
   }
   $11 = $1;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)>(12);
   if ($14) {
    $15 = $1;
    $16 = ((($15)) + 4|0);
    HEAP32[$16>>2] = 12;
    $clipped = 1;
   }
  } else {
   $17 = ($7|0)<(-264);
   if (!($17)) {
    $18 = $1;
    $19 = ((($18)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)>(461);
    if (!($21)) {
     $22 = $1;
     $23 = ((($22)) + 4|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)<(-50);
     if ($25) {
      $26 = $1;
      $27 = ((($26)) + 4|0);
      HEAP32[$27>>2] = -50;
      $clipped = 1;
     }
     $28 = $1;
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)>(307);
     if (!($31)) {
      break;
     }
     $32 = $1;
     $33 = ((($32)) + 4|0);
     HEAP32[$33>>2] = 307;
     $clipped = 1;
     break;
    }
   }
   $0 = 2;
   $85 = $0;
   STACKTOP = sp;return ($85|0);
  }
 } while(0);
 $34 = +HEAPF32[964>>2];
 $35 = $34 != 0.0;
 if ($35) {
  label = 15;
 } else {
  $36 = $1;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)<(197);
  if ($39) {
   label = 15;
  } else {
   $46 = $1;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48*48)|0;
   $50 = $49 >> 10;
   $51 = (-123 + ($50))|0;
   $52 = $51;
  }
 }
 if ((label|0) == 15) {
  $40 = $1;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42*398)|0;
  $44 = $43 >> 10;
  $45 = (-38 - ($44))|0;
  $52 = $45;
 }
 $target = $52;
 $53 = $target;
 $54 = $2;
 $55 = (($53) - ($54))|0;
 $56 = $1;
 $57 = HEAP32[$56>>2]|0;
 $58 = ($55|0)<=($57|0);
 if ($58) {
  $59 = $target;
  $60 = (($59) + 20)|0;
  $61 = $1;
  $62 = HEAP32[$61>>2]|0;
  $63 = ($60|0)<($62|0);
  $64 = $clipped;
  $65 = ($64|0)!=(0);
  $or$cond = $63 | $65;
  if (!($or$cond)) {
   $0 = 0;
   $85 = $0;
   STACKTOP = sp;return ($85|0);
  }
 }
 $66 = $target;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) - ($68))|0;
 $miss = $69;
 $70 = $miss;
 $71 = (Math_abs(($70|0))|0);
 $72 = $2;
 $73 = $72<<2;
 $74 = ($71|0)>=($73|0);
 if ($74) {
  $0 = 2;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 $75 = $miss;
 $76 = ($75|0)<(-20);
 if ($76) {
  $miss = -20;
 }
 $77 = $miss;
 $78 = $2;
 $79 = ($77|0)>($78|0);
 if ($79) {
  $80 = $2;
  $miss = $80;
 }
 $81 = $target;
 $82 = $miss;
 $83 = (($81) - ($82))|0;
 $84 = $1;
 HEAP32[$84>>2] = $83;
 $0 = 1;
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function _canon_600_auto_wb() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $col = 0, $count = 0, $i = 0, $j = 0, $mar = 0, $ratio = 0, $row = 0, $st = 0, $stat = 0, $test = 0, $total = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 120|0;
 $test = sp + 88|0;
 $total = sp + 24|0;
 $ratio = sp + 8|0;
 $stat = sp;
 ;HEAP32[$count>>2]=0|0;HEAP32[$count+4>>2]=0|0;
 dest=$total; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = +HEAPF32[968>>2];
 $1 = $0;
 $2 = $1 + 0.5;
 $3 = (~~(($2)));
 $i = $3;
 $4 = $i;
 $5 = ($4|0)<(10);
 do {
  if ($5) {
   $mar = 150;
  } else {
   $6 = $i;
   $7 = ($6|0)>(12);
   if ($7) {
    $mar = 20;
    break;
   } else {
    $8 = $i;
    $9 = ($8*20)|0;
    $10 = (280 - ($9))|0;
    $mar = $10;
    break;
   }
  }
 } while(0);
 $11 = +HEAPF32[964>>2];
 $12 = $11 != 0.0;
 if ($12) {
  $mar = 80;
 }
 $row = 14;
 while(1) {
  $13 = $row;
  $14 = HEAP16[580074>>1]|0;
  $15 = $14&65535;
  $16 = (($15) - 14)|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   break;
  }
  $col = 10;
  while(1) {
   $18 = $col;
   $19 = HEAP16[580076>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if (!($21)) {
    break;
   }
   $i = 0;
   while(1) {
    $22 = $i;
    $23 = ($22|0)<(8);
    if (!($23)) {
     break;
    }
    $24 = HEAP32[776>>2]|0;
    $25 = $row;
    $26 = $i;
    $27 = $26 >> 1;
    $28 = (($25) + ($27))|0;
    $29 = $28 << 1;
    $30 = $29 & 14;
    $31 = $col;
    $32 = $i;
    $33 = $32 & 1;
    $34 = (($31) + ($33))|0;
    $35 = $34 & 1;
    $36 = (($30) + ($35))|0;
    $37 = $36 << 1;
    $38 = $24 >>> $37;
    $39 = $38 & 3;
    $40 = $row;
    $41 = $i;
    $42 = $41 >> 1;
    $43 = (($40) + ($42))|0;
    $44 = HEAP16[580078>>1]|0;
    $45 = $44&65535;
    $46 = $43 >> $45;
    $47 = HEAP16[580080>>1]|0;
    $48 = $47&65535;
    $49 = Math_imul($46, $48)|0;
    $50 = $col;
    $51 = $i;
    $52 = $51 & 1;
    $53 = (($50) + ($52))|0;
    $54 = HEAP16[580078>>1]|0;
    $55 = $54&65535;
    $56 = $53 >> $55;
    $57 = (($49) + ($56))|0;
    $58 = HEAP32[972>>2]|0;
    $59 = (($58) + ($57<<3)|0);
    $60 = (($59) + ($39<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61&65535;
    $63 = $i;
    $64 = $63 & 4;
    $65 = HEAP32[776>>2]|0;
    $66 = $row;
    $67 = $i;
    $68 = $67 >> 1;
    $69 = (($66) + ($68))|0;
    $70 = $69 << 1;
    $71 = $70 & 14;
    $72 = $col;
    $73 = $i;
    $74 = $73 & 1;
    $75 = (($72) + ($74))|0;
    $76 = $75 & 1;
    $77 = (($71) + ($76))|0;
    $78 = $77 << 1;
    $79 = $65 >>> $78;
    $80 = $79 & 3;
    $81 = (($64) + ($80))|0;
    $82 = (($test) + ($81<<2)|0);
    HEAP32[$82>>2] = $62;
    $83 = $i;
    $84 = (($83) + 1)|0;
    $i = $84;
   }
   $i = 0;
   while(1) {
    $85 = $i;
    $86 = ($85|0)<(8);
    if (!($86)) {
     label = 20;
     break;
    }
    $87 = $i;
    $88 = (($test) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)<(150);
    if ($90) {
     break;
    }
    $91 = $i;
    $92 = (($test) + ($91<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)>(1500);
    if ($94) {
     break;
    }
    $95 = $i;
    $96 = (($95) + 1)|0;
    $i = $96;
   }
   L26: do {
    if ((label|0) == 20) {
     label = 0;
     $i = 0;
     while(1) {
      $97 = $i;
      $98 = ($97|0)<(4);
      if (!($98)) {
       break;
      }
      $99 = $i;
      $100 = (($test) + ($99<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $i;
      $103 = (($102) + 4)|0;
      $104 = (($test) + ($103<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($101) - ($105))|0;
      $107 = (Math_abs(($106|0))|0);
      $108 = ($107|0)>(50);
      if ($108) {
       break L26;
      }
      $109 = $i;
      $110 = (($109) + 1)|0;
      $i = $110;
     }
     $i = 0;
     while(1) {
      $111 = $i;
      $112 = ($111|0)<(2);
      if (!($112)) {
       break;
      }
      $j = 0;
      while(1) {
       $113 = $j;
       $114 = ($113|0)<(4);
       $115 = $i;
       if (!($114)) {
        break;
       }
       $116 = $115<<2;
       $117 = $j;
       $118 = (($116) + ($117))|0;
       $119 = (($118) + 1)|0;
       $120 = (($test) + ($119<<2)|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $i;
       $123 = $122<<2;
       $124 = $j;
       $125 = (($123) + ($124))|0;
       $126 = (($test) + ($125<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($121) - ($127))|0;
       $129 = $128 << 10;
       $130 = $i;
       $131 = $130<<2;
       $132 = $j;
       $133 = (($131) + ($132))|0;
       $134 = (($test) + ($133<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (($129|0) / ($135|0))&-1;
       $137 = $j;
       $138 = $137 >> 1;
       $139 = $i;
       $140 = (($ratio) + ($139<<3)|0);
       $141 = (($140) + ($138<<2)|0);
       HEAP32[$141>>2] = $136;
       $142 = $j;
       $143 = (($142) + 2)|0;
       $j = $143;
      }
      $144 = (($ratio) + ($115<<3)|0);
      $145 = $mar;
      $146 = (_canon_600_color($144,$145)|0);
      $147 = $i;
      $148 = (($stat) + ($147<<2)|0);
      HEAP32[$148>>2] = $146;
      $149 = $i;
      $150 = (($149) + 1)|0;
      $i = $150;
     }
     $151 = HEAP32[$stat>>2]|0;
     $152 = ((($stat)) + 4|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $151 | $153;
     $st = $154;
     $155 = ($154|0)>(1);
     if (!($155)) {
      $i = 0;
      while(1) {
       $156 = $i;
       $157 = ($156|0)<(2);
       if (!($157)) {
        break;
       }
       $158 = $i;
       $159 = (($stat) + ($158<<2)|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160|0)!=(0);
       L45: do {
        if ($161) {
         $j = 0;
         while(1) {
          $162 = $j;
          $163 = ($162|0)<(2);
          if (!($163)) {
           break L45;
          }
          $164 = $i;
          $165 = $164<<2;
          $166 = $j;
          $167 = $166<<1;
          $168 = (($165) + ($167))|0;
          $169 = (($test) + ($168<<2)|0);
          $170 = HEAP32[$169>>2]|0;
          $171 = $j;
          $172 = $i;
          $173 = (($ratio) + ($172<<3)|0);
          $174 = (($173) + ($171<<2)|0);
          $175 = HEAP32[$174>>2]|0;
          $176 = (1024 + ($175))|0;
          $177 = Math_imul($170, $176)|0;
          $178 = $177 >> 10;
          $179 = $i;
          $180 = $179<<2;
          $181 = $j;
          $182 = $181<<1;
          $183 = (($180) + ($182))|0;
          $184 = (($183) + 1)|0;
          $185 = (($test) + ($184<<2)|0);
          HEAP32[$185>>2] = $178;
          $186 = $j;
          $187 = (($186) + 1)|0;
          $j = $187;
         }
        }
       } while(0);
       $188 = $i;
       $189 = (($188) + 1)|0;
       $i = $189;
      }
      $i = 0;
      while(1) {
       $190 = $i;
       $191 = ($190|0)<(8);
       if (!($191)) {
        break;
       }
       $192 = $i;
       $193 = (($test) + ($192<<2)|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = $i;
       $196 = $st;
       $197 = (($total) + ($196<<5)|0);
       $198 = (($197) + ($195<<2)|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = (($199) + ($194))|0;
       HEAP32[$198>>2] = $200;
       $201 = $i;
       $202 = (($201) + 1)|0;
       $i = $202;
      }
      $203 = $st;
      $204 = (($count) + ($203<<2)|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = (($205) + 1)|0;
      HEAP32[$204>>2] = $206;
     }
    }
   } while(0);
   $207 = $col;
   $208 = (($207) + 2)|0;
   $col = $208;
  }
  $209 = $row;
  $210 = (($209) + 4)|0;
  $row = $210;
 }
 $211 = HEAP32[$count>>2]|0;
 $212 = ((($count)) + 4|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $211 | $213;
 $215 = ($214|0)!=(0);
 if (!($215)) {
  STACKTOP = sp;return;
 }
 $216 = HEAP32[$count>>2]|0;
 $217 = ($216*200)|0;
 $218 = ((($count)) + 4|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = ($217|0)<($219|0);
 $221 = $220&1;
 $st = $221;
 $i = 0;
 while(1) {
  $222 = $i;
  $223 = ($222|0)<(4);
  if (!($223)) {
   break;
  }
  $224 = $i;
  $225 = $st;
  $226 = (($total) + ($225<<5)|0);
  $227 = (($226) + ($224<<2)|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $i;
  $230 = (($229) + 4)|0;
  $231 = $st;
  $232 = (($total) + ($231<<5)|0);
  $233 = (($232) + ($230<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (($228) + ($234))|0;
  $236 = (+($235|0));
  $237 = 1.0 / $236;
  $238 = $237;
  $239 = $i;
  $240 = (948 + ($239<<2)|0);
  HEAPF32[$240>>2] = $238;
  $241 = $i;
  $242 = (($241) + 1)|0;
  $i = $242;
 }
 STACKTOP = sp;return;
}
function _canon_600_coeff() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $c = 0, $i = 0, $mc = 0.0, $or$cond = 0, $t = 0, $yc = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = 0;
 $0 = +HEAPF32[(952)>>2];
 $1 = +HEAPF32[(956)>>2];
 $2 = $0 / $1;
 $mc = $2;
 $3 = +HEAPF32[(960)>>2];
 $4 = +HEAPF32[(956)>>2];
 $5 = $3 / $4;
 $yc = $5;
 $6 = $mc;
 $7 = $6 > 1.0;
 if ($7) {
  $8 = $mc;
  $9 = $8;
  $10 = $9 <= 1.28;
  if ($10) {
   $11 = $yc;
   $12 = $11;
   $13 = $12 < 0.87890000000000001;
   if ($13) {
    $t = 1;
   }
  }
 }
 $14 = $mc;
 $15 = $14;
 $16 = $15 > 1.28;
 $17 = $mc;
 $18 = $17 <= 2.0;
 $or$cond = $16 & $18;
 do {
  if ($or$cond) {
   $19 = $yc;
   $20 = $19;
   $21 = $20 < 0.87890000000000001;
   if ($21) {
    $t = 3;
    break;
   }
   $22 = $yc;
   $23 = $22 <= 2.0;
   if ($23) {
    $t = 4;
   }
  }
 } while(0);
 $24 = +HEAPF32[964>>2];
 $25 = $24 != 0.0;
 if ($25) {
  $t = 5;
 }
 $i = 0;
 HEAP32[976>>2] = 0;
 while(1) {
  $26 = $i;
  $27 = ($26|0)<(3);
  if (!($27)) {
   break;
  }
  $c = 0;
  while(1) {
   $28 = $c;
   $29 = HEAP32[980>>2]|0;
   $30 = ($28>>>0)<($29>>>0);
   $31 = $i;
   if (!($30)) {
    break;
   }
   $32 = $31<<2;
   $33 = $c;
   $34 = (($32) + ($33))|0;
   $35 = $t;
   $36 = (580082 + (($35*24)|0)|0);
   $37 = (($36) + ($34<<1)|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = (+($39|0));
   $41 = $40 / 1024.0;
   $42 = $41;
   $43 = $c;
   $44 = $i;
   $45 = (984 + ($44<<4)|0);
   $46 = (($45) + ($43<<2)|0);
   HEAPF32[$46>>2] = $42;
   $47 = $c;
   $48 = (($47) + 1)|0;
   $c = $48;
  }
  $49 = (($31) + 1)|0;
  $i = $49;
 }
 STACKTOP = sp;return;
}
function _canon_600_load_raw() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $data = 0, $dp = 0, $irow = 0, $pix = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 16|0;
 $row = 0;
 $irow = 0;
 while(1) {
  $0 = $irow;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[944>>2]|0;
  $5 = (_fread($data,1,1120,$4)|0);
  $6 = ($5>>>0)<(1120);
  if ($6) {
   _derror();
  }
  $7 = HEAP32[1032>>2]|0;
  $8 = $row;
  $9 = HEAP16[580226>>1]|0;
  $10 = $9&65535;
  $11 = Math_imul($8, $10)|0;
  $12 = (($7) + ($11<<1)|0);
  $pix = $12;
  $dp = $data;
  while(1) {
   $13 = $dp;
   $14 = ((($data)) + 1120|0);
   $15 = ($13>>>0)<($14>>>0);
   if (!($15)) {
    break;
   }
   $16 = $dp;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $18 << 2;
   $20 = $dp;
   $21 = ((($20)) + 1|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 >> 6;
   $25 = (($19) + ($24))|0;
   $26 = $25&65535;
   $27 = $pix;
   HEAP16[$27>>1] = $26;
   $28 = $dp;
   $29 = ((($28)) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 << 2;
   $33 = $dp;
   $34 = ((($33)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $36 >> 4;
   $38 = $37 & 3;
   $39 = (($32) + ($38))|0;
   $40 = $39&65535;
   $41 = $pix;
   $42 = ((($41)) + 2|0);
   HEAP16[$42>>1] = $40;
   $43 = $dp;
   $44 = ((($43)) + 3|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $46 << 2;
   $48 = $dp;
   $49 = ((($48)) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $51 >> 2;
   $53 = $52 & 3;
   $54 = (($47) + ($53))|0;
   $55 = $54&65535;
   $56 = $pix;
   $57 = ((($56)) + 4|0);
   HEAP16[$57>>1] = $55;
   $58 = $dp;
   $59 = ((($58)) + 4|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $61 << 2;
   $63 = $dp;
   $64 = ((($63)) + 1|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66 & 3;
   $68 = (($62) + ($67))|0;
   $69 = $68&65535;
   $70 = $pix;
   $71 = ((($70)) + 6|0);
   HEAP16[$71>>1] = $69;
   $72 = $dp;
   $73 = ((($72)) + 5|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 << 2;
   $77 = $dp;
   $78 = ((($77)) + 9|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $80 & 3;
   $82 = (($76) + ($81))|0;
   $83 = $82&65535;
   $84 = $pix;
   $85 = ((($84)) + 8|0);
   HEAP16[$85>>1] = $83;
   $86 = $dp;
   $87 = ((($86)) + 6|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $89 << 2;
   $91 = $dp;
   $92 = ((($91)) + 9|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $94 >> 2;
   $96 = $95 & 3;
   $97 = (($90) + ($96))|0;
   $98 = $97&65535;
   $99 = $pix;
   $100 = ((($99)) + 10|0);
   HEAP16[$100>>1] = $98;
   $101 = $dp;
   $102 = ((($101)) + 7|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = $104 << 2;
   $106 = $dp;
   $107 = ((($106)) + 9|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 >> 4;
   $111 = $110 & 3;
   $112 = (($105) + ($111))|0;
   $113 = $112&65535;
   $114 = $pix;
   $115 = ((($114)) + 12|0);
   HEAP16[$115>>1] = $113;
   $116 = $dp;
   $117 = ((($116)) + 8|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $119 << 2;
   $121 = $dp;
   $122 = ((($121)) + 9|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $124 >> 6;
   $126 = (($120) + ($125))|0;
   $127 = $126&65535;
   $128 = $pix;
   $129 = ((($128)) + 14|0);
   HEAP16[$129>>1] = $127;
   $130 = $dp;
   $131 = ((($130)) + 10|0);
   $dp = $131;
   $132 = $pix;
   $133 = ((($132)) + 16|0);
   $pix = $133;
  }
  $134 = $row;
  $135 = (($134) + 2)|0;
  $row = $135;
  $136 = HEAP16[580074>>1]|0;
  $137 = $136&65535;
  $138 = ($135|0)>($137|0);
  $$ = $138 ? 1 : $135;
  $row = $$;
  $139 = $irow;
  $140 = (($139) + 1)|0;
  $irow = $140;
 }
 STACKTOP = sp;return;
}
function _canon_600_correct() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $col = 0, $row = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[580076>>1]|0;
   $6 = $5&65535;
   $7 = ($4|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = HEAP32[776>>2]|0;
   $9 = $row;
   $10 = $9 << 1;
   $11 = $10 & 14;
   $12 = $col;
   $13 = $12 & 1;
   $14 = (($11) + ($13))|0;
   $15 = $14 << 1;
   $16 = $8 >>> $15;
   $17 = $16 & 3;
   $18 = $row;
   $19 = HEAP16[580078>>1]|0;
   $20 = $19&65535;
   $21 = $18 >> $20;
   $22 = HEAP16[580080>>1]|0;
   $23 = $22&65535;
   $24 = Math_imul($21, $23)|0;
   $25 = $col;
   $26 = HEAP16[580078>>1]|0;
   $27 = $26&65535;
   $28 = $25 >> $27;
   $29 = (($24) + ($28))|0;
   $30 = HEAP32[972>>2]|0;
   $31 = (($30) + ($29<<3)|0);
   $32 = (($31) + ($17<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = HEAP32[1036>>2]|0;
   $36 = (($34) - ($35))|0;
   $val = $36;
   $37 = ($36|0)<(0);
   $$ = $37 ? 0 : $36;
   $val = $$;
   $38 = $val;
   $39 = $col;
   $40 = $39 & 1;
   $41 = $row;
   $42 = $41 & 3;
   $43 = (580228 + ($42<<2)|0);
   $44 = (($43) + ($40<<1)|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = Math_imul($38, $46)|0;
   $48 = $47 >> 9;
   $val = $48;
   $49 = $val;
   $50 = $49&65535;
   $51 = HEAP32[776>>2]|0;
   $52 = $row;
   $53 = $52 << 1;
   $54 = $53 & 14;
   $55 = $col;
   $56 = $55 & 1;
   $57 = (($54) + ($56))|0;
   $58 = $57 << 1;
   $59 = $51 >>> $58;
   $60 = $59 & 3;
   $61 = $row;
   $62 = HEAP16[580078>>1]|0;
   $63 = $62&65535;
   $64 = $61 >> $63;
   $65 = HEAP16[580080>>1]|0;
   $66 = $65&65535;
   $67 = Math_imul($64, $66)|0;
   $68 = $col;
   $69 = HEAP16[580078>>1]|0;
   $70 = $69&65535;
   $71 = $68 >> $70;
   $72 = (($67) + ($71))|0;
   $73 = HEAP32[972>>2]|0;
   $74 = (($73) + ($72<<3)|0);
   $75 = (($74) + ($60<<1)|0);
   HEAP16[$75>>1] = $50;
   $76 = $col;
   $77 = (($76) + 1)|0;
   $col = $77;
  }
  $78 = $row;
  $79 = (($78) + 1)|0;
  $row = $79;
 }
 _canon_600_fixed_wb(1311);
 _canon_600_auto_wb();
 _canon_600_coeff();
 $80 = HEAP32[1036>>2]|0;
 $81 = (1023 - ($80))|0;
 $82 = ($81*1109)|0;
 $83 = $82 >>> 9;
 HEAP32[1040>>2] = $83;
 HEAP32[1036>>2] = 0;
 STACKTOP = sp;return;
}
function _canon_s2is() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $1 = $row;
  $2 = ($1>>>0)<(100);
  if (!($2)) {
   label = 6;
   break;
  }
  $3 = HEAP32[944>>2]|0;
  $4 = $row;
  $5 = ($4*3340)|0;
  $6 = (($5) + 3284)|0;
  (_fseek($3,$6,0)|0);
  $7 = HEAP32[944>>2]|0;
  $8 = (_getc($7)|0);
  $9 = ($8|0)>(15);
  if ($9) {
   label = 4;
   break;
  }
  $10 = $row;
  $11 = (($10) + 1)|0;
  $row = $11;
 }
 if ((label|0) == 4) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _getbithuff($nbits,$huff) {
 $nbits = $nbits|0;
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nbits;
 $2 = $huff;
 $3 = $1;
 $4 = ($3|0)>(25);
 if ($4) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $5 = $1;
 $6 = ($5|0)<(0);
 if ($6) {
  HEAP32[1052>>2] = 0;
  HEAP32[1048>>2] = 0;
  HEAP32[1044>>2] = 0;
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $7 = $1;
 $8 = ($7|0)==(0);
 $9 = HEAP32[1048>>2]|0;
 $10 = ($9|0)<(0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 while(1) {
  $11 = HEAP32[1052>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $66 = 0;
  } else {
   $13 = HEAP32[1048>>2]|0;
   $14 = $1;
   $15 = ($13|0)<($14|0);
   if ($15) {
    $16 = HEAP32[944>>2]|0;
    $17 = (_getc_unlocked($16)|0);
    $c = $17;
    $18 = ($17|0)!=(-1);
    if ($18) {
     $19 = HEAP32[1056>>2]|0;
     $20 = ($19|0)!=(0);
     $21 = $c;
     $22 = ($21|0)==(255);
     $or$cond3 = $20 & $22;
     if ($or$cond3) {
      $23 = HEAP32[944>>2]|0;
      $24 = (_getc_unlocked($23)|0);
      $25 = ($24|0)!=(0);
      $27 = $25;
     } else {
      $27 = 0;
     }
     $26 = $27&1;
     HEAP32[1052>>2] = $26;
     $28 = $27 ^ 1;
     $66 = $28;
    } else {
     $66 = 0;
    }
   } else {
    $66 = 0;
   }
  }
  $29 = HEAP32[1044>>2]|0;
  if (!($66)) {
   break;
  }
  $30 = $29 << 8;
  $31 = $c;
  $32 = $31&255;
  $33 = $32&255;
  $34 = (($30) + ($33))|0;
  HEAP32[1044>>2] = $34;
  $35 = HEAP32[1048>>2]|0;
  $36 = (($35) + 8)|0;
  HEAP32[1048>>2] = $36;
 }
 $37 = HEAP32[1048>>2]|0;
 $38 = (32 - ($37))|0;
 $39 = $29 << $38;
 $40 = $1;
 $41 = (32 - ($40))|0;
 $42 = $39 >>> $41;
 $c = $42;
 $43 = $2;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $c;
  $46 = $2;
  $47 = (($46) + ($45<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48&65535;
  $50 = $49 >> 8;
  $51 = HEAP32[1048>>2]|0;
  $52 = (($51) - ($50))|0;
  HEAP32[1048>>2] = $52;
  $53 = $c;
  $54 = $2;
  $55 = (($54) + ($53<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&255;
  $58 = $57&255;
  $c = $58;
 } else {
  $59 = $1;
  $60 = HEAP32[1048>>2]|0;
  $61 = (($60) - ($59))|0;
  HEAP32[1048>>2] = $61;
 }
 $62 = HEAP32[1048>>2]|0;
 $63 = ($62|0)<(0);
 if ($63) {
  _derror();
 }
 $64 = $c;
 $0 = $64;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _make_decoder_ref($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $h = 0, $huff = 0, $i = 0, $j = 0, $len = 0, $max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $source;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 HEAP32[$1>>2] = $3;
 $4 = ((($3)) + -17|0);
 $count = $4;
 $max = 16;
 while(1) {
  $5 = $max;
  $6 = ($5|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $max;
  $8 = $count;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)!=(0);
  $12 = $11 ^ 1;
  if (!($12)) {
   break;
  }
  $13 = $max;
  $14 = (($13) + -1)|0;
  $max = $14;
 }
 $15 = $max;
 $16 = 1 << $15;
 $17 = (1 + ($16))|0;
 $18 = (_calloc($17,2)|0);
 $huff = $18;
 $19 = $huff;
 _merror($19,593248);
 $20 = $max;
 $21 = $20&65535;
 $22 = $huff;
 HEAP16[$22>>1] = $21;
 $len = 1;
 $h = 1;
 while(1) {
  $23 = $len;
  $24 = $max;
  $25 = ($23|0)<=($24|0);
  if (!($25)) {
   break;
  }
  $i = 0;
  while(1) {
   $26 = $i;
   $27 = $len;
   $28 = $count;
   $29 = (($28) + ($27)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ($26|0)<($31|0);
   if (!($32)) {
    break;
   }
   $j = 0;
   while(1) {
    $33 = $j;
    $34 = $max;
    $35 = $len;
    $36 = (($34) - ($35))|0;
    $37 = 1 << $36;
    $38 = ($33|0)<($37|0);
    if (!($38)) {
     break;
    }
    $39 = $h;
    $40 = $max;
    $41 = 1 << $40;
    $42 = ($39|0)<=($41|0);
    if ($42) {
     $43 = $len;
     $44 = $43 << 8;
     $45 = $0;
     $46 = HEAP32[$45>>2]|0;
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $49 = $44 | $48;
     $50 = $49&65535;
     $51 = $h;
     $52 = (($51) + 1)|0;
     $h = $52;
     $53 = $huff;
     $54 = (($53) + ($51<<1)|0);
     HEAP16[$54>>1] = $50;
    }
    $55 = $j;
    $56 = (($55) + 1)|0;
    $j = $56;
   }
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
   $59 = $0;
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 1|0);
   HEAP32[$59>>2] = $61;
  }
  $62 = $len;
  $63 = (($62) + 1)|0;
  $len = $63;
 }
 $64 = $huff;
 STACKTOP = sp;return ($64|0);
}
function _make_decoder($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $source;
 $1 = (_make_decoder_ref($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _crw_init_tables($table,$huff) {
 $table = $table|0;
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $table;
 $1 = $huff;
 $2 = $0;
 $3 = ($2>>>0)>(2);
 if ($3) {
  $0 = 2;
 }
 $4 = $0;
 $5 = (593263 + (($4*29)|0)|0);
 $6 = (_make_decoder($5)|0);
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $0;
 $9 = (593350 + (($8*180)|0)|0);
 $10 = (_make_decoder($9)|0);
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 STACKTOP = sp;return;
}
function _canon_has_lowbits() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $ret = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $test = sp + 16|0;
 $ret = 1;
 $1 = HEAP32[944>>2]|0;
 (_fseek($1,0,0)|0);
 $2 = HEAP32[944>>2]|0;
 (_fread($test,1,16384,$2)|0);
 $i = 540;
 while(1) {
  $3 = $i;
  $4 = ($3>>>0)<(16383);
  if (!($4)) {
   label = 8;
   break;
  }
  $5 = $i;
  $6 = (($test) + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(255);
  if ($9) {
   $10 = $i;
   $11 = (($10) + 1)|0;
   $12 = (($test) + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)!=(0);
   if ($14) {
    label = 5;
    break;
   }
   $ret = 0;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 if ((label|0) == 5) {
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 8) {
  $17 = $ret;
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _canon_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $base = 0, $block = 0, $c = 0, $carry = 0, $diff = 0, $diffbuf = 0, $huff = 0, $i = 0, $leaf = 0, $len = 0, $lowbits = 0, $nblocks = 0, $or$cond = 0, $or$cond3 = 0, $pixel = 0, $pnum = 0, $prow = 0, $r = 0;
 var $row = 0, $save = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 328|0;
 $diffbuf = sp + 32|0;
 $base = sp;
 $carry = 0;
 $pnum = 0;
 $0 = HEAP32[1060>>2]|0;
 _crw_init_tables($0,$huff);
 $1 = (_canon_has_lowbits()|0);
 $lowbits = $1;
 $2 = $lowbits;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  HEAP32[1040>>2] = 1023;
 }
 $4 = HEAP32[944>>2]|0;
 $5 = $lowbits;
 $6 = HEAP16[580244>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($5, $7)|0;
 $9 = HEAP16[580226>>1]|0;
 $10 = $9&65535;
 $11 = Math_imul($8, $10)|0;
 $12 = (($11|0) / 4)&-1;
 $13 = (540 + ($12))|0;
 (_fseek($4,$13,0)|0);
 HEAP32[1056>>2] = 1;
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $14 = $row;
  $15 = HEAP16[580244>>1]|0;
  $16 = $15&65535;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[1032>>2]|0;
  $19 = $row;
  $20 = HEAP16[580226>>1]|0;
  $21 = $20&65535;
  $22 = Math_imul($19, $21)|0;
  $23 = (($18) + ($22<<1)|0);
  $pixel = $23;
  $24 = HEAP16[580244>>1]|0;
  $25 = $24&65535;
  $26 = $row;
  $27 = (($25) - ($26))|0;
  $28 = (8)<($27|0);
  if ($28) {
   $36 = 8;
  } else {
   $29 = HEAP16[580244>>1]|0;
   $30 = $29&65535;
   $31 = $row;
   $32 = (($30) - ($31))|0;
   $36 = $32;
  }
  $33 = HEAP16[580226>>1]|0;
  $34 = $33&65535;
  $35 = Math_imul($36, $34)|0;
  $37 = $35 >> 6;
  $nblocks = $37;
  $block = 0;
  while(1) {
   $38 = $block;
   $39 = $nblocks;
   $40 = ($38|0)<($39|0);
   if (!($40)) {
    break;
   }
   _memset(($diffbuf|0),0,256)|0;
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = ($41|0)<(64);
    if (!($42)) {
     break;
    }
    $43 = $i;
    $44 = ($43|0)>(0);
    $45 = $44&1;
    $46 = (($huff) + ($45<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP16[$47>>1]|0;
    $49 = $48&65535;
    $50 = $i;
    $51 = ($50|0)>(0);
    $52 = $51&1;
    $53 = (($huff) + ($52<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 2|0);
    $56 = (_getbithuff($49,$55)|0);
    $leaf = $56;
    $57 = $leaf;
    $58 = ($57|0)==(0);
    $59 = $i;
    $60 = ($59|0)!=(0);
    $or$cond = $58 & $60;
    if ($or$cond) {
     break;
    }
    $61 = $leaf;
    $62 = ($61|0)==(255);
    if (!($62)) {
     $63 = $leaf;
     $64 = $63 >> 4;
     $65 = $i;
     $66 = (($65) + ($64))|0;
     $i = $66;
     $67 = $leaf;
     $68 = $67 & 15;
     $len = $68;
     $69 = $len;
     $70 = ($69|0)==(0);
     if (!($70)) {
      $71 = $len;
      $72 = (_getbithuff($71,0)|0);
      $diff = $72;
      $73 = $diff;
      $74 = $len;
      $75 = (($74) - 1)|0;
      $76 = 1 << $75;
      $77 = $73 & $76;
      $78 = ($77|0)==(0);
      if ($78) {
       $79 = $len;
       $80 = 1 << $79;
       $81 = (($80) - 1)|0;
       $82 = $diff;
       $83 = (($82) - ($81))|0;
       $diff = $83;
      }
      $84 = $i;
      $85 = ($84|0)<(64);
      if ($85) {
       $86 = $diff;
       $87 = $i;
       $88 = (($diffbuf) + ($87<<2)|0);
       HEAP32[$88>>2] = $86;
      }
     }
    }
    $89 = $i;
    $90 = (($89) + 1)|0;
    $i = $90;
   }
   $91 = $carry;
   $92 = HEAP32[$diffbuf>>2]|0;
   $93 = (($92) + ($91))|0;
   HEAP32[$diffbuf>>2] = $93;
   $94 = HEAP32[$diffbuf>>2]|0;
   $carry = $94;
   $i = 0;
   while(1) {
    $95 = $i;
    $96 = ($95|0)<(64);
    if (!($96)) {
     break;
    }
    $97 = $pnum;
    $98 = (($97) + 1)|0;
    $pnum = $98;
    $99 = HEAP16[580226>>1]|0;
    $100 = $99&65535;
    $101 = (($97|0) % ($100|0))&-1;
    $102 = ($101|0)==(0);
    if ($102) {
     $103 = ((($base)) + 4|0);
     HEAP32[$103>>2] = 512;
     HEAP32[$base>>2] = 512;
    }
    $104 = $i;
    $105 = (($diffbuf) + ($104<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $i;
    $108 = $107 & 1;
    $109 = (($base) + ($108<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($106))|0;
    HEAP32[$109>>2] = $111;
    $112 = $111&65535;
    $113 = $block;
    $114 = $113 << 6;
    $115 = $i;
    $116 = (($114) + ($115))|0;
    $117 = $pixel;
    $118 = (($117) + ($116<<1)|0);
    HEAP16[$118>>1] = $112;
    $119 = $112&65535;
    $120 = $119 >> 10;
    $121 = ($120|0)!=(0);
    if ($121) {
     _derror();
    }
    $122 = $i;
    $123 = (($122) + 1)|0;
    $i = $123;
   }
   $124 = $block;
   $125 = (($124) + 1)|0;
   $block = $125;
  }
  $126 = $lowbits;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = HEAP32[944>>2]|0;
   $129 = (_ftell($128)|0);
   $save = $129;
   $130 = HEAP32[944>>2]|0;
   $131 = $row;
   $132 = HEAP16[580226>>1]|0;
   $133 = $132&65535;
   $134 = Math_imul($131, $133)|0;
   $135 = (($134|0) / 4)&-1;
   $136 = (26 + ($135))|0;
   (_fseek($130,$136,0)|0);
   $137 = $pixel;
   $prow = $137;
   $i = 0;
   while(1) {
    $138 = $i;
    $139 = HEAP16[580226>>1]|0;
    $140 = $139&65535;
    $141 = $140<<1;
    $142 = ($138|0)<($141|0);
    $143 = HEAP32[944>>2]|0;
    if (!($142)) {
     break;
    }
    $144 = (_getc_unlocked($143)|0);
    $c = $144;
    $r = 0;
    while(1) {
     $145 = $r;
     $146 = ($145|0)<(8);
     if (!($146)) {
      break;
     }
     $147 = $prow;
     $148 = HEAP16[$147>>1]|0;
     $149 = $148&65535;
     $150 = $149 << 2;
     $151 = $c;
     $152 = $r;
     $153 = $151 >> $152;
     $154 = $153 & 3;
     $155 = (($150) + ($154))|0;
     $val = $155;
     $156 = HEAP16[580226>>1]|0;
     $157 = $156&65535;
     $158 = ($157|0)==(2672);
     $159 = $val;
     $160 = ($159|0)<(512);
     $or$cond3 = $158 & $160;
     if ($or$cond3) {
      $161 = $val;
      $162 = (($161) + 2)|0;
      $val = $162;
     }
     $163 = $val;
     $164 = $163&65535;
     $165 = $prow;
     HEAP16[$165>>1] = $164;
     $166 = $r;
     $167 = (($166) + 2)|0;
     $r = $167;
     $168 = $prow;
     $169 = ((($168)) + 2|0);
     $prow = $169;
    }
    $170 = $i;
    $171 = (($170) + 1)|0;
    $i = $171;
   }
   $172 = $save;
   (_fseek($143,$172,0)|0);
  }
  $173 = $row;
  $174 = (($173) + 8)|0;
  $row = $174;
 }
 $c = 0;
 while(1) {
  $175 = $c;
  $176 = ($175|0)<(2);
  if (!($176)) {
   break;
  }
  $177 = $c;
  $178 = (($huff) + ($177<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  _free($179);
  $180 = $c;
  $181 = (($180) + 1)|0;
  $c = $181;
 }
 STACKTOP = sp;return;
}
function _ljpeg_start($jh,$info_only) {
 $jh = $jh|0;
 $info_only = $info_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $data = 0, $dp = 0, $len = 0, $or$cond = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 24|0;
 $dp = sp;
 $1 = $jh;
 $2 = $info_only;
 $3 = $1;
 _memset(($3|0),0,476)|0;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 HEAP32[$5>>2] = 2147483647;
 $6 = HEAP32[944>>2]|0;
 (_getc_unlocked($6)|0);
 $7 = HEAP32[944>>2]|0;
 $8 = (_getc_unlocked($7)|0);
 $9 = ($8|0)!=(216);
 if ($9) {
  $0 = 0;
  $285 = $0;
  STACKTOP = sp;return ($285|0);
 }
 while(1) {
  $10 = HEAP32[944>>2]|0;
  $11 = (_fread($data,2,2,$10)|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 4;
   break;
  }
  $13 = HEAP8[$data>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = ((($data)) + 1|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $15 | $18;
  $20 = $19&65535;
  $tag = $20;
  $21 = ((($data)) + 2|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 8;
  $25 = ((($data)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $24 | $27;
  $29 = (($28) - 2)|0;
  $30 = $29&65535;
  $len = $30;
  $31 = $tag;
  $32 = $31&65535;
  $33 = ($32|0)<=(65280);
  if ($33) {
   label = 6;
   break;
  }
  $34 = $len;
  $35 = $34&65535;
  $36 = HEAP32[944>>2]|0;
  (_fread($data,1,$35,$36)|0);
  $37 = $tag;
  $38 = $37&65535;
  L8: do {
   switch ($38|0) {
   case 65475:  {
    $39 = ((($data)) + 7|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = $41 >> 4;
    $43 = ((($data)) + 7|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $45 & 15;
    $47 = Math_imul($42, $46)|0;
    $48 = (($47) - 1)|0;
    $49 = $48 & 3;
    $50 = $1;
    $51 = ((($50)) + 20|0);
    HEAP32[$51>>2] = $49;
    label = 9;
    break;
   }
   case 65472: case 65473:  {
    label = 9;
    break;
   }
   case 65476:  {
    $95 = $2;
    $96 = ($95|0)!=(0);
    if (!($96)) {
     HEAP32[$dp>>2] = $data;
     while(1) {
      $97 = HEAP32[$dp>>2]|0;
      $98 = $len;
      $99 = $98&65535;
      $100 = (($data) + ($99)|0);
      $101 = ($97>>>0)<($100>>>0);
      if (!($101)) {
       break L8;
      }
      $102 = HEAP32[$dp>>2]|0;
      $103 = ((($102)) + 1|0);
      HEAP32[$dp>>2] = $103;
      $104 = HEAP8[$102>>0]|0;
      $105 = $104&255;
      $c = $105;
      $106 = $105&65535;
      $107 = $106 & -20;
      $108 = ($107|0)!=(0);
      $109 = $108 ^ 1;
      if (!($109)) {
       break L8;
      }
      $110 = (_make_decoder_ref($dp)|0);
      $111 = $c;
      $112 = $111&65535;
      $113 = $1;
      $114 = ((($113)) + 312|0);
      $115 = (($114) + ($112<<2)|0);
      HEAP32[$115>>2] = $110;
      $116 = $c;
      $117 = $116&65535;
      $118 = $1;
      $119 = ((($118)) + 392|0);
      $120 = (($119) + ($117<<2)|0);
      HEAP32[$120>>2] = $110;
     }
    }
    break;
   }
   case 65498:  {
    $121 = HEAP8[$data>>0]|0;
    $122 = $121&255;
    $123 = $122<<1;
    $124 = (1 + ($123))|0;
    $125 = (($data) + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = $1;
    $129 = ((($128)) + 24|0);
    HEAP32[$129>>2] = $127;
    $130 = HEAP8[$data>>0]|0;
    $131 = $130&255;
    $132 = $131<<1;
    $133 = (3 + ($132))|0;
    $134 = (($data) + ($133)|0);
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 15;
    $138 = $1;
    $139 = ((($138)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) - ($137))|0;
    HEAP32[$139>>2] = $141;
    break;
   }
   case 65499:  {
    $c = 0;
    while(1) {
     $142 = $c;
     $143 = $142&65535;
     $144 = ($143|0)<(64);
     if (!($144)) {
      break L8;
     }
     $145 = $c;
     $146 = $145&65535;
     $147 = $146<<1;
     $148 = (($147) + 1)|0;
     $149 = (($data) + ($148)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = $151 << 8;
     $153 = $c;
     $154 = $153&65535;
     $155 = $154<<1;
     $156 = (($155) + 2)|0;
     $157 = (($data) + ($156)|0);
     $158 = HEAP8[$157>>0]|0;
     $159 = $158&255;
     $160 = $152 | $159;
     $161 = $160&65535;
     $162 = $c;
     $163 = $162&65535;
     $164 = $1;
     $165 = ((($164)) + 56|0);
     $166 = (($165) + ($163<<1)|0);
     HEAP16[$166>>1] = $161;
     $167 = $c;
     $168 = (($167) + 1)<<16>>16;
     $c = $168;
    }
    break;
   }
   case 65501:  {
    $169 = HEAP8[$data>>0]|0;
    $170 = $169&255;
    $171 = $170 << 8;
    $172 = ((($data)) + 1|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $171 | $174;
    $176 = $1;
    $177 = ((($176)) + 28|0);
    HEAP32[$177>>2] = $175;
    break;
   }
   default: {
   }
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $52 = $tag;
   $53 = $52&65535;
   $54 = $53 & 255;
   $55 = $1;
   HEAP32[$55>>2] = $54;
   $56 = HEAP8[$data>>0]|0;
   $57 = $56&255;
   $58 = $1;
   $59 = ((($58)) + 4|0);
   HEAP32[$59>>2] = $57;
   $60 = ((($data)) + 1|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $62 << 8;
   $64 = ((($data)) + 2|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $63 | $66;
   $68 = $1;
   $69 = ((($68)) + 8|0);
   HEAP32[$69>>2] = $67;
   $70 = ((($data)) + 3|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $72 << 8;
   $74 = ((($data)) + 4|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $73 | $76;
   $78 = $1;
   $79 = ((($78)) + 12|0);
   HEAP32[$79>>2] = $77;
   $80 = ((($data)) + 5|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $1;
   $84 = ((($83)) + 20|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($82) + ($85))|0;
   $87 = $1;
   $88 = ((($87)) + 16|0);
   HEAP32[$88>>2] = $86;
   $89 = $len;
   $90 = $89&65535;
   $91 = ($90|0)!=(9);
   $92 = HEAP32[1064>>2]|0;
   $93 = ($92|0)!=(0);
   $or$cond = $91 | $93;
   if (!($or$cond)) {
    $94 = HEAP32[944>>2]|0;
    (_getc($94)|0);
   }
  }
  $178 = $tag;
  $179 = $178&65535;
  $180 = ($179|0)!=(65498);
  if (!($180)) {
   label = 22;
   break;
  }
 }
 if ((label|0) == 4) {
  $0 = 0;
  $285 = $0;
  STACKTOP = sp;return ($285|0);
 }
 else if ((label|0) == 6) {
  $0 = 0;
  $285 = $0;
  STACKTOP = sp;return ($285|0);
 }
 else if ((label|0) == 22) {
  $181 = $1;
  $182 = ((($181)) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)>(16);
  if (!($184)) {
   $185 = $1;
   $186 = ((($185)) + 16|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)>(6);
   if (!($188)) {
    $189 = $1;
    $190 = ((($189)) + 4|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($191|0)!=(0);
    if ($192) {
     $193 = $1;
     $194 = ((($193)) + 8|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($195|0)!=(0);
     if ($196) {
      $197 = $1;
      $198 = ((($197)) + 12|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($199|0)!=(0);
      if ($200) {
       $201 = $1;
       $202 = ((($201)) + 16|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = ($203|0)!=(0);
       if ($204) {
        $205 = $2;
        $206 = ($205|0)!=(0);
        if ($206) {
         $0 = 1;
         $285 = $0;
         STACKTOP = sp;return ($285|0);
        }
        $207 = $1;
        $208 = ((($207)) + 312|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = ($209|0)!=(0|0);
        if (!($210)) {
         $0 = 0;
         $285 = $0;
         STACKTOP = sp;return ($285|0);
        }
        $c = 0;
        while(1) {
         $211 = $c;
         $212 = $211&65535;
         $213 = ($212|0)<(19);
         if (!($213)) {
          break;
         }
         $214 = $c;
         $215 = $214&65535;
         $216 = (($215) + 1)|0;
         $217 = $1;
         $218 = ((($217)) + 312|0);
         $219 = (($218) + ($216<<2)|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = ($220|0)!=(0|0);
         if (!($221)) {
          $222 = $c;
          $223 = $222&65535;
          $224 = $1;
          $225 = ((($224)) + 312|0);
          $226 = (($225) + ($223<<2)|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = $c;
          $229 = $228&65535;
          $230 = (($229) + 1)|0;
          $231 = $1;
          $232 = ((($231)) + 312|0);
          $233 = (($232) + ($230<<2)|0);
          HEAP32[$233>>2] = $227;
         }
         $234 = $c;
         $235 = (($234) + 1)<<16>>16;
         $c = $235;
        }
        $236 = $1;
        $237 = ((($236)) + 20|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = ($238|0)!=(0);
        L52: do {
         if ($239) {
          $c = 0;
          while(1) {
           $240 = $c;
           $241 = $240&65535;
           $242 = ($241|0)<(4);
           if (!($242)) {
            break;
           }
           $243 = $1;
           $244 = ((($243)) + 312|0);
           $245 = ((($244)) + 4|0);
           $246 = HEAP32[$245>>2]|0;
           $247 = $c;
           $248 = $247&65535;
           $249 = (2 + ($248))|0;
           $250 = $1;
           $251 = ((($250)) + 312|0);
           $252 = (($251) + ($249<<2)|0);
           HEAP32[$252>>2] = $246;
           $253 = $c;
           $254 = (($253) + 1)<<16>>16;
           $c = $254;
          }
          $c = 0;
          while(1) {
           $255 = $c;
           $256 = $255&65535;
           $257 = $1;
           $258 = ((($257)) + 20|0);
           $259 = HEAP32[$258>>2]|0;
           $260 = ($256|0)<($259|0);
           if (!($260)) {
            break L52;
           }
           $261 = $1;
           $262 = ((($261)) + 312|0);
           $263 = HEAP32[$262>>2]|0;
           $264 = $c;
           $265 = $264&65535;
           $266 = (1 + ($265))|0;
           $267 = $1;
           $268 = ((($267)) + 312|0);
           $269 = (($268) + ($266<<2)|0);
           HEAP32[$269>>2] = $263;
           $270 = $c;
           $271 = (($270) + 1)<<16>>16;
           $c = $271;
          }
         }
        } while(0);
        $272 = $1;
        $273 = ((($272)) + 12|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = $1;
        $276 = ((($275)) + 16|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = Math_imul($274, $277)|0;
        $279 = (_calloc($278,4)|0);
        $280 = $1;
        $281 = ((($280)) + 472|0);
        HEAP32[$281>>2] = $279;
        $282 = $1;
        $283 = ((($282)) + 472|0);
        $284 = HEAP32[$283>>2]|0;
        _merror($284,593890);
        HEAP32[1056>>2] = 1;
        $0 = 1;
        $285 = $0;
        STACKTOP = sp;return ($285|0);
       }
      }
     }
    }
   }
  }
  $0 = 0;
  $285 = $0;
  STACKTOP = sp;return ($285|0);
 }
 return (0)|0;
}
function _ljpeg_end($jh) {
 $jh = $jh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $jh;
 $c = 0;
 while(1) {
  $1 = $c;
  $2 = ($1|0)<(4);
  if (!($2)) {
   break;
  }
  $3 = $c;
  $4 = $0;
  $5 = ((($4)) + 392|0);
  $6 = (($5) + ($3<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $c;
   $10 = $0;
   $11 = ((($10)) + 392|0);
   $12 = (($11) + ($9<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _free($13);
  }
  $14 = $c;
  $15 = (($14) + 1)|0;
  $c = $15;
 }
 $16 = $0;
 $17 = ((($16)) + 472|0);
 $18 = HEAP32[$17>>2]|0;
 _free($18);
 STACKTOP = sp;return;
}
function _ljpeg_diff($huff) {
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0, $len = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $huff;
 $2 = $1;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $1;
 $6 = ((($5)) + 2|0);
 $7 = (_getbithuff($4,$6)|0);
 $len = $7;
 $8 = $len;
 $9 = ($8|0)==(16);
 if ($9) {
  $10 = HEAP32[1064>>2]|0;
  $11 = ($10|0)==(0);
  $12 = HEAP32[1064>>2]|0;
  $13 = ($12>>>0)>=(16842752);
  $or$cond = $11 | $13;
  if ($or$cond) {
   $0 = -32768;
   $28 = $0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $14 = $len;
 $15 = (_getbithuff($14,0)|0);
 $diff = $15;
 $16 = $diff;
 $17 = $len;
 $18 = (($17) - 1)|0;
 $19 = 1 << $18;
 $20 = $16 & $19;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = $len;
  $23 = 1 << $22;
  $24 = (($23) - 1)|0;
  $25 = $diff;
  $26 = (($25) - ($24))|0;
  $diff = $26;
 }
 $27 = $diff;
 $0 = $27;
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _ljpeg_row($jrow,$jh) {
 $jrow = $jrow|0;
 $jh = $jh|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0;
 var $col = 0, $diff = 0, $mark = 0, $or$cond = 0, $pred = 0, $row = 0, $spred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = sp;
 $0 = $jrow;
 $1 = $jh;
 $spred = 0;
 $mark = 0;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($2, $5)|0;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6|0) % ($9|0))&-1;
 $11 = ($10|0)==(0);
 if ($11) {
  $c = 0;
  while(1) {
   $12 = $c;
   $13 = ($12|0)<(6);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) - 1)|0;
   $18 = 1 << $17;
   $19 = $c;
   $20 = $1;
   $21 = ((($20)) + 32|0);
   $22 = (($21) + ($19<<2)|0);
   HEAP32[$22>>2] = $18;
   $23 = $c;
   $24 = (($23) + 1)|0;
   $c = $24;
  }
  $25 = $0;
  $26 = ($25|0)!=(0);
  L7: do {
   if ($26) {
    $27 = HEAP32[944>>2]|0;
    (_fseek($27,-2,1)|0);
    while(1) {
     $28 = $mark;
     $29 = $28&65535;
     $30 = $29 << 8;
     $31 = HEAP32[944>>2]|0;
     $32 = (_getc_unlocked($31)|0);
     $c = $32;
     $33 = (($30) + ($32))|0;
     $34 = $33&65535;
     $mark = $34;
     $35 = $c;
     $36 = ($35|0)!=(-1);
     if (!($36)) {
      break L7;
     }
     $37 = $mark;
     $38 = $37&65535;
     $39 = $38 >> 4;
     $40 = ($39|0)!=(4093);
     if (!($40)) {
      break;
     }
    }
   }
  } while(0);
  (_getbithuff(-1,0)|0);
 }
 $c = 0;
 while(1) {
  $41 = $c;
  $42 = ($41|0)<(3);
  if (!($42)) {
   break;
  }
  $43 = $1;
  $44 = ((($43)) + 472|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $1;
  $47 = ((($46)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $1;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $53 = $0;
  $54 = $c;
  $55 = (($53) + ($54))|0;
  $56 = $55 & 1;
  $57 = Math_imul($52, $56)|0;
  $58 = (($45) + ($57<<1)|0);
  $59 = $c;
  $60 = (($row) + ($59<<2)|0);
  HEAP32[$60>>2] = $58;
  $61 = $c;
  $62 = (($61) + 1)|0;
  $c = $62;
 }
 $col = 0;
 while(1) {
  $63 = $col;
  $64 = $1;
  $65 = ((($64)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)<($66|0);
  if (!($67)) {
   break;
  }
  $c = 0;
  while(1) {
   $68 = $c;
   $69 = $1;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($68|0)<($71|0);
   if (!($72)) {
    break;
   }
   $73 = $c;
   $74 = $1;
   $75 = ((($74)) + 312|0);
   $76 = (($75) + ($73<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_ljpeg_diff($77)|0);
   $diff = $78;
   $79 = $1;
   $80 = ((($79)) + 20|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0);
   if ($82) {
    $83 = $c;
    $84 = $1;
    $85 = ((($84)) + 20|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($83|0)<=($86|0);
    if ($87) {
     $88 = $col;
     $89 = $c;
     $90 = $88 | $89;
     $91 = ($90|0)!=(0);
     if ($91) {
      $92 = $spred;
      $pred = $92;
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     label = 0;
     $93 = $col;
     $94 = ($93|0)!=(0);
     if ($94) {
      $95 = $1;
      $96 = ((($95)) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (0 - ($97))|0;
      $99 = HEAP32[$row>>2]|0;
      $100 = (($99) + ($98<<1)|0);
      $101 = HEAP16[$100>>1]|0;
      $102 = $101&65535;
      $pred = $102;
      break;
     } else {
      $103 = $diff;
      $104 = $c;
      $105 = $1;
      $106 = ((($105)) + 32|0);
      $107 = (($106) + ($104<<2)|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($108) + ($103))|0;
      HEAP32[$107>>2] = $109;
      $110 = $diff;
      $111 = (($109) - ($110))|0;
      $pred = $111;
      break;
     }
    }
   } while(0);
   $112 = $0;
   $113 = ($112|0)!=(0);
   $114 = $col;
   $115 = ($114|0)!=(0);
   $or$cond = $113 & $115;
   L34: do {
    if ($or$cond) {
     $116 = $1;
     $117 = ((($116)) + 24|0);
     $118 = HEAP32[$117>>2]|0;
     switch ($118|0) {
     case 1:  {
      break L34;
      break;
     }
     case 2:  {
      $119 = ((($row)) + 4|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = HEAP16[$120>>1]|0;
      $122 = $121&65535;
      $pred = $122;
      break L34;
      break;
     }
     case 3:  {
      $123 = $1;
      $124 = ((($123)) + 16|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = (0 - ($125))|0;
      $127 = ((($row)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + ($126<<1)|0);
      $130 = HEAP16[$129>>1]|0;
      $131 = $130&65535;
      $pred = $131;
      break L34;
      break;
     }
     case 4:  {
      $132 = $pred;
      $133 = ((($row)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = HEAP16[$134>>1]|0;
      $136 = $135&65535;
      $137 = (($132) + ($136))|0;
      $138 = $1;
      $139 = ((($138)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (0 - ($140))|0;
      $142 = ((($row)) + 4|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (($143) + ($141<<1)|0);
      $145 = HEAP16[$144>>1]|0;
      $146 = $145&65535;
      $147 = (($137) - ($146))|0;
      $pred = $147;
      break L34;
      break;
     }
     case 5:  {
      $148 = $pred;
      $149 = ((($row)) + 4|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = HEAP16[$150>>1]|0;
      $152 = $151&65535;
      $153 = $1;
      $154 = ((($153)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (0 - ($155))|0;
      $157 = ((($row)) + 4|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = (($158) + ($156<<1)|0);
      $160 = HEAP16[$159>>1]|0;
      $161 = $160&65535;
      $162 = (($152) - ($161))|0;
      $163 = $162 >> 1;
      $164 = (($148) + ($163))|0;
      $pred = $164;
      break L34;
      break;
     }
     case 6:  {
      $165 = ((($row)) + 4|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = $pred;
      $170 = $1;
      $171 = ((($170)) + 16|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = (0 - ($172))|0;
      $174 = ((($row)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($175) + ($173<<1)|0);
      $177 = HEAP16[$176>>1]|0;
      $178 = $177&65535;
      $179 = (($169) - ($178))|0;
      $180 = $179 >> 1;
      $181 = (($168) + ($180))|0;
      $pred = $181;
      break L34;
      break;
     }
     case 7:  {
      $182 = $pred;
      $183 = ((($row)) + 4|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = HEAP16[$184>>1]|0;
      $186 = $185&65535;
      $187 = (($182) + ($186))|0;
      $188 = $187 >> 1;
      $pred = $188;
      break L34;
      break;
     }
     default: {
      $pred = 0;
      break L34;
     }
     }
    }
   } while(0);
   $189 = $pred;
   $190 = $diff;
   $191 = (($189) + ($190))|0;
   $192 = $191&65535;
   $193 = HEAP32[$row>>2]|0;
   HEAP16[$193>>1] = $192;
   $194 = $192&65535;
   $195 = $1;
   $196 = ((($195)) + 4|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $194 >> $197;
   $199 = ($198|0)!=(0);
   if ($199) {
    _derror();
   }
   $200 = $c;
   $201 = $1;
   $202 = ((($201)) + 20|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ($200|0)<=($203|0);
   if ($204) {
    $205 = HEAP32[$row>>2]|0;
    $206 = HEAP16[$205>>1]|0;
    $207 = $206&65535;
    $spred = $207;
   }
   $208 = HEAP32[$row>>2]|0;
   $209 = ((($208)) + 2|0);
   HEAP32[$row>>2] = $209;
   $210 = ((($row)) + 4|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ((($211)) + 2|0);
   HEAP32[$210>>2] = $212;
   $213 = $c;
   $214 = (($213) + 1)|0;
   $c = $214;
  }
  $215 = $col;
  $216 = (($215) + 1)|0;
  $col = $216;
 }
 $217 = ((($row)) + 8|0);
 $218 = HEAP32[$217>>2]|0;
 STACKTOP = sp;return ($218|0);
}
function _lossless_jpeg_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $i = 0, $j = 0, $jcol = 0, $jh = 0, $jidx = 0, $jrow = 0, $jwide = 0, $row = 0, $rp = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp + 4|0;
 $row = 0;
 $col = 0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = ((($jh)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($jh)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($3, $5)|0;
 $jwide = $6;
 $jrow = 0;
 while(1) {
  $7 = $jrow;
  $8 = ((($jh)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $jrow;
  $12 = (_ljpeg_row($11,$jh)|0);
  $rp = $12;
  $13 = HEAP32[1068>>2]|0;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $jrow;
   $17 = $16 & 1;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = HEAP16[580074>>1]|0;
    $20 = $19&65535;
    $21 = (($20) - 1)|0;
    $22 = $jrow;
    $23 = (($22|0) / 2)&-1;
    $24 = (($21) - ($23))|0;
    $27 = $24;
   } else {
    $25 = $jrow;
    $26 = (($25|0) / 2)&-1;
    $27 = $26;
   }
   $row = $27;
  }
  $jcol = 0;
  while(1) {
   $28 = $jcol;
   $29 = $jwide;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $rp;
   $32 = ((($31)) + 2|0);
   $rp = $32;
   $33 = HEAP16[$31>>1]|0;
   $34 = $33&65535;
   $35 = (448962 + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $val = $37;
   $38 = HEAP16[580246>>1]|0;
   $39 = ($38<<16>>16)!=(0);
   if ($39) {
    $40 = $jrow;
    $41 = $jwide;
    $42 = Math_imul($40, $41)|0;
    $43 = $jcol;
    $44 = (($42) + ($43))|0;
    $jidx = $44;
    $45 = $jidx;
    $46 = HEAP16[(580248)>>1]|0;
    $47 = $46&65535;
    $48 = HEAP16[580244>>1]|0;
    $49 = $48&65535;
    $50 = Math_imul($47, $49)|0;
    $51 = (($45|0) / ($50|0))&-1;
    $i = $51;
    $52 = $i;
    $53 = HEAP16[580246>>1]|0;
    $54 = $53&65535;
    $55 = ($52|0)>=($54|0);
    $56 = $55&1;
    $j = $56;
    if ($55) {
     $57 = HEAP16[580246>>1]|0;
     $58 = $57&65535;
     $i = $58;
    }
    $59 = $i;
    $60 = HEAP16[(580248)>>1]|0;
    $61 = $60&65535;
    $62 = HEAP16[580244>>1]|0;
    $63 = $62&65535;
    $64 = Math_imul($61, $63)|0;
    $65 = Math_imul($59, $64)|0;
    $66 = $jidx;
    $67 = (($66) - ($65))|0;
    $jidx = $67;
    $68 = $jidx;
    $69 = $j;
    $70 = (1 + ($69))|0;
    $71 = (580246 + ($70<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = (($68|0) / ($73|0))&-1;
    $row = $74;
    $75 = $jidx;
    $76 = $j;
    $77 = (1 + ($76))|0;
    $78 = (580246 + ($77<<1)|0);
    $79 = HEAP16[$78>>1]|0;
    $80 = $79&65535;
    $81 = (($75|0) % ($80|0))&-1;
    $82 = $i;
    $83 = HEAP16[(580248)>>1]|0;
    $84 = $83&65535;
    $85 = Math_imul($82, $84)|0;
    $86 = (($81) + ($85))|0;
    $col = $86;
   }
   $87 = HEAP16[580226>>1]|0;
   $88 = $87&65535;
   $89 = ($88|0)==(3984);
   if ($89) {
    $90 = $col;
    $91 = (($90) - 2)|0;
    $col = $91;
    $92 = ($91|0)<(0);
    if ($92) {
     $93 = $row;
     $94 = (($93) + -1)|0;
     $row = $94;
     $95 = HEAP16[580226>>1]|0;
     $96 = $95&65535;
     $97 = $col;
     $98 = (($97) + ($96))|0;
     $col = $98;
    }
   }
   $99 = $row;
   $100 = HEAP16[580244>>1]|0;
   $101 = $100&65535;
   $102 = ($99>>>0)<($101>>>0);
   if ($102) {
    $103 = $val;
    $104 = $103&65535;
    $105 = $row;
    $106 = HEAP16[580226>>1]|0;
    $107 = $106&65535;
    $108 = Math_imul($105, $107)|0;
    $109 = $col;
    $110 = (($108) + ($109))|0;
    $111 = HEAP32[1032>>2]|0;
    $112 = (($111) + ($110<<1)|0);
    HEAP16[$112>>1] = $104;
   }
   $113 = $col;
   $114 = (($113) + 1)|0;
   $col = $114;
   $115 = HEAP16[580226>>1]|0;
   $116 = $115&65535;
   $117 = ($114|0)>=($116|0);
   if ($117) {
    $118 = $row;
    $119 = (($118) + 1)|0;
    $row = $119;
    $col = 0;
   }
   $120 = $jcol;
   $121 = (($120) + 1)|0;
   $jcol = $121;
  }
  $122 = $jrow;
  $123 = (($122) + 1)|0;
  $jrow = $123;
 }
 _ljpeg_end($jh);
 STACKTOP = sp;return;
}
function _canon_sraw_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $cp = 0, $ecol = 0, $hue = 0, $ip = 0, $jcol = 0, $jh = 0, $jrow = 0, $jwide = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pix = 0, $row = 0, $rp = 0, $scol = 0, $slice = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $jh = sp + 92|0;
 $pix = sp + 40|0;
 $v = sp + 24|0;
 $rp = 0;
 $jrow = 0;
 $jcol = 0;
 ;HEAP32[$v>>2]=0|0;HEAP32[$v+4>>2]=0|0;HEAP32[$v+8>>2]=0|0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = ((($jh)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(4);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($jh)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 1;
 HEAP32[$5>>2] = $7;
 $8 = ((($jh)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($7, $9)|0;
 $jwide = $10;
 $slice = 0;
 $ecol = 0;
 while(1) {
  $11 = $slice;
  $12 = HEAP16[580246>>1]|0;
  $13 = $12&65535;
  $14 = ($11|0)<=($13|0);
  if (!($14)) {
   break;
  }
  $15 = $ecol;
  $scol = $15;
  $16 = HEAP16[(580248)>>1]|0;
  $17 = $16&65535;
  $18 = $17<<1;
  $19 = ((($jh)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18|0) / ($20|0))&-1;
  $22 = $ecol;
  $23 = (($22) + ($21))|0;
  $ecol = $23;
  $24 = HEAP16[580246>>1]|0;
  $25 = ($24<<16>>16)!=(0);
  if ($25) {
   $26 = $ecol;
   $27 = HEAP16[580226>>1]|0;
   $28 = $27&65535;
   $29 = (($28) - 1)|0;
   $30 = ($26|0)>($29|0);
   if ($30) {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $31 = HEAP16[580226>>1]|0;
   $32 = $31&65535;
   $33 = $32 & -2;
   $ecol = $33;
  }
  $row = 0;
  while(1) {
   $34 = $row;
   $35 = HEAP16[580074>>1]|0;
   $36 = $35&65535;
   $37 = ($34|0)<($36|0);
   if (!($37)) {
    break;
   }
   $38 = HEAP32[972>>2]|0;
   $39 = $row;
   $40 = HEAP16[580076>>1]|0;
   $41 = $40&65535;
   $42 = Math_imul($39, $41)|0;
   $43 = (($38) + ($42<<3)|0);
   $ip = $43;
   $44 = $scol;
   $col = $44;
   while(1) {
    $45 = $col;
    $46 = $ecol;
    $47 = ($45|0)<($46|0);
    if (!($47)) {
     break;
    }
    $48 = $jwide;
    $49 = $jcol;
    $50 = (($49|0) % ($48|0))&-1;
    $jcol = $50;
    $51 = ($50|0)==(0);
    if ($51) {
     $52 = $jrow;
     $53 = (($52) + 1)|0;
     $jrow = $53;
     $54 = (_ljpeg_row($52,$jh)|0);
     $rp = $54;
    }
    $55 = $col;
    $56 = HEAP16[580076>>1]|0;
    $57 = $56&65535;
    $58 = ($55|0)>=($57|0);
    if (!($58)) {
     $c = 0;
     while(1) {
      $59 = $c;
      $60 = ((($jh)) + 16|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) - 2)|0;
      $63 = ($59|0)<($62|0);
      $64 = $jcol;
      if (!($63)) {
       break;
      }
      $65 = $c;
      $66 = (($64) + ($65))|0;
      $67 = $rp;
      $68 = (($67) + ($66<<1)|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $col;
      $71 = $c;
      $72 = $71 >> 1;
      $73 = HEAP16[580076>>1]|0;
      $74 = $73&65535;
      $75 = Math_imul($72, $74)|0;
      $76 = (($70) + ($75))|0;
      $77 = $c;
      $78 = $77 & 1;
      $79 = (($76) + ($78))|0;
      $80 = $ip;
      $81 = (($80) + ($79<<3)|0);
      HEAP16[$81>>1] = $69;
      $82 = $c;
      $83 = (($82) + 1)|0;
      $c = $83;
     }
     $84 = ((($jh)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($64) + ($85))|0;
     $87 = (($86) - 2)|0;
     $88 = $rp;
     $89 = (($88) + ($87<<1)|0);
     $90 = HEAP16[$89>>1]|0;
     $91 = $90 << 16 >> 16;
     $92 = (($91) - 16384)|0;
     $93 = $92&65535;
     $94 = $col;
     $95 = $ip;
     $96 = (($95) + ($94<<3)|0);
     $97 = ((($96)) + 2|0);
     HEAP16[$97>>1] = $93;
     $98 = $jcol;
     $99 = ((($jh)) + 16|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (($98) + ($100))|0;
     $102 = (($101) - 1)|0;
     $103 = $rp;
     $104 = (($103) + ($102<<1)|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = $105 << 16 >> 16;
     $107 = (($106) - 16384)|0;
     $108 = $107&65535;
     $109 = $col;
     $110 = $ip;
     $111 = (($110) + ($109<<3)|0);
     $112 = ((($111)) + 4|0);
     HEAP16[$112>>1] = $108;
    }
    $113 = $col;
    $114 = (($113) + 2)|0;
    $col = $114;
    $115 = ((($jh)) + 16|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $jcol;
    $118 = (($117) + ($116))|0;
    $jcol = $118;
   }
   $119 = ((($jh)) + 16|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $120 >> 1;
   $122 = (($121) - 1)|0;
   $123 = $row;
   $124 = (($123) + ($122))|0;
   $row = $124;
  }
  $125 = $slice;
  $126 = (($125) + 1)|0;
  $slice = $126;
 }
 $cp = 593904;
 while(1) {
  $127 = $cp;
  $128 = HEAP8[$127>>0]|0;
  $129 = $128 << 24 >> 24;
  $130 = ($129|0)!=(0);
  if (!($130)) {
   break;
  }
  $131 = $cp;
  $132 = HEAP8[$131>>0]|0;
  $133 = $132 << 24 >> 24;
  $134 = (_isdigit($133)|0);
  $135 = ($134|0)!=(0);
  $136 = $135 ^ 1;
  if (!($136)) {
   break;
  }
  $137 = $cp;
  $138 = ((($137)) + 1|0);
  $cp = $138;
 }
 $139 = $cp;
 $140 = ((($v)) + 4|0);
 $141 = ((($v)) + 8|0);
 HEAP32[$vararg_buffer>>2] = $v;
 $vararg_ptr10 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $140;
 $vararg_ptr11 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $141;
 (_sscanf($139,593968,$vararg_buffer)|0);
 $142 = HEAP32[$v>>2]|0;
 $143 = ($142*1000)|0;
 $144 = ((($v)) + 4|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + ($145))|0;
 $147 = ($146*1000)|0;
 $148 = ((($v)) + 8|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + ($149))|0;
 $ver = $150;
 $151 = ((($jh)) + 20|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($152) + 1)|0;
 $154 = $153 << 2;
 $hue = $154;
 $155 = HEAP32[1072>>2]|0;
 $156 = ($155>>>0)>=(2147484289);
 if ($156) {
  label = 28;
 } else {
  $157 = HEAP32[1072>>2]|0;
  $158 = ($157|0)==(-2147483112);
  $159 = $ver;
  $160 = ($159|0)>(1000006);
  $or$cond = $158 & $160;
  if ($or$cond) {
   label = 28;
  }
 }
 if ((label|0) == 28) {
  $161 = ((($jh)) + 20|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $162 << 1;
  $hue = $163;
 }
 $164 = HEAP32[972>>2]|0;
 $ip = $164;
 $165 = $ip;
 $rp = $165;
 $row = 0;
 while(1) {
  $166 = $row;
  $167 = HEAP16[580074>>1]|0;
  $168 = $167&65535;
  $169 = ($166|0)<($168|0);
  if (!($169)) {
   break;
  }
  $170 = $row;
  $171 = ((($jh)) + 20|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $172 >> 1;
  $174 = $170 & $173;
  $175 = ($174|0)!=(0);
  L47: do {
   if ($175) {
    $col = 0;
    while(1) {
     $176 = $col;
     $177 = HEAP16[580076>>1]|0;
     $178 = $177&65535;
     $179 = ($176|0)<($178|0);
     if (!($179)) {
      break L47;
     }
     $c = 1;
     while(1) {
      $180 = $c;
      $181 = ($180|0)<(3);
      if (!($181)) {
       break;
      }
      $182 = $row;
      $183 = HEAP16[580074>>1]|0;
      $184 = $183&65535;
      $185 = (($184) - 1)|0;
      $186 = ($182|0)==($185|0);
      $187 = $c;
      $188 = $col;
      $189 = HEAP16[580076>>1]|0;
      $190 = $189&65535;
      $191 = (($188) - ($190))|0;
      $192 = $ip;
      $193 = (($192) + ($191<<3)|0);
      $194 = (($193) + ($187<<1)|0);
      $195 = HEAP16[$194>>1]|0;
      if ($186) {
       $196 = $c;
       $197 = $col;
       $198 = $ip;
       $199 = (($198) + ($197<<3)|0);
       $200 = (($199) + ($196<<1)|0);
       HEAP16[$200>>1] = $195;
      } else {
       $201 = $195 << 16 >> 16;
       $202 = $c;
       $203 = $col;
       $204 = HEAP16[580076>>1]|0;
       $205 = $204&65535;
       $206 = (($203) + ($205))|0;
       $207 = $ip;
       $208 = (($207) + ($206<<3)|0);
       $209 = (($208) + ($202<<1)|0);
       $210 = HEAP16[$209>>1]|0;
       $211 = $210 << 16 >> 16;
       $212 = (($201) + ($211))|0;
       $213 = (($212) + 1)|0;
       $214 = $213 >> 1;
       $215 = $214&65535;
       $216 = $c;
       $217 = $col;
       $218 = $ip;
       $219 = (($218) + ($217<<3)|0);
       $220 = (($219) + ($216<<1)|0);
       HEAP16[$220>>1] = $215;
      }
      $221 = $c;
      $222 = (($221) + 1)|0;
      $c = $222;
     }
     $223 = $col;
     $224 = (($223) + 2)|0;
     $col = $224;
    }
   }
  } while(0);
  $col = 1;
  while(1) {
   $225 = $col;
   $226 = HEAP16[580076>>1]|0;
   $227 = $226&65535;
   $228 = ($225|0)<($227|0);
   if (!($228)) {
    break;
   }
   $c = 1;
   while(1) {
    $229 = $c;
    $230 = ($229|0)<(3);
    $231 = $col;
    if (!($230)) {
     break;
    }
    $232 = HEAP16[580076>>1]|0;
    $233 = $232&65535;
    $234 = (($233) - 1)|0;
    $235 = ($231|0)==($234|0);
    $236 = $c;
    $237 = $col;
    $238 = (($237) - 1)|0;
    $239 = $ip;
    $240 = (($239) + ($238<<3)|0);
    $241 = (($240) + ($236<<1)|0);
    $242 = HEAP16[$241>>1]|0;
    if ($235) {
     $243 = $c;
     $244 = $col;
     $245 = $ip;
     $246 = (($245) + ($244<<3)|0);
     $247 = (($246) + ($243<<1)|0);
     HEAP16[$247>>1] = $242;
    } else {
     $248 = $242 << 16 >> 16;
     $249 = $c;
     $250 = $col;
     $251 = (($250) + 1)|0;
     $252 = $ip;
     $253 = (($252) + ($251<<3)|0);
     $254 = (($253) + ($249<<1)|0);
     $255 = HEAP16[$254>>1]|0;
     $256 = $255 << 16 >> 16;
     $257 = (($248) + ($256))|0;
     $258 = (($257) + 1)|0;
     $259 = $258 >> 1;
     $260 = $259&65535;
     $261 = $c;
     $262 = $col;
     $263 = $ip;
     $264 = (($263) + ($262<<3)|0);
     $265 = (($264) + ($261<<1)|0);
     HEAP16[$265>>1] = $260;
    }
    $266 = $c;
    $267 = (($266) + 1)|0;
    $c = $267;
   }
   $268 = (($231) + 2)|0;
   $col = $268;
  }
  $269 = $row;
  $270 = (($269) + 1)|0;
  $row = $270;
  $271 = HEAP16[580076>>1]|0;
  $272 = $271&65535;
  $273 = $ip;
  $274 = (($273) + ($272<<3)|0);
  $ip = $274;
 }
 while(1) {
  $275 = $rp;
  $276 = $ip;
  $277 = ($275>>>0)<($276>>>0);
  if (!($277)) {
   break;
  }
  $278 = HEAP32[1072>>2]|0;
  $279 = ($278|0)==(-2147483112);
  $280 = HEAP32[1072>>2]|0;
  $281 = ($280|0)==(-2147483056);
  $or$cond3 = $279 | $281;
  $282 = HEAP32[1072>>2]|0;
  $283 = ($282|0)==(-2147483039);
  $or$cond5 = $or$cond3 | $283;
  $284 = HEAP32[1072>>2]|0;
  $285 = ($284|0)==(-2147483007);
  $or$cond7 = $or$cond5 | $285;
  $286 = HEAP32[1072>>2]|0;
  $287 = ($286|0)==(-2147483001);
  $or$cond9 = $or$cond7 | $287;
  if ($or$cond9) {
   $288 = $rp;
   $289 = ((($288)) + 2|0);
   $290 = HEAP16[$289>>1]|0;
   $291 = $290 << 16 >> 16;
   $292 = $291 << 2;
   $293 = $hue;
   $294 = (($292) + ($293))|0;
   $295 = $294&65535;
   $296 = $rp;
   $297 = ((($296)) + 2|0);
   HEAP16[$297>>1] = $295;
   $298 = $rp;
   $299 = ((($298)) + 4|0);
   $300 = HEAP16[$299>>1]|0;
   $301 = $300 << 16 >> 16;
   $302 = $301 << 2;
   $303 = $hue;
   $304 = (($302) + ($303))|0;
   $305 = $304&65535;
   $306 = $rp;
   $307 = ((($306)) + 4|0);
   HEAP16[$307>>1] = $305;
   $308 = $rp;
   $309 = HEAP16[$308>>1]|0;
   $310 = $309 << 16 >> 16;
   $311 = $rp;
   $312 = ((($311)) + 2|0);
   $313 = HEAP16[$312>>1]|0;
   $314 = $313 << 16 >> 16;
   $315 = ($314*50)|0;
   $316 = $rp;
   $317 = ((($316)) + 4|0);
   $318 = HEAP16[$317>>1]|0;
   $319 = $318 << 16 >> 16;
   $320 = ($319*22929)|0;
   $321 = (($315) + ($320))|0;
   $322 = $321 >> 14;
   $323 = (($310) + ($322))|0;
   HEAP32[$pix>>2] = $323;
   $324 = $rp;
   $325 = HEAP16[$324>>1]|0;
   $326 = $325 << 16 >> 16;
   $327 = $rp;
   $328 = ((($327)) + 2|0);
   $329 = HEAP16[$328>>1]|0;
   $330 = $329 << 16 >> 16;
   $331 = Math_imul(-5640, $330)|0;
   $332 = $rp;
   $333 = ((($332)) + 4|0);
   $334 = HEAP16[$333>>1]|0;
   $335 = $334 << 16 >> 16;
   $336 = ($335*11751)|0;
   $337 = (($331) - ($336))|0;
   $338 = $337 >> 14;
   $339 = (($326) + ($338))|0;
   $340 = ((($pix)) + 4|0);
   HEAP32[$340>>2] = $339;
   $341 = $rp;
   $342 = HEAP16[$341>>1]|0;
   $343 = $342 << 16 >> 16;
   $344 = $rp;
   $345 = ((($344)) + 2|0);
   $346 = HEAP16[$345>>1]|0;
   $347 = $346 << 16 >> 16;
   $348 = ($347*29040)|0;
   $349 = $rp;
   $350 = ((($349)) + 4|0);
   $351 = HEAP16[$350>>1]|0;
   $352 = $351 << 16 >> 16;
   $353 = ($352*101)|0;
   $354 = (($348) - ($353))|0;
   $355 = $354 >> 14;
   $356 = (($343) + ($355))|0;
   $357 = ((($pix)) + 8|0);
   HEAP32[$357>>2] = $356;
  } else {
   $358 = HEAP32[1072>>2]|0;
   $359 = ($358>>>0)<(2147484184);
   if ($359) {
    $360 = $rp;
    $361 = HEAP16[$360>>1]|0;
    $362 = $361 << 16 >> 16;
    $363 = (($362) - 512)|0;
    $364 = $363&65535;
    HEAP16[$360>>1] = $364;
   }
   $365 = $rp;
   $366 = HEAP16[$365>>1]|0;
   $367 = $366 << 16 >> 16;
   $368 = $rp;
   $369 = ((($368)) + 4|0);
   $370 = HEAP16[$369>>1]|0;
   $371 = $370 << 16 >> 16;
   $372 = (($367) + ($371))|0;
   HEAP32[$pix>>2] = $372;
   $373 = $rp;
   $374 = HEAP16[$373>>1]|0;
   $375 = $374 << 16 >> 16;
   $376 = $rp;
   $377 = ((($376)) + 2|0);
   $378 = HEAP16[$377>>1]|0;
   $379 = $378 << 16 >> 16;
   $380 = (($375) + ($379))|0;
   $381 = ((($pix)) + 8|0);
   HEAP32[$381>>2] = $380;
   $382 = $rp;
   $383 = HEAP16[$382>>1]|0;
   $384 = $383 << 16 >> 16;
   $385 = $rp;
   $386 = ((($385)) + 2|0);
   $387 = HEAP16[$386>>1]|0;
   $388 = $387 << 16 >> 16;
   $389 = Math_imul(-778, $388)|0;
   $390 = $rp;
   $391 = ((($390)) + 4|0);
   $392 = HEAP16[$391>>1]|0;
   $393 = $392 << 16 >> 16;
   $394 = $393 << 11;
   $395 = (($389) - ($394))|0;
   $396 = $395 >> 12;
   $397 = (($384) + ($396))|0;
   $398 = ((($pix)) + 4|0);
   HEAP32[$398>>2] = $397;
  }
  $c = 0;
  while(1) {
   $399 = $c;
   $400 = ($399|0)<(3);
   if (!($400)) {
    break;
   }
   $401 = $c;
   $402 = (($pix) + ($401<<2)|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = $c;
   $405 = (580252 + ($404<<1)|0);
   $406 = HEAP16[$405>>1]|0;
   $407 = $406&65535;
   $408 = Math_imul($403, $407)|0;
   $409 = $408 >> 10;
   $410 = ($409|0)<(65535);
   if ($410) {
    $411 = $c;
    $412 = (($pix) + ($411<<2)|0);
    $413 = HEAP32[$412>>2]|0;
    $414 = $c;
    $415 = (580252 + ($414<<1)|0);
    $416 = HEAP16[$415>>1]|0;
    $417 = $416&65535;
    $418 = Math_imul($413, $417)|0;
    $419 = $418 >> 10;
    $421 = $419;
   } else {
    $421 = 65535;
   }
   $420 = (0)>($421|0);
   if ($420) {
    $442 = 0;
   } else {
    $422 = $c;
    $423 = (($pix) + ($422<<2)|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $c;
    $426 = (580252 + ($425<<1)|0);
    $427 = HEAP16[$426>>1]|0;
    $428 = $427&65535;
    $429 = Math_imul($424, $428)|0;
    $430 = $429 >> 10;
    $431 = ($430|0)<(65535);
    if ($431) {
     $432 = $c;
     $433 = (($pix) + ($432<<2)|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = $c;
     $436 = (580252 + ($435<<1)|0);
     $437 = HEAP16[$436>>1]|0;
     $438 = $437&65535;
     $439 = Math_imul($434, $438)|0;
     $440 = $439 >> 10;
     $442 = $440;
    } else {
     $442 = 65535;
    }
   }
   $441 = $442&65535;
   $443 = $c;
   $444 = $rp;
   $445 = (($444) + ($443<<1)|0);
   HEAP16[$445>>1] = $441;
   $446 = $c;
   $447 = (($446) + 1)|0;
   $c = $447;
  }
  $448 = $rp;
  $449 = ((($448)) + 8|0);
  $rp = $449;
 }
 _ljpeg_end($jh);
 HEAP32[1040>>2] = 16383;
 STACKTOP = sp;return;
}
function _adobe_copy_pixel($row,$col,$rp) {
 $row = $row|0;
 $col = $col|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $c = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row;
 $1 = $col;
 $2 = $rp;
 $3 = HEAP32[1076>>2]|0;
 $4 = ($3|0)==(2);
 $5 = HEAP32[664>>2]|0;
 $6 = ($5|0)!=(0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 2|0);
  HEAP32[$7>>2] = $9;
 }
 $10 = HEAP32[1032>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $0;
 if ($11) {
  $13 = HEAP16[580244>>1]|0;
  $14 = $13&65535;
  $15 = ($12>>>0)<($14>>>0);
  if ($15) {
   $16 = $1;
   $17 = HEAP16[580226>>1]|0;
   $18 = $17&65535;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = $2;
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&65535;
    $24 = (448962 + ($23<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $0;
    $27 = HEAP16[580226>>1]|0;
    $28 = $27&65535;
    $29 = Math_imul($26, $28)|0;
    $30 = $1;
    $31 = (($29) + ($30))|0;
    $32 = HEAP32[1032>>2]|0;
    $33 = (($32) + ($31<<1)|0);
    HEAP16[$33>>1] = $25;
   }
  }
  $34 = HEAP32[1076>>2]|0;
  $35 = $2;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($34<<1)|0);
  HEAP32[$35>>2] = $37;
 } else {
  $38 = HEAP16[580074>>1]|0;
  $39 = $38&65535;
  $40 = ($12>>>0)<($39>>>0);
  L11: do {
   if ($40) {
    $41 = $1;
    $42 = HEAP16[580076>>1]|0;
    $43 = $42&65535;
    $44 = ($41>>>0)<($43>>>0);
    if ($44) {
     $c = 0;
     while(1) {
      $45 = $c;
      $46 = HEAP32[1076>>2]|0;
      $47 = ($45>>>0)<($46>>>0);
      if (!($47)) {
       break L11;
      }
      $48 = $c;
      $49 = $2;
      $50 = HEAP32[$49>>2]|0;
      $51 = (($50) + ($48<<1)|0);
      $52 = HEAP16[$51>>1]|0;
      $53 = $52&65535;
      $54 = (448962 + ($53<<1)|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = $c;
      $57 = $0;
      $58 = HEAP16[580076>>1]|0;
      $59 = $58&65535;
      $60 = Math_imul($57, $59)|0;
      $61 = $1;
      $62 = (($60) + ($61))|0;
      $63 = HEAP32[972>>2]|0;
      $64 = (($63) + ($62<<3)|0);
      $65 = (($64) + ($56<<1)|0);
      HEAP16[$65>>1] = $55;
      $66 = $c;
      $67 = (($66) + 1)|0;
      $c = $67;
     }
    }
   }
  } while(0);
  $68 = HEAP32[1076>>2]|0;
  $69 = $2;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($68<<1)|0);
  HEAP32[$69>>2] = $71;
 }
 $72 = HEAP32[1076>>2]|0;
 $73 = ($72|0)==(2);
 $74 = HEAP32[664>>2]|0;
 $75 = ($74|0)!=(0);
 $or$cond3 = $73 & $75;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 $76 = $2;
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + -2|0);
 HEAP32[$76>>2] = $78;
 STACKTOP = sp;return;
}
function _ljpeg_idct($jh) {
 $jh = $jh|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $c = 0, $coef = 0, $i = 0, $j = 0, $len = 0, $or$cond = 0, $skip = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $work = sp;
 $0 = $jh;
 $1 = +HEAPF32[1080>>2];
 $2 = $1 != 0.0;
 L1: do {
  if (!($2)) {
   $c = 0;
   while(1) {
    $3 = $c;
    $4 = ($3|0)<(106);
    if (!($4)) {
     break L1;
    }
    $5 = $c;
    $6 = $5 & 31;
    $7 = (+($6|0));
    $8 = $7 * 3.1415926535897931;
    $9 = $8 / 16.0;
    $10 = (+Math_cos((+$9)));
    $11 = $10 / 2.0;
    $12 = $11;
    $13 = $c;
    $14 = (1080 + ($13<<2)|0);
    HEAPF32[$14>>2] = $12;
    $15 = $c;
    $16 = (($15) + 1)|0;
    $c = $16;
   }
  }
 } while(0);
 _memset(($work|0),0,768)|0;
 $17 = $0;
 $18 = ((($17)) + 312|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_ljpeg_diff($19)|0);
 $21 = $0;
 $22 = ((($21)) + 56|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = Math_imul($20, $24)|0;
 $26 = $0;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25))|0;
 HEAP32[$27>>2] = $29;
 $30 = (+($29|0));
 HEAPF32[$work>>2] = $30;
 $i = 1;
 while(1) {
  $31 = $i;
  $32 = ($31|0)<(64);
  if (!($32)) {
   break;
  }
  $33 = $0;
  $34 = ((($33)) + 312|0);
  $35 = ((($34)) + 64|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = $0;
  $40 = ((($39)) + 312|0);
  $41 = ((($40)) + 64|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($42)) + 2|0);
  $44 = (_getbithuff($38,$43)|0);
  $len = $44;
  $45 = $len;
  $46 = $45 >> 4;
  $skip = $46;
  $47 = $i;
  $48 = (($47) + ($46))|0;
  $i = $48;
  $49 = $len;
  $50 = $49 & 15;
  $len = $50;
  $51 = ($50|0)==(0);
  $52 = $skip;
  $53 = ($52|0)<(15);
  $or$cond = $51 & $53;
  if ($or$cond) {
   break;
  }
  $54 = $len;
  $55 = (_getbithuff($54,0)|0);
  $coef = $55;
  $56 = $coef;
  $57 = $len;
  $58 = (($57) - 1)|0;
  $59 = 1 << $58;
  $60 = $56 & $59;
  $61 = ($60|0)==(0);
  if ($61) {
   $62 = $len;
   $63 = 1 << $62;
   $64 = (($63) - 1)|0;
   $65 = $coef;
   $66 = (($65) - ($64))|0;
   $coef = $66;
  }
  $67 = $coef;
  $68 = $i;
  $69 = $0;
  $70 = ((($69)) + 56|0);
  $71 = (($70) + ($68<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72&65535;
  $74 = Math_imul($67, $73)|0;
  $75 = (+($74|0));
  $76 = $i;
  $77 = (593977 + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($work) + ($79<<2)|0);
  HEAPF32[$80>>2] = $75;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $c = 0;
 while(1) {
  $83 = $c;
  $84 = ($83|0)<(8);
  if (!($84)) {
   break;
  }
  $85 = $c;
  $86 = (($work) + ($85<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $87;
  $89 = $88 * 0.70710678118654757;
  $90 = $89;
  HEAPF32[$86>>2] = $90;
  $91 = $c;
  $92 = (($91) + 1)|0;
  $c = $92;
 }
 $c = 0;
 while(1) {
  $93 = $c;
  $94 = ($93|0)<(8);
  if (!($94)) {
   break;
  }
  $95 = $c;
  $96 = (($work) + ($95<<5)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $97;
  $99 = $98 * 0.70710678118654757;
  $100 = $99;
  HEAPF32[$96>>2] = $100;
  $101 = $c;
  $102 = (($101) + 1)|0;
  $c = $102;
 }
 $i = 0;
 while(1) {
  $103 = $i;
  $104 = ($103|0)<(8);
  if (!($104)) {
   break;
  }
  $j = 0;
  while(1) {
   $105 = $j;
   $106 = ($105|0)<(8);
   if (!($106)) {
    break;
   }
   $c = 0;
   while(1) {
    $107 = $c;
    $108 = ($107|0)<(8);
    if (!($108)) {
     break;
    }
    $109 = $c;
    $110 = $i;
    $111 = (($work) + ($110<<5)|0);
    $112 = (($111) + ($109<<2)|0);
    $113 = +HEAPF32[$112>>2];
    $114 = $j;
    $115 = $114<<1;
    $116 = (($115) + 1)|0;
    $117 = $c;
    $118 = Math_imul($116, $117)|0;
    $119 = (1080 + ($118<<2)|0);
    $120 = +HEAPF32[$119>>2];
    $121 = $113 * $120;
    $122 = $j;
    $123 = $i;
    $124 = ((($work)) + 256|0);
    $125 = (($124) + ($123<<5)|0);
    $126 = (($125) + ($122<<2)|0);
    $127 = +HEAPF32[$126>>2];
    $128 = $127 + $121;
    HEAPF32[$126>>2] = $128;
    $129 = $c;
    $130 = (($129) + 1)|0;
    $c = $130;
   }
   $131 = $j;
   $132 = (($131) + 1)|0;
   $j = $132;
  }
  $133 = $i;
  $134 = (($133) + 1)|0;
  $i = $134;
 }
 $i = 0;
 while(1) {
  $135 = $i;
  $136 = ($135|0)<(8);
  if (!($136)) {
   break;
  }
  $j = 0;
  while(1) {
   $137 = $j;
   $138 = ($137|0)<(8);
   if (!($138)) {
    break;
   }
   $c = 0;
   while(1) {
    $139 = $c;
    $140 = ($139|0)<(8);
    $141 = $j;
    if (!($140)) {
     break;
    }
    $142 = $c;
    $143 = ((($work)) + 256|0);
    $144 = (($143) + ($142<<5)|0);
    $145 = (($144) + ($141<<2)|0);
    $146 = +HEAPF32[$145>>2];
    $147 = $i;
    $148 = $147<<1;
    $149 = (($148) + 1)|0;
    $150 = $c;
    $151 = Math_imul($149, $150)|0;
    $152 = (1080 + ($151<<2)|0);
    $153 = +HEAPF32[$152>>2];
    $154 = $146 * $153;
    $155 = $j;
    $156 = $i;
    $157 = ((($work)) + 512|0);
    $158 = (($157) + ($156<<5)|0);
    $159 = (($158) + ($155<<2)|0);
    $160 = +HEAPF32[$159>>2];
    $161 = $160 + $154;
    HEAPF32[$159>>2] = $161;
    $162 = $c;
    $163 = (($162) + 1)|0;
    $c = $163;
   }
   $164 = (($141) + 1)|0;
   $j = $164;
  }
  $165 = $i;
  $166 = (($165) + 1)|0;
  $i = $166;
 }
 $c = 0;
 while(1) {
  $167 = $c;
  $168 = ($167|0)<(64);
  if (!($168)) {
   break;
  }
  $169 = $c;
  $170 = ((($work)) + 512|0);
  $171 = (($170) + ($169<<2)|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $172;
  $174 = $173 + 0.5;
  $175 = (~~(($174)));
  $176 = ($175|0)<(65535);
  if ($176) {
   $177 = $c;
   $178 = ((($work)) + 512|0);
   $179 = (($178) + ($177<<2)|0);
   $180 = +HEAPF32[$179>>2];
   $181 = $180;
   $182 = $181 + 0.5;
   $183 = (~~(($182)));
   $185 = $183;
  } else {
   $185 = 65535;
  }
  $184 = (0)>($185|0);
  if ($184) {
   $202 = 0;
  } else {
   $186 = $c;
   $187 = ((($work)) + 512|0);
   $188 = (($187) + ($186<<2)|0);
   $189 = +HEAPF32[$188>>2];
   $190 = $189;
   $191 = $190 + 0.5;
   $192 = (~~(($191)));
   $193 = ($192|0)<(65535);
   if ($193) {
    $194 = $c;
    $195 = ((($work)) + 512|0);
    $196 = (($195) + ($194<<2)|0);
    $197 = +HEAPF32[$196>>2];
    $198 = $197;
    $199 = $198 + 0.5;
    $200 = (~~(($199)));
    $202 = $200;
   } else {
    $202 = 65535;
   }
  }
  $201 = $202&65535;
  $203 = $c;
  $204 = $0;
  $205 = ((($204)) + 184|0);
  $206 = (($205) + ($203<<1)|0);
  HEAP16[$206>>1] = $201;
  $207 = $c;
  $208 = (($207) + 1)|0;
  $c = $208;
 }
 STACKTOP = sp;return;
}
function _lossless_dng_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $i = 0, $j = 0, $jcol = 0, $jh = 0, $jrow = 0;
 var $jwide = 0, $row = 0, $rp = 0, $save = 0, $tcol = 0, $trow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp + 4|0;
 $rp = sp;
 $trow = 0;
 $tcol = 0;
 while(1) {
  $0 = $trow;
  $1 = HEAP16[580244>>1]|0;
  $2 = $1&65535;
  $3 = ($0>>>0)<($2>>>0);
  if (!($3)) {
   label = 33;
   break;
  }
  $4 = HEAP32[944>>2]|0;
  $5 = (_ftell($4)|0);
  $save = $5;
  $6 = HEAP32[1504>>2]|0;
  $7 = ($6>>>0)<(2147483647);
  if ($7) {
   $8 = HEAP32[944>>2]|0;
   $9 = (_get4()|0);
   (_fseek($8,$9,0)|0);
  }
  $10 = (_ljpeg_start($jh,0)|0);
  $11 = ($10|0)!=(0);
  if (!($11)) {
   label = 33;
   break;
  }
  $12 = ((($jh)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $jwide = $13;
  $14 = HEAP32[776>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = ((($jh)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $jwide;
   $19 = Math_imul($18, $17)|0;
   $jwide = $19;
  }
  $20 = HEAP32[1508>>2]|0;
  $21 = HEAP32[1076>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  $23 = HEAP32[1508>>2]|0;
  $24 = HEAP32[1076>>2]|0;
  $25 = $22 ? $23 : $24;
  $26 = $jwide;
  $27 = (($26>>>0) / ($25>>>0))&-1;
  $jwide = $27;
  $28 = HEAP32[$jh>>2]|0;
  L11: do {
   switch ($28|0) {
   case 193:  {
    $29 = ((($jh)) + 32|0);
    HEAP32[$29>>2] = 16384;
    (_getbithuff(-1,0)|0);
    $jrow = 0;
    while(1) {
     $30 = $jrow;
     $31 = (($30) + 7)|0;
     $32 = ((($jh)) + 8|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($31>>>0)<($33>>>0);
     if (!($34)) {
      break L11;
     }
     $jcol = 0;
     while(1) {
      $35 = $jcol;
      $36 = (($35) + 7)|0;
      $37 = ((($jh)) + 12|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36>>>0)<($38>>>0);
      if (!($39)) {
       break;
      }
      _ljpeg_idct($jh);
      $40 = ((($jh)) + 184|0);
      HEAP32[$rp>>2] = $40;
      $41 = $trow;
      $42 = $jcol;
      $43 = HEAP32[1512>>2]|0;
      $44 = (($42>>>0) / ($43>>>0))&-1;
      $45 = (($41) + ($44))|0;
      $46 = $jrow;
      $47 = $46<<1;
      $48 = (($45) + ($47))|0;
      $row = $48;
      $49 = $tcol;
      $50 = $jcol;
      $51 = HEAP32[1512>>2]|0;
      $52 = (($50>>>0) % ($51>>>0))&-1;
      $53 = (($49) + ($52))|0;
      $col = $53;
      $i = 0;
      while(1) {
       $54 = $i;
       $55 = ($54>>>0)<(16);
       if (!($55)) {
        break;
       }
       $j = 0;
       while(1) {
        $56 = $j;
        $57 = ($56>>>0)<(8);
        if (!($57)) {
         break;
        }
        $58 = $row;
        $59 = $i;
        $60 = (($58) + ($59))|0;
        $61 = $col;
        $62 = $j;
        $63 = (($61) + ($62))|0;
        _adobe_copy_pixel($60,$63,$rp);
        $64 = $j;
        $65 = (($64) + 1)|0;
        $j = $65;
       }
       $66 = $i;
       $67 = (($66) + 2)|0;
       $i = $67;
      }
      $68 = $jcol;
      $69 = (($68) + 8)|0;
      $jcol = $69;
     }
     $70 = $jrow;
     $71 = (($70) + 8)|0;
     $jrow = $71;
    }
    break;
   }
   case 195:  {
    $jrow = 0;
    $col = 0;
    $row = 0;
    while(1) {
     $72 = $jrow;
     $73 = ((($jh)) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($72>>>0)<($74>>>0);
     if (!($75)) {
      break L11;
     }
     $76 = $jrow;
     $77 = (_ljpeg_row($76,$jh)|0);
     HEAP32[$rp>>2] = $77;
     $jcol = 0;
     while(1) {
      $78 = $jcol;
      $79 = $jwide;
      $80 = ($78>>>0)<($79>>>0);
      if (!($80)) {
       break;
      }
      $81 = $trow;
      $82 = $row;
      $83 = (($81) + ($82))|0;
      $84 = $tcol;
      $85 = $col;
      $86 = (($84) + ($85))|0;
      _adobe_copy_pixel($83,$86,$rp);
      $87 = $col;
      $88 = (($87) + 1)|0;
      $col = $88;
      $89 = HEAP32[1512>>2]|0;
      $90 = ($88>>>0)>=($89>>>0);
      if ($90) {
       label = 27;
      } else {
       $91 = $col;
       $92 = HEAP16[580226>>1]|0;
       $93 = $92&65535;
       $94 = ($91>>>0)>=($93>>>0);
       if ($94) {
        label = 27;
       }
      }
      if ((label|0) == 27) {
       label = 0;
       $col = 0;
       $95 = $row;
       $96 = (($95) + 1)|0;
       $row = $96;
      }
      $97 = $jcol;
      $98 = (($97) + 1)|0;
      $jcol = $98;
     }
     $99 = $jrow;
     $100 = (($99) + 1)|0;
     $jrow = $100;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $101 = HEAP32[944>>2]|0;
  $102 = $save;
  $103 = (($102) + 4)|0;
  (_fseek($101,$103,0)|0);
  $104 = HEAP32[1512>>2]|0;
  $105 = $tcol;
  $106 = (($105) + ($104))|0;
  $tcol = $106;
  $107 = HEAP16[580226>>1]|0;
  $108 = $107&65535;
  $109 = ($106>>>0)>=($108>>>0);
  if ($109) {
   $110 = HEAP32[1504>>2]|0;
   $tcol = 0;
   $111 = (($110) + 0)|0;
   $112 = $trow;
   $113 = (($112) + ($111))|0;
   $trow = $113;
  }
  _ljpeg_end($jh);
 }
 if ((label|0) == 33) {
  STACKTOP = sp;return;
 }
}
function _packed_dng_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $col = 0, $pixel = 0, $row = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rp = sp + 8|0;
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = HEAP32[1076>>2]|0;
 $3 = $2<<1;
 $4 = (_calloc($1,$3)|0);
 $pixel = $4;
 $5 = $pixel;
 _merror($5,594057);
 $row = 0;
 while(1) {
  $6 = $row;
  $7 = HEAP16[580244>>1]|0;
  $8 = $7&65535;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[1516>>2]|0;
  $11 = ($10|0)==(16);
  L4: do {
   if ($11) {
    $12 = $pixel;
    $13 = HEAP16[580226>>1]|0;
    $14 = $13&65535;
    $15 = HEAP32[1076>>2]|0;
    $16 = Math_imul($14, $15)|0;
    _read_shorts($12,$16);
   } else {
    (_getbithuff(-1,0)|0);
    $col = 0;
    while(1) {
     $17 = $col;
     $18 = HEAP16[580226>>1]|0;
     $19 = $18&65535;
     $20 = HEAP32[1076>>2]|0;
     $21 = Math_imul($19, $20)|0;
     $22 = ($17>>>0)<($21>>>0);
     if (!($22)) {
      break L4;
     }
     $23 = HEAP32[1516>>2]|0;
     $24 = (_getbithuff($23,0)|0);
     $25 = $24&65535;
     $26 = $col;
     $27 = $pixel;
     $28 = (($27) + ($26<<1)|0);
     HEAP16[$28>>1] = $25;
     $29 = $col;
     $30 = (($29) + 1)|0;
     $col = $30;
    }
   }
  } while(0);
  $31 = $pixel;
  HEAP32[$rp>>2] = $31;
  $col = 0;
  while(1) {
   $32 = $col;
   $33 = HEAP16[580226>>1]|0;
   $34 = $33&65535;
   $35 = ($32|0)<($34|0);
   $36 = $row;
   if (!($35)) {
    break;
   }
   $37 = $col;
   _adobe_copy_pixel($36,$37,$rp);
   $38 = $col;
   $39 = (($38) + 1)|0;
   $col = $39;
  }
  $40 = (($36) + 1)|0;
  $row = $40;
 }
 $41 = $pixel;
 _free($41);
 STACKTOP = sp;return;
}
function _pentax_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $c = 0, $col = 0, $dep = 0;
 var $diff = 0, $hpred = 0, $huff = 0, $i = 0, $row = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bit = sp + 8236|0;
 $huff = sp + 40|0;
 $vpred = sp + 32|0;
 $hpred = sp + 24|0;
 ;HEAP16[$vpred>>1]=0|0;HEAP16[$vpred+2>>1]=0|0;HEAP16[$vpred+4>>1]=0|0;HEAP16[$vpred+6>>1]=0|0;
 $0 = HEAP32[944>>2]|0;
 $1 = HEAP32[1520>>2]|0;
 (_fseek($0,$1,0)|0);
 $2 = (_get2()|0);
 $3 = $2&65535;
 $4 = (($3) + 12)|0;
 $5 = $4 & 15;
 $dep = $5;
 $6 = HEAP32[944>>2]|0;
 (_fseek($6,12,1)|0);
 $c = 0;
 while(1) {
  $7 = $c;
  $8 = $dep;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = (_get2()|0);
  $11 = $c;
  $12 = (($bit) + ($11<<1)|0);
  HEAP16[$12>>1] = $10;
  $13 = $c;
  $14 = (($13) + 1)|0;
  $c = $14;
 }
 $c = 0;
 while(1) {
  $15 = $c;
  $16 = $dep;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[944>>2]|0;
  $19 = (_getc_unlocked($18)|0);
  $20 = $19&65535;
  $21 = $c;
  $22 = ((($bit)) + 30|0);
  $23 = (($22) + ($21<<1)|0);
  HEAP16[$23>>1] = $20;
  $24 = $c;
  $25 = (($24) + 1)|0;
  $c = $25;
 }
 $c = 0;
 while(1) {
  $26 = $c;
  $27 = $dep;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $c;
  $30 = (($bit) + ($29<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31&65535;
  $i = $32;
  while(1) {
   $33 = $i;
   $34 = $c;
   $35 = (($bit) + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = $c;
   $39 = ((($bit)) + 30|0);
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = 4096 >> $42;
   $44 = (($37) + ($43))|0;
   $45 = (($44) - 1)|0;
   $46 = $45 & 4095;
   $47 = ($33|0)<=($46|0);
   $48 = $c;
   if (!($47)) {
    break;
   }
   $49 = ((($bit)) + 30|0);
   $50 = (($49) + ($48<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = $52 << 8;
   $54 = $c;
   $55 = $53 | $54;
   $56 = $55&65535;
   $57 = $i;
   $58 = (($57) + 1)|0;
   $i = $58;
   $59 = (($huff) + ($58<<1)|0);
   HEAP16[$59>>1] = $56;
  }
  $60 = (($48) + 1)|0;
  $c = $60;
 }
 HEAP16[$huff>>1] = 12;
 $61 = HEAP32[944>>2]|0;
 $62 = HEAP32[1524>>2]|0;
 (_fseek($61,$62,0)|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $63 = $row;
  $64 = HEAP16[580244>>1]|0;
  $65 = $64&65535;
  $66 = ($63|0)<($65|0);
  if (!($66)) {
   break;
  }
  $col = 0;
  while(1) {
   $67 = $col;
   $68 = HEAP16[580226>>1]|0;
   $69 = $68&65535;
   $70 = ($67|0)<($69|0);
   if (!($70)) {
    break;
   }
   $71 = (_ljpeg_diff($huff)|0);
   $diff = $71;
   $72 = $col;
   $73 = ($72|0)<(2);
   $74 = $diff;
   $75 = $col;
   if ($73) {
    $76 = $row;
    $77 = $76 & 1;
    $78 = (($vpred) + ($77<<2)|0);
    $79 = (($78) + ($75<<1)|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80&65535;
    $82 = (($81) + ($74))|0;
    $83 = $82&65535;
    HEAP16[$79>>1] = $83;
    $84 = $col;
    $85 = (($hpred) + ($84<<1)|0);
    HEAP16[$85>>1] = $83;
   } else {
    $86 = $75 & 1;
    $87 = (($hpred) + ($86<<1)|0);
    $88 = HEAP16[$87>>1]|0;
    $89 = $88&65535;
    $90 = (($89) + ($74))|0;
    $91 = $90&65535;
    HEAP16[$87>>1] = $91;
   }
   $92 = $col;
   $93 = $92 & 1;
   $94 = (($hpred) + ($93<<1)|0);
   $95 = HEAP16[$94>>1]|0;
   $96 = $row;
   $97 = HEAP16[580226>>1]|0;
   $98 = $97&65535;
   $99 = Math_imul($96, $98)|0;
   $100 = $col;
   $101 = (($99) + ($100))|0;
   $102 = HEAP32[1032>>2]|0;
   $103 = (($102) + ($101<<1)|0);
   HEAP16[$103>>1] = $95;
   $104 = $col;
   $105 = $104 & 1;
   $106 = (($hpred) + ($105<<1)|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = $107&65535;
   $109 = HEAP32[1516>>2]|0;
   $110 = $108 >> $109;
   $111 = ($110|0)!=(0);
   if ($111) {
    _derror();
   }
   $112 = $col;
   $113 = (($112) + 1)|0;
   $col = $113;
  }
  $114 = $row;
  $115 = (($114) + 1)|0;
  $row = $115;
 }
 STACKTOP = sp;return;
}
function _nikon_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $csize = 0, $diff = 0, $hpred = 0, $huff = 0, $i = 0, $len = 0, $max = 0, $min = 0, $or$cond = 0, $row = 0, $shl = 0, $split = 0;
 var $step = 0, $tree = 0, $ver0 = 0, $ver1 = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vpred = sp + 56|0;
 $hpred = sp + 52|0;
 $step = 0;
 $tree = 0;
 $split = 0;
 $0 = HEAP32[944>>2]|0;
 $1 = HEAP32[1520>>2]|0;
 (_fseek($0,$1,0)|0);
 $2 = HEAP32[944>>2]|0;
 $3 = (_getc_unlocked($2)|0);
 $4 = $3&65535;
 $ver0 = $4;
 $5 = HEAP32[944>>2]|0;
 $6 = (_getc_unlocked($5)|0);
 $7 = $6&65535;
 $ver1 = $7;
 $8 = $ver0;
 $9 = $8&65535;
 $10 = ($9|0)==(73);
 if ($10) {
  label = 3;
 } else {
  $11 = $ver1;
  $12 = $11&65535;
  $13 = ($12|0)==(88);
  if ($13) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = HEAP32[944>>2]|0;
  (_fseek($14,2110,1)|0);
 }
 $15 = $ver0;
 $16 = $15&65535;
 $17 = ($16|0)==(70);
 if ($17) {
  $tree = 2;
 }
 $18 = HEAP32[1516>>2]|0;
 $19 = ($18|0)==(14);
 if ($19) {
  $20 = $tree;
  $21 = (($20) + 3)|0;
  $tree = $21;
 }
 _read_shorts($vpred,4);
 $22 = HEAP32[1516>>2]|0;
 $23 = 1 << $22;
 $24 = $23 & 32767;
 $max = $24;
 $25 = (_get2()|0);
 $csize = $25;
 $26 = $25&65535;
 $27 = ($26|0)>(1);
 if ($27) {
  $28 = $max;
  $29 = $csize;
  $30 = $29&65535;
  $31 = (($30) - 1)|0;
  $32 = (($28|0) / ($31|0))&-1;
  $step = $32;
 }
 $33 = $ver0;
 $34 = $33&65535;
 $35 = ($34|0)==(68);
 if ($35) {
  $36 = $ver1;
  $37 = $36&65535;
  $38 = ($37|0)==(32);
  $39 = $step;
  $40 = ($39|0)>(0);
  $or$cond = $38 & $40;
  if ($or$cond) {
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = $csize;
    $43 = $42&65535;
    $44 = ($41|0)<($43|0);
    if (!($44)) {
     break;
    }
    $45 = (_get2()|0);
    $46 = $i;
    $47 = $step;
    $48 = Math_imul($46, $47)|0;
    $49 = (448962 + ($48<<1)|0);
    HEAP16[$49>>1] = $45;
    $50 = $i;
    $51 = (($50) + 1)|0;
    $i = $51;
   }
   $i = 0;
   while(1) {
    $52 = $i;
    $53 = $max;
    $54 = ($52|0)<($53|0);
    if (!($54)) {
     break;
    }
    $55 = $i;
    $56 = $i;
    $57 = $step;
    $58 = (($56|0) % ($57|0))&-1;
    $59 = (($55) - ($58))|0;
    $60 = (448962 + ($59<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61&65535;
    $63 = $step;
    $64 = $i;
    $65 = $step;
    $66 = (($64|0) % ($65|0))&-1;
    $67 = (($63) - ($66))|0;
    $68 = Math_imul($62, $67)|0;
    $69 = $i;
    $70 = $i;
    $71 = $step;
    $72 = (($70|0) % ($71|0))&-1;
    $73 = (($69) - ($72))|0;
    $74 = $step;
    $75 = (($73) + ($74))|0;
    $76 = (448962 + ($75<<1)|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = $77&65535;
    $79 = $i;
    $80 = $step;
    $81 = (($79|0) % ($80|0))&-1;
    $82 = Math_imul($78, $81)|0;
    $83 = (($68) + ($82))|0;
    $84 = $step;
    $85 = (($83|0) / ($84|0))&-1;
    $86 = $85&65535;
    $87 = $i;
    $88 = (448962 + ($87<<1)|0);
    HEAP16[$88>>1] = $86;
    $89 = $i;
    $90 = (($89) + 1)|0;
    $i = $90;
   }
   $91 = HEAP32[944>>2]|0;
   $92 = HEAP32[1520>>2]|0;
   $93 = (($92) + 562)|0;
   (_fseek($91,$93,0)|0);
   $94 = (_get2()|0);
   $95 = $94&65535;
   $split = $95;
  } else {
   label = 19;
  }
 } else {
  label = 19;
 }
 if ((label|0) == 19) {
  $96 = $ver0;
  $97 = $96&65535;
  $98 = ($97|0)!=(70);
  if ($98) {
   $99 = $csize;
   $100 = $99&65535;
   $101 = ($100|0)<=(16385);
   if ($101) {
    $102 = $csize;
    $103 = $102&65535;
    $max = $103;
    _read_shorts(448962,$103);
   }
  }
 }
 while(1) {
  $104 = $max;
  $105 = (($104) - 2)|0;
  $106 = (448962 + ($105<<1)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107&65535;
  $109 = $max;
  $110 = (($109) - 1)|0;
  $111 = (448962 + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = ($108|0)==($113|0);
  if (!($114)) {
   break;
  }
  $115 = $max;
  $116 = (($115) + -1)|0;
  $max = $116;
 }
 $117 = $tree;
 $118 = (594079 + ($117<<5)|0);
 $119 = (_make_decoder($118)|0);
 $huff = $119;
 $120 = HEAP32[944>>2]|0;
 $121 = HEAP32[1524>>2]|0;
 (_fseek($120,$121,0)|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 $min = 0;
 while(1) {
  $122 = $row;
  $123 = HEAP16[580074>>1]|0;
  $124 = $123&65535;
  $125 = ($122|0)<($124|0);
  if (!($125)) {
   break;
  }
  $126 = $split;
  $127 = ($126|0)!=(0);
  if ($127) {
   $128 = $row;
   $129 = $split;
   $130 = ($128|0)==($129|0);
   if ($130) {
    $131 = $huff;
    _free($131);
    $132 = $tree;
    $133 = (($132) + 1)|0;
    $134 = (594079 + ($133<<5)|0);
    $135 = (_make_decoder($134)|0);
    $huff = $135;
    $min = 16;
    $136 = $max;
    $137 = (($136) + 32)|0;
    $max = $137;
   }
  }
  $col = 0;
  while(1) {
   $138 = $col;
   $139 = HEAP16[580226>>1]|0;
   $140 = $139&65535;
   $141 = ($138|0)<($140|0);
   if (!($141)) {
    break;
   }
   $142 = $huff;
   $143 = HEAP16[$142>>1]|0;
   $144 = $143&65535;
   $145 = $huff;
   $146 = ((($145)) + 2|0);
   $147 = (_getbithuff($144,$146)|0);
   $i = $147;
   $148 = $i;
   $149 = $148 & 15;
   $len = $149;
   $150 = $i;
   $151 = $150 >> 4;
   $shl = $151;
   $152 = $len;
   $153 = $shl;
   $154 = (($152) - ($153))|0;
   $155 = (_getbithuff($154,0)|0);
   $156 = $155 << 1;
   $157 = (($156) + 1)|0;
   $158 = $shl;
   $159 = $157 << $158;
   $160 = $159 >>> 1;
   $diff = $160;
   $161 = $diff;
   $162 = $len;
   $163 = (($162) - 1)|0;
   $164 = 1 << $163;
   $165 = $161 & $164;
   $166 = ($165|0)==(0);
   if ($166) {
    $167 = $len;
    $168 = 1 << $167;
    $169 = $shl;
    $170 = ($169|0)!=(0);
    $171 = $170 ^ 1;
    $172 = $171&1;
    $173 = (($168) - ($172))|0;
    $174 = $diff;
    $175 = (($174) - ($173))|0;
    $diff = $175;
   }
   $176 = $col;
   $177 = ($176|0)<(2);
   $178 = $diff;
   $179 = $col;
   if ($177) {
    $180 = $row;
    $181 = $180 & 1;
    $182 = (($vpred) + ($181<<2)|0);
    $183 = (($182) + ($179<<1)|0);
    $184 = HEAP16[$183>>1]|0;
    $185 = $184&65535;
    $186 = (($185) + ($178))|0;
    $187 = $186&65535;
    HEAP16[$183>>1] = $187;
    $188 = $col;
    $189 = (($hpred) + ($188<<1)|0);
    HEAP16[$189>>1] = $187;
   } else {
    $190 = $179 & 1;
    $191 = (($hpred) + ($190<<1)|0);
    $192 = HEAP16[$191>>1]|0;
    $193 = $192&65535;
    $194 = (($193) + ($178))|0;
    $195 = $194&65535;
    HEAP16[$191>>1] = $195;
   }
   $196 = $col;
   $197 = $196 & 1;
   $198 = (($hpred) + ($197<<1)|0);
   $199 = HEAP16[$198>>1]|0;
   $200 = $199&65535;
   $201 = $min;
   $202 = (($200) + ($201))|0;
   $203 = $202&65535;
   $204 = $203&65535;
   $205 = $max;
   $206 = ($204|0)>=($205|0);
   if ($206) {
    _derror();
   }
   $207 = $col;
   $208 = $207 & 1;
   $209 = (($hpred) + ($208<<1)|0);
   $210 = HEAP16[$209>>1]|0;
   $211 = $210 << 16 >> 16;
   $212 = ($211|0)<(16383);
   if ($212) {
    $213 = $col;
    $214 = $213 & 1;
    $215 = (($hpred) + ($214<<1)|0);
    $216 = HEAP16[$215>>1]|0;
    $217 = $216 << 16 >> 16;
    $219 = $217;
   } else {
    $219 = 16383;
   }
   $218 = (0)>($219|0);
   if ($218) {
    $232 = 0;
   } else {
    $220 = $col;
    $221 = $220 & 1;
    $222 = (($hpred) + ($221<<1)|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223 << 16 >> 16;
    $225 = ($224|0)<(16383);
    if ($225) {
     $226 = $col;
     $227 = $226 & 1;
     $228 = (($hpred) + ($227<<1)|0);
     $229 = HEAP16[$228>>1]|0;
     $230 = $229 << 16 >> 16;
     $232 = $230;
    } else {
     $232 = 16383;
    }
   }
   $231 = (448962 + ($232<<1)|0);
   $233 = HEAP16[$231>>1]|0;
   $234 = $row;
   $235 = HEAP16[580226>>1]|0;
   $236 = $235&65535;
   $237 = Math_imul($234, $236)|0;
   $238 = $col;
   $239 = (($237) + ($238))|0;
   $240 = HEAP32[1032>>2]|0;
   $241 = (($240) + ($239<<1)|0);
   HEAP16[$241>>1] = $233;
   $242 = $col;
   $243 = (($242) + 1)|0;
   $col = $243;
  }
  $244 = $row;
  $245 = (($244) + 1)|0;
  $row = $245;
 }
 $246 = $huff;
 _free($246);
 STACKTOP = sp;return;
}
function _nikon_yuv_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $b = 0, $bitbuf = 0, $c = 0, $col = 0, $rgb = 0, $row = 0, $yuv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $yuv = sp + 32|0;
 $rgb = sp + 16|0;
 $bitbuf = sp;
 $0 = $bitbuf;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[580244>>1]|0;
  $6 = $5&65535;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $col = 0;
  while(1) {
   $8 = $col;
   $9 = HEAP16[580226>>1]|0;
   $10 = $9&65535;
   $11 = ($8|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = $col;
   $13 = $12 & 1;
   $b = $13;
   $14 = ($13|0)!=(0);
   L7: do {
    if (!($14)) {
     $15 = $bitbuf;
     $16 = $15;
     HEAP32[$16>>2] = 0;
     $17 = (($15) + 4)|0;
     $18 = $17;
     HEAP32[$18>>2] = 0;
     $c = 0;
     while(1) {
      $19 = $c;
      $20 = ($19|0)<(6);
      if (!($20)) {
       break;
      }
      $21 = HEAP32[944>>2]|0;
      $22 = (_getc_unlocked($21)|0);
      $23 = ($22|0)<(0);
      $24 = $23 << 31 >> 31;
      $25 = $c;
      $26 = $25<<3;
      $27 = (_bitshift64Shl(($22|0),($24|0),($26|0))|0);
      $28 = tempRet0;
      $29 = $bitbuf;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $32 = (($29) + 4)|0;
      $33 = $32;
      $34 = HEAP32[$33>>2]|0;
      $35 = $31 | $27;
      $36 = $34 | $28;
      $37 = $bitbuf;
      $38 = $37;
      HEAP32[$38>>2] = $35;
      $39 = (($37) + 4)|0;
      $40 = $39;
      HEAP32[$40>>2] = $36;
      $41 = $c;
      $42 = (($41) + 1)|0;
      $c = $42;
     }
     $c = 0;
     while(1) {
      $43 = $c;
      $44 = ($43|0)<(4);
      if (!($44)) {
       break L7;
      }
      $45 = $bitbuf;
      $46 = $45;
      $47 = HEAP32[$46>>2]|0;
      $48 = (($45) + 4)|0;
      $49 = $48;
      $50 = HEAP32[$49>>2]|0;
      $51 = $c;
      $52 = ($51*12)|0;
      $53 = (_bitshift64Lshr(($47|0),($50|0),($52|0))|0);
      $54 = tempRet0;
      $55 = $53 & 4095;
      $56 = $c;
      $57 = $56 >> 1;
      $58 = $57 << 11;
      $59 = ($58|0)<(0);
      $60 = $59 << 31 >> 31;
      $61 = (_i64Subtract(($55|0),0,($58|0),($60|0))|0);
      $62 = tempRet0;
      $63 = $c;
      $64 = (($yuv) + ($63<<2)|0);
      HEAP32[$64>>2] = $61;
      $65 = $c;
      $66 = (($65) + 1)|0;
      $c = $66;
     }
    }
   } while(0);
   $67 = $b;
   $68 = (($yuv) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (+($69|0));
   $71 = ((($yuv)) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (+($72|0));
   $74 = 1.3707050000000001 * $73;
   $75 = $70 + $74;
   $76 = (~~(($75)));
   HEAP32[$rgb>>2] = $76;
   $77 = $b;
   $78 = (($yuv) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (+($79|0));
   $81 = ((($yuv)) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (+($82|0));
   $84 = 0.33763300000000002 * $83;
   $85 = $80 - $84;
   $86 = ((($yuv)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (+($87|0));
   $89 = 0.69800099999999998 * $88;
   $90 = $85 - $89;
   $91 = (~~(($90)));
   $92 = ((($rgb)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = $b;
   $94 = (($yuv) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (+($95|0));
   $97 = ((($yuv)) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (+($98|0));
   $100 = 1.7324459999999999 * $99;
   $101 = $96 + $100;
   $102 = (~~(($101)));
   $103 = ((($rgb)) + 8|0);
   HEAP32[$103>>2] = $102;
   $c = 0;
   while(1) {
    $104 = $c;
    $105 = ($104|0)<(3);
    if (!($105)) {
     break;
    }
    $106 = $c;
    $107 = (($rgb) + ($106<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)<(4095);
    if ($109) {
     $110 = $c;
     $111 = (($rgb) + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $114 = $112;
    } else {
     $114 = 4095;
    }
    $113 = (0)>($114|0);
    if ($113) {
     $123 = 0;
    } else {
     $115 = $c;
     $116 = (($rgb) + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)<(4095);
     if ($118) {
      $119 = $c;
      $120 = (($rgb) + ($119<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $123 = $121;
     } else {
      $123 = 4095;
     }
    }
    $122 = (448962 + ($123<<1)|0);
    $124 = HEAP16[$122>>1]|0;
    $125 = $124&65535;
    $126 = (+($125|0));
    $127 = $c;
    $128 = (1528 + ($127<<2)|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $126 / $129;
    $131 = (~~(($130))&65535);
    $132 = $c;
    $133 = $row;
    $134 = HEAP16[580076>>1]|0;
    $135 = $134&65535;
    $136 = Math_imul($133, $135)|0;
    $137 = $col;
    $138 = (($136) + ($137))|0;
    $139 = HEAP32[972>>2]|0;
    $140 = (($139) + ($138<<3)|0);
    $141 = (($140) + ($132<<1)|0);
    HEAP16[$141>>1] = $131;
    $142 = $c;
    $143 = (($142) + 1)|0;
    $c = $143;
   }
   $144 = $col;
   $145 = (($144) + 1)|0;
   $col = $145;
  }
  $146 = $row;
  $147 = (($146) + 1)|0;
  $row = $147;
 }
 STACKTOP = sp;return;
}
function _nikon_e995() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $histo = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $histo = sp;
 _memset(($histo|0),0,1024)|0;
 $1 = HEAP32[944>>2]|0;
 (_fseek($1,-2000,2)|0);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(2000);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[944>>2]|0;
  $5 = (_getc_unlocked($4)|0);
  $6 = (($histo) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$6>>2] = $8;
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(4);
  if (!($12)) {
   label = 9;
   break;
  }
  $13 = $i;
  $14 = (594271 + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($histo) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(200);
  if ($19) {
   label = 7;
   break;
  }
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _nikon_e2100() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 $1 = HEAP32[944>>2]|0;
 (_fseek($1,0,0)|0);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(1024);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = HEAP32[944>>2]|0;
  (_fread($t,1,12,$4)|0);
  $5 = ((($t)) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ((($t)) + 4|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $7 & $10;
  $12 = ((($t)) + 7|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $11 & $14;
  $16 = ((($t)) + 9|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $15 & $18;
  $20 = $19 >> 4;
  $21 = ((($t)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $20 & $23;
  $25 = ((($t)) + 6|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $24 & $27;
  $29 = ((($t)) + 8|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $28 & $31;
  $33 = ((($t)) + 11|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $32 & $35;
  $37 = $36 & 3;
  $38 = ($37|0)!=(3);
  if ($38) {
   label = 4;
   break;
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _nikon_3700() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $dp = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dp = sp + 8|0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,3072,0)|0);
 $1 = HEAP32[944>>2]|0;
 (_fread($dp,1,24,$1)|0);
 $2 = ((($dp)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 3;
 $6 = $5 << 4;
 $7 = ((($dp)) + 20|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $6 | $10;
 $bits = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12>>>0)<(4);
  if (!($13)) {
   break;
  }
  $14 = $bits;
  $15 = $i;
  $16 = (1544 + ($15<<5)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($17|0);
  if ($18) {
   $19 = $i;
   $20 = (1544 + ($19<<5)|0);
   $21 = ((($20)) + 4|0);
   (_strcpy(594275,$21)|0);
   $22 = $i;
   $23 = (1544 + ($22<<5)|0);
   $24 = ((($23)) + 16|0);
   (_strcpy(594339,$24)|0);
  }
  $25 = $i;
  $26 = (($25) + 1)|0;
  $i = $26;
 }
 STACKTOP = sp;return;
}
function _minolta_z2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $nz = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tail = sp + 8|0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,-424,2)|0);
 $1 = HEAP32[944>>2]|0;
 (_fread($tail,1,424,$1)|0);
 $i = 0;
 $nz = 0;
 while(1) {
  $2 = $i;
  $3 = ($2>>>0)<(424);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = (($tail) + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)!=(0);
  if ($7) {
   $8 = $nz;
   $9 = (($8) + 1)|0;
   $nz = $9;
  }
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 $12 = $nz;
 $13 = ($12|0)>(20);
 $14 = $13&1;
 STACKTOP = sp;return ($14|0);
}
function _ppm_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP16[580260>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[580262>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = ($4*3)|0;
 HEAP32[1672>>2] = $5;
 $6 = HEAP32[1672>>2]|0;
 $7 = (_malloc($6)|0);
 $thumb = $7;
 $8 = $thumb;
 _merror($8,594403);
 $9 = HEAP32[1676>>2]|0;
 $10 = HEAP16[580260>>1]|0;
 $11 = $10&65535;
 $12 = HEAP16[580262>>1]|0;
 $13 = $12&65535;
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 (_fprintf($9,594415,$vararg_buffer)|0);
 $14 = $thumb;
 $15 = HEAP32[1672>>2]|0;
 $16 = HEAP32[944>>2]|0;
 (_fread($14,1,$15,$16)|0);
 $17 = $thumb;
 $18 = HEAP32[1672>>2]|0;
 $19 = HEAP32[1676>>2]|0;
 (_fwrite($17,1,$18,$19)|0);
 $20 = $thumb;
 _free($20);
 STACKTOP = sp;return;
}
function _ppm16_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP16[580260>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[580262>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = ($4*3)|0;
 HEAP32[1672>>2] = $5;
 $6 = HEAP32[1672>>2]|0;
 $7 = (_calloc($6,2)|0);
 $thumb = $7;
 $8 = $thumb;
 _merror($8,594429);
 $9 = $thumb;
 $10 = HEAP32[1672>>2]|0;
 _read_shorts($9,$10);
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = HEAP32[1672>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $thumb;
  $16 = (($15) + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = $18 >> 8;
  $20 = $19&255;
  $21 = $i;
  $22 = $thumb;
  $23 = (($22) + ($21)|0);
  HEAP8[$23>>0] = $20;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $26 = HEAP32[1676>>2]|0;
 $27 = HEAP16[580260>>1]|0;
 $28 = $27&65535;
 $29 = HEAP16[580262>>1]|0;
 $30 = $29&65535;
 HEAP32[$vararg_buffer>>2] = $28;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $30;
 (_fprintf($26,594415,$vararg_buffer)|0);
 $31 = $thumb;
 $32 = HEAP32[1672>>2]|0;
 $33 = HEAP32[1676>>2]|0;
 (_fwrite($31,1,$32,$33)|0);
 $34 = $thumb;
 _free($34);
 STACKTOP = sp;return;
}
function _layer_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $map = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $map = sp + 24|0;
 ;HEAP8[$map>>0]=HEAP8[594443>>0]|0;HEAP8[$map+1>>0]=HEAP8[594443+1>>0]|0;HEAP8[$map+2>>0]=HEAP8[594443+2>>0]|0;HEAP8[$map+3>>0]=HEAP8[594443+3>>0]|0;HEAP8[$map+4>>0]=HEAP8[594443+4>>0]|0;HEAP8[$map+5>>0]=HEAP8[594443+5>>0]|0;HEAP8[$map+6>>0]=HEAP8[594443+6>>0]|0;HEAP8[$map+7>>0]=HEAP8[594443+7>>0]|0;
 $0 = HEAP32[1680>>2]|0;
 $1 = $0 >>> 5;
 $2 = $1 & 7;
 HEAP32[980>>2] = $2;
 $3 = HEAP16[580260>>1]|0;
 $4 = $3&65535;
 $5 = HEAP16[580262>>1]|0;
 $6 = $5&65535;
 $7 = Math_imul($4, $6)|0;
 HEAP32[1672>>2] = $7;
 $8 = HEAP32[980>>2]|0;
 $9 = HEAP32[1672>>2]|0;
 $10 = (_calloc($8,$9)|0);
 $thumb = $10;
 $11 = $thumb;
 _merror($11,594451);
 $12 = HEAP32[1676>>2]|0;
 $13 = HEAP32[980>>2]|0;
 $14 = $13 >>> 1;
 $15 = (5 + ($14))|0;
 $16 = HEAP16[580260>>1]|0;
 $17 = $16&65535;
 $18 = HEAP16[580262>>1]|0;
 $19 = $18&65535;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $17;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $19;
 (_fprintf($12,594465,$vararg_buffer)|0);
 $20 = $thumb;
 $21 = HEAP32[1672>>2]|0;
 $22 = HEAP32[980>>2]|0;
 $23 = HEAP32[944>>2]|0;
 (_fread($20,$21,$22,$23)|0);
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = HEAP32[1672>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $c = 0;
  while(1) {
   $27 = $c;
   $28 = HEAP32[980>>2]|0;
   $29 = ($27>>>0)<($28>>>0);
   $30 = $i;
   if (!($29)) {
    break;
   }
   $31 = HEAP32[1672>>2]|0;
   $32 = $c;
   $33 = HEAP32[1680>>2]|0;
   $34 = $33 >>> 8;
   $35 = (($map) + ($34<<2)|0);
   $36 = (($35) + ($32)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37 << 24 >> 24;
   $39 = (($38) - 48)|0;
   $40 = Math_imul($31, $39)|0;
   $41 = (($30) + ($40))|0;
   $42 = $thumb;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = HEAP32[1676>>2]|0;
   (_putc($45,$46)|0);
   $47 = $c;
   $48 = (($47) + 1)|0;
   $c = $48;
  }
  $49 = (($30) + 1)|0;
  $i = $49;
 }
 $50 = $thumb;
 _free($50);
 STACKTOP = sp;return;
}
function _rollei_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $thumb = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP16[580260>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[580262>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 HEAP32[1672>>2] = $4;
 $5 = HEAP32[1672>>2]|0;
 $6 = (_calloc($5,2)|0);
 $thumb = $6;
 $7 = $thumb;
 _merror($7,594480);
 $8 = HEAP32[1676>>2]|0;
 $9 = HEAP16[580260>>1]|0;
 $10 = $9&65535;
 $11 = HEAP16[580262>>1]|0;
 $12 = $11&65535;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 (_fprintf($8,594415,$vararg_buffer)|0);
 $13 = $thumb;
 $14 = HEAP32[1672>>2]|0;
 _read_shorts($13,$14);
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = HEAP32[1672>>2]|0;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = $thumb;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 << 3;
  $24 = HEAP32[1676>>2]|0;
  (_putc($23,$24)|0);
  $25 = $i;
  $26 = $thumb;
  $27 = (($26) + ($25<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = $29 >> 5;
  $31 = $30 << 2;
  $32 = HEAP32[1676>>2]|0;
  (_putc($31,$32)|0);
  $33 = $i;
  $34 = $thumb;
  $35 = (($34) + ($33<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = $37 >> 11;
  $39 = $38 << 3;
  $40 = HEAP32[1676>>2]|0;
  (_putc($39,$40)|0);
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 $43 = $thumb;
 _free($43);
 STACKTOP = sp;return;
}
function _rollei_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $isix = 0, $iten = 0, $pixel = 0, $todo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 80|0;
 $todo = sp;
 $iten = 0;
 $buffer = 0;
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[580244>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = ($4*5)|0;
 $6 = (($5|0) / 8)&-1;
 $isix = $6;
 L1: while(1) {
  $7 = HEAP32[944>>2]|0;
  $8 = (_fread($pixel,1,10,$7)|0);
  $9 = ($8|0)==(10);
  if (!($9)) {
   break;
  }
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = ($10>>>0)<(10);
   if (!($11)) {
    break;
   }
   $12 = $iten;
   $13 = (($12) + 1)|0;
   $iten = $13;
   $14 = $i;
   $15 = (($todo) + ($14<<2)|0);
   HEAP32[$15>>2] = $12;
   $16 = $i;
   $17 = (($pixel) + ($16)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 << 8;
   $21 = $i;
   $22 = (($21) + 1)|0;
   $23 = (($pixel) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $20 | $25;
   $27 = $i;
   $28 = (($27) + 1)|0;
   $29 = (($todo) + ($28<<2)|0);
   HEAP32[$29>>2] = $26;
   $30 = $i;
   $31 = (($pixel) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 >> 2;
   $35 = $buffer;
   $36 = $35 << 6;
   $37 = $34 | $36;
   $buffer = $37;
   $38 = $i;
   $39 = (($38) + 2)|0;
   $i = $39;
  }
  while(1) {
   $40 = $i;
   $41 = ($40>>>0)<(16);
   if (!($41)) {
    break;
   }
   $42 = $isix;
   $43 = (($42) + 1)|0;
   $isix = $43;
   $44 = $i;
   $45 = (($todo) + ($44<<2)|0);
   HEAP32[$45>>2] = $42;
   $46 = $buffer;
   $47 = $i;
   $48 = (14 - ($47))|0;
   $49 = ($48*5)|0;
   $50 = $46 >>> $49;
   $51 = $i;
   $52 = (($51) + 1)|0;
   $53 = (($todo) + ($52<<2)|0);
   HEAP32[$53>>2] = $50;
   $54 = $i;
   $55 = (($54) + 2)|0;
   $i = $55;
  }
  $i = 0;
  while(1) {
   $56 = $i;
   $57 = ($56>>>0)<(16);
   if (!($57)) {
    continue L1;
   }
   $58 = $i;
   $59 = (($58) + 1)|0;
   $60 = (($todo) + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 1023;
   $63 = $62&65535;
   $64 = $i;
   $65 = (($todo) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[1032>>2]|0;
   $68 = (($67) + ($66<<1)|0);
   HEAP16[$68>>1] = $63;
   $69 = $i;
   $70 = (($69) + 2)|0;
   $i = $70;
  }
 }
 HEAP32[1040>>2] = 1023;
 STACKTOP = sp;return;
}
function _raw($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row;
 $1 = $col;
 $2 = $0;
 $3 = HEAP16[580244>>1]|0;
 $4 = $3&65535;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  $20 = 0;
  STACKTOP = sp;return ($20|0);
 }
 $6 = $1;
 $7 = HEAP16[580226>>1]|0;
 $8 = $7&65535;
 $9 = ($6>>>0)<($8>>>0);
 if (!($9)) {
  $20 = 0;
  STACKTOP = sp;return ($20|0);
 }
 $10 = $0;
 $11 = HEAP16[580226>>1]|0;
 $12 = $11&65535;
 $13 = Math_imul($10, $12)|0;
 $14 = $1;
 $15 = (($13) + ($14))|0;
 $16 = HEAP32[1032>>2]|0;
 $17 = (($16) + ($15<<1)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = $19;
 STACKTOP = sp;return ($20|0);
}
function _phase_one_flat_field($is_float,$nc) {
 $is_float = $is_float|0;
 $nc = $nc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cend = 0;
 var $col = 0, $head = 0, $high = 0, $mrow = 0, $mult = 0, $num = 0.0, $rend = 0, $row = 0, $wide = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp + 72|0;
 $mult = sp;
 $0 = $is_float;
 $1 = $nc;
 _read_shorts($head,8);
 $2 = ((($head)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($head)) + 6|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($4, $7)|0;
 $9 = ((($head)) + 8|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = Math_imul($8, $11)|0;
 $13 = ((($head)) + 10|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = Math_imul($12, $15)|0;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = ((($head)) + 4|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = ((($head)) + 8|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = (($20|0) / ($23|0))&-1;
 $25 = ((($head)) + 4|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = ((($head)) + 8|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = (($27|0) % ($30|0))&-1;
 $32 = ($31|0)!=(0);
 $33 = $32&1;
 $34 = (($24) + ($33))|0;
 $wide = $34;
 $35 = ((($head)) + 6|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = ((($head)) + 10|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = (($37|0) / ($40|0))&-1;
 $42 = ((($head)) + 6|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ((($head)) + 10|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = (($44|0) % ($47|0))&-1;
 $49 = ($48|0)!=(0);
 $50 = $49&1;
 $51 = (($41) + ($50))|0;
 $high = $51;
 $52 = $1;
 $53 = $wide;
 $54 = Math_imul($52, $53)|0;
 $55 = (_calloc($54,4)|0);
 $mrow = $55;
 $56 = $mrow;
 _merror($56,594495);
 $y = 0;
 while(1) {
  $57 = $y;
  $58 = $high;
  $59 = ($57>>>0)<($58>>>0);
  if (!($59)) {
   break;
  }
  $x = 0;
  while(1) {
   $60 = $x;
   $61 = $wide;
   $62 = ($60>>>0)<($61>>>0);
   if (!($62)) {
    break;
   }
   $c = 0;
   while(1) {
    $63 = $c;
    $64 = $1;
    $65 = ($63>>>0)<($64>>>0);
    if (!($65)) {
     break;
    }
    $66 = $0;
    $67 = ($66|0)!=(0);
    if ($67) {
     $68 = (+_getreal(11));
     $74 = $68;
    } else {
     $69 = (_get2()|0);
     $70 = $69&65535;
     $71 = (+($70|0));
     $72 = $71 / 32768.0;
     $74 = $72;
    }
    $73 = $74;
    $num = $73;
    $75 = $y;
    $76 = ($75|0)==(0);
    $77 = $num;
    $78 = $c;
    $79 = $wide;
    $80 = Math_imul($78, $79)|0;
    $81 = $x;
    $82 = (($80) + ($81))|0;
    $83 = $mrow;
    $84 = (($83) + ($82<<2)|0);
    if ($76) {
     HEAPF32[$84>>2] = $77;
    } else {
     $85 = +HEAPF32[$84>>2];
     $86 = $77 - $85;
     $87 = ((($head)) + 10|0);
     $88 = HEAP16[$87>>1]|0;
     $89 = $88&65535;
     $90 = (+($89|0));
     $91 = $86 / $90;
     $92 = $c;
     $93 = (($92) + 1)|0;
     $94 = $wide;
     $95 = Math_imul($93, $94)|0;
     $96 = $x;
     $97 = (($95) + ($96))|0;
     $98 = $mrow;
     $99 = (($98) + ($97<<2)|0);
     HEAPF32[$99>>2] = $91;
    }
    $100 = $c;
    $101 = (($100) + 2)|0;
    $c = $101;
   }
   $102 = $x;
   $103 = (($102) + 1)|0;
   $x = $103;
  }
  $104 = $y;
  $105 = ($104|0)==(0);
  L23: do {
   if (!($105)) {
    $106 = ((($head)) + 2|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = $y;
    $110 = ((($head)) + 10|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = $111&65535;
    $113 = Math_imul($109, $112)|0;
    $114 = (($108) + ($113))|0;
    $rend = $114;
    $115 = $rend;
    $116 = ((($head)) + 10|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = $117&65535;
    $119 = (($115) - ($118))|0;
    $row = $119;
    while(1) {
     $120 = $row;
     $121 = HEAP16[580244>>1]|0;
     $122 = $121&65535;
     $123 = ($120>>>0)<($122>>>0);
     if (!($123)) {
      break L23;
     }
     $124 = $row;
     $125 = $rend;
     $126 = ($124>>>0)<($125>>>0);
     if (!($126)) {
      break L23;
     }
     $127 = $row;
     $128 = ((($head)) + 2|0);
     $129 = HEAP16[$128>>1]|0;
     $130 = $129&65535;
     $131 = ((($head)) + 6|0);
     $132 = HEAP16[$131>>1]|0;
     $133 = $132&65535;
     $134 = (($130) + ($133))|0;
     $135 = ((($head)) + 10|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136&65535;
     $138 = (($134) - ($137))|0;
     $139 = ($127>>>0)<($138>>>0);
     if (!($139)) {
      break L23;
     }
     $x = 1;
     while(1) {
      $140 = $x;
      $141 = $wide;
      $142 = ($140>>>0)<($141>>>0);
      if (!($142)) {
       break;
      }
      $c = 0;
      while(1) {
       $143 = $c;
       $144 = $1;
       $145 = ($143>>>0)<($144>>>0);
       if (!($145)) {
        break;
       }
       $146 = $c;
       $147 = $wide;
       $148 = Math_imul($146, $147)|0;
       $149 = $x;
       $150 = (($148) + ($149))|0;
       $151 = (($150) - 1)|0;
       $152 = $mrow;
       $153 = (($152) + ($151<<2)|0);
       $154 = +HEAPF32[$153>>2];
       $155 = $c;
       $156 = (($mult) + ($155<<2)|0);
       HEAPF32[$156>>2] = $154;
       $157 = $c;
       $158 = $wide;
       $159 = Math_imul($157, $158)|0;
       $160 = $x;
       $161 = (($159) + ($160))|0;
       $162 = $mrow;
       $163 = (($162) + ($161<<2)|0);
       $164 = +HEAPF32[$163>>2];
       $165 = $c;
       $166 = (($mult) + ($165<<2)|0);
       $167 = +HEAPF32[$166>>2];
       $168 = $164 - $167;
       $169 = ((($head)) + 8|0);
       $170 = HEAP16[$169>>1]|0;
       $171 = $170&65535;
       $172 = (+($171|0));
       $173 = $168 / $172;
       $174 = $c;
       $175 = (($174) + 1)|0;
       $176 = (($mult) + ($175<<2)|0);
       HEAPF32[$176>>2] = $173;
       $177 = $c;
       $178 = (($177) + 2)|0;
       $c = $178;
      }
      $179 = HEAP16[$head>>1]|0;
      $180 = $179&65535;
      $181 = $x;
      $182 = ((($head)) + 8|0);
      $183 = HEAP16[$182>>1]|0;
      $184 = $183&65535;
      $185 = Math_imul($181, $184)|0;
      $186 = (($180) + ($185))|0;
      $cend = $186;
      $187 = $cend;
      $188 = ((($head)) + 8|0);
      $189 = HEAP16[$188>>1]|0;
      $190 = $189&65535;
      $191 = (($187) - ($190))|0;
      $col = $191;
      while(1) {
       $192 = $col;
       $193 = HEAP16[580226>>1]|0;
       $194 = $193&65535;
       $195 = ($192>>>0)<($194>>>0);
       if (!($195)) {
        break;
       }
       $196 = $col;
       $197 = $cend;
       $198 = ($196>>>0)<($197>>>0);
       if (!($198)) {
        break;
       }
       $199 = $col;
       $200 = HEAP16[$head>>1]|0;
       $201 = $200&65535;
       $202 = ((($head)) + 4|0);
       $203 = HEAP16[$202>>1]|0;
       $204 = $203&65535;
       $205 = (($201) + ($204))|0;
       $206 = ((($head)) + 8|0);
       $207 = HEAP16[$206>>1]|0;
       $208 = $207&65535;
       $209 = (($205) - ($208))|0;
       $210 = ($199>>>0)<($209>>>0);
       if (!($210)) {
        break;
       }
       $211 = $1;
       $212 = ($211|0)>(2);
       if ($212) {
        $213 = HEAP32[776>>2]|0;
        $214 = $row;
        $215 = HEAP16[448958>>1]|0;
        $216 = $215&65535;
        $217 = (($214) - ($216))|0;
        $218 = $217 << 1;
        $219 = $218 & 14;
        $220 = $col;
        $221 = HEAP16[448956>>1]|0;
        $222 = $221&65535;
        $223 = (($220) - ($222))|0;
        $224 = $223 & 1;
        $225 = (($219) + ($224))|0;
        $226 = $225 << 1;
        $227 = $213 >>> $226;
        $228 = $227 & 3;
        $229 = $228;
       } else {
        $229 = 0;
       }
       $c = $229;
       $230 = $c;
       $231 = $230 & 1;
       $232 = ($231|0)!=(0);
       if (!($232)) {
        $233 = $row;
        $234 = HEAP16[580226>>1]|0;
        $235 = $234&65535;
        $236 = Math_imul($233, $235)|0;
        $237 = $col;
        $238 = (($236) + ($237))|0;
        $239 = HEAP32[1032>>2]|0;
        $240 = (($239) + ($238<<1)|0);
        $241 = HEAP16[$240>>1]|0;
        $242 = $241&65535;
        $243 = (+($242|0));
        $244 = $c;
        $245 = (($mult) + ($244<<2)|0);
        $246 = +HEAPF32[$245>>2];
        $247 = $243 * $246;
        $248 = (~~(($247))>>>0);
        $c = $248;
        $249 = $c;
        $250 = ($249>>>0)<(65535);
        $251 = $c;
        $252 = $250 ? $251 : 65535;
        $253 = (0)>($252>>>0);
        if ($253) {
         $259 = 0;
        } else {
         $254 = $c;
         $255 = ($254>>>0)<(65535);
         $256 = $c;
         $257 = $255 ? $256 : 65535;
         $259 = $257;
        }
        $258 = $259&65535;
        $260 = $row;
        $261 = HEAP16[580226>>1]|0;
        $262 = $261&65535;
        $263 = Math_imul($260, $262)|0;
        $264 = $col;
        $265 = (($263) + ($264))|0;
        $266 = HEAP32[1032>>2]|0;
        $267 = (($266) + ($265<<1)|0);
        HEAP16[$267>>1] = $258;
       }
       $c = 0;
       while(1) {
        $268 = $c;
        $269 = $1;
        $270 = ($268>>>0)<($269>>>0);
        if (!($270)) {
         break;
        }
        $271 = $c;
        $272 = (($271) + 1)|0;
        $273 = (($mult) + ($272<<2)|0);
        $274 = +HEAPF32[$273>>2];
        $275 = $c;
        $276 = (($mult) + ($275<<2)|0);
        $277 = +HEAPF32[$276>>2];
        $278 = $277 + $274;
        HEAPF32[$276>>2] = $278;
        $279 = $c;
        $280 = (($279) + 2)|0;
        $c = $280;
       }
       $281 = $col;
       $282 = (($281) + 1)|0;
       $col = $282;
      }
      $283 = $x;
      $284 = (($283) + 1)|0;
      $x = $284;
     }
     $x = 0;
     while(1) {
      $285 = $x;
      $286 = $wide;
      $287 = ($285>>>0)<($286>>>0);
      if (!($287)) {
       break;
      }
      $c = 0;
      while(1) {
       $288 = $c;
       $289 = $1;
       $290 = ($288>>>0)<($289>>>0);
       if (!($290)) {
        break;
       }
       $291 = $c;
       $292 = (($291) + 1)|0;
       $293 = $wide;
       $294 = Math_imul($292, $293)|0;
       $295 = $x;
       $296 = (($294) + ($295))|0;
       $297 = $mrow;
       $298 = (($297) + ($296<<2)|0);
       $299 = +HEAPF32[$298>>2];
       $300 = $c;
       $301 = $wide;
       $302 = Math_imul($300, $301)|0;
       $303 = $x;
       $304 = (($302) + ($303))|0;
       $305 = $mrow;
       $306 = (($305) + ($304<<2)|0);
       $307 = +HEAPF32[$306>>2];
       $308 = $307 + $299;
       HEAPF32[$306>>2] = $308;
       $309 = $c;
       $310 = (($309) + 2)|0;
       $c = $310;
      }
      $311 = $x;
      $312 = (($311) + 1)|0;
      $x = $312;
     }
     $313 = $row;
     $314 = (($313) + 1)|0;
     $row = $314;
    }
   }
  } while(0);
  $315 = $y;
  $316 = (($315) + 1)|0;
  $y = $316;
 }
 $317 = $mrow;
 _free($317);
 STACKTOP = sp;return;
}
function _phase_one_correct() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0.0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0, $546 = 0.0, $547 = 0.0, $548 = 0.0;
 var $549 = 0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0.0;
 var $585 = 0.0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0.0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0.0;
 var $837 = 0.0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0, $844 = 0.0, $845 = 0.0, $846 = 0.0, $847 = 0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0.0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0.0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0.0;
 var $927 = 0.0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0.0, $938 = 0, $939 = 0.0, $94 = 0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0, $944 = 0.0;
 var $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0.0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0.0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $98 = 0.0, $99 = 0, $cf = 0, $cf6 = 0, $cfrac = 0.0, $cip = 0, $col = 0, $cx = 0;
 var $cx5 = 0, $data = 0, $dev = 0, $diff = 0, $entries = 0, $frac = 0.0, $head = 0, $i = 0, $j = 0, $k = 0, $lc = 0, $lc1 = 0, $len = 0, $max = 0, $mindiff = 0, $mult = 0, $num = 0.0, $off_412 = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $poly = 0, $qc = 0, $qc4 = 0, $qlin_applied = 0, $qmult = 0, $qmult_applied = 0, $qr = 0, $qr3 = 0, $ref = 0, $ref2 = 0, $row = 0, $save = 0, $sum = 0, $tag = 0, $type = 0, $v = 0;
 var $val = 0, $vararg_buffer = 0, $xval = 0, $yval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $val = sp + 424|0;
 $dev = sp + 408|0;
 $head = sp + 364|0;
 $poly = sp + 320|0;
 $mult = sp + 296|0;
 $yval = sp + 288|0;
 $xval = sp + 280|0;
 $lc = sp + 592|0;
 $ref = sp + 560|0;
 $cx = sp + 180|0;
 $cf = sp + 104|0;
 $qmult = sp + 88|0;
 $lc1 = sp + 504|0;
 $ref2 = sp + 488|0;
 $cx5 = sp + 40|0;
 $cf6 = sp + 4|0;
 $mindiff = 2147483647;
 $off_412 = 0;
 $qmult_applied = 0;
 $qlin_applied = 0;
 $0 = HEAP32[696>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[1684>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[712>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[447952>>2]|0;
  (_fprintf($6,594542,$vararg_buffer)|0);
 }
 $7 = HEAP32[944>>2]|0;
 $8 = HEAP32[1520>>2]|0;
 (_fseek($7,$8,0)|0);
 $9 = (_get2()|0);
 HEAP16[448960>>1] = $9;
 $10 = HEAP32[944>>2]|0;
 (_fseek($10,6,1)|0);
 $11 = HEAP32[944>>2]|0;
 $12 = HEAP32[1520>>2]|0;
 $13 = (_get4()|0);
 $14 = (($12) + ($13))|0;
 (_fseek($11,$14,0)|0);
 $15 = (_get4()|0);
 $entries = $15;
 (_get4()|0);
 while(1) {
  $16 = $entries;
  $17 = (($16) + -1)|0;
  $entries = $17;
  $18 = ($16|0)!=(0);
  if (!($18)) {
   break;
  }
  $19 = (_get4()|0);
  $tag = $19;
  $20 = (_get4()|0);
  $len = $20;
  $21 = (_get4()|0);
  $data = $21;
  $22 = HEAP32[944>>2]|0;
  $23 = (_ftell($22)|0);
  $save = $23;
  $24 = HEAP32[944>>2]|0;
  $25 = HEAP32[1520>>2]|0;
  $26 = $data;
  $27 = (($25) + ($26))|0;
  (_fseek($24,$27,0)|0);
  $28 = $tag;
  $29 = ($28|0)==(1049);
  L10: do {
   if ($29) {
    (_get4()|0);
    $i = 0;
    while(1) {
     $30 = $i;
     $31 = ($30|0)<(8);
     if (!($31)) {
      break;
     }
     $32 = (+_getreal(11));
     $33 = $32;
     $34 = $i;
     $35 = (($poly) + ($34<<2)|0);
     HEAPF32[$35>>2] = $33;
     $36 = $i;
     $37 = (($36) + 1)|0;
     $i = $37;
    }
    $38 = +HEAPF32[(1720)>>2];
    $39 = ((($poly)) + 28|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $38 - $40;
    $42 = ((($poly)) + 24|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $41 * $43;
    $45 = $44 + 1.0;
    $46 = ((($poly)) + 12|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $47 + $45;
    HEAPF32[$46>>2] = $48;
    $i = 0;
    while(1) {
     $49 = $i;
     $50 = ($49|0)<(65536);
     if (!($50)) {
      label = 30;
      break L10;
     }
     $51 = ((($poly)) + 20|0);
     $52 = +HEAPF32[$51>>2];
     $53 = $i;
     $54 = (+($53|0));
     $55 = $52 * $54;
     $56 = ((($poly)) + 12|0);
     $57 = +HEAPF32[$56>>2];
     $58 = $55 + $57;
     $59 = $i;
     $60 = (+($59|0));
     $61 = $58 * $60;
     $62 = ((($poly)) + 4|0);
     $63 = +HEAPF32[$62>>2];
     $64 = $61 + $63;
     $num = $64;
     $65 = $num;
     $66 = $65 < 65535.0;
     $67 = $num;
     $68 = $66 ? $67 : 65535.0;
     $69 = 0.0 > $68;
     if ($69) {
      $75 = 0.0;
     } else {
      $70 = $num;
      $71 = $70 < 65535.0;
      $72 = $num;
      $73 = $71 ? $72 : 65535.0;
      $75 = $73;
     }
     $74 = (~~(($75))&65535);
     $76 = $i;
     $77 = (448962 + ($76<<1)|0);
     HEAP16[$77>>1] = $74;
     $78 = $i;
     $79 = (($78) + 1)|0;
     $i = $79;
    }
   } else {
    $80 = $tag;
    $81 = ($80|0)==(1050);
    if ($81) {
     $i = 0;
     while(1) {
      $82 = $i;
      $83 = ($82|0)<(4);
      if (!($83)) {
       break;
      }
      $84 = (+_getreal(11));
      $85 = $84;
      $86 = $i;
      $87 = (($poly) + ($86<<2)|0);
      HEAPF32[$87>>2] = $85;
      $88 = $i;
      $89 = (($88) + 1)|0;
      $i = $89;
     }
     $i = 0;
     while(1) {
      $90 = $i;
      $91 = ($90|0)<(65536);
      if (!($91)) {
       label = 30;
       break L10;
      }
      $num = 0.0;
      $j = 4;
      while(1) {
       $92 = $j;
       $93 = (($92) + -1)|0;
       $j = $93;
       $94 = ($92|0)!=(0);
       $95 = $num;
       $96 = $i;
       $97 = (+($96|0));
       if (!($94)) {
        break;
       }
       $98 = $95 * $97;
       $99 = $j;
       $100 = (($poly) + ($99<<2)|0);
       $101 = +HEAPF32[$100>>2];
       $102 = $98 + $101;
       $num = $102;
      }
      $103 = $95 + $97;
      $104 = $103 < 65535.0;
      if ($104) {
       $105 = $num;
       $106 = $i;
       $107 = (+($106|0));
       $108 = $105 + $107;
       $110 = $108;
      } else {
       $110 = 65535.0;
      }
      $109 = 0.0 > $110;
      if ($109) {
       $121 = 0.0;
      } else {
       $111 = $num;
       $112 = $i;
       $113 = (+($112|0));
       $114 = $111 + $113;
       $115 = $114 < 65535.0;
       if ($115) {
        $116 = $num;
        $117 = $i;
        $118 = (+($117|0));
        $119 = $116 + $118;
        $121 = $119;
       } else {
        $121 = 65535.0;
       }
      }
      $120 = (~~(($121))&65535);
      $122 = $i;
      $123 = (448962 + ($122<<1)|0);
      HEAP16[$123>>1] = $120;
      $124 = $i;
      $125 = (($124) + 1)|0;
      $i = $125;
     }
    }
    $161 = $tag;
    $162 = ($161|0)==(1024);
    if ($162) {
     L45: while(1) {
      $163 = $len;
      $164 = (($163) - 8)|0;
      $len = $164;
      $165 = ($164|0)>=(0);
      if (!($165)) {
       break L10;
      }
      $166 = (_get2()|0);
      $167 = $166&65535;
      $col = $167;
      $168 = (_get2()|0);
      $169 = $168&65535;
      $row = $169;
      $170 = (_get2()|0);
      $171 = $170&65535;
      $type = $171;
      (_get2()|0);
      $172 = $col;
      $173 = HEAP16[580226>>1]|0;
      $174 = $173&65535;
      $175 = ($172>>>0)>=($174>>>0);
      if ($175) {
       continue;
      }
      $176 = $type;
      $177 = ($176|0)==(131);
      $178 = $type;
      $179 = ($178|0)==(137);
      $or$cond3 = $177 | $179;
      if (!($or$cond3)) {
       $308 = $type;
       $309 = ($308|0)==(129);
       if (!($309)) {
        continue;
       }
       $310 = $row;
       $311 = HEAP16[580244>>1]|0;
       $312 = $311&65535;
       $313 = ($310>>>0)>=($312>>>0);
       if ($313) {
        continue;
       }
       $314 = HEAP32[776>>2]|0;
       $315 = $row;
       $316 = HEAP16[448958>>1]|0;
       $317 = $316&65535;
       $318 = (($315) - ($317))|0;
       $319 = $318 << 1;
       $320 = $319 & 14;
       $321 = $col;
       $322 = HEAP16[448956>>1]|0;
       $323 = $322&65535;
       $324 = (($321) - ($323))|0;
       $325 = $324 & 1;
       $326 = (($320) + ($325))|0;
       $327 = $326 << 1;
       $328 = $314 >>> $327;
       $329 = $328 & 3;
       $330 = ($329|0)!=(1);
       $331 = $330&1;
       $332 = $331<<2;
       $j = $332;
       $sum = 0;
       $333 = $j;
       $i = $333;
       while(1) {
        $334 = $i;
        $335 = $j;
        $336 = (($335) + 8)|0;
        $337 = ($334|0)<($336|0);
        if (!($337)) {
         break;
        }
        $338 = $row;
        $339 = $i;
        $340 = (594518 + ($339<<1)|0);
        $341 = HEAP8[$340>>0]|0;
        $342 = $341 << 24 >> 24;
        $343 = (($338) + ($342))|0;
        $344 = $col;
        $345 = $i;
        $346 = (594518 + ($345<<1)|0);
        $347 = ((($346)) + 1|0);
        $348 = HEAP8[$347>>0]|0;
        $349 = $348 << 24 >> 24;
        $350 = (($344) + ($349))|0;
        $351 = (_raw($343,$350)|0);
        $352 = $sum;
        $353 = (($352) + ($351))|0;
        $sum = $353;
        $354 = $i;
        $355 = (($354) + 1)|0;
        $i = $355;
       }
       $356 = $sum;
       $357 = (($356) + 4)|0;
       $358 = $357 >> 3;
       $359 = $358&65535;
       $360 = $row;
       $361 = HEAP16[580226>>1]|0;
       $362 = $361&65535;
       $363 = Math_imul($360, $362)|0;
       $364 = $col;
       $365 = (($363) + ($364))|0;
       $366 = HEAP32[1032>>2]|0;
       $367 = (($366) + ($365<<1)|0);
       HEAP16[$367>>1] = $359;
       continue;
      }
      $row = 0;
      while(1) {
       $180 = $row;
       $181 = HEAP16[580244>>1]|0;
       $182 = $181&65535;
       $183 = ($180>>>0)<($182>>>0);
       if (!($183)) {
        continue L45;
       }
       $184 = HEAP32[776>>2]|0;
       $185 = $row;
       $186 = HEAP16[448958>>1]|0;
       $187 = $186&65535;
       $188 = (($185) - ($187))|0;
       $189 = $188 << 1;
       $190 = $189 & 14;
       $191 = $col;
       $192 = HEAP16[448956>>1]|0;
       $193 = $192&65535;
       $194 = (($191) - ($193))|0;
       $195 = $194 & 1;
       $196 = (($190) + ($195))|0;
       $197 = $196 << 1;
       $198 = $184 >>> $197;
       $199 = $198 & 3;
       $200 = ($199|0)==(1);
       if ($200) {
        $i = 0;
        $sum = 0;
        while(1) {
         $201 = $i;
         $202 = ($201|0)<(4);
         if (!($202)) {
          break;
         }
         $203 = $row;
         $204 = $i;
         $205 = (594518 + ($204<<1)|0);
         $206 = HEAP8[$205>>0]|0;
         $207 = $206 << 24 >> 24;
         $208 = (($203) + ($207))|0;
         $209 = $col;
         $210 = $i;
         $211 = (594518 + ($210<<1)|0);
         $212 = ((($211)) + 1|0);
         $213 = HEAP8[$212>>0]|0;
         $214 = $213 << 24 >> 24;
         $215 = (($209) + ($214))|0;
         $216 = (_raw($208,$215)|0);
         $217 = $i;
         $218 = (($val) + ($217<<2)|0);
         HEAP32[$218>>2] = $216;
         $219 = $sum;
         $220 = (($219) + ($216))|0;
         $sum = $220;
         $221 = $i;
         $222 = (($221) + 1)|0;
         $i = $222;
        }
        $i = 0;
        $max = 0;
        while(1) {
         $223 = $i;
         $224 = ($223|0)<(4);
         if (!($224)) {
          break;
         }
         $225 = $i;
         $226 = (($val) + ($225<<2)|0);
         $227 = HEAP32[$226>>2]|0;
         $228 = $227 << 2;
         $229 = $sum;
         $230 = (($228) - ($229))|0;
         $231 = (Math_abs(($230|0))|0);
         $232 = $i;
         $233 = (($dev) + ($232<<2)|0);
         HEAP32[$233>>2] = $231;
         $234 = $max;
         $235 = (($dev) + ($234<<2)|0);
         $236 = HEAP32[$235>>2]|0;
         $237 = $i;
         $238 = (($dev) + ($237<<2)|0);
         $239 = HEAP32[$238>>2]|0;
         $240 = ($236|0)<($239|0);
         if ($240) {
          $241 = $i;
          $max = $241;
         }
         $242 = $i;
         $243 = (($242) + 1)|0;
         $i = $243;
        }
        $244 = $sum;
        $245 = $max;
        $246 = (($val) + ($245<<2)|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = (($244) - ($247))|0;
        $249 = (+($248|0));
        $250 = $249 / 3.0;
        $251 = $250 + 0.5;
        $252 = (~~(($251))&65535);
        $253 = $row;
        $254 = HEAP16[580226>>1]|0;
        $255 = $254&65535;
        $256 = Math_imul($253, $255)|0;
        $257 = $col;
        $258 = (($256) + ($257))|0;
        $259 = HEAP32[1032>>2]|0;
        $260 = (($259) + ($258<<1)|0);
        HEAP16[$260>>1] = $252;
       } else {
        $sum = 0;
        $i = 8;
        while(1) {
         $261 = $i;
         $262 = ($261|0)<(12);
         if (!($262)) {
          break;
         }
         $263 = $row;
         $264 = $i;
         $265 = (594518 + ($264<<1)|0);
         $266 = HEAP8[$265>>0]|0;
         $267 = $266 << 24 >> 24;
         $268 = (($263) + ($267))|0;
         $269 = $col;
         $270 = $i;
         $271 = (594518 + ($270<<1)|0);
         $272 = ((($271)) + 1|0);
         $273 = HEAP8[$272>>0]|0;
         $274 = $273 << 24 >> 24;
         $275 = (($269) + ($274))|0;
         $276 = (_raw($268,$275)|0);
         $277 = $sum;
         $278 = (($277) + ($276))|0;
         $sum = $278;
         $279 = $i;
         $280 = (($279) + 1)|0;
         $i = $280;
        }
        $281 = $sum;
        $282 = (+($281|0));
        $283 = $282 * 0.073223300000000005;
        $284 = 0.5 + $283;
        $285 = $row;
        $286 = $col;
        $287 = (($286) - 2)|0;
        $288 = (_raw($285,$287)|0);
        $289 = $row;
        $290 = $col;
        $291 = (($290) + 2)|0;
        $292 = (_raw($289,$291)|0);
        $293 = (($288) + ($292))|0;
        $294 = (+($293|0));
        $295 = $294 * 0.35355340000000002;
        $296 = $284 + $295;
        $297 = (~~(($296))&65535);
        $298 = $row;
        $299 = HEAP16[580226>>1]|0;
        $300 = $299&65535;
        $301 = Math_imul($298, $300)|0;
        $302 = $col;
        $303 = (($301) + ($302))|0;
        $304 = HEAP32[1032>>2]|0;
        $305 = (($304) + ($303<<1)|0);
        HEAP16[$305>>1] = $297;
       }
       $306 = $row;
       $307 = (($306) + 1)|0;
       $row = $307;
      }
     }
    }
    $368 = $tag;
    $369 = ($368|0)==(1025);
    if ($369) {
     _phase_one_flat_field(1,2);
     break;
    }
    $370 = $tag;
    $371 = ($370|0)==(1046);
    $372 = $tag;
    $373 = ($372|0)==(1040);
    $or$cond5 = $371 | $373;
    if ($or$cond5) {
     _phase_one_flat_field(0,2);
     break;
    }
    $374 = $tag;
    $375 = ($374|0)==(1035);
    if ($375) {
     _phase_one_flat_field(0,4);
     break;
    }
    $376 = $tag;
    $377 = ($376|0)==(1042);
    if ($377) {
     $378 = HEAP32[944>>2]|0;
     (_fseek($378,36,1)|0);
     $379 = (_get2()|0);
     $380 = $379&65535;
     $381 = HEAP32[(1696)>>2]|0;
     $382 = (($380) - ($381))|0;
     $383 = (Math_abs(($382|0))|0);
     $diff = $383;
     $384 = $mindiff;
     $385 = $diff;
     $386 = ($384|0)>($385|0);
     if (!($386)) {
      break;
     }
     $387 = $diff;
     $mindiff = $387;
     $388 = HEAP32[944>>2]|0;
     $389 = (_ftell($388)|0);
     $390 = (($389) - 38)|0;
     $off_412 = $390;
     break;
    }
    $391 = $tag;
    $392 = ($391|0)!=(1055);
    $393 = $qlin_applied;
    $394 = ($393|0)!=(0);
    $or$cond7 = $392 | $394;
    if (!($or$cond7)) {
     $qr = 0;
     while(1) {
      $395 = $qr;
      $396 = ($395|0)<(2);
      if (!($396)) {
       break;
      }
      $qc = 0;
      while(1) {
       $397 = $qc;
       $398 = ($397|0)<(2);
       if (!($398)) {
        break;
       }
       $i = 0;
       while(1) {
        $399 = $i;
        $400 = ($399|0)<(16);
        if (!($400)) {
         break;
        }
        $401 = (_get4()|0);
        $402 = $401&65535;
        $403 = $i;
        $404 = $qc;
        $405 = $qr;
        $406 = (($lc) + ($405<<6)|0);
        $407 = (($406) + ($404<<5)|0);
        $408 = (($407) + ($403<<1)|0);
        HEAP16[$408>>1] = $402;
        $409 = $i;
        $410 = (($409) + 1)|0;
        $i = $410;
       }
       $411 = $qc;
       $412 = (($411) + 1)|0;
       $qc = $412;
      }
      $413 = $qr;
      $414 = (($413) + 1)|0;
      $qr = $414;
     }
     $i = 0;
     while(1) {
      $415 = $i;
      $416 = ($415|0)<(16);
      if (!($416)) {
       break;
      }
      $v = 0;
      $qr = 0;
      while(1) {
       $417 = $qr;
       $418 = ($417|0)<(2);
       if (!($418)) {
        break;
       }
       $qc = 0;
       while(1) {
        $419 = $qc;
        $420 = ($419|0)<(2);
        if (!($420)) {
         break;
        }
        $421 = $i;
        $422 = $qc;
        $423 = $qr;
        $424 = (($lc) + ($423<<6)|0);
        $425 = (($424) + ($422<<5)|0);
        $426 = (($425) + ($421<<1)|0);
        $427 = HEAP16[$426>>1]|0;
        $428 = $427&65535;
        $429 = $v;
        $430 = (($429) + ($428))|0;
        $v = $430;
        $431 = $qc;
        $432 = (($431) + 1)|0;
        $qc = $432;
       }
       $433 = $qr;
       $434 = (($433) + 1)|0;
       $qr = $434;
      }
      $435 = $v;
      $436 = (($435) + 2)|0;
      $437 = $436 >> 2;
      $438 = $437&65535;
      $439 = $i;
      $440 = (($ref) + ($439<<1)|0);
      HEAP16[$440>>1] = $438;
      $441 = $i;
      $442 = (($441) + 1)|0;
      $i = $442;
     }
     $qr = 0;
     while(1) {
      $443 = $qr;
      $444 = ($443|0)<(2);
      if (!($444)) {
       break;
      }
      $qc = 0;
      while(1) {
       $445 = $qc;
       $446 = ($445|0)<(2);
       if (!($446)) {
        break;
       }
       $i = 0;
       while(1) {
        $447 = $i;
        $448 = ($447|0)<(16);
        if (!($448)) {
         break;
        }
        $449 = $i;
        $450 = $qc;
        $451 = $qr;
        $452 = (($lc) + ($451<<6)|0);
        $453 = (($452) + ($450<<5)|0);
        $454 = (($453) + ($449<<1)|0);
        $455 = HEAP16[$454>>1]|0;
        $456 = $455&65535;
        $457 = $i;
        $458 = (1 + ($457))|0;
        $459 = (($cx) + ($458<<2)|0);
        HEAP32[$459>>2] = $456;
        $460 = $i;
        $461 = (($ref) + ($460<<1)|0);
        $462 = HEAP16[$461>>1]|0;
        $463 = $462&65535;
        $464 = $i;
        $465 = (1 + ($464))|0;
        $466 = (($cf) + ($465<<2)|0);
        HEAP32[$466>>2] = $463;
        $467 = $i;
        $468 = (($467) + 1)|0;
        $i = $468;
       }
       HEAP32[$cf>>2] = 0;
       HEAP32[$cx>>2] = 0;
       $469 = ((($ref)) + 30|0);
       $470 = HEAP16[$469>>1]|0;
       $471 = $470&65535;
       $472 = ($471*65535)|0;
       $473 = $qc;
       $474 = $qr;
       $475 = (($lc) + ($474<<6)|0);
       $476 = (($475) + ($473<<5)|0);
       $477 = ((($476)) + 30|0);
       $478 = HEAP16[$477>>1]|0;
       $479 = $478&65535;
       $480 = (($472>>>0) / ($479>>>0))&-1;
       $481 = ((($cf)) + 68|0);
       HEAP32[$481>>2] = $480;
       $482 = ((($cx)) + 68|0);
       HEAP32[$482>>2] = $480;
       $483 = ((($cf)) + 72|0);
       HEAP32[$483>>2] = 65535;
       $484 = ((($cx)) + 72|0);
       HEAP32[$484>>2] = 65535;
       _cubic_spline($cx,$cf,19);
       $485 = $qr;
       $486 = ($485|0)!=(0);
       $487 = HEAP32[(1712)>>2]|0;
       $488 = $486 ? $487 : 0;
       $row = $488;
       while(1) {
        $489 = $row;
        $490 = $qr;
        $491 = ($490|0)!=(0);
        $492 = HEAP16[580244>>1]|0;
        $493 = $492&65535;
        $494 = HEAP32[(1712)>>2]|0;
        $495 = $491 ? $493 : $494;
        $496 = ($489>>>0)<($495>>>0);
        $497 = $qc;
        if (!($496)) {
         break;
        }
        $498 = ($497|0)!=(0);
        $499 = HEAP32[(1704)>>2]|0;
        $500 = $498 ? $499 : 0;
        $col = $500;
        while(1) {
         $501 = $col;
         $502 = $qc;
         $503 = ($502|0)!=(0);
         $504 = HEAP16[580226>>1]|0;
         $505 = $504&65535;
         $506 = HEAP32[(1704)>>2]|0;
         $507 = $503 ? $505 : $506;
         $508 = ($501>>>0)<($507>>>0);
         $509 = $row;
         if (!($508)) {
          break;
         }
         $510 = HEAP16[580226>>1]|0;
         $511 = $510&65535;
         $512 = Math_imul($509, $511)|0;
         $513 = $col;
         $514 = (($512) + ($513))|0;
         $515 = HEAP32[1032>>2]|0;
         $516 = (($515) + ($514<<1)|0);
         $517 = HEAP16[$516>>1]|0;
         $518 = $517&65535;
         $519 = (448962 + ($518<<1)|0);
         $520 = HEAP16[$519>>1]|0;
         $521 = $row;
         $522 = HEAP16[580226>>1]|0;
         $523 = $522&65535;
         $524 = Math_imul($521, $523)|0;
         $525 = $col;
         $526 = (($524) + ($525))|0;
         $527 = HEAP32[1032>>2]|0;
         $528 = (($527) + ($526<<1)|0);
         HEAP16[$528>>1] = $520;
         $529 = $col;
         $530 = (($529) + 1)|0;
         $col = $530;
        }
        $531 = (($509) + 1)|0;
        $row = $531;
       }
       $532 = (($497) + 1)|0;
       $qc = $532;
      }
      $533 = $qr;
      $534 = (($533) + 1)|0;
      $qr = $534;
     }
     $qlin_applied = 1;
     break;
    }
    $535 = $tag;
    $536 = ($535|0)!=(1054);
    $537 = $qmult_applied;
    $538 = ($537|0)!=(0);
    $or$cond9 = $536 | $538;
    if (!($or$cond9)) {
     ;HEAP32[$qmult>>2]=HEAP32[1724>>2]|0;HEAP32[$qmult+4>>2]=HEAP32[1724+4>>2]|0;HEAP32[$qmult+8>>2]=HEAP32[1724+8>>2]|0;HEAP32[$qmult+12>>2]=HEAP32[1724+12>>2]|0;
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     $539 = (+_getreal(11));
     $540 = 1.0 + $539;
     $541 = $540;
     HEAPF32[$qmult>>2] = $541;
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     $542 = (+_getreal(11));
     $543 = 1.0 + $542;
     $544 = $543;
     $545 = ((($qmult)) + 4|0);
     HEAPF32[$545>>2] = $544;
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     $546 = (+_getreal(11));
     $547 = 1.0 + $546;
     $548 = $547;
     $549 = ((($qmult)) + 8|0);
     HEAPF32[$549>>2] = $548;
     (_get4()|0);
     (_get4()|0);
     (_get4()|0);
     $550 = (+_getreal(11));
     $551 = 1.0 + $550;
     $552 = $551;
     $553 = ((($qmult)) + 8|0);
     $554 = ((($553)) + 4|0);
     HEAPF32[$554>>2] = $552;
     $row = 0;
     while(1) {
      $555 = $row;
      $556 = HEAP16[580244>>1]|0;
      $557 = $556&65535;
      $558 = ($555>>>0)<($557>>>0);
      if (!($558)) {
       break;
      }
      $col = 0;
      while(1) {
       $559 = $col;
       $560 = HEAP16[580226>>1]|0;
       $561 = $560&65535;
       $562 = ($559>>>0)<($561>>>0);
       if (!($562)) {
        break;
       }
       $563 = $col;
       $564 = HEAP32[(1704)>>2]|0;
       $565 = ($563>>>0)>=($564>>>0);
       $566 = $565&1;
       $567 = $row;
       $568 = HEAP32[(1712)>>2]|0;
       $569 = ($567>>>0)>=($568>>>0);
       $570 = $569&1;
       $571 = (($qmult) + ($570<<3)|0);
       $572 = (($571) + ($566<<2)|0);
       $573 = +HEAPF32[$572>>2];
       $574 = $row;
       $575 = HEAP16[580226>>1]|0;
       $576 = $575&65535;
       $577 = Math_imul($574, $576)|0;
       $578 = $col;
       $579 = (($577) + ($578))|0;
       $580 = HEAP32[1032>>2]|0;
       $581 = (($580) + ($579<<1)|0);
       $582 = HEAP16[$581>>1]|0;
       $583 = $582&65535;
       $584 = (+($583|0));
       $585 = $573 * $584;
       $586 = (~~(($585)));
       $i = $586;
       $587 = $i;
       $588 = ($587|0)<(65535);
       $589 = $i;
       $590 = $588 ? $589 : 65535;
       $591 = (0)>($590|0);
       if ($591) {
        $597 = 0;
       } else {
        $592 = $i;
        $593 = ($592|0)<(65535);
        $594 = $i;
        $595 = $593 ? $594 : 65535;
        $597 = $595;
       }
       $596 = $597&65535;
       $598 = $row;
       $599 = HEAP16[580226>>1]|0;
       $600 = $599&65535;
       $601 = Math_imul($598, $600)|0;
       $602 = $col;
       $603 = (($601) + ($602))|0;
       $604 = HEAP32[1032>>2]|0;
       $605 = (($604) + ($603<<1)|0);
       HEAP16[$605>>1] = $596;
       $606 = $col;
       $607 = (($606) + 1)|0;
       $col = $607;
      }
      $608 = $row;
      $609 = (($608) + 1)|0;
      $row = $609;
     }
     $qmult_applied = 1;
     break;
    }
    $610 = $tag;
    $611 = ($610|0)!=(1073);
    $612 = $qmult_applied;
    $613 = ($612|0)!=(0);
    $or$cond11 = $611 | $613;
    if (!($or$cond11)) {
     $i = 0;
     while(1) {
      $614 = $i;
      $615 = ($614|0)<(7);
      if (!($615)) {
       break;
      }
      $616 = (_get4()|0);
      $617 = $616&65535;
      $618 = $i;
      $619 = (($ref2) + ($618<<1)|0);
      HEAP16[$619>>1] = $617;
      $620 = $i;
      $621 = (($620) + 1)|0;
      $i = $621;
     }
     $qr3 = 0;
     while(1) {
      $622 = $qr3;
      $623 = ($622|0)<(2);
      if (!($623)) {
       break;
      }
      $qc4 = 0;
      while(1) {
       $624 = $qc4;
       $625 = ($624|0)<(2);
       if (!($625)) {
        break;
       }
       $i = 0;
       while(1) {
        $626 = $i;
        $627 = ($626|0)<(7);
        if (!($627)) {
         break;
        }
        $628 = (_get4()|0);
        $629 = $628&65535;
        $630 = $i;
        $631 = $qc4;
        $632 = $qr3;
        $633 = (($lc1) + (($632*28)|0)|0);
        $634 = (($633) + (($631*14)|0)|0);
        $635 = (($634) + ($630<<1)|0);
        HEAP16[$635>>1] = $629;
        $636 = $i;
        $637 = (($636) + 1)|0;
        $i = $637;
       }
       $638 = $qc4;
       $639 = (($638) + 1)|0;
       $qc4 = $639;
      }
      $640 = $qr3;
      $641 = (($640) + 1)|0;
      $qr3 = $641;
     }
     $qr3 = 0;
     while(1) {
      $642 = $qr3;
      $643 = ($642|0)<(2);
      if (!($643)) {
       break;
      }
      $qc4 = 0;
      while(1) {
       $644 = $qc4;
       $645 = ($644|0)<(2);
       if (!($645)) {
        break;
       }
       $i = 0;
       while(1) {
        $646 = $i;
        $647 = ($646|0)<(7);
        if (!($647)) {
         break;
        }
        $648 = $i;
        $649 = (($ref2) + ($648<<1)|0);
        $650 = HEAP16[$649>>1]|0;
        $651 = $650&65535;
        $652 = $i;
        $653 = (1 + ($652))|0;
        $654 = (($cx5) + ($653<<2)|0);
        HEAP32[$654>>2] = $651;
        $655 = $i;
        $656 = (($ref2) + ($655<<1)|0);
        $657 = HEAP16[$656>>1]|0;
        $658 = $657&65535;
        $659 = $i;
        $660 = $qc4;
        $661 = $qr3;
        $662 = (($lc1) + (($661*28)|0)|0);
        $663 = (($662) + (($660*14)|0)|0);
        $664 = (($663) + ($659<<1)|0);
        $665 = HEAP16[$664>>1]|0;
        $666 = $665&65535;
        $667 = Math_imul($658, $666)|0;
        $668 = (($667>>>0) / 10000)&-1;
        $669 = $i;
        $670 = (1 + ($669))|0;
        $671 = (($cf6) + ($670<<2)|0);
        HEAP32[$671>>2] = $668;
        $672 = $i;
        $673 = (($672) + 1)|0;
        $i = $673;
       }
       HEAP32[$cf6>>2] = 0;
       HEAP32[$cx5>>2] = 0;
       $674 = ((($cf6)) + 32|0);
       HEAP32[$674>>2] = 65535;
       $675 = ((($cx5)) + 32|0);
       HEAP32[$675>>2] = 65535;
       _cubic_spline($cx5,$cf6,9);
       $676 = $qr3;
       $677 = ($676|0)!=(0);
       $678 = HEAP32[(1712)>>2]|0;
       $679 = $677 ? $678 : 0;
       $row = $679;
       while(1) {
        $680 = $row;
        $681 = $qr3;
        $682 = ($681|0)!=(0);
        $683 = HEAP16[580244>>1]|0;
        $684 = $683&65535;
        $685 = HEAP32[(1712)>>2]|0;
        $686 = $682 ? $684 : $685;
        $687 = ($680>>>0)<($686>>>0);
        $688 = $qc4;
        if (!($687)) {
         break;
        }
        $689 = ($688|0)!=(0);
        $690 = HEAP32[(1704)>>2]|0;
        $691 = $689 ? $690 : 0;
        $col = $691;
        while(1) {
         $692 = $col;
         $693 = $qc4;
         $694 = ($693|0)!=(0);
         $695 = HEAP16[580226>>1]|0;
         $696 = $695&65535;
         $697 = HEAP32[(1704)>>2]|0;
         $698 = $694 ? $696 : $697;
         $699 = ($692>>>0)<($698>>>0);
         $700 = $row;
         if (!($699)) {
          break;
         }
         $701 = HEAP16[580226>>1]|0;
         $702 = $701&65535;
         $703 = Math_imul($700, $702)|0;
         $704 = $col;
         $705 = (($703) + ($704))|0;
         $706 = HEAP32[1032>>2]|0;
         $707 = (($706) + ($705<<1)|0);
         $708 = HEAP16[$707>>1]|0;
         $709 = $708&65535;
         $710 = (448962 + ($709<<1)|0);
         $711 = HEAP16[$710>>1]|0;
         $712 = $row;
         $713 = HEAP16[580226>>1]|0;
         $714 = $713&65535;
         $715 = Math_imul($712, $714)|0;
         $716 = $col;
         $717 = (($715) + ($716))|0;
         $718 = HEAP32[1032>>2]|0;
         $719 = (($718) + ($717<<1)|0);
         HEAP16[$719>>1] = $711;
         $720 = $col;
         $721 = (($720) + 1)|0;
         $col = $721;
        }
        $722 = (($700) + 1)|0;
        $row = $722;
       }
       $723 = (($688) + 1)|0;
       $qc4 = $723;
      }
      $724 = $qr3;
      $725 = (($724) + 1)|0;
      $qr3 = $725;
     }
     $qmult_applied = 1;
     $qlin_applied = 1;
    }
   }
  } while(0);
  L192: do {
   if ((label|0) == 30) {
    label = 0;
    $row = 0;
    while(1) {
     $126 = $row;
     $127 = HEAP16[580244>>1]|0;
     $128 = $127&65535;
     $129 = ($126>>>0)<($128>>>0);
     if (!($129)) {
      break L192;
     }
     $130 = $tag;
     $131 = $130 & 1;
     $132 = HEAP32[(1704)>>2]|0;
     $133 = Math_imul($131, $132)|0;
     $col = $133;
     while(1) {
      $134 = $col;
      $135 = HEAP16[580226>>1]|0;
      $136 = $135&65535;
      $137 = ($134>>>0)<($136>>>0);
      $138 = $row;
      if (!($137)) {
       break;
      }
      $139 = HEAP16[580226>>1]|0;
      $140 = $139&65535;
      $141 = Math_imul($138, $140)|0;
      $142 = $col;
      $143 = (($141) + ($142))|0;
      $144 = HEAP32[1032>>2]|0;
      $145 = (($144) + ($143<<1)|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = $146&65535;
      $148 = (448962 + ($147<<1)|0);
      $149 = HEAP16[$148>>1]|0;
      $150 = $row;
      $151 = HEAP16[580226>>1]|0;
      $152 = $151&65535;
      $153 = Math_imul($150, $152)|0;
      $154 = $col;
      $155 = (($153) + ($154))|0;
      $156 = HEAP32[1032>>2]|0;
      $157 = (($156) + ($155<<1)|0);
      HEAP16[$157>>1] = $149;
      $158 = $col;
      $159 = (($158) + 1)|0;
      $col = $159;
     }
     $160 = (($138) + 1)|0;
     $row = $160;
    }
   }
  } while(0);
  $726 = HEAP32[944>>2]|0;
  $727 = $save;
  (_fseek($726,$727,0)|0);
 }
 $728 = $off_412;
 $729 = ($728|0)!=(0);
 if (!($729)) {
  STACKTOP = sp;return;
 }
 $730 = HEAP32[944>>2]|0;
 $731 = $off_412;
 (_fseek($730,$731,0)|0);
 $i = 0;
 while(1) {
  $732 = $i;
  $733 = ($732|0)<(9);
  if (!($733)) {
   break;
  }
  $734 = (_get4()|0);
  $735 = $734 & 32767;
  $736 = $i;
  $737 = (($head) + ($736<<2)|0);
  HEAP32[$737>>2] = $735;
  $738 = $i;
  $739 = (($738) + 1)|0;
  $i = $739;
 }
 $740 = ((($head)) + 4|0);
 $741 = HEAP32[$740>>2]|0;
 $742 = ((($head)) + 12|0);
 $743 = HEAP32[$742>>2]|0;
 $744 = Math_imul($741, $743)|0;
 $745 = ((($head)) + 8|0);
 $746 = HEAP32[$745>>2]|0;
 $747 = ((($head)) + 16|0);
 $748 = HEAP32[$747>>2]|0;
 $749 = Math_imul($746, $748)|0;
 $750 = (($744) + ($749))|0;
 $751 = (_calloc($750,6)|0);
 HEAP32[$yval>>2] = $751;
 $752 = HEAP32[$yval>>2]|0;
 _merror($752,594567);
 $753 = HEAP32[$yval>>2]|0;
 $754 = ((($head)) + 4|0);
 $755 = HEAP32[$754>>2]|0;
 $756 = ((($head)) + 12|0);
 $757 = HEAP32[$756>>2]|0;
 $758 = Math_imul($755, $757)|0;
 $759 = (($753) + ($758<<2)|0);
 $760 = ((($yval)) + 4|0);
 HEAP32[$760>>2] = $759;
 $761 = ((($yval)) + 4|0);
 $762 = HEAP32[$761>>2]|0;
 $763 = ((($head)) + 8|0);
 $764 = HEAP32[$763>>2]|0;
 $765 = ((($head)) + 16|0);
 $766 = HEAP32[$765>>2]|0;
 $767 = Math_imul($764, $766)|0;
 $768 = (($762) + ($767<<2)|0);
 HEAP32[$xval>>2] = $768;
 $769 = HEAP32[$xval>>2]|0;
 $770 = ((($head)) + 4|0);
 $771 = HEAP32[$770>>2]|0;
 $772 = ((($head)) + 12|0);
 $773 = HEAP32[$772>>2]|0;
 $774 = Math_imul($771, $773)|0;
 $775 = (($769) + ($774<<1)|0);
 $776 = ((($xval)) + 4|0);
 HEAP32[$776>>2] = $775;
 (_get2()|0);
 $i = 0;
 while(1) {
  $777 = $i;
  $778 = ($777|0)<(2);
  if (!($778)) {
   break;
  }
  $j = 0;
  while(1) {
   $779 = $j;
   $780 = $i;
   $781 = (($780) + 1)|0;
   $782 = (($head) + ($781<<2)|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = $i;
   $785 = (($784) + 3)|0;
   $786 = (($head) + ($785<<2)|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = Math_imul($783, $787)|0;
   $789 = ($779|0)<($788|0);
   if (!($789)) {
    break;
   }
   $790 = (+_getreal(11));
   $791 = $790;
   $792 = $j;
   $793 = $i;
   $794 = (($yval) + ($793<<2)|0);
   $795 = HEAP32[$794>>2]|0;
   $796 = (($795) + ($792<<2)|0);
   HEAPF32[$796>>2] = $791;
   $797 = $j;
   $798 = (($797) + 1)|0;
   $j = $798;
  }
  $799 = $i;
  $800 = (($799) + 1)|0;
  $i = $800;
 }
 $i = 0;
 while(1) {
  $801 = $i;
  $802 = ($801|0)<(2);
  if (!($802)) {
   break;
  }
  $j = 0;
  while(1) {
   $803 = $j;
   $804 = $i;
   $805 = (($804) + 1)|0;
   $806 = (($head) + ($805<<2)|0);
   $807 = HEAP32[$806>>2]|0;
   $808 = $i;
   $809 = (($808) + 3)|0;
   $810 = (($head) + ($809<<2)|0);
   $811 = HEAP32[$810>>2]|0;
   $812 = Math_imul($807, $811)|0;
   $813 = ($803|0)<($812|0);
   if (!($813)) {
    break;
   }
   $814 = (_get2()|0);
   $815 = $j;
   $816 = $i;
   $817 = (($xval) + ($816<<2)|0);
   $818 = HEAP32[$817>>2]|0;
   $819 = (($818) + ($815<<1)|0);
   HEAP16[$819>>1] = $814;
   $820 = $j;
   $821 = (($820) + 1)|0;
   $j = $821;
  }
  $822 = $i;
  $823 = (($822) + 1)|0;
  $i = $823;
 }
 $row = 0;
 while(1) {
  $824 = $row;
  $825 = HEAP16[580244>>1]|0;
  $826 = $825&65535;
  $827 = ($824>>>0)<($826>>>0);
  if (!($827)) {
   break;
  }
  $col = 0;
  while(1) {
   $828 = $col;
   $829 = HEAP16[580226>>1]|0;
   $830 = $829&65535;
   $831 = ($828>>>0)<($830>>>0);
   if (!($831)) {
    break;
   }
   $832 = $col;
   $833 = (+($832>>>0));
   $834 = ((($head)) + 12|0);
   $835 = HEAP32[$834>>2]|0;
   $836 = (+($835|0));
   $837 = $833 * $836;
   $838 = HEAP16[580226>>1]|0;
   $839 = $838&65535;
   $840 = (+($839|0));
   $841 = $837 / $840;
   $cfrac = $841;
   $842 = $cfrac;
   $843 = (~~(($842)));
   $cip = $843;
   $844 = (+($843|0));
   $845 = $cfrac;
   $846 = $845 - $844;
   $cfrac = $846;
   $847 = $row;
   $848 = HEAP16[580226>>1]|0;
   $849 = $848&65535;
   $850 = Math_imul($847, $849)|0;
   $851 = $col;
   $852 = (($850) + ($851))|0;
   $853 = HEAP32[1032>>2]|0;
   $854 = (($853) + ($852<<1)|0);
   $855 = HEAP16[$854>>1]|0;
   $856 = $855&65535;
   $857 = (+($856|0));
   $858 = $857 * 0.5;
   $859 = $858;
   $num = $859;
   $860 = $cip;
   $i = $860;
   while(1) {
    $861 = $i;
    $862 = $cip;
    $863 = (($862) + 2)|0;
    $864 = ($861|0)<($863|0);
    if (!($864)) {
     break;
    }
    $j = 0;
    $k = 0;
    while(1) {
     $865 = $j;
     $866 = ((($head)) + 4|0);
     $867 = HEAP32[$866>>2]|0;
     $868 = ($865|0)<($867|0);
     if (!($868)) {
      break;
     }
     $869 = $num;
     $870 = ((($head)) + 4|0);
     $871 = HEAP32[$870>>2]|0;
     $872 = $i;
     $873 = Math_imul($871, $872)|0;
     $874 = $j;
     $875 = (($873) + ($874))|0;
     $k = $875;
     $876 = HEAP32[$xval>>2]|0;
     $877 = (($876) + ($875<<1)|0);
     $878 = HEAP16[$877>>1]|0;
     $879 = $878&65535;
     $880 = (+($879|0));
     $881 = $869 < $880;
     if ($881) {
      break;
     }
     $882 = $j;
     $883 = (($882) + 1)|0;
     $j = $883;
    }
    $884 = $j;
    $885 = ($884|0)==(0);
    if ($885) {
     $912 = 0.0;
    } else {
     $886 = $j;
     $887 = ((($head)) + 4|0);
     $888 = HEAP32[$887>>2]|0;
     $889 = ($886|0)==($888|0);
     if ($889) {
      $912 = 0.0;
     } else {
      $890 = $k;
      $891 = HEAP32[$xval>>2]|0;
      $892 = (($891) + ($890<<1)|0);
      $893 = HEAP16[$892>>1]|0;
      $894 = $893&65535;
      $895 = (+($894|0));
      $896 = $num;
      $897 = $895 - $896;
      $898 = $k;
      $899 = HEAP32[$xval>>2]|0;
      $900 = (($899) + ($898<<1)|0);
      $901 = HEAP16[$900>>1]|0;
      $902 = $901&65535;
      $903 = $k;
      $904 = (($903) - 1)|0;
      $905 = HEAP32[$xval>>2]|0;
      $906 = (($905) + ($904<<1)|0);
      $907 = HEAP16[$906>>1]|0;
      $908 = $907&65535;
      $909 = (($902) - ($908))|0;
      $910 = (+($909|0));
      $911 = $897 / $910;
      $912 = $911;
     }
    }
    $frac = $912;
    $913 = $k;
    $914 = (($913) - 1)|0;
    $915 = HEAP32[$yval>>2]|0;
    $916 = (($915) + ($914<<2)|0);
    $917 = +HEAPF32[$916>>2];
    $918 = $frac;
    $919 = $917 * $918;
    $920 = $k;
    $921 = HEAP32[$yval>>2]|0;
    $922 = (($921) + ($920<<2)|0);
    $923 = +HEAPF32[$922>>2];
    $924 = $frac;
    $925 = 1.0 - $924;
    $926 = $923 * $925;
    $927 = $919 + $926;
    $928 = $i;
    $929 = $cip;
    $930 = (($928) - ($929))|0;
    $931 = (($mult) + ($930<<2)|0);
    HEAPF32[$931>>2] = $927;
    $932 = $i;
    $933 = (($932) + 1)|0;
    $i = $933;
   }
   $934 = +HEAPF32[$mult>>2];
   $935 = $cfrac;
   $936 = 1.0 - $935;
   $937 = $934 * $936;
   $938 = ((($mult)) + 4|0);
   $939 = +HEAPF32[$938>>2];
   $940 = $cfrac;
   $941 = $939 * $940;
   $942 = $937 + $941;
   $943 = $row;
   $944 = (+($943>>>0));
   $945 = $942 * $944;
   $946 = $num;
   $947 = $945 + $946;
   $948 = $947 * 2.0;
   $949 = (~~(($948)));
   $i = $949;
   $950 = $i;
   $951 = ($950|0)<(65535);
   $952 = $i;
   $953 = $951 ? $952 : 65535;
   $954 = (0)>($953|0);
   if ($954) {
    $960 = 0;
   } else {
    $955 = $i;
    $956 = ($955|0)<(65535);
    $957 = $i;
    $958 = $956 ? $957 : 65535;
    $960 = $958;
   }
   $959 = $960&65535;
   $961 = $row;
   $962 = HEAP16[580226>>1]|0;
   $963 = $962&65535;
   $964 = Math_imul($961, $963)|0;
   $965 = $col;
   $966 = (($964) + ($965))|0;
   $967 = HEAP32[1032>>2]|0;
   $968 = (($967) + ($966<<1)|0);
   HEAP16[$968>>1] = $959;
   $969 = $col;
   $970 = (($969) + 1)|0;
   $col = $970;
  }
  $971 = $row;
  $972 = (($971) + 1)|0;
  $row = $972;
 }
 $973 = HEAP32[$yval>>2]|0;
 _free($973);
 STACKTOP = sp;return;
}
function _phase_one_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $a = 0, $akey = 0, $b = 0, $bkey = 0, $i = 0;
 var $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[944>>2]|0;
 $1 = HEAP32[(1692)>>2]|0;
 (_fseek($0,$1,0)|0);
 $2 = (_get2()|0);
 $akey = $2;
 $3 = (_get2()|0);
 $bkey = $3;
 $4 = HEAP32[1688>>2]|0;
 $5 = ($4|0)==(1);
 $6 = $5 ? 21845 : 4948;
 $7 = $6&65535;
 $mask = $7;
 $8 = HEAP32[944>>2]|0;
 $9 = HEAP32[1524>>2]|0;
 (_fseek($8,$9,0)|0);
 $10 = HEAP32[1032>>2]|0;
 $11 = HEAP16[580226>>1]|0;
 $12 = $11&65535;
 $13 = HEAP16[580244>>1]|0;
 $14 = $13&65535;
 $15 = Math_imul($12, $14)|0;
 _read_shorts($10,$15);
 $16 = HEAP32[1688>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = HEAP16[580226>>1]|0;
  $20 = $19&65535;
  $21 = HEAP16[580244>>1]|0;
  $22 = $21&65535;
  $23 = Math_imul($20, $22)|0;
  $24 = ($18|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (($25) + 0)|0;
  $27 = HEAP32[1032>>2]|0;
  $28 = (($27) + ($26<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = $akey;
  $32 = $31&65535;
  $33 = $30 ^ $32;
  $a = $33;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $36 = HEAP32[1032>>2]|0;
  $37 = (($36) + ($35<<1)|0);
  $38 = HEAP16[$37>>1]|0;
  $39 = $38&65535;
  $40 = $bkey;
  $41 = $40&65535;
  $42 = $39 ^ $41;
  $b = $42;
  $43 = $a;
  $44 = $mask;
  $45 = $44&65535;
  $46 = $43 & $45;
  $47 = $b;
  $48 = $mask;
  $49 = $48&65535;
  $50 = $49 ^ -1;
  $51 = $47 & $50;
  $52 = $46 | $51;
  $53 = $52&65535;
  $54 = $i;
  $55 = (($54) + 0)|0;
  $56 = HEAP32[1032>>2]|0;
  $57 = (($56) + ($55<<1)|0);
  HEAP16[$57>>1] = $53;
  $58 = $b;
  $59 = $mask;
  $60 = $59&65535;
  $61 = $58 & $60;
  $62 = $a;
  $63 = $mask;
  $64 = $63&65535;
  $65 = $64 ^ -1;
  $66 = $62 & $65;
  $67 = $61 | $66;
  $68 = $67&65535;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $71 = HEAP32[1032>>2]|0;
  $72 = (($71) + ($70<<1)|0);
  HEAP16[$72>>1] = $68;
  $73 = $i;
  $74 = (($73) + 2)|0;
  $i = $74;
 }
 STACKTOP = sp;return;
}
function _ph1_bithuff($nbits,$huff) {
 $nbits = $nbits|0;
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nbits;
 $2 = $huff;
 $3 = $1;
 $4 = ($3|0)==(-1);
 if ($4) {
  HEAP32[1740>>2] = 0;
  $5 = 160;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = 0;
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $9 = $1;
 $10 = ($9|0)==(0);
 if ($10) {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $11 = HEAP32[1740>>2]|0;
 $12 = $1;
 $13 = ($11|0)<($12|0);
 if ($13) {
  $14 = 160;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + 4)|0;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (_get4()|0);
  $21 = 160;
  $22 = $21;
  HEAP32[$22>>2] = $20;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $16;
  $25 = HEAP32[1740>>2]|0;
  $26 = (($25) + 32)|0;
  HEAP32[1740>>2] = $26;
 }
 $27 = 160;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[1740>>2]|0;
 $34 = (64 - ($33))|0;
 $35 = (_bitshift64Shl(($29|0),($32|0),($34|0))|0);
 $36 = tempRet0;
 $37 = $1;
 $38 = (64 - ($37))|0;
 $39 = (_bitshift64Lshr(($35|0),($36|0),($38|0))|0);
 $40 = tempRet0;
 $c = $39;
 $41 = $2;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $c;
  $44 = $2;
  $45 = (($44) + ($43<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = $47 >> 8;
  $49 = HEAP32[1740>>2]|0;
  $50 = (($49) - ($48))|0;
  HEAP32[1740>>2] = $50;
  $51 = $c;
  $52 = $2;
  $53 = (($52) + ($51<<1)|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&255;
  $56 = $55&255;
  $0 = $56;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 } else {
  $57 = $1;
  $58 = HEAP32[1740>>2]|0;
  $59 = (($58) - ($57))|0;
  HEAP32[1740>>2] = $59;
  $60 = $c;
  $0 = $60;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _phase_one_load_raw_c() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cblack = 0, $col = 0, $i = 0, $j = 0, $len = 0, $offset = 0, $pixel = 0, $pred = 0, $rblack = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 40|0;
 $pred = sp + 32|0;
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = ($1*3)|0;
 $3 = HEAP16[580244>>1]|0;
 $4 = $3&65535;
 $5 = $4<<2;
 $6 = (($2) + ($5))|0;
 $7 = (_calloc($6,2)|0);
 $pixel = $7;
 $8 = $pixel;
 _merror($8,594587);
 $9 = $pixel;
 $10 = HEAP16[580226>>1]|0;
 $11 = $10&65535;
 $12 = (($9) + ($11<<1)|0);
 $offset = $12;
 $13 = HEAP32[944>>2]|0;
 $14 = HEAP32[1784>>2]|0;
 (_fseek($13,$14,0)|0);
 $row = 0;
 while(1) {
  $15 = $row;
  $16 = HEAP16[580244>>1]|0;
  $17 = $16&65535;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = (_get4()|0);
  $20 = $row;
  $21 = $offset;
  $22 = (($21) + ($20<<2)|0);
  HEAP32[$22>>2] = $19;
  $23 = $row;
  $24 = (($23) + 1)|0;
  $row = $24;
 }
 $25 = $offset;
 $26 = HEAP16[580244>>1]|0;
 $27 = $26&65535;
 $28 = (($25) + ($27<<2)|0);
 $cblack = $28;
 $29 = HEAP32[944>>2]|0;
 $30 = HEAP32[(1708)>>2]|0;
 (_fseek($29,$30,0)|0);
 $31 = HEAP32[(1708)>>2]|0;
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = $cblack;
  $34 = HEAP16[580244>>1]|0;
  $35 = $34&65535;
  $36 = $35<<1;
  _read_shorts($33,$36);
 }
 $37 = $cblack;
 $38 = HEAP16[580244>>1]|0;
 $39 = $38&65535;
 $40 = (($37) + ($39<<2)|0);
 $rblack = $40;
 $41 = HEAP32[944>>2]|0;
 $42 = HEAP32[(1716)>>2]|0;
 (_fseek($41,$42,0)|0);
 $43 = HEAP32[(1716)>>2]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $rblack;
  $46 = HEAP16[580226>>1]|0;
  $47 = $46&65535;
  $48 = $47<<1;
  _read_shorts($45,$48);
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(256);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $i;
  $53 = Math_imul($51, $52)|0;
  $54 = (+($53|0));
  $55 = $54 / 3.9689999999999999;
  $56 = $55 + 0.5;
  $57 = (~~(($56))&65535);
  $58 = $i;
  $59 = (448962 + ($58<<1)|0);
  HEAP16[$59>>1] = $57;
  $60 = $i;
  $61 = (($60) + 1)|0;
  $i = $61;
 }
 $row = 0;
 while(1) {
  $62 = $row;
  $63 = HEAP16[580244>>1]|0;
  $64 = $63&65535;
  $65 = ($62|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = HEAP32[944>>2]|0;
  $67 = HEAP32[1524>>2]|0;
  $68 = $row;
  $69 = $offset;
  $70 = (($69) + ($68<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($67) + ($71))|0;
  (_fseek($66,$72,0)|0);
  (_ph1_bithuff(-1,0)|0);
  $73 = ((($pred)) + 4|0);
  HEAP32[$73>>2] = 0;
  HEAP32[$pred>>2] = 0;
  $col = 0;
  while(1) {
   $74 = $col;
   $75 = HEAP16[580226>>1]|0;
   $76 = $75&65535;
   $77 = ($74|0)<($76|0);
   if (!($77)) {
    break;
   }
   $78 = $col;
   $79 = HEAP16[580226>>1]|0;
   $80 = $79&65535;
   $81 = $80 & -8;
   $82 = ($78|0)>=($81|0);
   L21: do {
    if ($82) {
     $83 = ((($len)) + 4|0);
     HEAP32[$83>>2] = 14;
     HEAP32[$len>>2] = 14;
    } else {
     $84 = $col;
     $85 = $84 & 7;
     $86 = ($85|0)==(0);
     if ($86) {
      $i = 0;
      while(1) {
       $87 = $i;
       $88 = ($87|0)<(2);
       if (!($88)) {
        break L21;
       }
       $j = 0;
       while(1) {
        $89 = $j;
        $90 = ($89|0)<(5);
        if (!($90)) {
         break;
        }
        $91 = (_ph1_bithuff(1,0)|0);
        $92 = ($91|0)!=(0);
        $93 = $92 ^ 1;
        if (!($93)) {
         break;
        }
        $94 = $j;
        $95 = (($94) + 1)|0;
        $j = $95;
       }
       $96 = $j;
       $97 = (($96) + -1)|0;
       $j = $97;
       $98 = ($96|0)!=(0);
       if ($98) {
        $99 = $j;
        $100 = $99<<1;
        $101 = (_ph1_bithuff(1,0)|0);
        $102 = (($100) + ($101))|0;
        $103 = (1744 + ($102<<2)|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = $i;
        $106 = (($len) + ($105<<2)|0);
        HEAP32[$106>>2] = $104;
       }
       $107 = $i;
       $108 = (($107) + 1)|0;
       $i = $108;
      }
     }
    }
   } while(0);
   $109 = $col;
   $110 = $109 & 1;
   $111 = (($len) + ($110<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $i = $112;
   $113 = ($112|0)==(14);
   if ($113) {
    $114 = (_ph1_bithuff(16,0)|0);
    $115 = $col;
    $116 = $115 & 1;
    $117 = (($pred) + ($116<<2)|0);
    HEAP32[$117>>2] = $114;
    $118 = $114&65535;
    $119 = $col;
    $120 = $pixel;
    $121 = (($120) + ($119<<1)|0);
    HEAP16[$121>>1] = $118;
   } else {
    $122 = $i;
    $123 = (_ph1_bithuff($122,0)|0);
    $124 = (($123) + 1)|0;
    $125 = $i;
    $126 = (($125) - 1)|0;
    $127 = 1 << $126;
    $128 = (($124) - ($127))|0;
    $129 = $col;
    $130 = $129 & 1;
    $131 = (($pred) + ($130<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($128))|0;
    HEAP32[$131>>2] = $133;
    $134 = $133&65535;
    $135 = $col;
    $136 = $pixel;
    $137 = (($136) + ($135<<1)|0);
    HEAP16[$137>>1] = $134;
   }
   $138 = $col;
   $139 = $138 & 1;
   $140 = (($pred) + ($139<<2)|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 >> 16;
   $143 = ($142|0)!=(0);
   if ($143) {
    _derror();
   }
   $144 = HEAP32[1688>>2]|0;
   $145 = ($144|0)==(5);
   if ($145) {
    $146 = $col;
    $147 = $pixel;
    $148 = (($147) + ($146<<1)|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = ($150|0)<(256);
    if ($151) {
     $152 = $col;
     $153 = $pixel;
     $154 = (($153) + ($152<<1)|0);
     $155 = HEAP16[$154>>1]|0;
     $156 = $155&65535;
     $157 = (448962 + ($156<<1)|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $col;
     $160 = $pixel;
     $161 = (($160) + ($159<<1)|0);
     HEAP16[$161>>1] = $158;
    }
   }
   $162 = $col;
   $163 = (($162) + 1)|0;
   $col = $163;
  }
  $col = 0;
  while(1) {
   $164 = $col;
   $165 = HEAP16[580226>>1]|0;
   $166 = $165&65535;
   $167 = ($164|0)<($166|0);
   if (!($167)) {
    break;
   }
   $168 = $col;
   $169 = $pixel;
   $170 = (($169) + ($168<<1)|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = $171&65535;
   $173 = HEAP32[1688>>2]|0;
   $174 = ($173|0)!=(8);
   $175 = $174&1;
   $176 = $175<<1;
   $177 = $172 << $176;
   $178 = HEAP32[(1700)>>2]|0;
   $179 = (($177) - ($178))|0;
   $180 = $col;
   $181 = HEAP32[(1704)>>2]|0;
   $182 = ($180|0)>=($181|0);
   $183 = $182&1;
   $184 = $row;
   $185 = $cblack;
   $186 = (($185) + ($184<<2)|0);
   $187 = (($186) + ($183<<1)|0);
   $188 = HEAP16[$187>>1]|0;
   $189 = $188 << 16 >> 16;
   $190 = (($179) + ($189))|0;
   $191 = $row;
   $192 = HEAP32[(1712)>>2]|0;
   $193 = ($191|0)>=($192|0);
   $194 = $193&1;
   $195 = $col;
   $196 = $rblack;
   $197 = (($196) + ($195<<2)|0);
   $198 = (($197) + ($194<<1)|0);
   $199 = HEAP16[$198>>1]|0;
   $200 = $199 << 16 >> 16;
   $201 = (($190) + ($200))|0;
   $i = $201;
   $202 = $i;
   $203 = ($202|0)>(0);
   if ($203) {
    $204 = $i;
    $205 = $204&65535;
    $206 = $row;
    $207 = HEAP16[580226>>1]|0;
    $208 = $207&65535;
    $209 = Math_imul($206, $208)|0;
    $210 = $col;
    $211 = (($209) + ($210))|0;
    $212 = HEAP32[1032>>2]|0;
    $213 = (($212) + ($211<<1)|0);
    HEAP16[$213>>1] = $205;
   }
   $214 = $col;
   $215 = (($214) + 1)|0;
   $col = $215;
  }
  $216 = $row;
  $217 = (($216) + 1)|0;
  $row = $217;
 }
 $218 = $pixel;
 _free($218);
 $219 = HEAP32[(1700)>>2]|0;
 $220 = (65532 - ($219))|0;
 HEAP32[1040>>2] = $220;
 STACKTOP = sp;return;
}
function _hasselblad_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $back = 0, $c = 0, $col = 0, $cond = 0, $diff = 0, $f = 0, $ip = 0, $jh = 0, $len = 0, $or$cond = 0, $pred = 0, $row = 0, $s = 0, $sh = 0;
 var $shot = 0, $ucol = 0, $upix = 0, $urow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp + 128|0;
 $back = sp + 96|0;
 $len = sp + 88|0;
 $diff = sp + 40|0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 HEAP16[448960>>1] = 18761;
 (_ph1_bithuff(-1,0)|0);
 $2 = HEAP16[580226>>1]|0;
 $3 = $2&65535;
 $4 = (_calloc($3,12)|0);
 $5 = ((($back)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($back)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _merror($7,594610);
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = ($8|0)<(3);
  if (!($9)) {
   break;
  }
  $10 = ((($back)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $c;
  $13 = HEAP16[580226>>1]|0;
  $14 = $13&65535;
  $15 = Math_imul($12, $14)|0;
  $16 = (($11) + ($15<<2)|0);
  $17 = $c;
  $18 = (($back) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $c;
  $20 = (($19) + 1)|0;
  $c = $20;
 }
 $21 = HEAP32[1076>>2]|0;
 $22 = ($21>>>0)>(1);
 $23 = $22&1;
 $sh = $23;
 $24 = HEAP16[(580276)>>1]|0;
 $25 = $24&65535;
 $26 = $25 >> $23;
 $27 = $26&65535;
 HEAP16[(580276)>>1] = $27;
 $28 = HEAP32[664>>2]|0;
 $29 = HEAP32[1076>>2]|0;
 $30 = ($28>>>0)<($29>>>0);
 $31 = HEAP32[664>>2]|0;
 $32 = HEAP32[1076>>2]|0;
 $33 = $30 ? $31 : $32;
 $34 = (1)>($33>>>0);
 if ($34) {
  $42 = 1;
 } else {
  $35 = HEAP32[664>>2]|0;
  $36 = HEAP32[1076>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  $38 = HEAP32[664>>2]|0;
  $39 = HEAP32[1076>>2]|0;
  $40 = $37 ? $38 : $39;
  $42 = $40;
 }
 $41 = (($42) - 1)|0;
 $shot = $41;
 $row = 0;
 while(1) {
  $43 = $row;
  $44 = HEAP16[580244>>1]|0;
  $45 = $44&65535;
  $46 = ($43|0)<($45|0);
  if (!($46)) {
   break;
  }
  $c = 0;
  while(1) {
   $47 = $c;
   $48 = ($47|0)<(4);
   if (!($48)) {
    break;
   }
   $49 = $c;
   $50 = (($back) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $c;
   $53 = (($52) + 3)|0;
   $54 = $53 & 3;
   $55 = (($back) + ($54<<2)|0);
   HEAP32[$55>>2] = $51;
   $56 = $c;
   $57 = (($56) + 1)|0;
   $c = $57;
  }
  $col = 0;
  while(1) {
   $58 = $col;
   $59 = HEAP16[580226>>1]|0;
   $60 = $59&65535;
   $61 = ($58|0)<($60|0);
   if (!($61)) {
    break;
   }
   $s = 0;
   while(1) {
    $62 = $s;
    $63 = HEAP32[1076>>2]|0;
    $64 = $63<<1;
    $65 = ($62>>>0)<($64>>>0);
    if (!($65)) {
     break;
    }
    $c = 0;
    while(1) {
     $66 = $c;
     $67 = ($66|0)<(2);
     if (!($67)) {
      break;
     }
     $68 = ((($jh)) + 312|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = HEAP16[$69>>1]|0;
     $71 = $70&65535;
     $72 = ((($jh)) + 312|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ((($73)) + 2|0);
     $75 = (_ph1_bithuff($71,$74)|0);
     $76 = $c;
     $77 = (($len) + ($76<<2)|0);
     HEAP32[$77>>2] = $75;
     $78 = $c;
     $79 = (($78) + 1)|0;
     $c = $79;
    }
    $c = 0;
    while(1) {
     $80 = $c;
     $81 = ($80|0)<(2);
     if (!($81)) {
      break;
     }
     $82 = $c;
     $83 = (($len) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (_ph1_bithuff($84,0)|0);
     $86 = $s;
     $87 = $c;
     $88 = (($86) + ($87))|0;
     $89 = (($diff) + ($88<<2)|0);
     HEAP32[$89>>2] = $85;
     $90 = $s;
     $91 = $c;
     $92 = (($90) + ($91))|0;
     $93 = (($diff) + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = $c;
     $96 = (($len) + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) - 1)|0;
     $99 = 1 << $98;
     $100 = $94 & $99;
     $101 = ($100|0)==(0);
     if ($101) {
      $102 = $c;
      $103 = (($len) + ($102<<2)|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = 1 << $104;
      $106 = (($105) - 1)|0;
      $107 = $s;
      $108 = $c;
      $109 = (($107) + ($108))|0;
      $110 = (($diff) + ($109<<2)|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($111) - ($106))|0;
      HEAP32[$110>>2] = $112;
     }
     $113 = $s;
     $114 = $c;
     $115 = (($113) + ($114))|0;
     $116 = (($diff) + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)==(65535);
     if ($118) {
      $119 = $s;
      $120 = $c;
      $121 = (($119) + ($120))|0;
      $122 = (($diff) + ($121<<2)|0);
      HEAP32[$122>>2] = -32768;
     }
     $123 = $c;
     $124 = (($123) + 1)|0;
     $c = $124;
    }
    $125 = $s;
    $126 = (($125) + 2)|0;
    $s = $126;
   }
   $127 = $col;
   $s = $127;
   while(1) {
    $128 = $s;
    $129 = $col;
    $130 = (($129) + 2)|0;
    $131 = ($128|0)<($130|0);
    if (!($131)) {
     break;
    }
    $132 = HEAP32[1068>>2]|0;
    $133 = (32768 + ($132))|0;
    $pred = $133;
    $134 = $col;
    $135 = ($134|0)!=(0);
    if ($135) {
     $136 = $s;
     $137 = (($136) - 2)|0;
     $138 = ((($back)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + ($137<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $pred = $141;
    }
    $142 = $col;
    $143 = ($142|0)!=(0);
    $144 = $row;
    $145 = ($144|0)>(1);
    $or$cond = $143 & $145;
    if ($or$cond) {
     $146 = ((($jh)) + 24|0);
     $147 = HEAP32[$146>>2]|0;
     $cond = ($147|0)==(11);
     if ($cond) {
      $148 = $s;
      $149 = HEAP32[$back>>2]|0;
      $150 = (($149) + ($148<<2)|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151|0) / 2)&-1;
      $153 = $s;
      $154 = (($153) - 2)|0;
      $155 = HEAP32[$back>>2]|0;
      $156 = (($155) + ($154<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (($157|0) / 2)&-1;
      $159 = (($152) - ($158))|0;
      $160 = $pred;
      $161 = (($160) + ($159))|0;
      $pred = $161;
     }
    }
    $162 = $row;
    $163 = $162 & 1;
    $164 = ($163*3)|0;
    $165 = $col;
    $166 = $s;
    $167 = (($165) + ($166))|0;
    $168 = $167 & 1;
    $169 = $164 ^ $168;
    $f = $169;
    $c = 0;
    while(1) {
     $170 = $c;
     $171 = HEAP32[1076>>2]|0;
     $172 = ($170>>>0)<($171>>>0);
     if (!($172)) {
      break;
     }
     $173 = $s;
     $174 = $173 & 1;
     $175 = HEAP32[1076>>2]|0;
     $176 = Math_imul($174, $175)|0;
     $177 = $c;
     $178 = (($176) + ($177))|0;
     $179 = (($diff) + ($178<<2)|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $pred;
     $182 = (($181) + ($180))|0;
     $pred = $182;
     $183 = $pred;
     $184 = $sh;
     $185 = $183 >> $184;
     $186 = $185 & 65535;
     $upix = $186;
     $187 = HEAP32[1032>>2]|0;
     $188 = ($187|0)!=(0|0);
     if ($188) {
      $189 = $c;
      $190 = $shot;
      $191 = ($189|0)==($190|0);
      if ($191) {
       $192 = $upix;
       $193 = $192&65535;
       $194 = $row;
       $195 = HEAP16[580226>>1]|0;
       $196 = $195&65535;
       $197 = Math_imul($194, $196)|0;
       $198 = $s;
       $199 = (($197) + ($198))|0;
       $200 = HEAP32[1032>>2]|0;
       $201 = (($200) + ($199<<1)|0);
       HEAP16[$201>>1] = $193;
      }
     }
     $202 = HEAP32[972>>2]|0;
     $203 = ($202|0)!=(0|0);
     if ($203) {
      $204 = $row;
      $205 = HEAP16[448958>>1]|0;
      $206 = $205&65535;
      $207 = (($204) - ($206))|0;
      $208 = $c;
      $209 = $208 & 1;
      $210 = (($207) + ($209))|0;
      $urow = $210;
      $211 = $col;
      $212 = HEAP16[448956>>1]|0;
      $213 = $212&65535;
      $214 = (($211) - ($213))|0;
      $215 = $c;
      $216 = $215 >> 1;
      $217 = $216 & 1;
      $218 = (($214) - ($217))|0;
      $ucol = $218;
      $219 = $f;
      $220 = $urow;
      $221 = HEAP16[580076>>1]|0;
      $222 = $221&65535;
      $223 = Math_imul($220, $222)|0;
      $224 = $ucol;
      $225 = (($223) + ($224))|0;
      $226 = HEAP32[972>>2]|0;
      $227 = (($226) + ($225<<3)|0);
      $228 = (($227) + ($219<<1)|0);
      $ip = $228;
      $229 = $urow;
      $230 = HEAP16[580074>>1]|0;
      $231 = $230&65535;
      $232 = ($229>>>0)<($231>>>0);
      if ($232) {
       $233 = $ucol;
       $234 = HEAP16[580076>>1]|0;
       $235 = $234&65535;
       $236 = ($233>>>0)<($235>>>0);
       if ($236) {
        $237 = $c;
        $238 = ($237|0)<(4);
        if ($238) {
         $239 = $upix;
         $247 = $239;
        } else {
         $240 = $ip;
         $241 = HEAP16[$240>>1]|0;
         $242 = $241&65535;
         $243 = $upix;
         $244 = (($242) + ($243))|0;
         $245 = $244 >>> 1;
         $247 = $245;
        }
        $246 = $247&65535;
        $248 = $ip;
        HEAP16[$248>>1] = $246;
       }
      }
     }
     $249 = $c;
     $250 = (($249) + 1)|0;
     $c = $250;
    }
    $251 = $pred;
    $252 = $s;
    $253 = ((($back)) + 8|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = (($254) + ($252<<2)|0);
    HEAP32[$255>>2] = $251;
    $256 = $s;
    $257 = (($256) + 1)|0;
    $s = $257;
   }
   $258 = $col;
   $259 = (($258) + 2)|0;
   $col = $259;
  }
  $260 = $row;
  $261 = (($260) + 1)|0;
  $row = $261;
 }
 $262 = ((($back)) + 16|0);
 $263 = HEAP32[$262>>2]|0;
 _free($263);
 _ljpeg_end($jh);
 $264 = HEAP32[972>>2]|0;
 $265 = ($264|0)!=(0|0);
 if (!($265)) {
  STACKTOP = sp;return;
 }
 HEAP32[1788>>2] = 1;
 STACKTOP = sp;return;
}
function _leaf_hdr_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $c = 0, $col = 0, $pixel = 0, $r = 0, $row = 0, $tile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = 0;
 $tile = 0;
 $0 = HEAP32[776>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $2 = HEAP16[580226>>1]|0;
  $3 = $2&65535;
  $4 = (_calloc($3,2)|0);
  $pixel = $4;
  $5 = $pixel;
  _merror($5,594632);
 }
 $c = 0;
 while(1) {
  $6 = $c;
  $7 = HEAP32[1076>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $r = 0;
  while(1) {
   $9 = $r;
   $10 = HEAP16[580244>>1]|0;
   $11 = $10&65535;
   $12 = ($9>>>0)<($11>>>0);
   if (!($12)) {
    break;
   }
   $13 = $r;
   $14 = HEAP32[1504>>2]|0;
   $15 = (($13>>>0) % ($14>>>0))&-1;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = HEAP32[944>>2]|0;
    $18 = HEAP32[1524>>2]|0;
    $19 = $tile;
    $20 = (($19) + 1)|0;
    $tile = $20;
    $21 = $19<<2;
    $22 = (($18) + ($21))|0;
    (_fseek($17,$22,0)|0);
    $23 = HEAP32[944>>2]|0;
    $24 = (_get4()|0);
    (_fseek($23,$24,0)|0);
   }
   $25 = HEAP32[776>>2]|0;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $c;
    $28 = HEAP32[664>>2]|0;
    $29 = ($27|0)!=($28|0);
    if (!($29)) {
     label = 11;
    }
   } else {
    label = 11;
   }
   L15: do {
    if ((label|0) == 11) {
     label = 0;
     $30 = HEAP32[776>>2]|0;
     $31 = ($30|0)!=(0);
     if ($31) {
      $32 = HEAP32[1032>>2]|0;
      $33 = $r;
      $34 = HEAP16[580226>>1]|0;
      $35 = $34&65535;
      $36 = Math_imul($33, $35)|0;
      $37 = (($32) + ($36<<1)|0);
      $pixel = $37;
     }
     $38 = $pixel;
     $39 = HEAP16[580226>>1]|0;
     $40 = $39&65535;
     _read_shorts($38,$40);
     $41 = HEAP32[776>>2]|0;
     $42 = ($41|0)!=(0);
     if (!($42)) {
      $43 = $r;
      $44 = HEAP16[448958>>1]|0;
      $45 = $44&65535;
      $46 = (($43) - ($45))|0;
      $row = $46;
      $47 = HEAP16[580074>>1]|0;
      $48 = $47&65535;
      $49 = ($46>>>0)<($48>>>0);
      if ($49) {
       $col = 0;
       while(1) {
        $50 = $col;
        $51 = HEAP16[580076>>1]|0;
        $52 = $51&65535;
        $53 = ($50>>>0)<($52>>>0);
        if (!($53)) {
         break L15;
        }
        $54 = $col;
        $55 = HEAP16[448956>>1]|0;
        $56 = $55&65535;
        $57 = (($54) + ($56))|0;
        $58 = $pixel;
        $59 = (($58) + ($57<<1)|0);
        $60 = HEAP16[$59>>1]|0;
        $61 = $c;
        $62 = $row;
        $63 = HEAP16[580076>>1]|0;
        $64 = $63&65535;
        $65 = Math_imul($62, $64)|0;
        $66 = $col;
        $67 = (($65) + ($66))|0;
        $68 = HEAP32[972>>2]|0;
        $69 = (($68) + ($67<<3)|0);
        $70 = (($69) + ($61<<1)|0);
        HEAP16[$70>>1] = $60;
        $71 = $col;
        $72 = (($71) + 1)|0;
        $col = $72;
       }
      }
     }
    }
   } while(0);
   $73 = $r;
   $74 = (($73) + 1)|0;
   $r = $74;
  }
  $75 = $c;
  $76 = (($75) + 1)|0;
  $c = $76;
 }
 $77 = HEAP32[776>>2]|0;
 $78 = ($77|0)!=(0);
 if ($78) {
  STACKTOP = sp;return;
 }
 HEAP32[1040>>2] = 65535;
 HEAP32[976>>2] = 1;
 $79 = $pixel;
 _free($79);
 STACKTOP = sp;return;
}
function _unpacked_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $col = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bits = 0;
 while(1) {
  $0 = $bits;
  $1 = (($0) + 1)|0;
  $bits = $1;
  $2 = 1 << $1;
  $3 = HEAP32[1040>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
 }
 $5 = HEAP32[1032>>2]|0;
 $6 = HEAP16[580226>>1]|0;
 $7 = $6&65535;
 $8 = HEAP16[580244>>1]|0;
 $9 = $8&65535;
 $10 = Math_imul($7, $9)|0;
 _read_shorts($5,$10);
 $row = 0;
 while(1) {
  $11 = $row;
  $12 = HEAP16[580244>>1]|0;
  $13 = $12&65535;
  $14 = ($11|0)<($13|0);
  if (!($14)) {
   break;
  }
  $col = 0;
  while(1) {
   $15 = $col;
   $16 = HEAP16[580226>>1]|0;
   $17 = $16&65535;
   $18 = ($15|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = HEAP32[1068>>2]|0;
   $20 = $row;
   $21 = HEAP16[580226>>1]|0;
   $22 = $21&65535;
   $23 = Math_imul($20, $22)|0;
   $24 = $col;
   $25 = (($23) + ($24))|0;
   $26 = HEAP32[1032>>2]|0;
   $27 = (($26) + ($25<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = $29 >> $19;
   $31 = $30&65535;
   HEAP16[$27>>1] = $31;
   $32 = $31&65535;
   $33 = $bits;
   $34 = $32 >> $33;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $row;
    $37 = HEAP16[448958>>1]|0;
    $38 = $37&65535;
    $39 = (($36) - ($38))|0;
    $40 = HEAP16[580074>>1]|0;
    $41 = $40&65535;
    $42 = ($39>>>0)<($41>>>0);
    if ($42) {
     $43 = $col;
     $44 = HEAP16[448956>>1]|0;
     $45 = $44&65535;
     $46 = (($43) - ($45))|0;
     $47 = HEAP16[580076>>1]|0;
     $48 = $47&65535;
     $49 = ($46>>>0)<($48>>>0);
     if ($49) {
      _derror();
     }
    }
   }
   $50 = $col;
   $51 = (($50) + 1)|0;
   $col = $51;
  }
  $52 = $row;
  $53 = (($52) + 1)|0;
  $row = $53;
 }
 STACKTOP = sp;return;
}
function _sinar_4shot_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $c = 0, $col = 0, $pixel = 0, $r = 0, $row = 0, $shot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[1032>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[664>>2]|0;
  $3 = ($2>>>0)<(4);
  $4 = HEAP32[664>>2]|0;
  $5 = $3 ? $4 : 4;
  $6 = (1)>($5>>>0);
  if ($6) {
   $12 = 1;
  } else {
   $7 = HEAP32[664>>2]|0;
   $8 = ($7>>>0)<(4);
   $9 = HEAP32[664>>2]|0;
   $10 = $8 ? $9 : 4;
   $12 = $10;
  }
  $11 = (($12) - 1)|0;
  $shot = $11;
  $13 = HEAP32[944>>2]|0;
  $14 = HEAP32[1524>>2]|0;
  $15 = $shot;
  $16 = $15<<2;
  $17 = (($14) + ($16))|0;
  (_fseek($13,$17,0)|0);
  $18 = HEAP32[944>>2]|0;
  $19 = (_get4()|0);
  (_fseek($18,$19,0)|0);
  _unpacked_load_raw();
  STACKTOP = sp;return;
 }
 $20 = HEAP16[580226>>1]|0;
 $21 = $20&65535;
 $22 = (_calloc($21,2)|0);
 $pixel = $22;
 $23 = $pixel;
 _merror($23,594652);
 $shot = 0;
 while(1) {
  $24 = $shot;
  $25 = ($24>>>0)<(4);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[944>>2]|0;
  $27 = HEAP32[1524>>2]|0;
  $28 = $shot;
  $29 = $28<<2;
  $30 = (($27) + ($29))|0;
  (_fseek($26,$30,0)|0);
  $31 = HEAP32[944>>2]|0;
  $32 = (_get4()|0);
  (_fseek($31,$32,0)|0);
  $row = 0;
  while(1) {
   $33 = $row;
   $34 = HEAP16[580244>>1]|0;
   $35 = $34&65535;
   $36 = ($33>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $pixel;
   $38 = HEAP16[580226>>1]|0;
   $39 = $38&65535;
   _read_shorts($37,$39);
   $40 = $row;
   $41 = HEAP16[448958>>1]|0;
   $42 = $41&65535;
   $43 = (($40) - ($42))|0;
   $44 = $shot;
   $45 = $44 >>> 1;
   $46 = $45 & 1;
   $47 = (($43) - ($46))|0;
   $r = $47;
   $48 = HEAP16[580074>>1]|0;
   $49 = $48&65535;
   $50 = ($47>>>0)>=($49>>>0);
   L14: do {
    if (!($50)) {
     $col = 0;
     while(1) {
      $51 = $col;
      $52 = HEAP16[580226>>1]|0;
      $53 = $52&65535;
      $54 = ($51>>>0)<($53>>>0);
      if (!($54)) {
       break L14;
      }
      $55 = $col;
      $56 = HEAP16[448956>>1]|0;
      $57 = $56&65535;
      $58 = (($55) - ($57))|0;
      $59 = $shot;
      $60 = $59 & 1;
      $61 = (($58) - ($60))|0;
      $c = $61;
      $62 = HEAP16[580076>>1]|0;
      $63 = $62&65535;
      $64 = ($61>>>0)>=($63>>>0);
      if (!($64)) {
       $65 = $col;
       $66 = $pixel;
       $67 = (($66) + ($65<<1)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $row;
       $70 = $69 & 1;
       $71 = ($70*3)|0;
       $72 = $col;
       $73 = $72 ^ -1;
       $74 = $73 & 1;
       $75 = $71 ^ $74;
       $76 = $r;
       $77 = HEAP16[580076>>1]|0;
       $78 = $77&65535;
       $79 = Math_imul($76, $78)|0;
       $80 = $c;
       $81 = (($79) + ($80))|0;
       $82 = HEAP32[972>>2]|0;
       $83 = (($82) + ($81<<3)|0);
       $84 = (($83) + ($75<<1)|0);
       HEAP16[$84>>1] = $68;
      }
      $85 = $col;
      $86 = (($85) + 1)|0;
      $col = $86;
     }
    }
   } while(0);
   $87 = $row;
   $88 = (($87) + 1)|0;
   $row = $88;
  }
  $89 = $shot;
  $90 = (($89) + 1)|0;
  $shot = $90;
 }
 $91 = $pixel;
 _free($91);
 HEAP32[1788>>2] = 1;
 STACKTOP = sp;return;
}
function _imacon_full_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[972>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[580074>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $col = 0;
  while(1) {
   $6 = $col;
   $7 = HEAP16[580076>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   $10 = $row;
   if (!($9)) {
    break;
   }
   $11 = HEAP16[580076>>1]|0;
   $12 = $11&65535;
   $13 = Math_imul($10, $12)|0;
   $14 = $col;
   $15 = (($13) + ($14))|0;
   $16 = HEAP32[972>>2]|0;
   $17 = (($16) + ($15<<3)|0);
   _read_shorts($17,3);
   $18 = $col;
   $19 = (($18) + 1)|0;
   $col = $19;
  }
  $20 = (($10) + 1)|0;
  $row = $20;
 }
 STACKTOP = sp;return;
}
function _packed_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bite = 0, $bwide = 0, $col = 0, $half = 0;
 var $i = 0, $irow = 0, $rbits = 0, $row = 0, $val = 0, $vbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp;
 $vbits = 0;
 $0 = $bitbuf;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = HEAP16[580226>>1]|0;
 $5 = $4&65535;
 $6 = HEAP32[1516>>2]|0;
 $7 = Math_imul($5, $6)|0;
 $8 = (($7>>>0) / 8)&-1;
 $bwide = $8;
 $9 = $bwide;
 $10 = HEAP32[1068>>2]|0;
 $11 = $10 >>> 7;
 $12 = $9 & $11;
 $13 = $bwide;
 $14 = (($13) + ($12))|0;
 $bwide = $14;
 $15 = $bwide;
 $16 = $15<<3;
 $17 = HEAP16[580226>>1]|0;
 $18 = $17&65535;
 $19 = HEAP32[1516>>2]|0;
 $20 = Math_imul($18, $19)|0;
 $21 = (($16) - ($20))|0;
 $rbits = $21;
 $22 = HEAP32[1068>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $bwide;
  $26 = $25<<4;
  $27 = (($26|0) / 15)&-1;
  $bwide = $27;
 }
 $28 = HEAP32[1068>>2]|0;
 $29 = $28 & 24;
 $30 = (8 + ($29))|0;
 $bite = $30;
 $31 = HEAP16[580244>>1]|0;
 $32 = $31&65535;
 $33 = (($32) + 1)|0;
 $34 = $33 >> 1;
 $half = $34;
 $irow = 0;
 while(1) {
  $35 = $irow;
  $36 = HEAP16[580244>>1]|0;
  $37 = $36&65535;
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $irow;
  $row = $39;
  $40 = HEAP32[1068>>2]|0;
  $41 = $40 & 2;
  $42 = ($41|0)!=(0);
  do {
   if ($42) {
    $43 = $irow;
    $44 = $half;
    $45 = (($43|0) % ($44|0))&-1;
    $46 = $45<<1;
    $47 = $irow;
    $48 = $half;
    $49 = (($47|0) / ($48|0))&-1;
    $50 = (($46) + ($49))|0;
    $row = $50;
    $51 = ($50|0)==(1);
    if ($51) {
     $52 = HEAP32[1068>>2]|0;
     $53 = $52 & 4;
     $54 = ($53|0)!=(0);
     if ($54) {
      $vbits = 0;
      $55 = HEAP32[1060>>2]|0;
      $56 = ($55|0)!=(0);
      $57 = HEAP32[944>>2]|0;
      if ($56) {
       $58 = HEAP32[1524>>2]|0;
       $59 = $half;
       $60 = (0 - ($59))|0;
       $61 = $bwide;
       $62 = Math_imul($60, $61)|0;
       $63 = $62 & -2048;
       $64 = (($58) - ($63))|0;
       (_fseek($57,$64,0)|0);
       break;
      } else {
       (_fseek($57,0,2)|0);
       $65 = HEAP32[944>>2]|0;
       $66 = HEAP32[944>>2]|0;
       $67 = (_ftell($66)|0);
       $68 = $67 >> 3;
       $69 = $68 << 2;
       (_fseek($65,$69,0)|0);
       break;
      }
     }
    }
   }
  } while(0);
  $col = 0;
  while(1) {
   $70 = $col;
   $71 = HEAP16[580226>>1]|0;
   $72 = $71&65535;
   $73 = ($70|0)<($72|0);
   if (!($73)) {
    break;
   }
   $74 = HEAP32[1516>>2]|0;
   $75 = $vbits;
   $76 = (($75) - ($74))|0;
   $vbits = $76;
   while(1) {
    $77 = $vbits;
    $78 = ($77|0)<(0);
    if (!($78)) {
     break;
    }
    $79 = $bite;
    $80 = $bitbuf;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = (_bitshift64Shl(($82|0),($85|0),($79|0))|0);
    $87 = tempRet0;
    $88 = $bitbuf;
    $89 = $88;
    HEAP32[$89>>2] = $86;
    $90 = (($88) + 4)|0;
    $91 = $90;
    HEAP32[$91>>2] = $87;
    $i = 0;
    while(1) {
     $92 = $i;
     $93 = $bite;
     $94 = ($92|0)<($93|0);
     if (!($94)) {
      break;
     }
     $95 = HEAP32[944>>2]|0;
     $96 = (_getc_unlocked($95)|0);
     $97 = $i;
     $98 = $96 << $97;
     $99 = $bitbuf;
     $100 = $99;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($99) + 4)|0;
     $103 = $102;
     $104 = HEAP32[$103>>2]|0;
     $105 = $101 | $98;
     $106 = $bitbuf;
     $107 = $106;
     HEAP32[$107>>2] = $105;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = $104;
     $110 = $i;
     $111 = (($110) + 8)|0;
     $i = $111;
    }
    $112 = $bite;
    $113 = $vbits;
    $114 = (($113) + ($112))|0;
    $vbits = $114;
   }
   $115 = $bitbuf;
   $116 = $115;
   $117 = HEAP32[$116>>2]|0;
   $118 = (($115) + 4)|0;
   $119 = $118;
   $120 = HEAP32[$119>>2]|0;
   $121 = HEAP32[1516>>2]|0;
   $122 = (64 - ($121))|0;
   $123 = $vbits;
   $124 = (($122) - ($123))|0;
   $125 = (_bitshift64Shl(($117|0),($120|0),($124|0))|0);
   $126 = tempRet0;
   $127 = HEAP32[1516>>2]|0;
   $128 = (64 - ($127))|0;
   $129 = (_bitshift64Lshr(($125|0),($126|0),($128|0))|0);
   $130 = tempRet0;
   $val = $129;
   $131 = $val;
   $132 = $131&65535;
   $133 = $row;
   $134 = HEAP16[580226>>1]|0;
   $135 = $134&65535;
   $136 = Math_imul($133, $135)|0;
   $137 = $col;
   $138 = HEAP32[1068>>2]|0;
   $139 = $138 >>> 6;
   $140 = $139 & 1;
   $141 = $137 ^ $140;
   $142 = (($136) + ($141))|0;
   $143 = HEAP32[1032>>2]|0;
   $144 = (($143) + ($142<<1)|0);
   HEAP16[$144>>1] = $132;
   $145 = HEAP32[1068>>2]|0;
   $146 = $145 & 1;
   $147 = ($146|0)!=(0);
   if ($147) {
    $148 = $col;
    $149 = (($148|0) % 10)&-1;
    $150 = ($149|0)==(9);
    if ($150) {
     $151 = HEAP32[944>>2]|0;
     $152 = (_getc_unlocked($151)|0);
     $153 = ($152|0)!=(0);
     if ($153) {
      $154 = $row;
      $155 = HEAP16[580074>>1]|0;
      $156 = $155&65535;
      $157 = HEAP16[448958>>1]|0;
      $158 = $157&65535;
      $159 = (($156) + ($158))|0;
      $160 = ($154|0)<($159|0);
      if ($160) {
       $161 = $col;
       $162 = HEAP16[580076>>1]|0;
       $163 = $162&65535;
       $164 = HEAP16[448956>>1]|0;
       $165 = $164&65535;
       $166 = (($163) + ($165))|0;
       $167 = ($161|0)<($166|0);
       if ($167) {
        _derror();
       }
      }
     }
    }
   }
   $168 = $col;
   $169 = (($168) + 1)|0;
   $col = $169;
  }
  $170 = $rbits;
  $171 = $vbits;
  $172 = (($171) - ($170))|0;
  $vbits = $172;
  $173 = $irow;
  $174 = (($173) + 1)|0;
  $irow = $174;
 }
 STACKTOP = sp;return;
}
function _nokia_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $data = 0, $dp = 0, $dwide = 0, $rev = 0, $row = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sum = sp;
 ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $0 = HEAP16[448960>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(18761);
 $3 = $2&1;
 $4 = ($3*3)|0;
 $rev = $4;
 $5 = HEAP16[580226>>1]|0;
 $6 = $5&65535;
 $7 = ($6*5)|0;
 $8 = (($7) + 1)|0;
 $9 = (($8|0) / 4)&-1;
 $dwide = $9;
 $10 = $dwide;
 $11 = $10<<1;
 $12 = (_malloc($11)|0);
 $data = $12;
 $13 = $data;
 _merror($13,594675);
 $row = 0;
 while(1) {
  $14 = $row;
  $15 = HEAP16[580244>>1]|0;
  $16 = $15&65535;
  $17 = ($14|0)<($16|0);
  $18 = $data;
  if (!($17)) {
   break;
  }
  $19 = $dwide;
  $20 = (($18) + ($19)|0);
  $21 = $dwide;
  $22 = HEAP32[944>>2]|0;
  $23 = (_fread($20,1,$21,$22)|0);
  $24 = $dwide;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   _derror();
  }
  $c = 0;
  while(1) {
   $26 = $c;
   $27 = $dwide;
   $28 = ($26|0)<($27|0);
   if (!($28)) {
    break;
   }
   $29 = $dwide;
   $30 = $c;
   $31 = $rev;
   $32 = $30 ^ $31;
   $33 = (($29) + ($32))|0;
   $34 = $data;
   $35 = (($34) + ($33)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $c;
   $38 = $data;
   $39 = (($38) + ($37)|0);
   HEAP8[$39>>0] = $36;
   $40 = $c;
   $41 = (($40) + 1)|0;
   $c = $41;
  }
  $42 = $data;
  $dp = $42;
  $col = 0;
  while(1) {
   $43 = $col;
   $44 = HEAP16[580226>>1]|0;
   $45 = $44&65535;
   $46 = ($43|0)<($45|0);
   if (!($46)) {
    break;
   }
   $c = 0;
   while(1) {
    $47 = $c;
    $48 = ($47|0)<(4);
    if (!($48)) {
     break;
    }
    $49 = $c;
    $50 = $dp;
    $51 = (($50) + ($49)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 << 2;
    $55 = $dp;
    $56 = ((($55)) + 4|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = $c;
    $60 = $59 << 1;
    $61 = $58 >> $60;
    $62 = $61 & 3;
    $63 = $54 | $62;
    $64 = $63&65535;
    $65 = $row;
    $66 = HEAP16[580226>>1]|0;
    $67 = $66&65535;
    $68 = Math_imul($65, $67)|0;
    $69 = $col;
    $70 = $c;
    $71 = (($69) + ($70))|0;
    $72 = (($68) + ($71))|0;
    $73 = HEAP32[1032>>2]|0;
    $74 = (($73) + ($72<<1)|0);
    HEAP16[$74>>1] = $64;
    $75 = $c;
    $76 = (($75) + 1)|0;
    $c = $76;
   }
   $77 = $dp;
   $78 = ((($77)) + 5|0);
   $dp = $78;
   $79 = $col;
   $80 = (($79) + 4)|0;
   $col = $80;
  }
  $81 = $row;
  $82 = (($81) + 1)|0;
  $row = $82;
 }
 _free($18);
 HEAP32[1040>>2] = 1023;
 $83 = (_strcmp(594275,594692)|0);
 $84 = ($83|0)!=(0);
 if ($84) {
  STACKTOP = sp;return;
 }
 $85 = HEAP16[580244>>1]|0;
 $86 = $85&65535;
 $87 = (($86|0) / 2)&-1;
 $row = $87;
 $c = 0;
 while(1) {
  $88 = $c;
  $89 = HEAP16[580076>>1]|0;
  $90 = $89&65535;
  $91 = (($90) - 1)|0;
  $92 = ($88|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $row;
  $94 = HEAP16[580226>>1]|0;
  $95 = $94&65535;
  $96 = Math_imul($93, $95)|0;
  $97 = $c;
  $98 = (($96) + ($97))|0;
  $99 = HEAP32[1032>>2]|0;
  $100 = (($99) + ($98<<1)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101&65535;
  $103 = $row;
  $104 = (($103) + 1)|0;
  $105 = HEAP16[580226>>1]|0;
  $106 = $105&65535;
  $107 = Math_imul($104, $106)|0;
  $108 = $c;
  $109 = (($108) + 1)|0;
  $110 = (($107) + ($109))|0;
  $111 = HEAP32[1032>>2]|0;
  $112 = (($111) + ($110<<1)|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113&65535;
  $115 = (($102) - ($114))|0;
  $116 = $row;
  $117 = HEAP16[580226>>1]|0;
  $118 = $117&65535;
  $119 = Math_imul($116, $118)|0;
  $120 = $c;
  $121 = (($119) + ($120))|0;
  $122 = HEAP32[1032>>2]|0;
  $123 = (($122) + ($121<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124&65535;
  $126 = $row;
  $127 = (($126) + 1)|0;
  $128 = HEAP16[580226>>1]|0;
  $129 = $128&65535;
  $130 = Math_imul($127, $129)|0;
  $131 = $c;
  $132 = (($131) + 1)|0;
  $133 = (($130) + ($132))|0;
  $134 = HEAP32[1032>>2]|0;
  $135 = (($134) + ($133<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = $136&65535;
  $138 = (($125) - ($137))|0;
  $139 = Math_imul($115, $138)|0;
  $140 = (+($139|0));
  $141 = $c;
  $142 = $141 & 1;
  $143 = (($sum) + ($142<<3)|0);
  $144 = +HEAPF64[$143>>3];
  $145 = $144 + $140;
  HEAPF64[$143>>3] = $145;
  $146 = $row;
  $147 = (($146) + 1)|0;
  $148 = HEAP16[580226>>1]|0;
  $149 = $148&65535;
  $150 = Math_imul($147, $149)|0;
  $151 = $c;
  $152 = (($150) + ($151))|0;
  $153 = HEAP32[1032>>2]|0;
  $154 = (($153) + ($152<<1)|0);
  $155 = HEAP16[$154>>1]|0;
  $156 = $155&65535;
  $157 = $row;
  $158 = HEAP16[580226>>1]|0;
  $159 = $158&65535;
  $160 = Math_imul($157, $159)|0;
  $161 = $c;
  $162 = (($161) + 1)|0;
  $163 = (($160) + ($162))|0;
  $164 = HEAP32[1032>>2]|0;
  $165 = (($164) + ($163<<1)|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = $166&65535;
  $168 = (($156) - ($167))|0;
  $169 = $row;
  $170 = (($169) + 1)|0;
  $171 = HEAP16[580226>>1]|0;
  $172 = $171&65535;
  $173 = Math_imul($170, $172)|0;
  $174 = $c;
  $175 = (($173) + ($174))|0;
  $176 = HEAP32[1032>>2]|0;
  $177 = (($176) + ($175<<1)|0);
  $178 = HEAP16[$177>>1]|0;
  $179 = $178&65535;
  $180 = $row;
  $181 = HEAP16[580226>>1]|0;
  $182 = $181&65535;
  $183 = Math_imul($180, $182)|0;
  $184 = $c;
  $185 = (($184) + 1)|0;
  $186 = (($183) + ($185))|0;
  $187 = HEAP32[1032>>2]|0;
  $188 = (($187) + ($186<<1)|0);
  $189 = HEAP16[$188>>1]|0;
  $190 = $189&65535;
  $191 = (($179) - ($190))|0;
  $192 = Math_imul($168, $191)|0;
  $193 = (+($192|0));
  $194 = $c;
  $195 = $194 ^ -1;
  $196 = $195 & 1;
  $197 = (($sum) + ($196<<3)|0);
  $198 = +HEAPF64[$197>>3];
  $199 = $198 + $193;
  HEAPF64[$197>>3] = $199;
  $200 = $c;
  $201 = (($200) + 1)|0;
  $c = $201;
 }
 $202 = ((($sum)) + 8|0);
 $203 = +HEAPF64[$202>>3];
 $204 = +HEAPF64[$sum>>3];
 $205 = $203 > $204;
 if (!($205)) {
  STACKTOP = sp;return;
 }
 HEAP32[776>>2] = 1263225675;
 STACKTOP = sp;return;
}
function _canon_rmf_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $c = 0, $col = 0, $ocol = 0, $orow = 0, $row = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580244>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[580226>>1]|0;
   $6 = $5&65535;
   $7 = (($6) - 2)|0;
   $8 = ($4|0)<($7|0);
   if (!($8)) {
    break;
   }
   $9 = (_get4()|0);
   $bits = $9;
   $c = 0;
   while(1) {
    $10 = $c;
    $11 = ($10|0)<(3);
    if (!($11)) {
     break;
    }
    $12 = $row;
    $orow = $12;
    $13 = $col;
    $14 = $c;
    $15 = (($13) + ($14))|0;
    $16 = (($15) - 4)|0;
    $ocol = $16;
    $17 = ($16|0)<(0);
    if ($17) {
     $18 = HEAP16[580226>>1]|0;
     $19 = $18&65535;
     $20 = $ocol;
     $21 = (($20) + ($19))|0;
     $ocol = $21;
     $22 = $orow;
     $23 = (($22) - 2)|0;
     $orow = $23;
     $24 = ($23|0)<(0);
     if ($24) {
      $25 = HEAP16[580244>>1]|0;
      $26 = $25&65535;
      $27 = $orow;
      $28 = (($27) + ($26))|0;
      $orow = $28;
     }
    }
    $29 = $bits;
    $30 = $c;
    $31 = ($30*10)|0;
    $32 = (($31) + 2)|0;
    $33 = $29 >> $32;
    $34 = $33 & 1023;
    $35 = (448962 + ($34<<1)|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $orow;
    $38 = HEAP16[580226>>1]|0;
    $39 = $38&65535;
    $40 = Math_imul($37, $39)|0;
    $41 = $ocol;
    $42 = (($40) + ($41))|0;
    $43 = HEAP32[1032>>2]|0;
    $44 = (($43) + ($42<<1)|0);
    HEAP16[$44>>1] = $36;
    $45 = $c;
    $46 = (($45) + 1)|0;
    $c = $46;
   }
   $47 = $col;
   $48 = (($47) + 3)|0;
   $col = $48;
  }
  $49 = $row;
  $50 = (($49) + 1)|0;
  $row = $50;
 }
 $51 = HEAP16[(451008)>>1]|0;
 $52 = $51&65535;
 HEAP32[1040>>2] = $52;
 STACKTOP = sp;return;
}
function _pana_bits($nbits) {
 $nbits = $nbits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byte = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $nbits;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  HEAP32[1792>>2] = 0;
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 $4 = HEAP32[1792>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = HEAP32[1068>>2]|0;
  $7 = (594703 + ($6)|0);
  $8 = HEAP32[1068>>2]|0;
  $9 = (16384 - ($8))|0;
  $10 = HEAP32[944>>2]|0;
  (_fread($7,1,$9,$10)|0);
  $11 = HEAP32[1068>>2]|0;
  $12 = HEAP32[944>>2]|0;
  (_fread(594703,1,$11,$12)|0);
 }
 $13 = HEAP32[1792>>2]|0;
 $14 = $1;
 $15 = (($13) - ($14))|0;
 $16 = $15 & 131071;
 HEAP32[1792>>2] = $16;
 $17 = HEAP32[1792>>2]|0;
 $18 = $17 >> 3;
 $19 = $18 ^ 16368;
 $byte = $19;
 $20 = $byte;
 $21 = (594703 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $byte;
 $25 = (($24) + 1)|0;
 $26 = (594703 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $30 = $23 | $29;
 $31 = HEAP32[1792>>2]|0;
 $32 = $31 & 7;
 $33 = $30 >> $32;
 $34 = $1;
 $35 = -1 << $34;
 $36 = $35 ^ -1;
 $37 = $33 & $36;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _panasonic_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $col = 0, $i = 0, $j = 0, $nonz = 0, $or$cond = 0, $or$cond3 = 0, $pred = 0, $row = 0, $sh = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pred = sp + 8|0;
 $nonz = sp;
 $sh = 0;
 (_pana_bits(0)|0);
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[580226>>1]|0;
   $6 = $5&65535;
   $7 = ($4|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = $col;
   $9 = (($8|0) % 14)&-1;
   $i = $9;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = ((($nonz)) + 4|0);
    HEAP32[$11>>2] = 0;
    HEAP32[$nonz>>2] = 0;
    $12 = ((($pred)) + 4|0);
    HEAP32[$12>>2] = 0;
    HEAP32[$pred>>2] = 0;
   }
   $13 = $i;
   $14 = (($13|0) % 3)&-1;
   $15 = ($14|0)==(2);
   if ($15) {
    $16 = (_pana_bits(2)|0);
    $17 = (3 - ($16))|0;
    $18 = 4 >> $17;
    $sh = $18;
   }
   $19 = $i;
   $20 = $19 & 1;
   $21 = (($nonz) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)!=(0);
   $24 = (_pana_bits(8)|0);
   if ($23) {
    $j = $24;
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = $sh;
     $27 = 128 << $26;
     $28 = $i;
     $29 = $28 & 1;
     $30 = (($pred) + ($29<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) - ($27))|0;
     HEAP32[$30>>2] = $32;
     $33 = ($32|0)<(0);
     $34 = $sh;
     $35 = ($34|0)==(4);
     $or$cond = $33 | $35;
     if ($or$cond) {
      $36 = $sh;
      $37 = -1 << $36;
      $38 = $37 ^ -1;
      $39 = $i;
      $40 = $39 & 1;
      $41 = (($pred) + ($40<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = $42 & $38;
      HEAP32[$41>>2] = $43;
     }
     $44 = $j;
     $45 = $sh;
     $46 = $44 << $45;
     $47 = $i;
     $48 = $47 & 1;
     $49 = (($pred) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + ($46))|0;
     HEAP32[$49>>2] = $51;
    }
   } else {
    $52 = $i;
    $53 = $52 & 1;
    $54 = (($nonz) + ($53<<2)|0);
    HEAP32[$54>>2] = $24;
    $55 = ($24|0)!=(0);
    $56 = $i;
    $57 = ($56|0)>(11);
    $or$cond3 = $55 | $57;
    if ($or$cond3) {
     $58 = $i;
     $59 = $58 & 1;
     $60 = (($nonz) + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 << 4;
     $63 = (_pana_bits(4)|0);
     $64 = $62 | $63;
     $65 = $i;
     $66 = $65 & 1;
     $67 = (($pred) + ($66<<2)|0);
     HEAP32[$67>>2] = $64;
    }
   }
   $68 = $col;
   $69 = $68 & 1;
   $70 = (($pred) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71&65535;
   $73 = $row;
   $74 = HEAP16[580226>>1]|0;
   $75 = $74&65535;
   $76 = Math_imul($73, $75)|0;
   $77 = $col;
   $78 = (($76) + ($77))|0;
   $79 = HEAP32[1032>>2]|0;
   $80 = (($79) + ($78<<1)|0);
   HEAP16[$80>>1] = $72;
   $81 = $72&65535;
   $82 = ($81|0)>(4098);
   if ($82) {
    $83 = $col;
    $84 = HEAP16[580076>>1]|0;
    $85 = $84&65535;
    $86 = ($83|0)<($85|0);
    if ($86) {
     _derror();
    }
   }
   $87 = $col;
   $88 = (($87) + 1)|0;
   $col = $88;
  }
  $89 = $row;
  $90 = (($89) + 1)|0;
  $row = $90;
 }
 STACKTOP = sp;return;
}
function _olympus_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $acarry = 0, $c = 0, $carry = 0, $col = 0, $diff = 0, $high = 0, $huff = 0, $i = 0, $low = 0, $n = 0, $nbits = 0, $nw = 0, $or$cond = 0, $pred = 0, $row = 0, $sign = 0, $w = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 88|0;
 $acarry = sp + 16|0;
 $n = 0;
 HEAP16[$huff>>1] = 3084;
 $i = 12;
 L1: while(1) {
  $0 = $i;
  $1 = (($0) + -1)|0;
  $i = $1;
  $2 = ($0|0)!=(0);
  if (!($2)) {
   break;
  }
  $c = 0;
  while(1) {
   $3 = $c;
   $4 = $i;
   $5 = 2048 >> $4;
   $6 = ($3|0)<($5|0);
   if (!($6)) {
    continue L1;
   }
   $7 = $i;
   $8 = (($7) + 1)|0;
   $9 = $8 << 8;
   $10 = $i;
   $11 = $9 | $10;
   $12 = $11&65535;
   $13 = $n;
   $14 = (($13) + 1)|0;
   $n = $14;
   $15 = (($huff) + ($14<<1)|0);
   HEAP16[$15>>1] = $12;
   $16 = $c;
   $17 = (($16) + 1)|0;
   $c = $17;
  }
 }
 $18 = HEAP32[944>>2]|0;
 (_fseek($18,7,1)|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $19 = $row;
  $20 = HEAP16[580074>>1]|0;
  $21 = $20&65535;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  ;HEAP32[$acarry>>2]=0|0;HEAP32[$acarry+4>>2]=0|0;HEAP32[$acarry+8>>2]=0|0;HEAP32[$acarry+12>>2]=0|0;HEAP32[$acarry+16>>2]=0|0;HEAP32[$acarry+20>>2]=0|0;
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[580226>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $col;
   $28 = $27 & 1;
   $29 = (($acarry) + (($28*12)|0)|0);
   $carry = $29;
   $30 = $carry;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)<(3);
   $34 = $33&1;
   $35 = $34<<1;
   $i = $35;
   $36 = $i;
   $37 = (2 + ($36))|0;
   $nbits = $37;
   while(1) {
    $38 = $carry;
    $39 = HEAP32[$38>>2]|0;
    $40 = $39&65535;
    $41 = $40&65535;
    $42 = $nbits;
    $43 = $i;
    $44 = (($42) + ($43))|0;
    $45 = $41 >> $44;
    $46 = ($45|0)!=(0);
    if (!($46)) {
     break;
    }
    $47 = $nbits;
    $48 = (($47) + 1)|0;
    $nbits = $48;
   }
   $49 = (_getbithuff(3,0)|0);
   $sign = $49;
   $50 = $49 & 3;
   $low = $50;
   $51 = $sign;
   $52 = $51 << 29;
   $53 = $52 >> 31;
   $sign = $53;
   $54 = (_getbithuff(12,$huff)|0);
   $high = $54;
   $55 = ($54|0)==(12);
   if ($55) {
    $56 = $nbits;
    $57 = (16 - ($56))|0;
    $58 = (_getbithuff($57,0)|0);
    $59 = $58 >>> 1;
    $high = $59;
   }
   $60 = $high;
   $61 = $nbits;
   $62 = $60 << $61;
   $63 = $nbits;
   $64 = (_getbithuff($63,0)|0);
   $65 = $62 | $64;
   $66 = $carry;
   HEAP32[$66>>2] = $65;
   $67 = $carry;
   $68 = HEAP32[$67>>2]|0;
   $69 = $sign;
   $70 = $68 ^ $69;
   $71 = $carry;
   $72 = ((($71)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($70) + ($73))|0;
   $diff = $74;
   $75 = $diff;
   $76 = ($75*3)|0;
   $77 = $carry;
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($76) + ($79))|0;
   $81 = $80 >> 5;
   $82 = $carry;
   $83 = ((($82)) + 4|0);
   HEAP32[$83>>2] = $81;
   $84 = $carry;
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)>(16);
   if ($86) {
    $93 = 0;
   } else {
    $87 = $carry;
    $88 = ((($87)) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + 1)|0;
    $93 = $90;
   }
   $91 = $carry;
   $92 = ((($91)) + 8|0);
   HEAP32[$92>>2] = $93;
   $94 = $col;
   $95 = HEAP16[580076>>1]|0;
   $96 = $95&65535;
   $97 = ($94|0)>=($96|0);
   if (!($97)) {
    $98 = $row;
    $99 = ($98|0)<(2);
    $100 = $col;
    $101 = ($100|0)<(2);
    $or$cond = $99 & $101;
    L26: do {
     if ($or$cond) {
      $pred = 0;
     } else {
      $102 = $row;
      $103 = ($102|0)<(2);
      if ($103) {
       $104 = $row;
       $105 = HEAP16[580226>>1]|0;
       $106 = $105&65535;
       $107 = Math_imul($104, $106)|0;
       $108 = $col;
       $109 = (($108) - 2)|0;
       $110 = (($107) + ($109))|0;
       $111 = HEAP32[1032>>2]|0;
       $112 = (($111) + ($110<<1)|0);
       $113 = HEAP16[$112>>1]|0;
       $114 = $113&65535;
       $pred = $114;
       break;
      }
      $115 = $col;
      $116 = ($115|0)<(2);
      $117 = $row;
      if ($116) {
       $118 = (($117) - 2)|0;
       $119 = HEAP16[580226>>1]|0;
       $120 = $119&65535;
       $121 = Math_imul($118, $120)|0;
       $122 = $col;
       $123 = (($121) + ($122))|0;
       $124 = HEAP32[1032>>2]|0;
       $125 = (($124) + ($123<<1)|0);
       $126 = HEAP16[$125>>1]|0;
       $127 = $126&65535;
       $pred = $127;
       break;
      }
      $128 = HEAP16[580226>>1]|0;
      $129 = $128&65535;
      $130 = Math_imul($117, $129)|0;
      $131 = $col;
      $132 = (($131) - 2)|0;
      $133 = (($130) + ($132))|0;
      $134 = HEAP32[1032>>2]|0;
      $135 = (($134) + ($133<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $w = $137;
      $138 = $row;
      $139 = (($138) - 2)|0;
      $140 = HEAP16[580226>>1]|0;
      $141 = $140&65535;
      $142 = Math_imul($139, $141)|0;
      $143 = $col;
      $144 = (($142) + ($143))|0;
      $145 = HEAP32[1032>>2]|0;
      $146 = (($145) + ($144<<1)|0);
      $147 = HEAP16[$146>>1]|0;
      $148 = $147&65535;
      $n = $148;
      $149 = $row;
      $150 = (($149) - 2)|0;
      $151 = HEAP16[580226>>1]|0;
      $152 = $151&65535;
      $153 = Math_imul($150, $152)|0;
      $154 = $col;
      $155 = (($154) - 2)|0;
      $156 = (($153) + ($155))|0;
      $157 = HEAP32[1032>>2]|0;
      $158 = (($157) + ($156<<1)|0);
      $159 = HEAP16[$158>>1]|0;
      $160 = $159&65535;
      $nw = $160;
      $161 = $w;
      $162 = $nw;
      $163 = ($161|0)<($162|0);
      if ($163) {
       $164 = $nw;
       $165 = $n;
       $166 = ($164|0)<($165|0);
       if (!($166)) {
        label = 26;
       }
      } else {
       label = 26;
      }
      do {
       if ((label|0) == 26) {
        label = 0;
        $167 = $n;
        $168 = $nw;
        $169 = ($167|0)<($168|0);
        if ($169) {
         $170 = $nw;
         $171 = $w;
         $172 = ($170|0)<($171|0);
         if ($172) {
          break;
         }
        }
        $210 = $w;
        $211 = $nw;
        $212 = (($210) - ($211))|0;
        $213 = $w;
        $214 = $nw;
        $215 = (($213) - ($214))|0;
        $216 = $215 >> 31;
        $217 = $212 ^ $216;
        $218 = $w;
        $219 = $nw;
        $220 = (($218) - ($219))|0;
        $221 = $220 >> 31;
        $222 = (($217) - ($221))|0;
        $223 = $n;
        $224 = $nw;
        $225 = (($223) - ($224))|0;
        $226 = $n;
        $227 = $nw;
        $228 = (($226) - ($227))|0;
        $229 = $228 >> 31;
        $230 = $225 ^ $229;
        $231 = $n;
        $232 = $nw;
        $233 = (($231) - ($232))|0;
        $234 = $233 >> 31;
        $235 = (($230) - ($234))|0;
        $236 = ($222|0)>($235|0);
        $237 = $w;
        $238 = $n;
        $239 = $236 ? $237 : $238;
        $pred = $239;
        break L26;
       }
      } while(0);
      $173 = $w;
      $174 = $nw;
      $175 = (($173) - ($174))|0;
      $176 = $w;
      $177 = $nw;
      $178 = (($176) - ($177))|0;
      $179 = $178 >> 31;
      $180 = $175 ^ $179;
      $181 = $w;
      $182 = $nw;
      $183 = (($181) - ($182))|0;
      $184 = $183 >> 31;
      $185 = (($180) - ($184))|0;
      $186 = ($185|0)>(32);
      if (!($186)) {
       $187 = $n;
       $188 = $nw;
       $189 = (($187) - ($188))|0;
       $190 = $n;
       $191 = $nw;
       $192 = (($190) - ($191))|0;
       $193 = $192 >> 31;
       $194 = $189 ^ $193;
       $195 = $n;
       $196 = $nw;
       $197 = (($195) - ($196))|0;
       $198 = $197 >> 31;
       $199 = (($194) - ($198))|0;
       $200 = ($199|0)>(32);
       if (!($200)) {
        $206 = $w;
        $207 = $n;
        $208 = (($206) + ($207))|0;
        $209 = $208 >> 1;
        $pred = $209;
        break;
       }
      }
      $201 = $w;
      $202 = $n;
      $203 = (($201) + ($202))|0;
      $204 = $nw;
      $205 = (($203) - ($204))|0;
      $pred = $205;
     }
    } while(0);
    $240 = $pred;
    $241 = $diff;
    $242 = $241 << 2;
    $243 = $low;
    $244 = $242 | $243;
    $245 = (($240) + ($244))|0;
    $246 = $245&65535;
    $247 = $row;
    $248 = HEAP16[580226>>1]|0;
    $249 = $248&65535;
    $250 = Math_imul($247, $249)|0;
    $251 = $col;
    $252 = (($250) + ($251))|0;
    $253 = HEAP32[1032>>2]|0;
    $254 = (($253) + ($252<<1)|0);
    HEAP16[$254>>1] = $246;
    $255 = $246&65535;
    $256 = $255 >> 12;
    $257 = ($256|0)!=(0);
    if ($257) {
     _derror();
    }
   }
   $258 = $col;
   $259 = (($258) + 1)|0;
   $col = $259;
  }
  $260 = $row;
  $261 = (($260) + 1)|0;
  $row = $261;
 }
 STACKTOP = sp;return;
}
function _minolta_rd175_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $box = 0, $col = 0, $irow = 0, $pixel = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 16|0;
 $irow = 0;
 while(1) {
  $0 = $irow;
  $1 = ($0>>>0)<(1481);
  if (!($1)) {
   break;
  }
  $2 = HEAP32[944>>2]|0;
  $3 = (_fread($pixel,1,768,$2)|0);
  $4 = ($3>>>0)<(768);
  if ($4) {
   _derror();
  }
  $5 = $irow;
  $6 = (($5>>>0) / 82)&-1;
  $box = $6;
  $7 = $irow;
  $8 = (($7>>>0) % 82)&-1;
  $9 = ($8*12)|0;
  $10 = $box;
  $11 = ($10>>>0)<(12);
  $12 = $box;
  $13 = $12 | 1;
  $14 = (($12) - 12)|0;
  $15 = $14<<1;
  $16 = $11 ? $13 : $15;
  $17 = (($9) + ($16))|0;
  $row = $17;
  $18 = $irow;
  switch ($18|0) {
  case 1479: case 1477:  {
   break;
  }
  case 1476:  {
   $row = 984;
   label = 9;
   break;
  }
  case 1480:  {
   $row = 985;
   label = 9;
   break;
  }
  case 1478:  {
   $row = 985;
   $box = 1;
   label = 9;
   break;
  }
  default: {
   label = 9;
  }
  }
  L11: do {
   if ((label|0) == 9) {
    label = 0;
    $19 = $box;
    $20 = ($19>>>0)<(12);
    if ($20) {
     $21 = $box;
     $22 = $21 & 1;
     $23 = ($22|0)!=(0);
     if ($23) {
      $col = 0;
      while(1) {
       $24 = $col;
       $25 = ($24>>>0)<(1533);
       if (!($25)) {
        break;
       }
       $26 = $col;
       $27 = ($26|0)!=(1);
       if ($27) {
        $28 = $col;
        $29 = (($28) + 1)|0;
        $30 = $29 & 2;
        $31 = ($30|0)!=(0);
        $32 = $col;
        $33 = (($32>>>0) / 2)&-1;
        if ($31) {
         $34 = (($33) - 1)|0;
         $35 = (($pixel) + ($34)|0);
         $36 = HEAP8[$35>>0]|0;
         $37 = $36&255;
         $38 = $col;
         $39 = (($38>>>0) / 2)&-1;
         $40 = (($39) + 1)|0;
         $41 = (($pixel) + ($40)|0);
         $42 = HEAP8[$41>>0]|0;
         $43 = $42&255;
         $44 = (($37) + ($43))|0;
         $50 = $44;
        } else {
         $45 = (($pixel) + ($33)|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = $46&255;
         $48 = $47 << 1;
         $50 = $48;
        }
        $49 = $50&65535;
        $51 = $row;
        $52 = HEAP16[580226>>1]|0;
        $53 = $52&65535;
        $54 = Math_imul($51, $53)|0;
        $55 = $col;
        $56 = (($54) + ($55))|0;
        $57 = HEAP32[1032>>2]|0;
        $58 = (($57) + ($56<<1)|0);
        HEAP16[$58>>1] = $49;
       }
       $59 = $col;
       $60 = (($59) + 1)|0;
       $col = $60;
       $61 = $row;
       $62 = $61 ^ 1;
       $row = $62;
      }
      $63 = ((($pixel)) + 1|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = $65 << 1;
      $67 = $66&65535;
      $68 = $row;
      $69 = HEAP16[580226>>1]|0;
      $70 = $69&65535;
      $71 = Math_imul($68, $70)|0;
      $72 = (($71) + 1)|0;
      $73 = HEAP32[1032>>2]|0;
      $74 = (($73) + ($72<<1)|0);
      HEAP16[$74>>1] = $67;
      $75 = ((($pixel)) + 765|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = $76&255;
      $78 = $77 << 1;
      $79 = $78&65535;
      $80 = $row;
      $81 = HEAP16[580226>>1]|0;
      $82 = $81&65535;
      $83 = Math_imul($80, $82)|0;
      $84 = (($83) + 1533)|0;
      $85 = HEAP32[1032>>2]|0;
      $86 = (($85) + ($84<<1)|0);
      HEAP16[$86>>1] = $79;
      break;
     }
    }
    $87 = $row;
    $88 = $87 & 1;
    $col = $88;
    while(1) {
     $89 = $col;
     $90 = ($89>>>0)<(1534);
     if (!($90)) {
      break L11;
     }
     $91 = $col;
     $92 = (($91>>>0) / 2)&-1;
     $93 = (($pixel) + ($92)|0);
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = $95 << 1;
     $97 = $96&65535;
     $98 = $row;
     $99 = HEAP16[580226>>1]|0;
     $100 = $99&65535;
     $101 = Math_imul($98, $100)|0;
     $102 = $col;
     $103 = (($101) + ($102))|0;
     $104 = HEAP32[1032>>2]|0;
     $105 = (($104) + ($103<<1)|0);
     HEAP16[$105>>1] = $97;
     $106 = $col;
     $107 = (($106) + 2)|0;
     $col = $107;
    }
   }
  } while(0);
  $108 = $irow;
  $109 = (($108) + 1)|0;
  $irow = $109;
 }
 HEAP32[1040>>2] = 510;
 STACKTOP = sp;return;
}
function _quicktake_100_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $col = 0, $or$cond = 0, $pixel = 0, $rb = 0, $row = 0, $sharp = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 311728|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 24|0;
 $val = 0;
 (_getbithuff(-1,0)|0);
 _memset(($pixel|0),-128,311696)|0;
 $row = 2;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = (($2) + 2)|0;
  $4 = ($0|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $row;
  $6 = $5 & 1;
  $7 = (2 + ($6))|0;
  $col = $7;
  while(1) {
   $8 = $col;
   $9 = HEAP16[580076>>1]|0;
   $10 = $9&65535;
   $11 = (($10) + 2)|0;
   $12 = ($8|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = $col;
   $14 = (($13) - 1)|0;
   $15 = $row;
   $16 = (($15) - 1)|0;
   $17 = (($pixel) + (($16*644)|0)|0);
   $18 = (($17) + ($14)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = $col;
   $22 = (($21) + 1)|0;
   $23 = $row;
   $24 = (($23) - 1)|0;
   $25 = (($pixel) + (($24*644)|0)|0);
   $26 = (($25) + ($22)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28<<1;
   $30 = (($20) + ($29))|0;
   $31 = $col;
   $32 = (($31) - 2)|0;
   $33 = $row;
   $34 = (($pixel) + (($33*644)|0)|0);
   $35 = (($34) + ($32)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = (($30) + ($37))|0;
   $39 = $38 >> 2;
   $40 = (_getbithuff(4,0)|0);
   $41 = (588468 + ($40<<1)|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = (($39) + ($43))|0;
   $val = $44;
   $45 = $val;
   $46 = ($45|0)<(255);
   $47 = $val;
   $48 = $46 ? $47 : 255;
   $49 = (0)>($48|0);
   if ($49) {
    $54 = 0;
   } else {
    $50 = $val;
    $51 = ($50|0)<(255);
    $52 = $val;
    $53 = $51 ? $52 : 255;
    $54 = $53;
   }
   $val = $54;
   $55 = $54&255;
   $56 = $col;
   $57 = $row;
   $58 = (($pixel) + (($57*644)|0)|0);
   $59 = (($58) + ($56)|0);
   HEAP8[$59>>0] = $55;
   $60 = $col;
   $61 = ($60|0)<(4);
   if ($61) {
    $62 = $val;
    $63 = $62&255;
    $64 = $row;
    $65 = $64 ^ -1;
    $66 = $65 & 1;
    $67 = $row;
    $68 = (($67) + 1)|0;
    $69 = (($pixel) + (($68*644)|0)|0);
    $70 = (($69) + ($66)|0);
    HEAP8[$70>>0] = $63;
    $71 = $col;
    $72 = (($71) - 2)|0;
    $73 = $row;
    $74 = (($pixel) + (($73*644)|0)|0);
    $75 = (($74) + ($72)|0);
    HEAP8[$75>>0] = $63;
   }
   $76 = $row;
   $77 = ($76|0)==(2);
   if ($77) {
    $78 = $val;
    $79 = $78&255;
    $80 = $col;
    $81 = (($80) + 3)|0;
    $82 = $row;
    $83 = (($82) - 1)|0;
    $84 = (($pixel) + (($83*644)|0)|0);
    $85 = (($84) + ($81)|0);
    HEAP8[$85>>0] = $79;
    $86 = $col;
    $87 = (($86) + 1)|0;
    $88 = $row;
    $89 = (($88) - 1)|0;
    $90 = (($pixel) + (($89*644)|0)|0);
    $91 = (($90) + ($87)|0);
    HEAP8[$91>>0] = $79;
   }
   $92 = $col;
   $93 = (($92) + 2)|0;
   $col = $93;
  }
  $94 = $val;
  $95 = $94&255;
  $96 = $col;
  $97 = $row;
  $98 = (($pixel) + (($97*644)|0)|0);
  $99 = (($98) + ($96)|0);
  HEAP8[$99>>0] = $95;
  $100 = $row;
  $101 = (($100) + 1)|0;
  $row = $101;
 }
 $rb = 0;
 while(1) {
  $102 = $rb;
  $103 = ($102|0)<(2);
  if (!($103)) {
   break;
  }
  $104 = $rb;
  $105 = (2 + ($104))|0;
  $row = $105;
  while(1) {
   $106 = $row;
   $107 = HEAP16[580074>>1]|0;
   $108 = $107&65535;
   $109 = (($108) + 2)|0;
   $110 = ($106|0)<($109|0);
   if (!($110)) {
    break;
   }
   $111 = $row;
   $112 = $111 & 1;
   $113 = (3 - ($112))|0;
   $col = $113;
   while(1) {
    $114 = $col;
    $115 = HEAP16[580076>>1]|0;
    $116 = $115&65535;
    $117 = (($116) + 2)|0;
    $118 = ($114|0)<($117|0);
    $119 = $row;
    if (!($118)) {
     break;
    }
    $120 = ($119|0)<(4);
    $121 = $col;
    $122 = ($121|0)<(4);
    $or$cond = $120 | $122;
    if ($or$cond) {
     $sharp = 2;
    } else {
     $123 = $col;
     $124 = $row;
     $125 = (($124) - 2)|0;
     $126 = (($pixel) + (($125*644)|0)|0);
     $127 = (($126) + ($123)|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = $128&255;
     $130 = $col;
     $131 = (($130) - 2)|0;
     $132 = $row;
     $133 = (($pixel) + (($132*644)|0)|0);
     $134 = (($133) + ($131)|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     $137 = (($129) - ($136))|0;
     $138 = $col;
     $139 = $row;
     $140 = (($139) - 2)|0;
     $141 = (($pixel) + (($140*644)|0)|0);
     $142 = (($141) + ($138)|0);
     $143 = HEAP8[$142>>0]|0;
     $144 = $143&255;
     $145 = $col;
     $146 = (($145) - 2)|0;
     $147 = $row;
     $148 = (($pixel) + (($147*644)|0)|0);
     $149 = (($148) + ($146)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = (($144) - ($151))|0;
     $153 = $152 >> 31;
     $154 = $137 ^ $153;
     $155 = $col;
     $156 = $row;
     $157 = (($156) - 2)|0;
     $158 = (($pixel) + (($157*644)|0)|0);
     $159 = (($158) + ($155)|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $160&255;
     $162 = $col;
     $163 = (($162) - 2)|0;
     $164 = $row;
     $165 = (($pixel) + (($164*644)|0)|0);
     $166 = (($165) + ($163)|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = (($161) - ($168))|0;
     $170 = $169 >> 31;
     $171 = (($154) - ($170))|0;
     $172 = $col;
     $173 = $row;
     $174 = (($173) - 2)|0;
     $175 = (($pixel) + (($174*644)|0)|0);
     $176 = (($175) + ($172)|0);
     $177 = HEAP8[$176>>0]|0;
     $178 = $177&255;
     $179 = $col;
     $180 = (($179) - 2)|0;
     $181 = $row;
     $182 = (($181) - 2)|0;
     $183 = (($pixel) + (($182*644)|0)|0);
     $184 = (($183) + ($180)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = (($178) - ($186))|0;
     $188 = $col;
     $189 = $row;
     $190 = (($189) - 2)|0;
     $191 = (($pixel) + (($190*644)|0)|0);
     $192 = (($191) + ($188)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = $col;
     $196 = (($195) - 2)|0;
     $197 = $row;
     $198 = (($197) - 2)|0;
     $199 = (($pixel) + (($198*644)|0)|0);
     $200 = (($199) + ($196)|0);
     $201 = HEAP8[$200>>0]|0;
     $202 = $201&255;
     $203 = (($194) - ($202))|0;
     $204 = $203 >> 31;
     $205 = $187 ^ $204;
     $206 = $col;
     $207 = $row;
     $208 = (($207) - 2)|0;
     $209 = (($pixel) + (($208*644)|0)|0);
     $210 = (($209) + ($206)|0);
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = $col;
     $214 = (($213) - 2)|0;
     $215 = $row;
     $216 = (($215) - 2)|0;
     $217 = (($pixel) + (($216*644)|0)|0);
     $218 = (($217) + ($214)|0);
     $219 = HEAP8[$218>>0]|0;
     $220 = $219&255;
     $221 = (($212) - ($220))|0;
     $222 = $221 >> 31;
     $223 = (($205) - ($222))|0;
     $224 = (($171) + ($223))|0;
     $225 = $col;
     $226 = (($225) - 2)|0;
     $227 = $row;
     $228 = (($pixel) + (($227*644)|0)|0);
     $229 = (($228) + ($226)|0);
     $230 = HEAP8[$229>>0]|0;
     $231 = $230&255;
     $232 = $col;
     $233 = (($232) - 2)|0;
     $234 = $row;
     $235 = (($234) - 2)|0;
     $236 = (($pixel) + (($235*644)|0)|0);
     $237 = (($236) + ($233)|0);
     $238 = HEAP8[$237>>0]|0;
     $239 = $238&255;
     $240 = (($231) - ($239))|0;
     $241 = $col;
     $242 = (($241) - 2)|0;
     $243 = $row;
     $244 = (($pixel) + (($243*644)|0)|0);
     $245 = (($244) + ($242)|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = $col;
     $249 = (($248) - 2)|0;
     $250 = $row;
     $251 = (($250) - 2)|0;
     $252 = (($pixel) + (($251*644)|0)|0);
     $253 = (($252) + ($249)|0);
     $254 = HEAP8[$253>>0]|0;
     $255 = $254&255;
     $256 = (($247) - ($255))|0;
     $257 = $256 >> 31;
     $258 = $240 ^ $257;
     $259 = $col;
     $260 = (($259) - 2)|0;
     $261 = $row;
     $262 = (($pixel) + (($261*644)|0)|0);
     $263 = (($262) + ($260)|0);
     $264 = HEAP8[$263>>0]|0;
     $265 = $264&255;
     $266 = $col;
     $267 = (($266) - 2)|0;
     $268 = $row;
     $269 = (($268) - 2)|0;
     $270 = (($pixel) + (($269*644)|0)|0);
     $271 = (($270) + ($267)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = $272&255;
     $274 = (($265) - ($273))|0;
     $275 = $274 >> 31;
     $276 = (($258) - ($275))|0;
     $277 = (($224) + ($276))|0;
     $val = $277;
     $278 = $val;
     $279 = ($278|0)<(4);
     if ($279) {
      $289 = 0;
     } else {
      $280 = $val;
      $281 = ($280|0)<(8);
      if ($281) {
       $289 = 1;
      } else {
       $282 = $val;
       $283 = ($282|0)<(16);
       if ($283) {
        $289 = 2;
       } else {
        $284 = $val;
        $285 = ($284|0)<(32);
        if ($285) {
         $289 = 3;
        } else {
         $286 = $val;
         $287 = ($286|0)<(48);
         $288 = $287 ? 4 : 5;
         $289 = $288;
        }
       }
      }
     }
     $sharp = $289;
    }
    $290 = $col;
    $291 = $row;
    $292 = (($291) - 2)|0;
    $293 = (($pixel) + (($292*644)|0)|0);
    $294 = (($293) + ($290)|0);
    $295 = HEAP8[$294>>0]|0;
    $296 = $295&255;
    $297 = $col;
    $298 = (($297) - 2)|0;
    $299 = $row;
    $300 = (($pixel) + (($299*644)|0)|0);
    $301 = (($300) + ($298)|0);
    $302 = HEAP8[$301>>0]|0;
    $303 = $302&255;
    $304 = (($296) + ($303))|0;
    $305 = $304 >> 1;
    $306 = (_getbithuff(2,0)|0);
    $307 = $sharp;
    $308 = (588500 + ($307<<3)|0);
    $309 = (($308) + ($306<<1)|0);
    $310 = HEAP16[$309>>1]|0;
    $311 = $310 << 16 >> 16;
    $312 = (($305) + ($311))|0;
    $val = $312;
    $313 = $val;
    $314 = ($313|0)<(255);
    $315 = $val;
    $316 = $314 ? $315 : 255;
    $317 = (0)>($316|0);
    if ($317) {
     $322 = 0;
    } else {
     $318 = $val;
     $319 = ($318|0)<(255);
     $320 = $val;
     $321 = $319 ? $320 : 255;
     $322 = $321;
    }
    $val = $322;
    $323 = $322&255;
    $324 = $col;
    $325 = $row;
    $326 = (($pixel) + (($325*644)|0)|0);
    $327 = (($326) + ($324)|0);
    HEAP8[$327>>0] = $323;
    $328 = $row;
    $329 = ($328|0)<(4);
    if ($329) {
     $330 = $val;
     $331 = $330&255;
     $332 = $col;
     $333 = (($332) + 2)|0;
     $334 = $row;
     $335 = (($334) - 2)|0;
     $336 = (($pixel) + (($335*644)|0)|0);
     $337 = (($336) + ($333)|0);
     HEAP8[$337>>0] = $331;
    }
    $338 = $col;
    $339 = ($338|0)<(4);
    if ($339) {
     $340 = $val;
     $341 = $340&255;
     $342 = $col;
     $343 = (($342) - 2)|0;
     $344 = $row;
     $345 = (($344) + 2)|0;
     $346 = (($pixel) + (($345*644)|0)|0);
     $347 = (($346) + ($343)|0);
     HEAP8[$347>>0] = $341;
    }
    $348 = $col;
    $349 = (($348) + 2)|0;
    $col = $349;
   }
   $350 = (($119) + 2)|0;
   $row = $350;
  }
  $351 = $rb;
  $352 = (($351) + 1)|0;
  $rb = $352;
 }
 $row = 2;
 while(1) {
  $353 = $row;
  $354 = HEAP16[580074>>1]|0;
  $355 = $354&65535;
  $356 = (($355) + 2)|0;
  $357 = ($353|0)<($356|0);
  if (!($357)) {
   break;
  }
  $358 = $row;
  $359 = $358 & 1;
  $360 = (3 - ($359))|0;
  $col = $360;
  while(1) {
   $361 = $col;
   $362 = HEAP16[580076>>1]|0;
   $363 = $362&65535;
   $364 = (($363) + 2)|0;
   $365 = ($361|0)<($364|0);
   if (!($365)) {
    break;
   }
   $366 = $col;
   $367 = (($366) - 1)|0;
   $368 = $row;
   $369 = (($pixel) + (($368*644)|0)|0);
   $370 = (($369) + ($367)|0);
   $371 = HEAP8[$370>>0]|0;
   $372 = $371&255;
   $373 = $col;
   $374 = $row;
   $375 = (($pixel) + (($374*644)|0)|0);
   $376 = (($375) + ($373)|0);
   $377 = HEAP8[$376>>0]|0;
   $378 = $377&255;
   $379 = $378 << 2;
   $380 = (($372) + ($379))|0;
   $381 = $col;
   $382 = (($381) + 1)|0;
   $383 = $row;
   $384 = (($pixel) + (($383*644)|0)|0);
   $385 = (($384) + ($382)|0);
   $386 = HEAP8[$385>>0]|0;
   $387 = $386&255;
   $388 = (($380) + ($387))|0;
   $389 = $388 >> 1;
   $390 = (($389) - 256)|0;
   $val = $390;
   $391 = $val;
   $392 = ($391|0)<(255);
   $393 = $val;
   $394 = $392 ? $393 : 255;
   $395 = (0)>($394|0);
   if ($395) {
    $401 = 0;
   } else {
    $396 = $val;
    $397 = ($396|0)<(255);
    $398 = $val;
    $399 = $397 ? $398 : 255;
    $401 = $399;
   }
   $400 = $401&255;
   $402 = $col;
   $403 = $row;
   $404 = (($pixel) + (($403*644)|0)|0);
   $405 = (($404) + ($402)|0);
   HEAP8[$405>>0] = $400;
   $406 = $col;
   $407 = (($406) + 2)|0;
   $col = $407;
  }
  $408 = $row;
  $409 = (($408) + 1)|0;
  $row = $409;
 }
 $row = 0;
 while(1) {
  $410 = $row;
  $411 = HEAP16[580074>>1]|0;
  $412 = $411&65535;
  $413 = ($410|0)<($412|0);
  if (!($413)) {
   break;
  }
  $col = 0;
  while(1) {
   $414 = $col;
   $415 = HEAP16[580076>>1]|0;
   $416 = $415&65535;
   $417 = ($414|0)<($416|0);
   if (!($417)) {
    break;
   }
   $418 = $col;
   $419 = (($418) + 2)|0;
   $420 = $row;
   $421 = (($420) + 2)|0;
   $422 = (($pixel) + (($421*644)|0)|0);
   $423 = (($422) + ($419)|0);
   $424 = HEAP8[$423>>0]|0;
   $425 = $424&255;
   $426 = (588548 + ($425<<1)|0);
   $427 = HEAP16[$426>>1]|0;
   $428 = $row;
   $429 = HEAP16[580226>>1]|0;
   $430 = $429&65535;
   $431 = Math_imul($428, $430)|0;
   $432 = $col;
   $433 = (($431) + ($432))|0;
   $434 = HEAP32[1032>>2]|0;
   $435 = (($434) + ($433<<1)|0);
   HEAP16[$435>>1] = $427;
   $436 = $col;
   $437 = (($436) + 1)|0;
   $col = $437;
  }
  $438 = $row;
  $439 = (($438) + 1)|0;
  $row = $439;
 }
 HEAP32[1040>>2] = 1023;
 STACKTOP = sp;return;
}
function _kodak_radc_load_raw() {
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0.0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buf = 0, $c = 0, $col = 0, $huff = 0, $i = 0, $last = 0, $mul = 0, $nreps = 0, $or$cond = 0, $r = 0, $rep = 0, $row = 0, $s = 0, $step = 0, $tree = 0, $val = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 7016|0;
 $last = sp + 7006|0;
 $mul = sp + 7000|0;
 $buf = sp + 52|0;
 ;HEAP16[$last>>1]=HEAP16[589060>>1]|0;HEAP16[$last+2>>1]=HEAP16[589060+2>>1]|0;HEAP16[$last+4>>1]=HEAP16[589060+4>>1]|0;
 $i = 2;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(12);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (($2) - 2)|0;
  $4 = (589066 + ($3<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $c = $6;
  while(1) {
   $7 = $c;
   $8 = $i;
   $9 = (589066 + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $12 = ($7|0)<=($11|0);
   if (!($12)) {
    break;
   }
   $13 = $c;
   $14 = $i;
   $15 = (($14) - 2)|0;
   $16 = (589066 + ($15<<1)|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = (($13) - ($18))|0;
   $20 = (+($19|0));
   $21 = $i;
   $22 = (589066 + ($21<<1)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   $25 = $i;
   $26 = (($25) - 2)|0;
   $27 = (589066 + ($26<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = (($24) - ($29))|0;
   $31 = (+($30|0));
   $32 = $20 / $31;
   $33 = $i;
   $34 = (($33) + 1)|0;
   $35 = (589066 + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = $i;
   $39 = (($38) - 1)|0;
   $40 = (589066 + ($39<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = $41&65535;
   $43 = (($37) - ($42))|0;
   $44 = (+($43|0));
   $45 = $32 * $44;
   $46 = $i;
   $47 = (($46) - 1)|0;
   $48 = (589066 + ($47<<1)|0);
   $49 = HEAP16[$48>>1]|0;
   $50 = $49&65535;
   $51 = (+($50|0));
   $52 = $45 + $51;
   $53 = $52;
   $54 = $53 + 0.5;
   $55 = (~~(($54))&65535);
   $56 = $c;
   $57 = (448962 + ($56<<1)|0);
   HEAP16[$57>>1] = $55;
   $58 = $c;
   $59 = (($58) + 1)|0;
   $c = $59;
  }
  $60 = $i;
  $61 = (($60) + 2)|0;
  $i = $61;
 }
 $i = 0;
 $s = 0;
 while(1) {
  $62 = $i;
  $63 = ($62>>>0)<(260);
  if (!($63)) {
   break;
  }
  $c = 0;
  while(1) {
   $64 = $c;
   $65 = $i;
   $66 = (611087 + ($65)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67 << 24 >> 24;
   $69 = 256 >> $68;
   $70 = ($64|0)<($69|0);
   $71 = $i;
   if (!($70)) {
    break;
   }
   $72 = (611087 + ($71)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = $74 << 8;
   $76 = $i;
   $77 = (($76) + 1)|0;
   $78 = (611087 + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $75 | $80;
   $82 = $81&65535;
   $83 = $s;
   $84 = (($83) + 1)|0;
   $s = $84;
   $85 = (($huff) + ($83<<1)|0);
   HEAP16[$85>>1] = $82;
   $86 = $c;
   $87 = (($86) + 1)|0;
   $c = $87;
  }
  $88 = (($71) + 2)|0;
  $i = $88;
 }
 $89 = HEAP32[1796>>2]|0;
 $90 = ($89|0)==(243);
 $91 = $90 ? 2 : 3;
 $s = $91;
 $c = 0;
 while(1) {
  $92 = $c;
  $93 = ($92|0)<(256);
  if (!($93)) {
   break;
  }
  $94 = $s;
  $95 = (8 - ($94))|0;
  $96 = $95 << 8;
  $97 = $c;
  $98 = $s;
  $99 = $97 >> $98;
  $100 = $s;
  $101 = $99 << $100;
  $102 = $96 | $101;
  $103 = $s;
  $104 = (($103) - 1)|0;
  $105 = 1 << $104;
  $106 = $102 | $105;
  $107 = $106&65535;
  $108 = $c;
  $109 = ((($huff)) + 9216|0);
  $110 = (($109) + ($108<<1)|0);
  HEAP16[$110>>1] = $107;
  $111 = $c;
  $112 = (($111) + 1)|0;
  $c = $112;
 }
 (_getbithuff(-1,0)|0);
 $i = 0;
 while(1) {
  $113 = $i;
  $114 = ($113>>>0)<(3474);
  if (!($114)) {
   break;
  }
  $115 = $i;
  $116 = (($buf) + ($115<<1)|0);
  HEAP16[$116>>1] = 2048;
  $117 = $i;
  $118 = (($117) + 1)|0;
  $i = $118;
 }
 $row = 0;
 while(1) {
  $119 = $row;
  $120 = HEAP16[580074>>1]|0;
  $121 = $120&65535;
  $122 = ($119|0)<($121|0);
  if (!($122)) {
   break;
  }
  $c = 0;
  while(1) {
   $123 = $c;
   $124 = ($123|0)<(3);
   if (!($124)) {
    break;
   }
   $125 = (_getbithuff(6,0)|0);
   $126 = $125&65535;
   $127 = $c;
   $128 = (($mul) + ($127<<1)|0);
   HEAP16[$128>>1] = $126;
   $129 = $c;
   $130 = (($129) + 1)|0;
   $c = $130;
  }
  $c = 0;
  while(1) {
   $131 = $c;
   $132 = ($131|0)<(3);
   if (!($132)) {
    break;
   }
   $133 = $c;
   $134 = (($last) + ($133<<1)|0);
   $135 = HEAP16[$134>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = (16777216 / ($136|0))&-1;
   $138 = (($137) + 2047)|0;
   $139 = $138 >> 12;
   $140 = $c;
   $141 = (($mul) + ($140<<1)|0);
   $142 = HEAP16[$141>>1]|0;
   $143 = $142 << 16 >> 16;
   $144 = Math_imul($139, $143)|0;
   $val = $144;
   $145 = $val;
   $146 = ($145|0)>(65564);
   $147 = $146 ? 10 : 12;
   $s = $147;
   $148 = $s;
   $149 = (($148) - 1)|0;
   $150 = -1 << $149;
   $151 = $150 ^ -1;
   $x = $151;
   $152 = $s;
   $153 = (12 - ($152))|0;
   $154 = $val;
   $155 = $154 << $153;
   $val = $155;
   $i = 0;
   while(1) {
    $156 = $i;
    $157 = ($156>>>0)<(1158);
    if (!($157)) {
     break;
    }
    $158 = $i;
    $159 = $c;
    $160 = (($buf) + (($159*2316)|0)|0);
    $161 = (($160) + ($158<<1)|0);
    $162 = HEAP16[$161>>1]|0;
    $163 = $162 << 16 >> 16;
    $164 = $val;
    $165 = Math_imul($163, $164)|0;
    $166 = $x;
    $167 = (($165) + ($166))|0;
    $168 = $s;
    $169 = $167 >> $168;
    $170 = $169&65535;
    $171 = $i;
    $172 = $c;
    $173 = (($buf) + (($172*2316)|0)|0);
    $174 = (($173) + ($171<<1)|0);
    HEAP16[$174>>1] = $170;
    $175 = $i;
    $176 = (($175) + 1)|0;
    $i = $176;
   }
   $177 = $c;
   $178 = (($mul) + ($177<<1)|0);
   $179 = HEAP16[$178>>1]|0;
   $180 = $c;
   $181 = (($last) + ($180<<1)|0);
   HEAP16[$181>>1] = $179;
   $r = 0;
   while(1) {
    $182 = $r;
    $183 = $c;
    $184 = ($183|0)!=(0);
    $185 = $184 ^ 1;
    $186 = $185&1;
    $187 = ($182|0)<=($186|0);
    $188 = $c;
    if (!($187)) {
     break;
    }
    $189 = (($mul) + ($188<<1)|0);
    $190 = HEAP16[$189>>1]|0;
    $191 = $190 << 16 >> 16;
    $192 = $191 << 7;
    $193 = $192&65535;
    $194 = HEAP16[580076>>1]|0;
    $195 = $194&65535;
    $196 = (($195|0) / 2)&-1;
    $197 = $c;
    $198 = (($buf) + (($197*2316)|0)|0);
    $199 = ((($198)) + 1544|0);
    $200 = (($199) + ($196<<1)|0);
    HEAP16[$200>>1] = $193;
    $201 = HEAP16[580076>>1]|0;
    $202 = $201&65535;
    $203 = (($202|0) / 2)&-1;
    $204 = $c;
    $205 = (($buf) + (($204*2316)|0)|0);
    $206 = ((($205)) + 772|0);
    $207 = (($206) + ($203<<1)|0);
    HEAP16[$207>>1] = $193;
    $tree = 1;
    $208 = HEAP16[580076>>1]|0;
    $209 = $208&65535;
    $210 = (($209|0) / 2)&-1;
    $col = $210;
    L42: while(1) {
     $211 = $col;
     $212 = ($211|0)>(0);
     if (!($212)) {
      break;
     }
     $213 = $tree;
     $214 = (($huff) + ($213<<9)|0);
     $215 = (_getbithuff(8,$214)|0);
     $216 = $215&255;
     $217 = $216 << 24 >> 24;
     $tree = $217;
     $218 = ($217|0)!=(0);
     if ($218) {
      $219 = $col;
      $220 = (($219) - 2)|0;
      $col = $220;
      $221 = $tree;
      $222 = ($221|0)==(8);
      $y = 1;
      if ($222) {
       while(1) {
        $223 = $y;
        $224 = ($223|0)<(3);
        if (!($224)) {
         continue L42;
        }
        $225 = $col;
        $226 = (($225) + 1)|0;
        $x = $226;
        while(1) {
         $227 = $x;
         $228 = $col;
         $229 = ($227|0)>=($228|0);
         if (!($229)) {
          break;
         }
         $230 = ((($huff)) + 9216|0);
         $231 = (_getbithuff(8,$230)|0);
         $232 = $231&255;
         $233 = $232&255;
         $234 = $c;
         $235 = (($mul) + ($234<<1)|0);
         $236 = HEAP16[$235>>1]|0;
         $237 = $236 << 16 >> 16;
         $238 = Math_imul($233, $237)|0;
         $239 = $238&65535;
         $240 = $x;
         $241 = $y;
         $242 = $c;
         $243 = (($buf) + (($242*2316)|0)|0);
         $244 = (($243) + (($241*772)|0)|0);
         $245 = (($244) + ($240<<1)|0);
         HEAP16[$245>>1] = $239;
         $246 = $x;
         $247 = (($246) + -1)|0;
         $x = $247;
        }
        $248 = $y;
        $249 = (($248) + 1)|0;
        $y = $249;
       }
      }
      while(1) {
       $250 = $y;
       $251 = ($250|0)<(3);
       if (!($251)) {
        continue L42;
       }
       $252 = $col;
       $253 = (($252) + 1)|0;
       $x = $253;
       while(1) {
        $254 = $x;
        $255 = $col;
        $256 = ($254|0)>=($255|0);
        if (!($256)) {
         break;
        }
        $257 = $tree;
        $258 = (($257) + 10)|0;
        $259 = (($huff) + ($258<<9)|0);
        $260 = (_getbithuff(8,$259)|0);
        $261 = $260&255;
        $262 = $261 << 24 >> 24;
        $263 = $262<<4;
        $264 = $c;
        $265 = ($264|0)!=(0);
        $266 = $x;
        if ($265) {
         $267 = $y;
         $268 = (($267) - 1)|0;
         $269 = $c;
         $270 = (($buf) + (($269*2316)|0)|0);
         $271 = (($270) + (($268*772)|0)|0);
         $272 = (($271) + ($266<<1)|0);
         $273 = HEAP16[$272>>1]|0;
         $274 = $273 << 16 >> 16;
         $275 = $x;
         $276 = (($275) + 1)|0;
         $277 = $y;
         $278 = $c;
         $279 = (($buf) + (($278*2316)|0)|0);
         $280 = (($279) + (($277*772)|0)|0);
         $281 = (($280) + ($276<<1)|0);
         $282 = HEAP16[$281>>1]|0;
         $283 = $282 << 16 >> 16;
         $284 = (($274) + ($283))|0;
         $285 = (($284|0) / 2)&-1;
         $318 = $285;
        } else {
         $286 = (($266) + 1)|0;
         $287 = $y;
         $288 = (($287) - 1)|0;
         $289 = $c;
         $290 = (($buf) + (($289*2316)|0)|0);
         $291 = (($290) + (($288*772)|0)|0);
         $292 = (($291) + ($286<<1)|0);
         $293 = HEAP16[$292>>1]|0;
         $294 = $293 << 16 >> 16;
         $295 = $x;
         $296 = $y;
         $297 = (($296) - 1)|0;
         $298 = $c;
         $299 = (($buf) + (($298*2316)|0)|0);
         $300 = (($299) + (($297*772)|0)|0);
         $301 = (($300) + ($295<<1)|0);
         $302 = HEAP16[$301>>1]|0;
         $303 = $302 << 16 >> 16;
         $304 = $303<<1;
         $305 = (($294) + ($304))|0;
         $306 = $x;
         $307 = (($306) + 1)|0;
         $308 = $y;
         $309 = $c;
         $310 = (($buf) + (($309*2316)|0)|0);
         $311 = (($310) + (($308*772)|0)|0);
         $312 = (($311) + ($307<<1)|0);
         $313 = HEAP16[$312>>1]|0;
         $314 = $313 << 16 >> 16;
         $315 = (($305) + ($314))|0;
         $316 = (($315|0) / 4)&-1;
         $318 = $316;
        }
        $317 = (($263) + ($318))|0;
        $319 = $317&65535;
        $320 = $x;
        $321 = $y;
        $322 = $c;
        $323 = (($buf) + (($322*2316)|0)|0);
        $324 = (($323) + (($321*772)|0)|0);
        $325 = (($324) + ($320<<1)|0);
        HEAP16[$325>>1] = $319;
        $326 = $x;
        $327 = (($326) + -1)|0;
        $x = $327;
       }
       $328 = $y;
       $329 = (($328) + 1)|0;
       $y = $329;
      }
     }
     while(1) {
      $330 = $col;
      $331 = ($330|0)>(2);
      if ($331) {
       $332 = ((($huff)) + 4608|0);
       $333 = (_getbithuff(8,$332)|0);
       $334 = $333&255;
       $335 = $334 << 24 >> 24;
       $336 = (($335) + 1)|0;
       $337 = $336;
      } else {
       $337 = 1;
      }
      $nreps = $337;
      $rep = 0;
      while(1) {
       $338 = $rep;
       $339 = ($338|0)<(8);
       if (!($339)) {
        break;
       }
       $340 = $rep;
       $341 = $nreps;
       $342 = ($340|0)<($341|0);
       $343 = $col;
       $344 = ($343|0)>(0);
       $or$cond = $342 & $344;
       if (!($or$cond)) {
        break;
       }
       $345 = $col;
       $346 = (($345) - 2)|0;
       $col = $346;
       $y = 1;
       while(1) {
        $347 = $y;
        $348 = ($347|0)<(3);
        if (!($348)) {
         break;
        }
        $349 = $col;
        $350 = (($349) + 1)|0;
        $x = $350;
        while(1) {
         $351 = $x;
         $352 = $col;
         $353 = ($351|0)>=($352|0);
         if (!($353)) {
          break;
         }
         $354 = $c;
         $355 = ($354|0)!=(0);
         $356 = $x;
         if ($355) {
          $357 = $y;
          $358 = (($357) - 1)|0;
          $359 = $c;
          $360 = (($buf) + (($359*2316)|0)|0);
          $361 = (($360) + (($358*772)|0)|0);
          $362 = (($361) + ($356<<1)|0);
          $363 = HEAP16[$362>>1]|0;
          $364 = $363 << 16 >> 16;
          $365 = $x;
          $366 = (($365) + 1)|0;
          $367 = $y;
          $368 = $c;
          $369 = (($buf) + (($368*2316)|0)|0);
          $370 = (($369) + (($367*772)|0)|0);
          $371 = (($370) + ($366<<1)|0);
          $372 = HEAP16[$371>>1]|0;
          $373 = $372 << 16 >> 16;
          $374 = (($364) + ($373))|0;
          $375 = (($374|0) / 2)&-1;
          $408 = $375;
         } else {
          $376 = (($356) + 1)|0;
          $377 = $y;
          $378 = (($377) - 1)|0;
          $379 = $c;
          $380 = (($buf) + (($379*2316)|0)|0);
          $381 = (($380) + (($378*772)|0)|0);
          $382 = (($381) + ($376<<1)|0);
          $383 = HEAP16[$382>>1]|0;
          $384 = $383 << 16 >> 16;
          $385 = $x;
          $386 = $y;
          $387 = (($386) - 1)|0;
          $388 = $c;
          $389 = (($buf) + (($388*2316)|0)|0);
          $390 = (($389) + (($387*772)|0)|0);
          $391 = (($390) + ($385<<1)|0);
          $392 = HEAP16[$391>>1]|0;
          $393 = $392 << 16 >> 16;
          $394 = $393<<1;
          $395 = (($384) + ($394))|0;
          $396 = $x;
          $397 = (($396) + 1)|0;
          $398 = $y;
          $399 = $c;
          $400 = (($buf) + (($399*2316)|0)|0);
          $401 = (($400) + (($398*772)|0)|0);
          $402 = (($401) + ($397<<1)|0);
          $403 = HEAP16[$402>>1]|0;
          $404 = $403 << 16 >> 16;
          $405 = (($395) + ($404))|0;
          $406 = (($405|0) / 4)&-1;
          $408 = $406;
         }
         $407 = $408&65535;
         $409 = $x;
         $410 = $y;
         $411 = $c;
         $412 = (($buf) + (($411*2316)|0)|0);
         $413 = (($412) + (($410*772)|0)|0);
         $414 = (($413) + ($409<<1)|0);
         HEAP16[$414>>1] = $407;
         $415 = $x;
         $416 = (($415) + -1)|0;
         $x = $416;
        }
        $417 = $y;
        $418 = (($417) + 1)|0;
        $y = $418;
       }
       $419 = $rep;
       $420 = $419 & 1;
       $421 = ($420|0)!=(0);
       L87: do {
        if ($421) {
         $422 = ((($huff)) + 5120|0);
         $423 = (_getbithuff(8,$422)|0);
         $424 = $423&255;
         $425 = $424 << 24 >> 24;
         $426 = $425 << 4;
         $step = $426;
         $y = 1;
         while(1) {
          $427 = $y;
          $428 = ($427|0)<(3);
          if (!($428)) {
           break L87;
          }
          $429 = $col;
          $430 = (($429) + 1)|0;
          $x = $430;
          while(1) {
           $431 = $x;
           $432 = $col;
           $433 = ($431|0)>=($432|0);
           if (!($433)) {
            break;
           }
           $434 = $step;
           $435 = $x;
           $436 = $y;
           $437 = $c;
           $438 = (($buf) + (($437*2316)|0)|0);
           $439 = (($438) + (($436*772)|0)|0);
           $440 = (($439) + ($435<<1)|0);
           $441 = HEAP16[$440>>1]|0;
           $442 = $441 << 16 >> 16;
           $443 = (($442) + ($434))|0;
           $444 = $443&65535;
           HEAP16[$440>>1] = $444;
           $445 = $x;
           $446 = (($445) + -1)|0;
           $x = $446;
          }
          $447 = $y;
          $448 = (($447) + 1)|0;
          $y = $448;
         }
        }
       } while(0);
       $449 = $rep;
       $450 = (($449) + 1)|0;
       $rep = $450;
      }
      $451 = $nreps;
      $452 = ($451|0)==(9);
      if (!($452)) {
       continue L42;
      }
     }
    }
    $y = 0;
    while(1) {
     $453 = $y;
     $454 = ($453|0)<(2);
     if (!($454)) {
      break;
     }
     $x = 0;
     while(1) {
      $455 = $x;
      $456 = HEAP16[580076>>1]|0;
      $457 = $456&65535;
      $458 = (($457|0) / 2)&-1;
      $459 = ($455|0)<($458|0);
      if (!($459)) {
       break;
      }
      $460 = $x;
      $461 = $y;
      $462 = (($461) + 1)|0;
      $463 = $c;
      $464 = (($buf) + (($463*2316)|0)|0);
      $465 = (($464) + (($462*772)|0)|0);
      $466 = (($465) + ($460<<1)|0);
      $467 = HEAP16[$466>>1]|0;
      $468 = $467 << 16 >> 16;
      $469 = $468 << 4;
      $470 = $c;
      $471 = (($mul) + ($470<<1)|0);
      $472 = HEAP16[$471>>1]|0;
      $473 = $472 << 16 >> 16;
      $474 = (($469|0) / ($473|0))&-1;
      $val = $474;
      $475 = $val;
      $476 = ($475|0)<(0);
      $$ = $476 ? 0 : $474;
      $val = $$;
      $477 = $c;
      $478 = ($477|0)!=(0);
      $479 = $val;
      $480 = $479&65535;
      $481 = $row;
      if ($478) {
       $482 = $y;
       $483 = $482<<1;
       $484 = (($481) + ($483))|0;
       $485 = $c;
       $486 = (($484) + ($485))|0;
       $487 = (($486) - 1)|0;
       $488 = HEAP16[580226>>1]|0;
       $489 = $488&65535;
       $490 = Math_imul($487, $489)|0;
       $491 = $x;
       $492 = $491<<1;
       $493 = (($492) + 2)|0;
       $494 = $c;
       $495 = (($493) - ($494))|0;
       $496 = (($490) + ($495))|0;
       $497 = HEAP32[1032>>2]|0;
       $498 = (($497) + ($496<<1)|0);
       HEAP16[$498>>1] = $480;
      } else {
       $499 = $r;
       $500 = $499<<1;
       $501 = (($481) + ($500))|0;
       $502 = $y;
       $503 = (($501) + ($502))|0;
       $504 = HEAP16[580226>>1]|0;
       $505 = $504&65535;
       $506 = Math_imul($503, $505)|0;
       $507 = $x;
       $508 = $507<<1;
       $509 = $y;
       $510 = (($508) + ($509))|0;
       $511 = (($506) + ($510))|0;
       $512 = HEAP32[1032>>2]|0;
       $513 = (($512) + ($511<<1)|0);
       HEAP16[$513>>1] = $480;
      }
      $514 = $x;
      $515 = (($514) + 1)|0;
      $x = $515;
     }
     $516 = $y;
     $517 = (($516) + 1)|0;
     $y = $517;
    }
    $518 = $c;
    $519 = (($buf) + (($518*2316)|0)|0);
    $520 = $c;
    $521 = ($520|0)!=(0);
    $522 = $521 ^ 1;
    $523 = $522&1;
    $524 = (($519) + ($523<<1)|0);
    $525 = $c;
    $526 = (($buf) + (($525*2316)|0)|0);
    $527 = ((($526)) + 1544|0);
    $528 = $c;
    $529 = ($528|0)!=(0);
    $530 = $529 ^ 1;
    $531 = $530&1;
    $532 = $531<<1;
    $533 = (772 - ($532))|0;
    _memcpy(($524|0),($527|0),($533|0))|0;
    $534 = $r;
    $535 = (($534) + 1)|0;
    $r = $535;
   }
   $536 = (($188) + 1)|0;
   $c = $536;
  }
  $537 = $row;
  $y = $537;
  while(1) {
   $538 = $y;
   $539 = $row;
   $540 = (($539) + 4)|0;
   $541 = ($538|0)<($540|0);
   if (!($541)) {
    break;
   }
   $x = 0;
   while(1) {
    $542 = $x;
    $543 = HEAP16[580076>>1]|0;
    $544 = $543&65535;
    $545 = ($542|0)<($544|0);
    if (!($545)) {
     break;
    }
    $546 = $x;
    $547 = $y;
    $548 = (($546) + ($547))|0;
    $549 = $548 & 1;
    $550 = ($549|0)!=(0);
    if ($550) {
     $551 = $x;
     $552 = ($551|0)!=(0);
     $553 = $x;
     $554 = (($553) - 1)|0;
     $555 = (($553) + 1)|0;
     $556 = $552 ? $554 : $555;
     $r = $556;
     $557 = $x;
     $558 = (($557) + 1)|0;
     $559 = HEAP16[580076>>1]|0;
     $560 = $559&65535;
     $561 = ($558|0)<($560|0);
     $562 = $x;
     $563 = (($562) + 1)|0;
     $564 = (($562) - 1)|0;
     $565 = $561 ? $563 : $564;
     $s = $565;
     $566 = $y;
     $567 = HEAP16[580226>>1]|0;
     $568 = $567&65535;
     $569 = Math_imul($566, $568)|0;
     $570 = $x;
     $571 = (($569) + ($570))|0;
     $572 = HEAP32[1032>>2]|0;
     $573 = (($572) + ($571<<1)|0);
     $574 = HEAP16[$573>>1]|0;
     $575 = $574&65535;
     $576 = (($575) - 2048)|0;
     $577 = $576<<1;
     $578 = $y;
     $579 = HEAP16[580226>>1]|0;
     $580 = $579&65535;
     $581 = Math_imul($578, $580)|0;
     $582 = $r;
     $583 = (($581) + ($582))|0;
     $584 = HEAP32[1032>>2]|0;
     $585 = (($584) + ($583<<1)|0);
     $586 = HEAP16[$585>>1]|0;
     $587 = $586&65535;
     $588 = $y;
     $589 = HEAP16[580226>>1]|0;
     $590 = $589&65535;
     $591 = Math_imul($588, $590)|0;
     $592 = $s;
     $593 = (($591) + ($592))|0;
     $594 = HEAP32[1032>>2]|0;
     $595 = (($594) + ($593<<1)|0);
     $596 = HEAP16[$595>>1]|0;
     $597 = $596&65535;
     $598 = (($587) + ($597))|0;
     $599 = (($598|0) / 2)&-1;
     $600 = (($577) + ($599))|0;
     $val = $600;
     $601 = $val;
     $602 = ($601|0)<(0);
     $$2 = $602 ? 0 : $600;
     $val = $$2;
     $603 = $val;
     $604 = $603&65535;
     $605 = $y;
     $606 = HEAP16[580226>>1]|0;
     $607 = $606&65535;
     $608 = Math_imul($605, $607)|0;
     $609 = $x;
     $610 = (($608) + ($609))|0;
     $611 = HEAP32[1032>>2]|0;
     $612 = (($611) + ($610<<1)|0);
     HEAP16[$612>>1] = $604;
    }
    $613 = $x;
    $614 = (($613) + 1)|0;
    $x = $614;
   }
   $615 = $y;
   $616 = (($615) + 1)|0;
   $y = $616;
  }
  $617 = $row;
  $618 = (($617) + 4)|0;
  $row = $618;
 }
 $i = 0;
 while(1) {
  $619 = $i;
  $620 = HEAP16[580074>>1]|0;
  $621 = $620&65535;
  $622 = HEAP16[580076>>1]|0;
  $623 = $622&65535;
  $624 = Math_imul($621, $623)|0;
  $625 = ($619|0)<($624|0);
  if (!($625)) {
   break;
  }
  $626 = $i;
  $627 = HEAP32[1032>>2]|0;
  $628 = (($627) + ($626<<1)|0);
  $629 = HEAP16[$628>>1]|0;
  $630 = $629&65535;
  $631 = (448962 + ($630<<1)|0);
  $632 = HEAP16[$631>>1]|0;
  $633 = $i;
  $634 = HEAP32[1032>>2]|0;
  $635 = (($634) + ($633<<1)|0);
  HEAP16[$635>>1] = $632;
  $636 = $i;
  $637 = (($636) + 1)|0;
  $i = $637;
 }
 HEAP32[1040>>2] = 16383;
 STACKTOP = sp;return;
}
function _kodak_jpeg_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _lossy_dng_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _kodak_dc120_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col = 0, $pixel = 0, $row = 0, $shift = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pixel = sp + 16|0;
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[944>>2]|0;
  $5 = (_fread($pixel,1,848,$4)|0);
  $6 = ($5>>>0)<(848);
  if ($6) {
   _derror();
  }
  $7 = $row;
  $8 = $row;
  $9 = $8 & 3;
  $10 = (1800 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = Math_imul($7, $11)|0;
  $13 = $row;
  $14 = $13 & 3;
  $15 = (1816 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) + ($16))|0;
  $shift = $17;
  $col = 0;
  while(1) {
   $18 = $col;
   $19 = HEAP16[580076>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $col;
   $23 = $shift;
   $24 = (($22) + ($23))|0;
   $25 = (($24|0) % 848)&-1;
   $26 = (($pixel) + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $row;
   $30 = HEAP16[580226>>1]|0;
   $31 = $30&65535;
   $32 = Math_imul($29, $31)|0;
   $33 = $col;
   $34 = (($32) + ($33))|0;
   $35 = HEAP32[1032>>2]|0;
   $36 = (($35) + ($34<<1)|0);
   HEAP16[$36>>1] = $28;
   $37 = $col;
   $38 = (($37) + 1)|0;
   $col = $38;
  }
  $39 = $row;
  $40 = (($39) + 1)|0;
  $row = $40;
 }
 HEAP32[1040>>2] = 255;
 STACKTOP = sp;return;
}
function _eight_bit_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col = 0, $pixel = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,1)|0);
 $pixel = $2;
 $3 = $pixel;
 _merror($3,611347);
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[580244>>1]|0;
  $6 = $5&65535;
  $7 = ($4>>>0)<($6>>>0);
  $8 = $pixel;
  if (!($7)) {
   break;
  }
  $9 = HEAP16[580226>>1]|0;
  $10 = $9&65535;
  $11 = HEAP32[944>>2]|0;
  $12 = (_fread($8,1,$10,$11)|0);
  $13 = HEAP16[580226>>1]|0;
  $14 = $13&65535;
  $15 = ($12>>>0)<($14>>>0);
  if ($15) {
   _derror();
  }
  $col = 0;
  while(1) {
   $16 = $col;
   $17 = HEAP16[580226>>1]|0;
   $18 = $17&65535;
   $19 = ($16>>>0)<($18>>>0);
   if (!($19)) {
    break;
   }
   $20 = $col;
   $21 = $pixel;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (448962 + ($24<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $row;
   $28 = HEAP16[580226>>1]|0;
   $29 = $28&65535;
   $30 = Math_imul($27, $29)|0;
   $31 = $col;
   $32 = (($30) + ($31))|0;
   $33 = HEAP32[1032>>2]|0;
   $34 = (($33) + ($32<<1)|0);
   HEAP16[$34>>1] = $26;
   $35 = $col;
   $36 = (($35) + 1)|0;
   $col = $36;
  }
  $37 = $row;
  $38 = (($37) + 1)|0;
  $row = $38;
 }
 _free($8);
 $39 = HEAP16[(449472)>>1]|0;
 $40 = $39&65535;
 HEAP32[1040>>2] = $40;
 STACKTOP = sp;return;
}
function _kodak_c330_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cb = 0, $col = 0, $cr = 0, $pixel = 0, $rgb = 0, $row = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rgb = sp + 4|0;
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,2)|0);
 $pixel = $2;
 $3 = $pixel;
 _merror($3,611368);
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[580074>>1]|0;
  $6 = $5&65535;
  $7 = ($4|0)<($6|0);
  $8 = $pixel;
  if (!($7)) {
   break;
  }
  $9 = HEAP16[580226>>1]|0;
  $10 = $9&65535;
  $11 = HEAP32[944>>2]|0;
  $12 = (_fread($8,$10,2,$11)|0);
  $13 = ($12>>>0)<(2);
  if ($13) {
   _derror();
  }
  $14 = HEAP32[1068>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $row;
   $17 = $16 & 31;
   $18 = ($17|0)==(31);
   if ($18) {
    $19 = HEAP32[944>>2]|0;
    $20 = HEAP16[580226>>1]|0;
    $21 = $20&65535;
    $22 = $21<<5;
    (_fseek($19,$22,1)|0);
   }
  }
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[580076>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $col;
   $28 = $27<<1;
   $29 = $pixel;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $y = $32;
   $33 = $col;
   $34 = $33<<1;
   $35 = $34 & -4;
   $36 = $35 | 1;
   $37 = $pixel;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = (($40) - 128)|0;
   $cb = $41;
   $42 = $col;
   $43 = $42<<1;
   $44 = $43 & -4;
   $45 = $44 | 3;
   $46 = $pixel;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($49) - 128)|0;
   $cr = $50;
   $51 = $y;
   $52 = $cb;
   $53 = $cr;
   $54 = (($52) + ($53))|0;
   $55 = (($54) + 2)|0;
   $56 = $55 >> 2;
   $57 = (($51) - ($56))|0;
   $58 = ((($rgb)) + 4|0);
   HEAP32[$58>>2] = $57;
   $59 = ((($rgb)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $cb;
   $62 = (($60) + ($61))|0;
   $63 = ((($rgb)) + 8|0);
   HEAP32[$63>>2] = $62;
   $64 = ((($rgb)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $cr;
   $67 = (($65) + ($66))|0;
   HEAP32[$rgb>>2] = $67;
   $c = 0;
   while(1) {
    $68 = $c;
    $69 = ($68|0)<(3);
    if (!($69)) {
     break;
    }
    $70 = $c;
    $71 = (($rgb) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)<(255);
    if ($73) {
     $74 = $c;
     $75 = (($rgb) + ($74<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $78 = $76;
    } else {
     $78 = 255;
    }
    $77 = (0)>($78|0);
    if ($77) {
     $87 = 0;
    } else {
     $79 = $c;
     $80 = (($rgb) + ($79<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)<(255);
     if ($82) {
      $83 = $c;
      $84 = (($rgb) + ($83<<2)|0);
      $85 = HEAP32[$84>>2]|0;
      $87 = $85;
     } else {
      $87 = 255;
     }
    }
    $86 = (448962 + ($87<<1)|0);
    $88 = HEAP16[$86>>1]|0;
    $89 = $c;
    $90 = $row;
    $91 = HEAP16[580076>>1]|0;
    $92 = $91&65535;
    $93 = Math_imul($90, $92)|0;
    $94 = $col;
    $95 = (($93) + ($94))|0;
    $96 = HEAP32[972>>2]|0;
    $97 = (($96) + ($95<<3)|0);
    $98 = (($97) + ($89<<1)|0);
    HEAP16[$98>>1] = $88;
    $99 = $c;
    $100 = (($99) + 1)|0;
    $c = $100;
   }
   $101 = $col;
   $102 = (($101) + 1)|0;
   $col = $102;
  }
  $103 = $row;
  $104 = (($103) + 1)|0;
  $row = $104;
 }
 _free($8);
 $105 = HEAP16[(449472)>>1]|0;
 $106 = $105&65535;
 HEAP32[1040>>2] = $106;
 STACKTOP = sp;return;
}
function _kodak_c603_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cb = 0, $col = 0, $cr = 0, $pixel = 0, $rgb = 0, $row = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rgb = sp + 4|0;
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,3)|0);
 $pixel = $2;
 $3 = $pixel;
 _merror($3,611390);
 $row = 0;
 while(1) {
  $4 = $row;
  $5 = HEAP16[580074>>1]|0;
  $6 = $5&65535;
  $7 = ($4|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $row;
  $9 = $8 ^ -1;
  $10 = $9 & 1;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $pixel;
   $13 = HEAP16[580226>>1]|0;
   $14 = $13&65535;
   $15 = HEAP32[944>>2]|0;
   $16 = (_fread($12,$14,3,$15)|0);
   $17 = ($16>>>0)<(3);
   if ($17) {
    _derror();
   }
  }
  $col = 0;
  while(1) {
   $18 = $col;
   $19 = HEAP16[580076>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = HEAP16[580076>>1]|0;
   $23 = $22&65535;
   $24 = $23<<1;
   $25 = $row;
   $26 = $25 & 1;
   $27 = Math_imul($24, $26)|0;
   $28 = $col;
   $29 = (($27) + ($28))|0;
   $30 = $pixel;
   $31 = (($30) + ($29)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $y = $33;
   $34 = HEAP16[580076>>1]|0;
   $35 = $34&65535;
   $36 = $col;
   $37 = $36 & -2;
   $38 = (($35) + ($37))|0;
   $39 = $pixel;
   $40 = (($39) + ($38)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (($42) - 128)|0;
   $cb = $43;
   $44 = HEAP16[580076>>1]|0;
   $45 = $44&65535;
   $46 = $col;
   $47 = $46 & -2;
   $48 = (($45) + ($47))|0;
   $49 = (($48) + 1)|0;
   $50 = $pixel;
   $51 = (($50) + ($49)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($53) - 128)|0;
   $cr = $54;
   $55 = $y;
   $56 = $cb;
   $57 = $cr;
   $58 = (($56) + ($57))|0;
   $59 = (($58) + 2)|0;
   $60 = $59 >> 2;
   $61 = (($55) - ($60))|0;
   $62 = ((($rgb)) + 4|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($rgb)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $cb;
   $66 = (($64) + ($65))|0;
   $67 = ((($rgb)) + 8|0);
   HEAP32[$67>>2] = $66;
   $68 = ((($rgb)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $cr;
   $71 = (($69) + ($70))|0;
   HEAP32[$rgb>>2] = $71;
   $c = 0;
   while(1) {
    $72 = $c;
    $73 = ($72|0)<(3);
    if (!($73)) {
     break;
    }
    $74 = $c;
    $75 = (($rgb) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)<(255);
    if ($77) {
     $78 = $c;
     $79 = (($rgb) + ($78<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $82 = $80;
    } else {
     $82 = 255;
    }
    $81 = (0)>($82|0);
    if ($81) {
     $91 = 0;
    } else {
     $83 = $c;
     $84 = (($rgb) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)<(255);
     if ($86) {
      $87 = $c;
      $88 = (($rgb) + ($87<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      $91 = $89;
     } else {
      $91 = 255;
     }
    }
    $90 = (448962 + ($91<<1)|0);
    $92 = HEAP16[$90>>1]|0;
    $93 = $c;
    $94 = $row;
    $95 = HEAP16[580076>>1]|0;
    $96 = $95&65535;
    $97 = Math_imul($94, $96)|0;
    $98 = $col;
    $99 = (($97) + ($98))|0;
    $100 = HEAP32[972>>2]|0;
    $101 = (($100) + ($99<<3)|0);
    $102 = (($101) + ($93<<1)|0);
    HEAP16[$102>>1] = $92;
    $103 = $c;
    $104 = (($103) + 1)|0;
    $c = $104;
   }
   $105 = $col;
   $106 = (($105) + 1)|0;
   $col = $106;
  }
  $107 = $row;
  $108 = (($107) + 1)|0;
  $row = $108;
 }
 $109 = $pixel;
 _free($109);
 $110 = HEAP16[(449472)>>1]|0;
 $111 = $110&65535;
 HEAP32[1040>>2] = $111;
 STACKTOP = sp;return;
}
function _kodak_262_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $chess = 0, $col = 0, $huff = 0, $ns = 0, $or$cond = 0, $pi = 0, $pi1 = 0, $pi2 = 0, $pixel = 0, $pred = 0, $row = 0;
 var $strip = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 48|0;
 $pi = 0;
 $c = 0;
 while(1) {
  $0 = $c;
  $1 = ($0|0)<(2);
  if (!($1)) {
   break;
  }
  $2 = $c;
  $3 = (611412 + (($2*26)|0)|0);
  $4 = (_make_decoder($3)|0);
  $5 = $c;
  $6 = (($huff) + ($5<<2)|0);
  HEAP32[$6>>2] = $4;
  $7 = $c;
  $8 = (($7) + 1)|0;
  $c = $8;
 }
 $9 = HEAP16[580244>>1]|0;
 $10 = $9&65535;
 $11 = (($10) + 63)|0;
 $12 = $11 >> 5;
 $ns = $12;
 $13 = HEAP16[580226>>1]|0;
 $14 = $13&65535;
 $15 = $14<<5;
 $16 = $ns;
 $17 = $16<<2;
 $18 = (($15) + ($17))|0;
 $19 = (_malloc($18)|0);
 $pixel = $19;
 $20 = $pixel;
 _merror($20,611464);
 $21 = $pixel;
 $22 = HEAP16[580226>>1]|0;
 $23 = $22&65535;
 $24 = $23<<5;
 $25 = (($21) + ($24)|0);
 $strip = $25;
 HEAP16[448960>>1] = 19789;
 $c = 0;
 while(1) {
  $26 = $c;
  $27 = $ns;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = (_get4()|0);
  $30 = $c;
  $31 = $strip;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $c;
  $34 = (($33) + 1)|0;
  $c = $34;
 }
 $row = 0;
 while(1) {
  $35 = $row;
  $36 = HEAP16[580244>>1]|0;
  $37 = $36&65535;
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $row;
  $40 = $39 & 31;
  $41 = ($40|0)==(0);
  if ($41) {
   $42 = HEAP32[944>>2]|0;
   $43 = $row;
   $44 = $43 >> 5;
   $45 = $strip;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   (_fseek($42,$47,0)|0);
   (_getbithuff(-1,0)|0);
   $pi = 0;
  }
  $col = 0;
  while(1) {
   $48 = $col;
   $49 = HEAP16[580226>>1]|0;
   $50 = $49&65535;
   $51 = ($48|0)<($50|0);
   $52 = $row;
   if (!($51)) {
    break;
   }
   $53 = $col;
   $54 = (($52) + ($53))|0;
   $55 = $54 & 1;
   $chess = $55;
   $56 = $chess;
   $57 = ($56|0)!=(0);
   $58 = $pi;
   if ($57) {
    $59 = (($58) - 2)|0;
    $64 = $59;
   } else {
    $60 = HEAP16[580226>>1]|0;
    $61 = $60&65535;
    $62 = (($58) - ($61))|0;
    $63 = (($62) - 1)|0;
    $64 = $63;
   }
   $pi1 = $64;
   $65 = $chess;
   $66 = ($65|0)!=(0);
   $67 = $pi;
   $68 = HEAP16[580226>>1]|0;
   $69 = $68&65535;
   $70 = $69<<1;
   $71 = (($67) - ($70))|0;
   $72 = (($67) - ($69))|0;
   $73 = (($72) + 1)|0;
   $74 = $66 ? $71 : $73;
   $pi2 = $74;
   $75 = $col;
   $76 = $chess;
   $77 = ($75|0)<=($76|0);
   if ($77) {
    $pi1 = -1;
   }
   $78 = $pi1;
   $79 = ($78|0)<(0);
   if ($79) {
    $80 = $pi2;
    $pi1 = $80;
   }
   $81 = $pi2;
   $82 = ($81|0)<(0);
   if ($82) {
    $83 = $pi1;
    $pi2 = $83;
   }
   $84 = $pi1;
   $85 = ($84|0)<(0);
   $86 = $col;
   $87 = ($86|0)>(1);
   $or$cond = $85 & $87;
   if ($or$cond) {
    $88 = $pi;
    $89 = (($88) - 2)|0;
    $pi2 = $89;
    $pi1 = $89;
   }
   $90 = $pi1;
   $91 = ($90|0)<(0);
   if ($91) {
    $104 = 0;
   } else {
    $92 = $pi1;
    $93 = $pixel;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $pi2;
    $98 = $pixel;
    $99 = (($98) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = (($96) + ($101))|0;
    $103 = $102 >> 1;
    $104 = $103;
   }
   $pred = $104;
   $105 = $pred;
   $106 = $chess;
   $107 = (($huff) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (_ljpeg_diff($108)|0);
   $110 = (($105) + ($109))|0;
   $val = $110;
   $111 = $110&255;
   $112 = $pi;
   $113 = $pixel;
   $114 = (($113) + ($112)|0);
   HEAP8[$114>>0] = $111;
   $115 = $val;
   $116 = $115 >> 8;
   $117 = ($116|0)!=(0);
   if ($117) {
    _derror();
   }
   $118 = $pi;
   $119 = (($118) + 1)|0;
   $pi = $119;
   $120 = $pixel;
   $121 = (($120) + ($118)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = (448962 + ($123<<1)|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = $125&65535;
   $val = $126;
   $127 = $val;
   $128 = $127&65535;
   $129 = $row;
   $130 = HEAP16[580226>>1]|0;
   $131 = $130&65535;
   $132 = Math_imul($129, $131)|0;
   $133 = $col;
   $134 = (($132) + ($133))|0;
   $135 = HEAP32[1032>>2]|0;
   $136 = (($135) + ($134<<1)|0);
   HEAP16[$136>>1] = $128;
   $137 = $col;
   $138 = (($137) + 1)|0;
   $col = $138;
  }
  $139 = (($52) + 1)|0;
  $row = $139;
 }
 $140 = $pixel;
 _free($140);
 $c = 0;
 while(1) {
  $141 = $c;
  $142 = ($141|0)<(2);
  if (!($142)) {
   break;
  }
  $143 = $c;
  $144 = (($huff) + ($143<<2)|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
  $146 = $c;
  $147 = (($146) + 1)|0;
  $c = $147;
 }
 STACKTOP = sp;return;
}
function _kodak_65000_decode($out,$bsize) {
 $out = $out|0;
 $bsize = $bsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $bits = 0, $blen = 0, $c = 0, $diff = 0, $i = 0, $j = 0;
 var $len = 0, $raw = 0, $save = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $blen = sp + 56|0;
 $raw = sp + 44|0;
 $bitbuf = sp;
 $1 = $out;
 $2 = $bsize;
 $3 = $bitbuf;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $bits = 0;
 $7 = HEAP32[944>>2]|0;
 $8 = (_ftell($7)|0);
 $save = $8;
 $9 = $2;
 $10 = (($9) + 3)|0;
 $11 = $10 & -4;
 $2 = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $2;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[944>>2]|0;
  $16 = (_getc_unlocked($15)|0);
  $17 = $16&255;
  $c = $17;
  $18 = $c;
  $19 = $18&255;
  $20 = $19 & 15;
  $21 = $20&255;
  $22 = $i;
  $23 = (($blen) + ($22)|0);
  HEAP8[$23>>0] = $21;
  $24 = $21&255;
  $25 = ($24|0)>(12);
  if ($25) {
   label = 5;
   break;
  }
  $26 = $c;
  $27 = $26&255;
  $28 = $27 >> 4;
  $29 = $28&255;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $32 = (($blen) + ($31)|0);
  HEAP8[$32>>0] = $29;
  $33 = $29&255;
  $34 = ($33|0)>(12);
  if ($34) {
   label = 5;
   break;
  }
  $98 = $i;
  $99 = (($98) + 2)|0;
  $i = $99;
 }
 if ((label|0) == 5) {
  $35 = HEAP32[944>>2]|0;
  $36 = $save;
  (_fseek($35,$36,0)|0);
  $i = 0;
  while(1) {
   $37 = $i;
   $38 = $2;
   $39 = ($37|0)<($38|0);
   if (!($39)) {
    break;
   }
   _read_shorts($raw,6);
   $40 = HEAP16[$raw>>1]|0;
   $41 = $40&65535;
   $42 = $41 >> 12;
   $43 = $42 << 8;
   $44 = ((($raw)) + 4|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45&65535;
   $47 = $46 >> 12;
   $48 = $47 << 4;
   $49 = $43 | $48;
   $50 = ((($raw)) + 8|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = $52 >> 12;
   $54 = $49 | $53;
   $55 = $54&65535;
   $56 = $i;
   $57 = $1;
   $58 = (($57) + ($56<<1)|0);
   HEAP16[$58>>1] = $55;
   $59 = ((($raw)) + 2|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $60&65535;
   $62 = $61 >> 12;
   $63 = $62 << 8;
   $64 = ((($raw)) + 6|0);
   $65 = HEAP16[$64>>1]|0;
   $66 = $65&65535;
   $67 = $66 >> 12;
   $68 = $67 << 4;
   $69 = $63 | $68;
   $70 = ((($raw)) + 10|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = $72 >> 12;
   $74 = $69 | $73;
   $75 = $74&65535;
   $76 = $i;
   $77 = (($76) + 1)|0;
   $78 = $1;
   $79 = (($78) + ($77<<1)|0);
   HEAP16[$79>>1] = $75;
   $j = 0;
   while(1) {
    $80 = $j;
    $81 = ($80|0)<(6);
    if (!($81)) {
     break;
    }
    $82 = $j;
    $83 = (($raw) + ($82<<1)|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84&65535;
    $86 = $85 & 4095;
    $87 = $86&65535;
    $88 = $i;
    $89 = (($88) + 2)|0;
    $90 = $j;
    $91 = (($89) + ($90))|0;
    $92 = $1;
    $93 = (($92) + ($91<<1)|0);
    HEAP16[$93>>1] = $87;
    $94 = $j;
    $95 = (($94) + 1)|0;
    $j = $95;
   }
   $96 = $i;
   $97 = (($96) + 8)|0;
   $i = $97;
  }
  $0 = 1;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 $100 = $2;
 $101 = $100 & 7;
 $102 = ($101|0)==(4);
 if ($102) {
  $103 = HEAP32[944>>2]|0;
  $104 = (_getc_unlocked($103)|0);
  $105 = $104 << 8;
  $106 = ($105|0)<(0);
  $107 = $106 << 31 >> 31;
  $108 = $bitbuf;
  $109 = $108;
  HEAP32[$109>>2] = $105;
  $110 = (($108) + 4)|0;
  $111 = $110;
  HEAP32[$111>>2] = $107;
  $112 = HEAP32[944>>2]|0;
  $113 = (_getc_unlocked($112)|0);
  $114 = ($113|0)<(0);
  $115 = $114 << 31 >> 31;
  $116 = $bitbuf;
  $117 = $116;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($116) + 4)|0;
  $120 = $119;
  $121 = HEAP32[$120>>2]|0;
  $122 = (_i64Add(($118|0),($121|0),($113|0),($115|0))|0);
  $123 = tempRet0;
  $124 = $bitbuf;
  $125 = $124;
  HEAP32[$125>>2] = $122;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $123;
  $bits = 16;
 }
 $i = 0;
 while(1) {
  $128 = $i;
  $129 = $2;
  $130 = ($128|0)<($129|0);
  if (!($130)) {
   break;
  }
  $131 = $i;
  $132 = (($blen) + ($131)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $len = $134;
  $135 = $bits;
  $136 = $len;
  $137 = ($135|0)<($136|0);
  if ($137) {
   $j = 0;
   while(1) {
    $138 = $j;
    $139 = ($138|0)<(32);
    if (!($139)) {
     break;
    }
    $140 = HEAP32[944>>2]|0;
    $141 = (_getc_unlocked($140)|0);
    $142 = ($141|0)<(0);
    $143 = $142 << 31 >> 31;
    $144 = $bits;
    $145 = $j;
    $146 = $145 ^ 8;
    $147 = (($144) + ($146))|0;
    $148 = (_bitshift64Shl(($141|0),($143|0),($147|0))|0);
    $149 = tempRet0;
    $150 = $bitbuf;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($150) + 4)|0;
    $154 = $153;
    $155 = HEAP32[$154>>2]|0;
    $156 = (_i64Add(($152|0),($155|0),($148|0),($149|0))|0);
    $157 = tempRet0;
    $158 = $bitbuf;
    $159 = $158;
    HEAP32[$159>>2] = $156;
    $160 = (($158) + 4)|0;
    $161 = $160;
    HEAP32[$161>>2] = $157;
    $162 = $j;
    $163 = (($162) + 8)|0;
    $j = $163;
   }
   $164 = $bits;
   $165 = (($164) + 32)|0;
   $bits = $165;
  }
  $166 = $bitbuf;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (($166) + 4)|0;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = $len;
  $173 = (16 - ($172))|0;
  $174 = 65535 >> $173;
  $175 = ($174|0)<(0);
  $176 = $175 << 31 >> 31;
  $177 = $168 & $174;
  $171 & $176;
  $diff = $177;
  $178 = $len;
  $179 = $bitbuf;
  $180 = $179;
  $181 = HEAP32[$180>>2]|0;
  $182 = (($179) + 4)|0;
  $183 = $182;
  $184 = HEAP32[$183>>2]|0;
  $185 = (_bitshift64Ashr(($181|0),($184|0),($178|0))|0);
  $186 = tempRet0;
  $187 = $bitbuf;
  $188 = $187;
  HEAP32[$188>>2] = $185;
  $189 = (($187) + 4)|0;
  $190 = $189;
  HEAP32[$190>>2] = $186;
  $191 = $len;
  $192 = $bits;
  $193 = (($192) - ($191))|0;
  $bits = $193;
  $194 = $diff;
  $195 = $len;
  $196 = (($195) - 1)|0;
  $197 = 1 << $196;
  $198 = $194 & $197;
  $199 = ($198|0)==(0);
  if ($199) {
   $200 = $len;
   $201 = 1 << $200;
   $202 = (($201) - 1)|0;
   $203 = $diff;
   $204 = (($203) - ($202))|0;
   $diff = $204;
  }
  $205 = $diff;
  $206 = $205&65535;
  $207 = $i;
  $208 = $1;
  $209 = (($208) + ($207<<1)|0);
  HEAP16[$209>>1] = $206;
  $210 = $i;
  $211 = (($210) + 1)|0;
  $i = $211;
 }
 $0 = 0;
 $212 = $0;
 STACKTOP = sp;return ($212|0);
}
function _kodak_65000_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $col = 0, $i = 0;
 var $len = 0, $pred = 0, $ret = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 32|0;
 $pred = sp + 8|0;
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[580076>>1]|0;
   $6 = $5&65535;
   $7 = ($4|0)<($6|0);
   if (!($7)) {
    break;
   }
   $8 = ((($pred)) + 4|0);
   HEAP32[$8>>2] = 0;
   HEAP32[$pred>>2] = 0;
   $9 = HEAP16[580076>>1]|0;
   $10 = $9&65535;
   $11 = $col;
   $12 = (($10) - ($11))|0;
   $13 = (256)<($12|0);
   if ($13) {
    $18 = 256;
   } else {
    $14 = HEAP16[580076>>1]|0;
    $15 = $14&65535;
    $16 = $col;
    $17 = (($15) - ($16))|0;
    $18 = $17;
   }
   $len = $18;
   $19 = $len;
   $20 = (_kodak_65000_decode($buf,$19)|0);
   $ret = $20;
   $i = 0;
   while(1) {
    $21 = $i;
    $22 = $len;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $24 = $ret;
    $25 = ($24|0)!=(0);
    $26 = $i;
    $27 = (($buf) + ($26<<1)|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28 << 16 >> 16;
    if ($25) {
     $36 = $29;
    } else {
     $30 = $i;
     $31 = $30 & 1;
     $32 = (($pred) + ($31<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = (($33) + ($29))|0;
     HEAP32[$32>>2] = $34;
     $36 = $34;
    }
    $35 = (448962 + ($36<<1)|0);
    $37 = HEAP16[$35>>1]|0;
    $38 = $row;
    $39 = HEAP16[580226>>1]|0;
    $40 = $39&65535;
    $41 = Math_imul($38, $40)|0;
    $42 = $col;
    $43 = $i;
    $44 = (($42) + ($43))|0;
    $45 = (($41) + ($44))|0;
    $46 = HEAP32[1032>>2]|0;
    $47 = (($46) + ($45<<1)|0);
    HEAP16[$47>>1] = $37;
    $48 = $37&65535;
    $49 = $48 >> 12;
    $50 = ($49|0)!=(0);
    if ($50) {
     _derror();
    }
    $51 = $i;
    $52 = (($51) + 1)|0;
    $i = $52;
   }
   $53 = $col;
   $54 = (($53) + 256)|0;
   $col = $54;
  }
  $55 = $row;
  $56 = (($55) + 1)|0;
  $row = $56;
 }
 STACKTOP = sp;return;
}
function _kodak_ycbcr_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp = 0, $buf = 0, $c = 0, $cb = 0, $col = 0, $cr = 0, $i = 0, $ip = 0;
 var $j = 0, $k = 0, $len = 0, $rgb = 0, $row = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 72|0;
 $y = sp + 24|0;
 $rgb = sp + 4|0;
 $0 = HEAP32[972>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[580074>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $col = 0;
  while(1) {
   $6 = $col;
   $7 = HEAP16[580076>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   if (!($9)) {
    break;
   }
   $10 = HEAP16[580076>>1]|0;
   $11 = $10&65535;
   $12 = $col;
   $13 = (($11) - ($12))|0;
   $14 = (128)<($13|0);
   if ($14) {
    $19 = 128;
   } else {
    $15 = HEAP16[580076>>1]|0;
    $16 = $15&65535;
    $17 = $col;
    $18 = (($16) - ($17))|0;
    $19 = $18;
   }
   $len = $19;
   $20 = $len;
   $21 = ($20*3)|0;
   (_kodak_65000_decode($buf,$21)|0);
   $cr = 0;
   $cb = 0;
   $22 = ((($y)) + 8|0);
   $23 = ((($22)) + 4|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($y)) + 4|0);
   HEAP32[$24>>2] = 0;
   $bp = $buf;
   $i = 0;
   while(1) {
    $25 = $i;
    $26 = $len;
    $27 = ($25|0)<($26|0);
    if (!($27)) {
     break;
    }
    $28 = $bp;
    $29 = ((($28)) + 8|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30 << 16 >> 16;
    $32 = $cb;
    $33 = (($32) + ($31))|0;
    $cb = $33;
    $34 = $bp;
    $35 = ((($34)) + 10|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $36 << 16 >> 16;
    $38 = $cr;
    $39 = (($38) + ($37))|0;
    $cr = $39;
    $40 = $cb;
    $41 = $cr;
    $42 = (($40) + ($41))|0;
    $43 = (($42) + 2)|0;
    $44 = $43 >> 2;
    $45 = (0 - ($44))|0;
    $46 = ((($rgb)) + 4|0);
    HEAP32[$46>>2] = $45;
    $47 = ((($rgb)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = $cb;
    $50 = (($48) + ($49))|0;
    $51 = ((($rgb)) + 8|0);
    HEAP32[$51>>2] = $50;
    $52 = ((($rgb)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $cr;
    $55 = (($53) + ($54))|0;
    HEAP32[$rgb>>2] = $55;
    $j = 0;
    while(1) {
     $56 = $j;
     $57 = ($56|0)<(2);
     if (!($57)) {
      break;
     }
     $k = 0;
     while(1) {
      $58 = $k;
      $59 = ($58|0)<(2);
      if (!($59)) {
       break;
      }
      $60 = $k;
      $61 = $60 ^ 1;
      $62 = $j;
      $63 = (($y) + ($62<<3)|0);
      $64 = (($63) + ($61<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $bp;
      $67 = ((($66)) + 2|0);
      $bp = $67;
      $68 = HEAP16[$66>>1]|0;
      $69 = $68 << 16 >> 16;
      $70 = (($65) + ($69))|0;
      $71 = $k;
      $72 = $j;
      $73 = (($y) + ($72<<3)|0);
      $74 = (($73) + ($71<<2)|0);
      HEAP32[$74>>2] = $70;
      $75 = $70 >> 10;
      $76 = ($75|0)!=(0);
      if ($76) {
       _derror();
      }
      $77 = $row;
      $78 = $j;
      $79 = (($77) + ($78))|0;
      $80 = HEAP16[580076>>1]|0;
      $81 = $80&65535;
      $82 = Math_imul($79, $81)|0;
      $83 = $col;
      $84 = (($82) + ($83))|0;
      $85 = $i;
      $86 = (($84) + ($85))|0;
      $87 = $k;
      $88 = (($86) + ($87))|0;
      $89 = HEAP32[972>>2]|0;
      $90 = (($89) + ($88<<3)|0);
      $ip = $90;
      $c = 0;
      while(1) {
       $91 = $c;
       $92 = ($91|0)<(3);
       $93 = $k;
       if (!($92)) {
        break;
       }
       $94 = $j;
       $95 = (($y) + ($94<<3)|0);
       $96 = (($95) + ($93<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = $c;
       $99 = (($rgb) + ($98<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (($97) + ($100))|0;
       $102 = ($101|0)<(4095);
       if ($102) {
        $103 = $k;
        $104 = $j;
        $105 = (($y) + ($104<<3)|0);
        $106 = (($105) + ($103<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = $c;
        $109 = (($rgb) + ($108<<2)|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = (($107) + ($110))|0;
        $113 = $111;
       } else {
        $113 = 4095;
       }
       $112 = (0)>($113|0);
       if ($112) {
        $134 = 0;
       } else {
        $114 = $k;
        $115 = $j;
        $116 = (($y) + ($115<<3)|0);
        $117 = (($116) + ($114<<2)|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = $c;
        $120 = (($rgb) + ($119<<2)|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($118) + ($121))|0;
        $123 = ($122|0)<(4095);
        if ($123) {
         $124 = $k;
         $125 = $j;
         $126 = (($y) + ($125<<3)|0);
         $127 = (($126) + ($124<<2)|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = $c;
         $130 = (($rgb) + ($129<<2)|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (($128) + ($131))|0;
         $134 = $132;
        } else {
         $134 = 4095;
        }
       }
       $133 = (448962 + ($134<<1)|0);
       $135 = HEAP16[$133>>1]|0;
       $136 = $c;
       $137 = $ip;
       $138 = (($137) + ($136<<1)|0);
       HEAP16[$138>>1] = $135;
       $139 = $c;
       $140 = (($139) + 1)|0;
       $c = $140;
      }
      $141 = (($93) + 1)|0;
      $k = $141;
     }
     $142 = $j;
     $143 = (($142) + 1)|0;
     $j = $143;
    }
    $144 = $i;
    $145 = (($144) + 2)|0;
    $i = $145;
    $146 = $bp;
    $147 = ((($146)) + 4|0);
    $bp = $147;
   }
   $148 = $col;
   $149 = (($148) + 128)|0;
   $col = $149;
  }
  $150 = $row;
  $151 = (($150) + 2)|0;
  $row = $151;
 }
 STACKTOP = sp;return;
}
function _kodak_rgb_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bp = 0, $buf = 0, $c = 0, $col = 0, $i = 0, $ip = 0, $len = 0, $rgb = 0, $row = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $rgb = sp + 4|0;
 $0 = HEAP32[972>>2]|0;
 $ip = $0;
 $row = 0;
 while(1) {
  $1 = $row;
  $2 = HEAP16[580074>>1]|0;
  $3 = $2&65535;
  $4 = ($1|0)<($3|0);
  if (!($4)) {
   break;
  }
  $col = 0;
  while(1) {
   $5 = $col;
   $6 = HEAP16[580076>>1]|0;
   $7 = $6&65535;
   $8 = ($5|0)<($7|0);
   if (!($8)) {
    break;
   }
   $9 = HEAP16[580076>>1]|0;
   $10 = $9&65535;
   $11 = $col;
   $12 = (($10) - ($11))|0;
   $13 = (256)<($12|0);
   if ($13) {
    $18 = 256;
   } else {
    $14 = HEAP16[580076>>1]|0;
    $15 = $14&65535;
    $16 = $col;
    $17 = (($15) - ($16))|0;
    $18 = $17;
   }
   $len = $18;
   $19 = $len;
   $20 = ($19*3)|0;
   (_kodak_65000_decode($buf,$20)|0);
   ;HEAP32[$rgb>>2]=0|0;HEAP32[$rgb+4>>2]=0|0;HEAP32[$rgb+8>>2]=0|0;
   $bp = $buf;
   $i = 0;
   while(1) {
    $21 = $i;
    $22 = $len;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $c = 0;
    while(1) {
     $24 = $c;
     $25 = ($24|0)<(3);
     if (!($25)) {
      break;
     }
     $26 = $bp;
     $27 = ((($26)) + 2|0);
     $bp = $27;
     $28 = HEAP16[$26>>1]|0;
     $29 = $28 << 16 >> 16;
     $30 = $c;
     $31 = (($rgb) + ($30<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + ($29))|0;
     HEAP32[$31>>2] = $33;
     $34 = $33&65535;
     $35 = $c;
     $36 = $ip;
     $37 = (($36) + ($35<<1)|0);
     HEAP16[$37>>1] = $34;
     $38 = $34&65535;
     $39 = $38 >> 12;
     $40 = ($39|0)!=(0);
     if ($40) {
      _derror();
     }
     $41 = $c;
     $42 = (($41) + 1)|0;
     $c = $42;
    }
    $43 = $i;
    $44 = (($43) + 1)|0;
    $i = $44;
    $45 = $ip;
    $46 = ((($45)) + 8|0);
    $ip = $46;
   }
   $47 = $col;
   $48 = (($47) + 256)|0;
   $col = $48;
  }
  $49 = $row;
  $50 = (($49) + 1)|0;
  $row = $50;
 }
 STACKTOP = sp;return;
}
function _kodak_thumb_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[1680>>2]|0;
 $1 = $0 >>> 5;
 HEAP32[980>>2] = $1;
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[580074>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  $col = 0;
  while(1) {
   $6 = $col;
   $7 = HEAP16[580076>>1]|0;
   $8 = $7&65535;
   $9 = ($6|0)<($8|0);
   $10 = $row;
   if (!($9)) {
    break;
   }
   $11 = HEAP16[580076>>1]|0;
   $12 = $11&65535;
   $13 = Math_imul($10, $12)|0;
   $14 = $col;
   $15 = (($13) + ($14))|0;
   $16 = HEAP32[972>>2]|0;
   $17 = (($16) + ($15<<3)|0);
   $18 = HEAP32[980>>2]|0;
   _read_shorts($17,$18);
   $19 = $col;
   $20 = (($19) + 1)|0;
   $col = $20;
  }
  $21 = (($10) + 1)|0;
  $row = $21;
 }
 $22 = HEAP32[1680>>2]|0;
 $23 = $22 & 31;
 $24 = 1 << $23;
 $25 = (($24) - 1)|0;
 HEAP32[1040>>2] = $25;
 STACKTOP = sp;return;
}
function _sony_decrypt($data,$len,$start,$key) {
 $data = $data|0;
 $len = $len|0;
 $start = $start|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $len;
 $2 = $start;
 $3 = $key;
 $4 = $2;
 $5 = ($4|0)!=(0);
 L1: do {
  if ($5) {
   HEAP32[2344>>2] = 0;
   while(1) {
    $6 = HEAP32[2344>>2]|0;
    $7 = ($6>>>0)<(4);
    if (!($7)) {
     break;
    }
    $8 = $3;
    $9 = Math_imul($8, 48828125)|0;
    $10 = (($9) + 1)|0;
    $3 = $10;
    $11 = HEAP32[2344>>2]|0;
    $12 = (1832 + ($11<<2)|0);
    HEAP32[$12>>2] = $10;
    $13 = HEAP32[2344>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[2344>>2] = $14;
   }
   $15 = HEAP32[(1844)>>2]|0;
   $16 = $15 << 1;
   $17 = HEAP32[1832>>2]|0;
   $18 = HEAP32[(1840)>>2]|0;
   $19 = $17 ^ $18;
   $20 = $19 >>> 31;
   $21 = $16 | $20;
   HEAP32[(1844)>>2] = $21;
   HEAP32[2344>>2] = 4;
   while(1) {
    $22 = HEAP32[2344>>2]|0;
    $23 = ($22>>>0)<(127);
    if (!($23)) {
     break;
    }
    $24 = HEAP32[2344>>2]|0;
    $25 = (($24) - 4)|0;
    $26 = (1832 + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[2344>>2]|0;
    $29 = (($28) - 2)|0;
    $30 = (1832 + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27 ^ $31;
    $33 = $32 << 1;
    $34 = HEAP32[2344>>2]|0;
    $35 = (($34) - 3)|0;
    $36 = (1832 + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[2344>>2]|0;
    $39 = (($38) - 1)|0;
    $40 = (1832 + ($39<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $37 ^ $41;
    $43 = $42 >>> 31;
    $44 = $33 | $43;
    $45 = HEAP32[2344>>2]|0;
    $46 = (1832 + ($45<<2)|0);
    HEAP32[$46>>2] = $44;
    $47 = HEAP32[2344>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[2344>>2] = $48;
   }
   HEAP32[2344>>2] = 0;
   while(1) {
    $49 = HEAP32[2344>>2]|0;
    $50 = ($49>>>0)<(127);
    if (!($50)) {
     break L1;
    }
    $51 = HEAP32[2344>>2]|0;
    $52 = (1832 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_htonl($53)|0);
    $55 = HEAP32[2344>>2]|0;
    $56 = (1832 + ($55<<2)|0);
    HEAP32[$56>>2] = $54;
    $57 = HEAP32[2344>>2]|0;
    $58 = (($57) + 1)|0;
    HEAP32[2344>>2] = $58;
   }
  }
 } while(0);
 while(1) {
  $59 = $1;
  $60 = (($59) + -1)|0;
  $1 = $60;
  $61 = ($59|0)!=(0);
  if (!($61)) {
   label = 14;
   break;
  }
  $62 = HEAP32[2344>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[2344>>2] = $63;
  $64 = ($62|0)!=(0);
  if (!($64)) {
   label = 14;
   break;
  }
  $65 = HEAP32[2344>>2]|0;
  $66 = $65 & 127;
  $67 = (1832 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[2344>>2]|0;
  $70 = (($69) + 64)|0;
  $71 = $70 & 127;
  $72 = (1832 + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $68 ^ $73;
  $75 = HEAP32[2344>>2]|0;
  $76 = (($75) - 1)|0;
  $77 = $76 & 127;
  $78 = (1832 + ($77<<2)|0);
  HEAP32[$78>>2] = $74;
  $79 = $0;
  $80 = ((($79)) + 4|0);
  $0 = $80;
  $81 = HEAP32[$79>>2]|0;
  $82 = $81 ^ $74;
  HEAP32[$79>>2] = $82;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function _sony_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $head = 0, $i = 0, $key = 0, $pixel = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $head = sp + 24|0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,200896,0)|0);
 $1 = HEAP32[944>>2]|0;
 $2 = HEAP32[944>>2]|0;
 $3 = (_getc_unlocked($2)|0);
 $4 = $3<<2;
 $5 = (($4) - 1)|0;
 (_fseek($1,$5,1)|0);
 HEAP16[448960>>1] = 19789;
 $6 = (_get4()|0);
 $key = $6;
 $7 = HEAP32[944>>2]|0;
 (_fseek($7,164600,0)|0);
 $8 = HEAP32[944>>2]|0;
 (_fread($head,1,40,$8)|0);
 $9 = $key;
 _sony_decrypt($head,10,1,$9);
 $i = 26;
 while(1) {
  $10 = $i;
  $11 = (($10) + -1)|0;
  $i = $11;
  $12 = ($10>>>0)>(22);
  if (!($12)) {
   break;
  }
  $13 = $key;
  $14 = $13 << 8;
  $15 = $i;
  $16 = (($head) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $14 | $18;
  $key = $19;
 }
 $20 = HEAP32[944>>2]|0;
 $21 = HEAP32[1524>>2]|0;
 (_fseek($20,$21,0)|0);
 $row = 0;
 while(1) {
  $22 = $row;
  $23 = HEAP16[580244>>1]|0;
  $24 = $23&65535;
  $25 = ($22>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[1032>>2]|0;
  $27 = $row;
  $28 = HEAP16[580226>>1]|0;
  $29 = $28&65535;
  $30 = Math_imul($27, $29)|0;
  $31 = (($26) + ($30<<1)|0);
  $pixel = $31;
  $32 = $pixel;
  $33 = HEAP16[580226>>1]|0;
  $34 = $33&65535;
  $35 = HEAP32[944>>2]|0;
  $36 = (_fread($32,2,$34,$35)|0);
  $37 = HEAP16[580226>>1]|0;
  $38 = $37&65535;
  $39 = ($36>>>0)<($38>>>0);
  if ($39) {
   _derror();
  }
  $40 = $pixel;
  $41 = HEAP16[580226>>1]|0;
  $42 = $41&65535;
  $43 = (($42|0) / 2)&-1;
  $44 = $row;
  $45 = ($44|0)!=(0);
  $46 = $45 ^ 1;
  $47 = $46&1;
  $48 = $key;
  _sony_decrypt($40,$43,$47,$48);
  $col = 0;
  while(1) {
   $49 = $col;
   $50 = HEAP16[580226>>1]|0;
   $51 = $50&65535;
   $52 = ($49>>>0)<($51>>>0);
   if (!($52)) {
    break;
   }
   $53 = $col;
   $54 = $pixel;
   $55 = (($54) + ($53<<1)|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = (_ntohs($56)|0);
   $58 = $col;
   $59 = $pixel;
   $60 = (($59) + ($58<<1)|0);
   HEAP16[$60>>1] = $57;
   $61 = $57&65535;
   $62 = $61 >> 14;
   $63 = ($62|0)!=(0);
   if ($63) {
    _derror();
   }
   $64 = $col;
   $65 = (($64) + 1)|0;
   $col = $65;
  }
  $66 = $row;
  $67 = (($66) + 1)|0;
  $row = $67;
 }
 HEAP32[1040>>2] = 16368;
 STACKTOP = sp;return;
}
function _sony_arw_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $col = 0, $huff = 0, $i = 0, $n = 0, $row = 0;
 var $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 24|0;
 $sum = 0;
 HEAP16[$huff>>1] = 15;
 $i = 0;
 $n = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(18);
  if (!($1)) {
   break;
  }
  $c = 0;
  while(1) {
   $2 = $c;
   $3 = $i;
   $4 = (589090 + ($3<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = $6 >> 8;
   $8 = 32768 >> $7;
   $9 = ($2|0)<($8|0);
   $10 = $i;
   if (!($9)) {
    break;
   }
   $11 = (589090 + ($10<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $n;
   $14 = (($13) + 1)|0;
   $n = $14;
   $15 = (($huff) + ($14<<1)|0);
   HEAP16[$15>>1] = $12;
   $16 = $c;
   $17 = (($16) + 1)|0;
   $c = $17;
  }
  $18 = (($10) + 1)|0;
  $i = $18;
 }
 (_getbithuff(-1,0)|0);
 $19 = HEAP16[580226>>1]|0;
 $20 = $19&65535;
 $col = $20;
 L9: while(1) {
  $21 = $col;
  $22 = (($21) + -1)|0;
  $col = $22;
  $23 = ($21|0)!=(0);
  if (!($23)) {
   break;
  }
  $row = 0;
  while(1) {
   $24 = $row;
   $25 = HEAP16[580244>>1]|0;
   $26 = $25&65535;
   $27 = (($26) + 1)|0;
   $28 = ($24|0)<($27|0);
   if (!($28)) {
    continue L9;
   }
   $29 = $row;
   $30 = HEAP16[580244>>1]|0;
   $31 = $30&65535;
   $32 = ($29|0)==($31|0);
   if ($32) {
    $row = 1;
   }
   $33 = (_ljpeg_diff($huff)|0);
   $34 = $sum;
   $35 = (($34) + ($33))|0;
   $sum = $35;
   $36 = $35 >> 12;
   $37 = ($36|0)!=(0);
   if ($37) {
    _derror();
   }
   $38 = $row;
   $39 = HEAP16[580074>>1]|0;
   $40 = $39&65535;
   $41 = ($38|0)<($40|0);
   if ($41) {
    $42 = $sum;
    $43 = $42&65535;
    $44 = $row;
    $45 = HEAP16[580226>>1]|0;
    $46 = $45&65535;
    $47 = Math_imul($44, $46)|0;
    $48 = $col;
    $49 = (($47) + ($48))|0;
    $50 = HEAP32[1032>>2]|0;
    $51 = (($50) + ($49<<1)|0);
    HEAP16[$51>>1] = $43;
   }
   $52 = $row;
   $53 = (($52) + 2)|0;
   $row = $53;
  }
 }
 STACKTOP = sp;return;
}
function _sony_arw2_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0;
 var $col = 0, $data = 0, $dp = 0, $i = 0, $imax = 0, $imin = 0, $max = 0, $min = 0, $pix = 0, $row = 0, $sh = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pix = sp + 48|0;
 $0 = HEAP16[580226>>1]|0;
 $1 = $0&65535;
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $data = $3;
 $4 = $data;
 _merror($4,611485);
 $row = 0;
 while(1) {
  $5 = $row;
  $6 = HEAP16[580074>>1]|0;
  $7 = $6&65535;
  $8 = ($5|0)<($7|0);
  $9 = $data;
  if (!($8)) {
   break;
  }
  $10 = HEAP16[580226>>1]|0;
  $11 = $10&65535;
  $12 = HEAP32[944>>2]|0;
  (_fread($9,1,$11,$12)|0);
  $13 = $data;
  $dp = $13;
  $col = 0;
  while(1) {
   $14 = $col;
   $15 = HEAP16[580226>>1]|0;
   $16 = $15&65535;
   $17 = (($16) - 30)|0;
   $18 = ($14|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = $dp;
   $20 = (_sget4($19)|0);
   $val = $20;
   $21 = 2047 & $20;
   $max = $21;
   $22 = $val;
   $23 = $22 >> 11;
   $24 = 2047 & $23;
   $min = $24;
   $25 = $val;
   $26 = $25 >> 22;
   $27 = 15 & $26;
   $imax = $27;
   $28 = $val;
   $29 = $28 >> 26;
   $30 = 15 & $29;
   $imin = $30;
   $sh = 0;
   while(1) {
    $31 = $sh;
    $32 = ($31|0)<(4);
    if (!($32)) {
     break;
    }
    $33 = $sh;
    $34 = 128 << $33;
    $35 = $max;
    $36 = $min;
    $37 = (($35) - ($36))|0;
    $38 = ($34|0)<=($37|0);
    if (!($38)) {
     break;
    }
    $39 = $sh;
    $40 = (($39) + 1)|0;
    $sh = $40;
   }
   $bit = 30;
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = ($41|0)<(16);
    if (!($42)) {
     break;
    }
    $43 = $i;
    $44 = $imax;
    $45 = ($43|0)==($44|0);
    do {
     if ($45) {
      $46 = $max;
      $47 = $46&65535;
      $48 = $i;
      $49 = (($pix) + ($48<<1)|0);
      HEAP16[$49>>1] = $47;
     } else {
      $50 = $i;
      $51 = $imin;
      $52 = ($50|0)==($51|0);
      if ($52) {
       $53 = $min;
       $54 = $53&65535;
       $55 = $i;
       $56 = (($pix) + ($55<<1)|0);
       HEAP16[$56>>1] = $54;
       break;
      }
      $57 = $dp;
      $58 = $bit;
      $59 = $58 >> 3;
      $60 = (($57) + ($59)|0);
      $61 = (_sget2($60)|0);
      $62 = $61&65535;
      $63 = $bit;
      $64 = $63 & 7;
      $65 = $62 >> $64;
      $66 = $65 & 127;
      $67 = $sh;
      $68 = $66 << $67;
      $69 = $min;
      $70 = (($68) + ($69))|0;
      $71 = $70&65535;
      $72 = $i;
      $73 = (($pix) + ($72<<1)|0);
      HEAP16[$73>>1] = $71;
      $74 = $i;
      $75 = (($pix) + ($74<<1)|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = $76&65535;
      $78 = ($77|0)>(2047);
      if ($78) {
       $79 = $i;
       $80 = (($pix) + ($79<<1)|0);
       HEAP16[$80>>1] = 2047;
      }
      $81 = $bit;
      $82 = (($81) + 7)|0;
      $bit = $82;
     }
    } while(0);
    $83 = $i;
    $84 = (($83) + 1)|0;
    $i = $84;
   }
   $i = 0;
   while(1) {
    $85 = $i;
    $86 = ($85|0)<(16);
    if (!($86)) {
     break;
    }
    $87 = $i;
    $88 = (($pix) + ($87<<1)|0);
    $89 = HEAP16[$88>>1]|0;
    $90 = $89&65535;
    $91 = $90 << 1;
    $92 = (448962 + ($91<<1)|0);
    $93 = HEAP16[$92>>1]|0;
    $94 = $93&65535;
    $95 = $94 >> 2;
    $96 = $95&65535;
    $97 = $row;
    $98 = HEAP16[580226>>1]|0;
    $99 = $98&65535;
    $100 = Math_imul($97, $99)|0;
    $101 = $col;
    $102 = (($100) + ($101))|0;
    $103 = HEAP32[1032>>2]|0;
    $104 = (($103) + ($102<<1)|0);
    HEAP16[$104>>1] = $96;
    $105 = $i;
    $106 = (($105) + 1)|0;
    $i = $106;
    $107 = $col;
    $108 = (($107) + 2)|0;
    $col = $108;
   }
   $109 = $col;
   $110 = $109 & 1;
   $111 = ($110|0)!=(0);
   $112 = $111 ? 1 : 31;
   $113 = $col;
   $114 = (($113) - ($112))|0;
   $col = $114;
   $115 = $dp;
   $116 = ((($115)) + 16|0);
   $dp = $116;
  }
  $117 = $row;
  $118 = (($117) + 1)|0;
  $row = $118;
 }
 _free($9);
 STACKTOP = sp;return;
}
function _samsung_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $dir = 0, $i = 0;
 var $len = 0, $op = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $op = sp + 16|0;
 $len = sp;
 HEAP16[448960>>1] = 18761;
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580244>>1]|0;
  $2 = $1&65535;
  $3 = ($0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[944>>2]|0;
  $5 = HEAP32[1784>>2]|0;
  $6 = $row;
  $7 = $6<<2;
  $8 = (($5) + ($7))|0;
  (_fseek($4,$8,0)|0);
  $9 = HEAP32[944>>2]|0;
  $10 = HEAP32[1524>>2]|0;
  $11 = (_get4()|0);
  $12 = (($10) + ($11))|0;
  (_fseek($9,$12,0)|0);
  (_ph1_bithuff(-1,0)|0);
  $c = 0;
  while(1) {
   $13 = $c;
   $14 = ($13|0)<(4);
   if (!($14)) {
    break;
   }
   $15 = $row;
   $16 = ($15|0)<(2);
   $17 = $16 ? 7 : 4;
   $18 = $c;
   $19 = (($len) + ($18<<2)|0);
   HEAP32[$19>>2] = $17;
   $20 = $c;
   $21 = (($20) + 1)|0;
   $c = $21;
  }
  $col = 0;
  while(1) {
   $22 = $col;
   $23 = HEAP16[580226>>1]|0;
   $24 = $23&65535;
   $25 = ($22|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = (_ph1_bithuff(1,0)|0);
   $dir = $26;
   $c = 0;
   while(1) {
    $27 = $c;
    $28 = ($27|0)<(4);
    if (!($28)) {
     break;
    }
    $29 = (_ph1_bithuff(2,0)|0);
    $30 = $c;
    $31 = (($op) + ($30<<2)|0);
    HEAP32[$31>>2] = $29;
    $32 = $c;
    $33 = (($32) + 1)|0;
    $c = $33;
   }
   $c = 0;
   while(1) {
    $34 = $c;
    $35 = ($34|0)<(4);
    if (!($35)) {
     break;
    }
    $36 = $c;
    $37 = (($op) + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    switch ($38|0) {
    case 3:  {
     $39 = (_ph1_bithuff(4,0)|0);
     $40 = $c;
     $41 = (($len) + ($40<<2)|0);
     HEAP32[$41>>2] = $39;
     break;
    }
    case 2:  {
     $42 = $c;
     $43 = (($len) + ($42<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + -1)|0;
     HEAP32[$43>>2] = $45;
     break;
    }
    case 1:  {
     $46 = $c;
     $47 = (($len) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($48) + 1)|0;
     HEAP32[$47>>2] = $49;
     break;
    }
    default: {
    }
    }
    $50 = $c;
    $51 = (($50) + 1)|0;
    $c = $51;
   }
   $c = 0;
   while(1) {
    $52 = $c;
    $53 = ($52|0)<(16);
    if (!($53)) {
     break;
    }
    $54 = $c;
    $55 = $54 & 1;
    $56 = $55 << 1;
    $57 = $c;
    $58 = $57 >> 3;
    $59 = $56 | $58;
    $60 = (($len) + ($59<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $i = $61;
    $62 = $i;
    $63 = (_ph1_bithuff($62,0)|0);
    $64 = $i;
    $65 = (32 - ($64))|0;
    $66 = $63 << $65;
    $67 = $i;
    $68 = (32 - ($67))|0;
    $69 = $66 >> $68;
    $70 = $dir;
    $71 = ($70|0)!=(0);
    if ($71) {
     $72 = $row;
     $73 = $c;
     $74 = $73 ^ -1;
     $75 = $74 | -2;
     $76 = (($72) + ($75))|0;
     $77 = HEAP16[580226>>1]|0;
     $78 = $77&65535;
     $79 = Math_imul($76, $78)|0;
     $80 = $col;
     $81 = $c;
     $82 = (($80) + ($81))|0;
     $83 = (($79) + ($82))|0;
     $84 = HEAP32[1032>>2]|0;
     $85 = (($84) + ($83<<1)|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = $86&65535;
     $104 = $87;
    } else {
     $88 = $col;
     $89 = ($88|0)!=(0);
     if ($89) {
      $90 = $row;
      $91 = HEAP16[580226>>1]|0;
      $92 = $91&65535;
      $93 = Math_imul($90, $92)|0;
      $94 = $col;
      $95 = $c;
      $96 = $95 | -2;
      $97 = (($94) + ($96))|0;
      $98 = (($93) + ($97))|0;
      $99 = HEAP32[1032>>2]|0;
      $100 = (($99) + ($98<<1)|0);
      $101 = HEAP16[$100>>1]|0;
      $102 = $101&65535;
      $104 = $102;
     } else {
      $104 = 128;
     }
    }
    $103 = (($69) + ($104))|0;
    $105 = $103&65535;
    $106 = $row;
    $107 = HEAP16[580226>>1]|0;
    $108 = $107&65535;
    $109 = Math_imul($106, $108)|0;
    $110 = $col;
    $111 = $c;
    $112 = (($110) + ($111))|0;
    $113 = (($109) + ($112))|0;
    $114 = HEAP32[1032>>2]|0;
    $115 = (($114) + ($113<<1)|0);
    HEAP16[$115>>1] = $105;
    $116 = $c;
    $117 = ($116|0)==(14);
    if ($117) {
     $c = -1;
    }
    $118 = $c;
    $119 = (($118) + 2)|0;
    $c = $119;
   }
   $120 = $col;
   $121 = (($120) + 16)|0;
   $col = $121;
  }
  $122 = $row;
  $123 = (($122) + 1)|0;
  $row = $123;
 }
 $row = 0;
 while(1) {
  $124 = $row;
  $125 = HEAP16[580244>>1]|0;
  $126 = $125&65535;
  $127 = (($126) - 1)|0;
  $128 = ($124|0)<($127|0);
  if (!($128)) {
   break;
  }
  $col = 0;
  while(1) {
   $129 = $col;
   $130 = HEAP16[580226>>1]|0;
   $131 = $130&65535;
   $132 = (($131) - 1)|0;
   $133 = ($129|0)<($132|0);
   $134 = $row;
   if (!($133)) {
    break;
   }
   $135 = HEAP16[580226>>1]|0;
   $136 = $135&65535;
   $137 = Math_imul($134, $136)|0;
   $138 = $col;
   $139 = (($138) + 1)|0;
   $140 = (($137) + ($139))|0;
   $141 = HEAP32[1032>>2]|0;
   $142 = (($141) + ($140<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $143&65535;
   $145 = $row;
   $146 = (($145) + 1)|0;
   $147 = HEAP16[580226>>1]|0;
   $148 = $147&65535;
   $149 = Math_imul($146, $148)|0;
   $150 = $col;
   $151 = (($149) + ($150))|0;
   $152 = HEAP32[1032>>2]|0;
   $153 = (($152) + ($151<<1)|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154&65535;
   $156 = (($144) + ($155))|0;
   $157 = $156&65535;
   $158 = $row;
   $159 = HEAP16[580226>>1]|0;
   $160 = $159&65535;
   $161 = Math_imul($158, $160)|0;
   $162 = $col;
   $163 = (($162) + 1)|0;
   $164 = (($161) + ($163))|0;
   $165 = HEAP32[1032>>2]|0;
   $166 = (($165) + ($164<<1)|0);
   HEAP16[$166>>1] = $157;
   $167 = $row;
   $168 = HEAP16[580226>>1]|0;
   $169 = $168&65535;
   $170 = Math_imul($167, $169)|0;
   $171 = $col;
   $172 = (($171) + 1)|0;
   $173 = (($170) + ($172))|0;
   $174 = HEAP32[1032>>2]|0;
   $175 = (($174) + ($173<<1)|0);
   $176 = HEAP16[$175>>1]|0;
   $177 = $176&65535;
   $178 = $row;
   $179 = (($178) + 1)|0;
   $180 = HEAP16[580226>>1]|0;
   $181 = $180&65535;
   $182 = Math_imul($179, $181)|0;
   $183 = $col;
   $184 = (($182) + ($183))|0;
   $185 = HEAP32[1032>>2]|0;
   $186 = (($185) + ($184<<1)|0);
   $187 = HEAP16[$186>>1]|0;
   $188 = $187&65535;
   $189 = (($177) - ($188))|0;
   $190 = $189&65535;
   $191 = $row;
   $192 = (($191) + 1)|0;
   $193 = HEAP16[580226>>1]|0;
   $194 = $193&65535;
   $195 = Math_imul($192, $194)|0;
   $196 = $col;
   $197 = (($195) + ($196))|0;
   $198 = HEAP32[1032>>2]|0;
   $199 = (($198) + ($197<<1)|0);
   HEAP16[$199>>1] = $190;
   $200 = $row;
   $201 = HEAP16[580226>>1]|0;
   $202 = $201&65535;
   $203 = Math_imul($200, $202)|0;
   $204 = $col;
   $205 = (($204) + 1)|0;
   $206 = (($203) + ($205))|0;
   $207 = HEAP32[1032>>2]|0;
   $208 = (($207) + ($206<<1)|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209&65535;
   $211 = $row;
   $212 = (($211) + 1)|0;
   $213 = HEAP16[580226>>1]|0;
   $214 = $213&65535;
   $215 = Math_imul($212, $214)|0;
   $216 = $col;
   $217 = (($215) + ($216))|0;
   $218 = HEAP32[1032>>2]|0;
   $219 = (($218) + ($217<<1)|0);
   $220 = HEAP16[$219>>1]|0;
   $221 = $220&65535;
   $222 = (($210) - ($221))|0;
   $223 = $222&65535;
   $224 = $row;
   $225 = HEAP16[580226>>1]|0;
   $226 = $225&65535;
   $227 = Math_imul($224, $226)|0;
   $228 = $col;
   $229 = (($228) + 1)|0;
   $230 = (($227) + ($229))|0;
   $231 = HEAP32[1032>>2]|0;
   $232 = (($231) + ($230<<1)|0);
   HEAP16[$232>>1] = $223;
   $233 = $col;
   $234 = (($233) + 2)|0;
   $col = $234;
  }
  $235 = (($134) + 2)|0;
  $row = $235;
 }
 STACKTOP = sp;return;
}
function _samsung2_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $col = 0, $diff = 0, $hpred = 0, $huff = 0, $i = 0, $n = 0, $row = 0;
 var $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $huff = sp + 40|0;
 $vpred = sp + 32|0;
 $hpred = sp + 24|0;
 ;HEAP16[$vpred>>1]=0|0;HEAP16[$vpred+2>>1]=0|0;HEAP16[$vpred+4>>1]=0|0;HEAP16[$vpred+6>>1]=0|0;
 HEAP16[$huff>>1] = 10;
 $i = 0;
 $n = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(14);
  if (!($1)) {
   break;
  }
  $c = 0;
  while(1) {
   $2 = $c;
   $3 = $i;
   $4 = (589126 + ($3<<1)|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = $6 >> 8;
   $8 = 1024 >> $7;
   $9 = ($2|0)<($8|0);
   $10 = $i;
   if (!($9)) {
    break;
   }
   $11 = (589126 + ($10<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $n;
   $14 = (($13) + 1)|0;
   $n = $14;
   $15 = (($huff) + ($14<<1)|0);
   HEAP16[$15>>1] = $12;
   $16 = $c;
   $17 = (($16) + 1)|0;
   $c = $17;
  }
  $18 = (($10) + 1)|0;
  $i = $18;
 }
 (_getbithuff(-1,0)|0);
 $row = 0;
 while(1) {
  $19 = $row;
  $20 = HEAP16[580244>>1]|0;
  $21 = $20&65535;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[580226>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = (_ljpeg_diff($huff)|0);
   $diff = $27;
   $28 = $col;
   $29 = ($28|0)<(2);
   $30 = $diff;
   $31 = $col;
   if ($29) {
    $32 = $row;
    $33 = $32 & 1;
    $34 = (($vpred) + ($33<<2)|0);
    $35 = (($34) + ($31<<1)|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $36&65535;
    $38 = (($37) + ($30))|0;
    $39 = $38&65535;
    HEAP16[$35>>1] = $39;
    $40 = $col;
    $41 = (($hpred) + ($40<<1)|0);
    HEAP16[$41>>1] = $39;
   } else {
    $42 = $31 & 1;
    $43 = (($hpred) + ($42<<1)|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $44&65535;
    $46 = (($45) + ($30))|0;
    $47 = $46&65535;
    HEAP16[$43>>1] = $47;
   }
   $48 = $col;
   $49 = $48 & 1;
   $50 = (($hpred) + ($49<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $row;
   $53 = HEAP16[580226>>1]|0;
   $54 = $53&65535;
   $55 = Math_imul($52, $54)|0;
   $56 = $col;
   $57 = (($55) + ($56))|0;
   $58 = HEAP32[1032>>2]|0;
   $59 = (($58) + ($57<<1)|0);
   HEAP16[$59>>1] = $51;
   $60 = $col;
   $61 = $60 & 1;
   $62 = (($hpred) + ($61<<1)|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63&65535;
   $65 = HEAP32[1516>>2]|0;
   $66 = $64 >> $65;
   $67 = ($66|0)!=(0);
   if ($67) {
    _derror();
   }
   $68 = $col;
   $69 = (($68) + 1)|0;
   $col = $69;
  }
  $70 = $row;
  $71 = (($70) + 1)|0;
  $row = $71;
 }
 STACKTOP = sp;return;
}
function _samsung3_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $diff = 0, $i = 0, $init = 0, $len = 0, $lent = 0, $mag = 0, $opt = 0, $or$cond = 0, $pmode = 0, $pred = 0, $prow = 0;
 var $row = 0, $tab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lent = sp + 64|0;
 $len = sp + 56|0;
 $prow = sp;
 HEAP16[448960>>1] = 18761;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,9,1)|0);
 $1 = HEAP32[944>>2]|0;
 $2 = (_getc_unlocked($1)|0);
 $opt = $2;
 (_get2()|0);
 $3 = (_get2()|0);
 $4 = $3&65535;
 $init = $4;
 $row = 0;
 while(1) {
  $5 = $row;
  $6 = HEAP16[580244>>1]|0;
  $7 = $6&65535;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[944>>2]|0;
  $10 = HEAP32[1524>>2]|0;
  $11 = HEAP32[944>>2]|0;
  $12 = (_ftell($11)|0);
  $13 = (($10) - ($12))|0;
  $14 = $13 & 15;
  (_fseek($9,$14,1)|0);
  (_ph1_bithuff(-1,0)|0);
  $mag = 0;
  $pmode = 7;
  $c = 0;
  while(1) {
   $15 = $c;
   $16 = ($15|0)<(6);
   $17 = $row;
   if (!($16)) {
    break;
   }
   $18 = ($17|0)<(2);
   $19 = $18 ? 7 : 4;
   $20 = $19&65535;
   $21 = $c;
   $22 = (($lent) + ($21<<1)|0);
   HEAP16[$22>>1] = $20;
   $23 = $c;
   $24 = (($23) + 1)|0;
   $c = $24;
  }
  $25 = (($17) - 1)|0;
  $26 = HEAP16[580226>>1]|0;
  $27 = $26&65535;
  $28 = Math_imul($25, $27)|0;
  $29 = $row;
  $30 = $29 & 1;
  $31 = $30 << 1;
  $32 = (1 - ($31))|0;
  $33 = (($28) + ($32))|0;
  $34 = HEAP32[1032>>2]|0;
  $35 = (($34) + ($33<<1)|0);
  $36 = $row;
  $37 = $36 & 1;
  $38 = (($prow) + ($37<<2)|0);
  HEAP32[$38>>2] = $35;
  $39 = $row;
  $40 = (($39) - 2)|0;
  $41 = HEAP16[580226>>1]|0;
  $42 = $41&65535;
  $43 = Math_imul($40, $42)|0;
  $44 = (($43) + 0)|0;
  $45 = HEAP32[1032>>2]|0;
  $46 = (($45) + ($44<<1)|0);
  $47 = $row;
  $48 = $47 ^ -1;
  $49 = $48 & 1;
  $50 = (($prow) + ($49<<2)|0);
  HEAP32[$50>>2] = $46;
  $tab = 0;
  while(1) {
   $51 = $tab;
   $52 = (($51) + 15)|0;
   $53 = HEAP16[580226>>1]|0;
   $54 = $53&65535;
   $55 = ($52|0)<($54|0);
   if (!($55)) {
    break;
   }
   $56 = $opt;
   $57 = $56 ^ -1;
   $58 = $57 & 4;
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = $tab;
    $61 = $60 & 63;
    $62 = ($61|0)!=(0);
    if (!($62)) {
     $63 = (_ph1_bithuff(2,0)|0);
     $i = $63;
     $64 = $i;
     $65 = ($64|0)<(3);
     if ($65) {
      $66 = $mag;
      $67 = (($66) - 50)|0;
      $68 = $i;
      $69 = (611506 + ($68)|0);
      $70 = HEAP8[$69>>0]|0;
      $71 = $70 << 24 >> 24;
      $72 = (($67) + ($71))|0;
      $74 = $72;
     } else {
      $73 = (_ph1_bithuff(12,0)|0);
      $74 = $73;
     }
     $mag = $74;
    }
   }
   $75 = $opt;
   $76 = $75 & 2;
   $77 = ($76|0)!=(0);
   $78 = (_ph1_bithuff(1,0)|0);
   if ($77) {
    $79 = $78<<2;
    $80 = (7 - ($79))|0;
    $pmode = $80;
   } else {
    $81 = ($78|0)!=(0);
    if (!($81)) {
     $82 = (_ph1_bithuff(3,0)|0);
     $pmode = $82;
    }
   }
   $83 = $opt;
   $84 = $83 & 1;
   $85 = ($84|0)!=(0);
   if ($85) {
    label = 20;
   } else {
    $86 = (_ph1_bithuff(1,0)|0);
    $87 = ($86|0)!=(0);
    if (!($87)) {
     label = 20;
    }
   }
   L26: do {
    if ((label|0) == 20) {
     label = 0;
     $c = 0;
     while(1) {
      $88 = $c;
      $89 = ($88|0)<(4);
      if (!($89)) {
       break;
      }
      $90 = (_ph1_bithuff(2,0)|0);
      $91 = $90&65535;
      $92 = $c;
      $93 = (($len) + ($92<<1)|0);
      HEAP16[$93>>1] = $91;
      $94 = $c;
      $95 = (($94) + 1)|0;
      $c = $95;
     }
     $c = 0;
     while(1) {
      $96 = $c;
      $97 = ($96|0)<(4);
      if (!($97)) {
       break L26;
      }
      $98 = $row;
      $99 = $98 & 1;
      $100 = $99 << 1;
      $101 = $c;
      $102 = $101 & 1;
      $103 = $100 | $102;
      $104 = (($103|0) % 3)&-1;
      $i = $104;
      $105 = $c;
      $106 = (($len) + ($105<<1)|0);
      $107 = HEAP16[$106>>1]|0;
      $108 = $107&65535;
      $109 = ($108|0)<(3);
      if ($109) {
       $110 = $i;
       $111 = (($lent) + ($110<<2)|0);
       $112 = HEAP16[$111>>1]|0;
       $113 = $112&65535;
       $114 = (($113) - 49)|0;
       $115 = $c;
       $116 = (($len) + ($115<<1)|0);
       $117 = HEAP16[$116>>1]|0;
       $118 = $117&65535;
       $119 = (611510 + ($118)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = $120 << 24 >> 24;
       $122 = (($114) + ($121))|0;
       $125 = $122;
      } else {
       $123 = (_ph1_bithuff(4,0)|0);
       $125 = $123;
      }
      $124 = $125&65535;
      $126 = $c;
      $127 = (($len) + ($126<<1)|0);
      HEAP16[$127>>1] = $124;
      $128 = $i;
      $129 = (($lent) + ($128<<2)|0);
      $130 = ((($129)) + 2|0);
      $131 = HEAP16[$130>>1]|0;
      $132 = $i;
      $133 = (($lent) + ($132<<2)|0);
      HEAP16[$133>>1] = $131;
      $134 = $c;
      $135 = (($len) + ($134<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $i;
      $138 = (($lent) + ($137<<2)|0);
      $139 = ((($138)) + 2|0);
      HEAP16[$139>>1] = $136;
      $140 = $c;
      $141 = (($140) + 1)|0;
      $c = $141;
     }
    }
   } while(0);
   $c = 0;
   while(1) {
    $142 = $c;
    $143 = ($142|0)<(16);
    $144 = $tab;
    if (!($143)) {
     break;
    }
    $145 = $c;
    $146 = $145 & 7;
    $147 = $146 << 1;
    $148 = $c;
    $149 = $148 >> 3;
    $150 = $147 ^ $149;
    $151 = $row;
    $152 = $151 & 1;
    $153 = $150 ^ $152;
    $154 = (($144) + ($153))|0;
    $col = $154;
    $155 = $pmode;
    $156 = ($155|0)==(7);
    $157 = $row;
    $158 = ($157|0)<(2);
    $or$cond = $156 | $158;
    do {
     if ($or$cond) {
      $159 = $tab;
      $160 = ($159|0)!=(0);
      if ($160) {
       $161 = $row;
       $162 = HEAP16[580226>>1]|0;
       $163 = $162&65535;
       $164 = Math_imul($161, $163)|0;
       $165 = $tab;
       $166 = (($165) - 2)|0;
       $167 = $col;
       $168 = $167 & 1;
       $169 = (($166) + ($168))|0;
       $170 = (($164) + ($169))|0;
       $171 = HEAP32[1032>>2]|0;
       $172 = (($171) + ($170<<1)|0);
       $173 = HEAP16[$172>>1]|0;
       $174 = $173&65535;
       $207 = $174;
       break;
      } else {
       $175 = $init;
       $207 = $175;
       break;
      }
     } else {
      $176 = $col;
      $177 = (($176) - 52)|0;
      $178 = $pmode;
      $179 = (611514 + ($178)|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180 << 24 >> 24;
      $182 = (($177) + ($181))|0;
      $183 = $col;
      $184 = $183 & 1;
      $185 = (($prow) + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (($186) + ($182<<1)|0);
      $188 = HEAP16[$187>>1]|0;
      $189 = $188&65535;
      $190 = $col;
      $191 = (($190) - 52)|0;
      $192 = $pmode;
      $193 = (611522 + ($192)|0);
      $194 = HEAP8[$193>>0]|0;
      $195 = $194 << 24 >> 24;
      $196 = (($191) + ($195))|0;
      $197 = $col;
      $198 = $197 & 1;
      $199 = (($prow) + ($198<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200) + ($196<<1)|0);
      $202 = HEAP16[$201>>1]|0;
      $203 = $202&65535;
      $204 = (($189) + ($203))|0;
      $205 = (($204) + 1)|0;
      $206 = $205 >> 1;
      $207 = $206;
     }
    } while(0);
    $pred = $207;
    $208 = $c;
    $209 = $208 >> 2;
    $210 = (($len) + ($209<<1)|0);
    $211 = HEAP16[$210>>1]|0;
    $212 = $211&65535;
    $i = $212;
    $213 = (_ph1_bithuff($212,0)|0);
    $diff = $213;
    $214 = $diff;
    $215 = $i;
    $216 = (($215) - 1)|0;
    $217 = $214 >> $216;
    $218 = ($217|0)!=(0);
    if ($218) {
     $219 = $i;
     $220 = 1 << $219;
     $221 = $diff;
     $222 = (($221) - ($220))|0;
     $diff = $222;
    }
    $223 = $diff;
    $224 = $mag;
    $225 = $224<<1;
    $226 = (($225) + 1)|0;
    $227 = Math_imul($223, $226)|0;
    $228 = $mag;
    $229 = (($227) + ($228))|0;
    $diff = $229;
    $230 = $pred;
    $231 = $diff;
    $232 = (($230) + ($231))|0;
    $233 = $232&65535;
    $234 = $row;
    $235 = HEAP16[580226>>1]|0;
    $236 = $235&65535;
    $237 = Math_imul($234, $236)|0;
    $238 = $col;
    $239 = (($237) + ($238))|0;
    $240 = HEAP32[1032>>2]|0;
    $241 = (($240) + ($239<<1)|0);
    HEAP16[$241>>1] = $233;
    $242 = $c;
    $243 = (($242) + 1)|0;
    $c = $243;
   }
   $244 = (($144) + 16)|0;
   $tab = $244;
  }
  $245 = $row;
  $246 = (($245) + 1)|0;
  $row = $246;
 }
 STACKTOP = sp;return;
}
function _smal_decode_segment($seg,$holes) {
 $seg = $seg|0;
 $holes = $holes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bin = 0, $carry = 0, $count = 0, $data = 0, $diff = 0, $high = 0, $hist = 0, $i = 0, $low = 0, $nbits = 0, $next = 0, $pix = 0, $pred = 0, $range = 0, $s = 0;
 var $sym = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hist = sp + 67|0;
 $sym = sp;
 $pred = sp + 64|0;
 $0 = $seg;
 $1 = $holes;
 dest=$hist; src=611530; stop=dest+39|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $high = 255;
 $carry = 0;
 $nbits = 8;
 ;HEAP8[$pred>>0]=0|0;HEAP8[$pred+1>>0]=0|0;
 $data = 0;
 $range = 0;
 $2 = HEAP32[944>>2]|0;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 (_fseek($2,$6,0)|0);
 (_getbithuff(-1,0)|0);
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP16[580226>>1]|0;
 $11 = $10&65535;
 $12 = HEAP16[580244>>1]|0;
 $13 = $12&65535;
 $14 = Math_imul($11, $13)|0;
 $15 = ($9>>>0)>($14>>>0);
 if ($15) {
  $16 = HEAP16[580226>>1]|0;
  $17 = $16&65535;
  $18 = HEAP16[580244>>1]|0;
  $19 = $18&65535;
  $20 = Math_imul($17, $19)|0;
  $21 = $0;
  $22 = ((($21)) + 8|0);
  HEAP32[$22>>2] = $20;
 }
 $23 = $0;
 $24 = HEAP32[$23>>2]|0;
 $pix = $24;
 while(1) {
  $25 = $pix;
  $26 = $0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $s = 0;
  while(1) {
   $30 = $s;
   $31 = ($30|0)<(3);
   if (!($31)) {
    break;
   }
   $32 = $data;
   $33 = $32&65535;
   $34 = $nbits;
   $35 = $33 << $34;
   $36 = $nbits;
   $37 = (_getbithuff($36,0)|0);
   $38 = $35 | $37;
   $39 = $38&65535;
   $data = $39;
   $40 = $carry;
   $41 = ($40|0)<(0);
   if ($41) {
    $42 = $carry;
    $43 = (($42) + 1)|0;
    $44 = $nbits;
    $45 = (($44) + ($43))|0;
    $nbits = $45;
    $46 = ($45|0)<(1);
    $47 = $nbits;
    $48 = (($47) - 1)|0;
    $49 = $46 ? $48 : 0;
    $carry = $49;
   }
   while(1) {
    $50 = $nbits;
    $51 = (($50) + -1)|0;
    $nbits = $51;
    $52 = ($51|0)>=(0);
    if (!($52)) {
     break;
    }
    $53 = $data;
    $54 = $53&65535;
    $55 = $nbits;
    $56 = $54 >> $55;
    $57 = $56 & 255;
    $58 = ($57|0)==(255);
    if ($58) {
     break;
    }
   }
   $59 = $nbits;
   $60 = ($59|0)>(0);
   if ($60) {
    $61 = $data;
    $62 = $61&65535;
    $63 = $nbits;
    $64 = (($63) - 1)|0;
    $65 = 1 << $64;
    $66 = (($65) - 1)|0;
    $67 = $62 & $66;
    $68 = $67 << 1;
    $69 = $data;
    $70 = $69&65535;
    $71 = $data;
    $72 = $71&65535;
    $73 = $nbits;
    $74 = (($73) - 1)|0;
    $75 = 1 << $74;
    $76 = $72 & $75;
    $77 = $76 << 1;
    $78 = (($70) + ($77))|0;
    $79 = $nbits;
    $80 = -1 << $79;
    $81 = $78 & $80;
    $82 = $68 | $81;
    $83 = $82&65535;
    $data = $83;
   }
   $84 = $nbits;
   $85 = ($84|0)>=(0);
   if ($85) {
    $86 = (_getbithuff(1,0)|0);
    $87 = $data;
    $88 = $87&65535;
    $89 = (($88) + ($86))|0;
    $90 = $89&65535;
    $data = $90;
    $91 = $nbits;
    $92 = (($91) - 8)|0;
    $carry = $92;
   }
   $93 = $data;
   $94 = $93&65535;
   $95 = $range;
   $96 = $95&65535;
   $97 = (($94) - ($96))|0;
   $98 = (($97) + 1)|0;
   $99 = $98 & 65535;
   $100 = $99 << 2;
   $101 = (($100) - 1)|0;
   $102 = $high;
   $103 = $102 >> 4;
   $104 = (($101|0) / ($103|0))&-1;
   $count = $104;
   $bin = 0;
   while(1) {
    $105 = $bin;
    $106 = (($105) + 5)|0;
    $107 = $s;
    $108 = (($hist) + (($107*13)|0)|0);
    $109 = (($108) + ($106)|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = $count;
    $113 = ($111|0)>($112|0);
    $114 = $bin;
    if (!($113)) {
     break;
    }
    $115 = (($114) + 1)|0;
    $bin = $115;
   }
   $116 = (($114) + 5)|0;
   $117 = $s;
   $118 = (($hist) + (($117*13)|0)|0);
   $119 = (($118) + ($116)|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $high;
   $123 = $122 >> 4;
   $124 = Math_imul($121, $123)|0;
   $125 = $124 >> 2;
   $low = $125;
   $126 = $bin;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $bin;
    $129 = (($128) + 4)|0;
    $130 = $s;
    $131 = (($hist) + (($130*13)|0)|0);
    $132 = (($131) + ($129)|0);
    $133 = HEAP8[$132>>0]|0;
    $134 = $133&255;
    $135 = $high;
    $136 = $135 >> 4;
    $137 = Math_imul($134, $136)|0;
    $138 = $137 >> 2;
    $high = $138;
   }
   $139 = $low;
   $140 = $high;
   $141 = (($140) - ($139))|0;
   $high = $141;
   $nbits = 0;
   while(1) {
    $142 = $high;
    $143 = $nbits;
    $144 = $142 << $143;
    $145 = ($144|0)<(128);
    if (!($145)) {
     break;
    }
    $146 = $nbits;
    $147 = (($146) + 1)|0;
    $nbits = $147;
   }
   $148 = $range;
   $149 = $148&65535;
   $150 = $low;
   $151 = (($149) + ($150))|0;
   $152 = $nbits;
   $153 = $151 << $152;
   $154 = $153&65535;
   $range = $154;
   $155 = $nbits;
   $156 = $high;
   $157 = $156 << $155;
   $high = $157;
   $158 = $s;
   $159 = (($hist) + (($158*13)|0)|0);
   $160 = ((($159)) + 1|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $next = $162;
   $163 = $s;
   $164 = (($hist) + (($163*13)|0)|0);
   $165 = ((($164)) + 2|0);
   $166 = HEAP8[$165>>0]|0;
   $167 = (($166) + 1)<<24>>24;
   HEAP8[$165>>0] = $167;
   $168 = $167&255;
   $169 = $s;
   $170 = (($hist) + (($169*13)|0)|0);
   $171 = ((($170)) + 3|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = ($168|0)>($173|0);
   if ($174) {
    $175 = $next;
    $176 = (($175) + 1)|0;
    $177 = $s;
    $178 = (($hist) + (($177*13)|0)|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = $179&255;
    $181 = $176 & $180;
    $next = $181;
    $182 = $next;
    $183 = (($182) + 4)|0;
    $184 = $s;
    $185 = (($hist) + (($184*13)|0)|0);
    $186 = (($185) + ($183)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $next;
    $190 = (($189) + 5)|0;
    $191 = $s;
    $192 = (($hist) + (($191*13)|0)|0);
    $193 = (($192) + ($190)|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $194&255;
    $196 = (($188) - ($195))|0;
    $197 = $196 >> 2;
    $198 = $197&255;
    $199 = $s;
    $200 = (($hist) + (($199*13)|0)|0);
    $201 = ((($200)) + 3|0);
    HEAP8[$201>>0] = $198;
    $202 = $s;
    $203 = (($hist) + (($202*13)|0)|0);
    $204 = ((($203)) + 2|0);
    HEAP8[$204>>0] = 1;
   }
   $205 = $s;
   $206 = (($hist) + (($205*13)|0)|0);
   $207 = ((($206)) + 1|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = (($209) + 4)|0;
   $211 = $s;
   $212 = (($hist) + (($211*13)|0)|0);
   $213 = (($212) + ($210)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $s;
   $217 = (($hist) + (($216*13)|0)|0);
   $218 = ((($217)) + 1|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = (($220) + 5)|0;
   $222 = $s;
   $223 = (($hist) + (($222*13)|0)|0);
   $224 = (($223) + ($221)|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = (($215) - ($226))|0;
   $228 = ($227|0)>(1);
   L36: do {
    if ($228) {
     $229 = $bin;
     $230 = $s;
     $231 = (($hist) + (($230*13)|0)|0);
     $232 = ((($231)) + 1|0);
     $233 = HEAP8[$232>>0]|0;
     $234 = $233&255;
     $235 = ($229|0)<($234|0);
     if ($235) {
      $236 = $bin;
      $i = $236;
      while(1) {
       $237 = $i;
       $238 = $s;
       $239 = (($hist) + (($238*13)|0)|0);
       $240 = ((($239)) + 1|0);
       $241 = HEAP8[$240>>0]|0;
       $242 = $241&255;
       $243 = ($237|0)<($242|0);
       if (!($243)) {
        break L36;
       }
       $244 = $i;
       $245 = (($244) + 5)|0;
       $246 = $s;
       $247 = (($hist) + (($246*13)|0)|0);
       $248 = (($247) + ($245)|0);
       $249 = HEAP8[$248>>0]|0;
       $250 = (($249) + -1)<<24>>24;
       HEAP8[$248>>0] = $250;
       $251 = $i;
       $252 = (($251) + 1)|0;
       $i = $252;
      }
     }
     $253 = $next;
     $254 = $bin;
     $255 = ($253|0)<=($254|0);
     if ($255) {
      $256 = $s;
      $257 = (($hist) + (($256*13)|0)|0);
      $258 = ((($257)) + 1|0);
      $259 = HEAP8[$258>>0]|0;
      $260 = $259&255;
      $i = $260;
      while(1) {
       $261 = $i;
       $262 = $bin;
       $263 = ($261|0)<($262|0);
       if (!($263)) {
        break L36;
       }
       $264 = $i;
       $265 = (($264) + 5)|0;
       $266 = $s;
       $267 = (($hist) + (($266*13)|0)|0);
       $268 = (($267) + ($265)|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = (($269) + 1)<<24>>24;
       HEAP8[$268>>0] = $270;
       $271 = $i;
       $272 = (($271) + 1)|0;
       $i = $272;
      }
     }
    }
   } while(0);
   $273 = $next;
   $274 = $273&255;
   $275 = $s;
   $276 = (($hist) + (($275*13)|0)|0);
   $277 = ((($276)) + 1|0);
   HEAP8[$277>>0] = $274;
   $278 = $bin;
   $279 = $s;
   $280 = (($sym) + ($279<<2)|0);
   HEAP32[$280>>2] = $278;
   $281 = $s;
   $282 = (($281) + 1)|0;
   $s = $282;
  }
  $283 = ((($sym)) + 8|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $284 << 5;
  $286 = ((($sym)) + 4|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = $287 << 2;
  $289 = $285 | $288;
  $290 = HEAP32[$sym>>2]|0;
  $291 = $290 & 3;
  $292 = $289 | $291;
  $293 = $292&255;
  $diff = $293;
  $294 = HEAP32[$sym>>2]|0;
  $295 = $294 & 4;
  $296 = ($295|0)!=(0);
  if ($296) {
   $297 = $diff;
   $298 = $297&255;
   $299 = ($298|0)!=(0);
   if ($299) {
    $300 = $diff;
    $301 = $300&255;
    $302 = (0 - ($301))|0;
    $304 = $302;
   } else {
    $304 = 128;
   }
   $303 = $304&255;
   $diff = $303;
  }
  $305 = HEAP32[944>>2]|0;
  $306 = (_ftell($305)|0);
  $307 = (($306) + 12)|0;
  $308 = $0;
  $309 = ((($308)) + 8|0);
  $310 = ((($309)) + 4|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = ($307>>>0)>=($311>>>0);
  if ($312) {
   $diff = 0;
  }
  $313 = $diff;
  $314 = $313&255;
  $315 = $pix;
  $316 = $315 & 1;
  $317 = (($pred) + ($316)|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = $318&255;
  $320 = (($319) + ($314))|0;
  $321 = $320&255;
  HEAP8[$317>>0] = $321;
  $322 = $321&255;
  $323 = $pix;
  $324 = HEAP32[1032>>2]|0;
  $325 = (($324) + ($323<<1)|0);
  HEAP16[$325>>1] = $322;
  $326 = $pix;
  $327 = $326 & 1;
  $328 = ($327|0)!=(0);
  if (!($328)) {
   $329 = $1;
   $330 = $pix;
   $331 = HEAP16[580226>>1]|0;
   $332 = $331&65535;
   $333 = (($330|0) / ($332|0))&-1;
   $334 = HEAP16[580244>>1]|0;
   $335 = $334&65535;
   $336 = (($333) - ($335))|0;
   $337 = $336 & 7;
   $338 = $329 >> $337;
   $339 = $338 & 1;
   $340 = ($339|0)!=(0);
   if ($340) {
    $341 = $pix;
    $342 = (($341) + 2)|0;
    $pix = $342;
   }
  }
  $343 = $pix;
  $344 = (($343) + 1)|0;
  $pix = $344;
 }
 HEAP32[1040>>2] = 255;
 STACKTOP = sp;return;
}
function _smal_v6_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $seg = sp;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,16,0)|0);
 HEAP32[$seg>>2] = 0;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $3 = ((($seg)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP16[580226>>1]|0;
 $5 = $4&65535;
 $6 = HEAP16[580244>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($5, $7)|0;
 $9 = ((($seg)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($seg)) + 8|0);
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 2147483647;
 _smal_decode_segment($seg,0);
 STACKTOP = sp;return;
}
function _median4($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $max = 0, $min = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $sum = $2;
 $max = $2;
 $min = $2;
 $i = 1;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $sum;
  $10 = (($9) + ($8))|0;
  $sum = $10;
  $11 = $min;
  $12 = $i;
  $13 = $0;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($11|0)>($15|0);
  if ($16) {
   $17 = $i;
   $18 = $0;
   $19 = (($18) + ($17<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $min = $20;
  }
  $21 = $max;
  $22 = $i;
  $23 = $0;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)<($25|0);
  if ($26) {
   $27 = $i;
   $28 = $0;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $max = $30;
  }
  $31 = $i;
  $32 = (($31) + 1)|0;
  $i = $32;
 }
 $33 = $sum;
 $34 = $min;
 $35 = (($33) - ($34))|0;
 $36 = $max;
 $37 = (($35) - ($36))|0;
 $38 = $37 >> 1;
 STACKTOP = sp;return ($38|0);
}
function _fill_holes($holes) {
 $holes = $holes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $col = 0, $row = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp;
 $0 = $holes;
 $row = 2;
 while(1) {
  $1 = $row;
  $2 = HEAP16[580074>>1]|0;
  $3 = $2&65535;
  $4 = (($3) - 2)|0;
  $5 = ($1|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = $row;
  $8 = HEAP16[580244>>1]|0;
  $9 = $8&65535;
  $10 = (($7) - ($9))|0;
  $11 = $10 & 7;
  $12 = $6 >> $11;
  $13 = $12 & 1;
  $14 = ($13|0)!=(0);
  L4: do {
   if ($14) {
    $col = 1;
    while(1) {
     $15 = $col;
     $16 = HEAP16[580076>>1]|0;
     $17 = $16&65535;
     $18 = (($17) - 1)|0;
     $19 = ($15|0)<($18|0);
     if (!($19)) {
      break;
     }
     $20 = $row;
     $21 = (($20) - 1)|0;
     $22 = HEAP16[580226>>1]|0;
     $23 = $22&65535;
     $24 = Math_imul($21, $23)|0;
     $25 = $col;
     $26 = (($25) - 1)|0;
     $27 = (($24) + ($26))|0;
     $28 = HEAP32[1032>>2]|0;
     $29 = (($28) + ($27<<1)|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = $30&65535;
     HEAP32[$val>>2] = $31;
     $32 = $row;
     $33 = (($32) - 1)|0;
     $34 = HEAP16[580226>>1]|0;
     $35 = $34&65535;
     $36 = Math_imul($33, $35)|0;
     $37 = $col;
     $38 = (($37) + 1)|0;
     $39 = (($36) + ($38))|0;
     $40 = HEAP32[1032>>2]|0;
     $41 = (($40) + ($39<<1)|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = $42&65535;
     $44 = ((($val)) + 4|0);
     HEAP32[$44>>2] = $43;
     $45 = $row;
     $46 = (($45) + 1)|0;
     $47 = HEAP16[580226>>1]|0;
     $48 = $47&65535;
     $49 = Math_imul($46, $48)|0;
     $50 = $col;
     $51 = (($50) - 1)|0;
     $52 = (($49) + ($51))|0;
     $53 = HEAP32[1032>>2]|0;
     $54 = (($53) + ($52<<1)|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = $55&65535;
     $57 = ((($val)) + 8|0);
     HEAP32[$57>>2] = $56;
     $58 = $row;
     $59 = (($58) + 1)|0;
     $60 = HEAP16[580226>>1]|0;
     $61 = $60&65535;
     $62 = Math_imul($59, $61)|0;
     $63 = $col;
     $64 = (($63) + 1)|0;
     $65 = (($62) + ($64))|0;
     $66 = HEAP32[1032>>2]|0;
     $67 = (($66) + ($65<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68&65535;
     $70 = ((($val)) + 12|0);
     HEAP32[$70>>2] = $69;
     $71 = (_median4($val)|0);
     $72 = $71&65535;
     $73 = $row;
     $74 = HEAP16[580226>>1]|0;
     $75 = $74&65535;
     $76 = Math_imul($73, $75)|0;
     $77 = $col;
     $78 = (($76) + ($77))|0;
     $79 = HEAP32[1032>>2]|0;
     $80 = (($79) + ($78<<1)|0);
     HEAP16[$80>>1] = $72;
     $81 = $col;
     $82 = (($81) + 4)|0;
     $col = $82;
    }
    $col = 2;
    while(1) {
     $83 = $col;
     $84 = HEAP16[580076>>1]|0;
     $85 = $84&65535;
     $86 = (($85) - 2)|0;
     $87 = ($83|0)<($86|0);
     if (!($87)) {
      break L4;
     }
     $88 = $0;
     $89 = $row;
     $90 = (($89) - 2)|0;
     $91 = HEAP16[580244>>1]|0;
     $92 = $91&65535;
     $93 = (($90) - ($92))|0;
     $94 = $93 & 7;
     $95 = $88 >> $94;
     $96 = $95 & 1;
     $97 = ($96|0)!=(0);
     if ($97) {
      label = 11;
     } else {
      $98 = $0;
      $99 = $row;
      $100 = (($99) + 2)|0;
      $101 = HEAP16[580244>>1]|0;
      $102 = $101&65535;
      $103 = (($100) - ($102))|0;
      $104 = $103 & 7;
      $105 = $98 >> $104;
      $106 = $105 & 1;
      $107 = ($106|0)!=(0);
      if ($107) {
       label = 11;
      } else {
       $141 = $row;
       $142 = HEAP16[580226>>1]|0;
       $143 = $142&65535;
       $144 = Math_imul($141, $143)|0;
       $145 = $col;
       $146 = (($145) - 2)|0;
       $147 = (($144) + ($146))|0;
       $148 = HEAP32[1032>>2]|0;
       $149 = (($148) + ($147<<1)|0);
       $150 = HEAP16[$149>>1]|0;
       $151 = $150&65535;
       HEAP32[$val>>2] = $151;
       $152 = $row;
       $153 = HEAP16[580226>>1]|0;
       $154 = $153&65535;
       $155 = Math_imul($152, $154)|0;
       $156 = $col;
       $157 = (($156) + 2)|0;
       $158 = (($155) + ($157))|0;
       $159 = HEAP32[1032>>2]|0;
       $160 = (($159) + ($158<<1)|0);
       $161 = HEAP16[$160>>1]|0;
       $162 = $161&65535;
       $163 = ((($val)) + 4|0);
       HEAP32[$163>>2] = $162;
       $164 = $row;
       $165 = (($164) - 2)|0;
       $166 = HEAP16[580226>>1]|0;
       $167 = $166&65535;
       $168 = Math_imul($165, $167)|0;
       $169 = $col;
       $170 = (($168) + ($169))|0;
       $171 = HEAP32[1032>>2]|0;
       $172 = (($171) + ($170<<1)|0);
       $173 = HEAP16[$172>>1]|0;
       $174 = $173&65535;
       $175 = ((($val)) + 8|0);
       HEAP32[$175>>2] = $174;
       $176 = $row;
       $177 = (($176) + 2)|0;
       $178 = HEAP16[580226>>1]|0;
       $179 = $178&65535;
       $180 = Math_imul($177, $179)|0;
       $181 = $col;
       $182 = (($180) + ($181))|0;
       $183 = HEAP32[1032>>2]|0;
       $184 = (($183) + ($182<<1)|0);
       $185 = HEAP16[$184>>1]|0;
       $186 = $185&65535;
       $187 = ((($val)) + 12|0);
       HEAP32[$187>>2] = $186;
       $188 = (_median4($val)|0);
       $189 = $188&65535;
       $190 = $row;
       $191 = HEAP16[580226>>1]|0;
       $192 = $191&65535;
       $193 = Math_imul($190, $192)|0;
       $194 = $col;
       $195 = (($193) + ($194))|0;
       $196 = HEAP32[1032>>2]|0;
       $197 = (($196) + ($195<<1)|0);
       HEAP16[$197>>1] = $189;
      }
     }
     if ((label|0) == 11) {
      label = 0;
      $108 = $row;
      $109 = HEAP16[580226>>1]|0;
      $110 = $109&65535;
      $111 = Math_imul($108, $110)|0;
      $112 = $col;
      $113 = (($112) - 2)|0;
      $114 = (($111) + ($113))|0;
      $115 = HEAP32[1032>>2]|0;
      $116 = (($115) + ($114<<1)|0);
      $117 = HEAP16[$116>>1]|0;
      $118 = $117&65535;
      $119 = $row;
      $120 = HEAP16[580226>>1]|0;
      $121 = $120&65535;
      $122 = Math_imul($119, $121)|0;
      $123 = $col;
      $124 = (($123) + 2)|0;
      $125 = (($122) + ($124))|0;
      $126 = HEAP32[1032>>2]|0;
      $127 = (($126) + ($125<<1)|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128&65535;
      $130 = (($118) + ($129))|0;
      $131 = $130 >> 1;
      $132 = $131&65535;
      $133 = $row;
      $134 = HEAP16[580226>>1]|0;
      $135 = $134&65535;
      $136 = Math_imul($133, $135)|0;
      $137 = $col;
      $138 = (($136) + ($137))|0;
      $139 = HEAP32[1032>>2]|0;
      $140 = (($139) + ($138<<1)|0);
      HEAP16[$140>>1] = $132;
     }
     $198 = $col;
     $199 = (($198) + 4)|0;
     $col = $199;
    }
   }
  } while(0);
  $200 = $row;
  $201 = (($200) + 1)|0;
  $row = $201;
 }
 STACKTOP = sp;return;
}
function _smal_v9_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $holes = 0, $i = 0, $nseg = 0, $offset = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $seg = sp + 16|0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,67,0)|0);
 $1 = (_get4()|0);
 $offset = $1;
 $2 = HEAP32[944>>2]|0;
 $3 = (_getc_unlocked($2)|0);
 $4 = $3&255;
 $5 = $4&255;
 $nseg = $5;
 $6 = HEAP32[944>>2]|0;
 $7 = $offset;
 (_fseek($6,$7,0)|0);
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $nseg;
  $10 = $9<<1;
  $11 = ($8>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = (_get4()|0);
  $13 = HEAP32[1524>>2]|0;
  $14 = $i;
  $15 = $14 & 1;
  $16 = Math_imul($13, $15)|0;
  $17 = (($12) + ($16))|0;
  $18 = $i;
  $19 = (($seg) + ($18<<2)|0);
  HEAP32[$19>>2] = $17;
  $20 = $i;
  $21 = (($20) + 1)|0;
  $i = $21;
 }
 $22 = HEAP32[944>>2]|0;
 (_fseek($22,78,0)|0);
 $23 = HEAP32[944>>2]|0;
 $24 = (_getc_unlocked($23)|0);
 $holes = $24;
 $25 = HEAP32[944>>2]|0;
 (_fseek($25,88,0)|0);
 $26 = HEAP16[580244>>1]|0;
 $27 = $26&65535;
 $28 = HEAP16[580226>>1]|0;
 $29 = $28&65535;
 $30 = Math_imul($27, $29)|0;
 $31 = $nseg;
 $32 = (($seg) + ($31<<3)|0);
 HEAP32[$32>>2] = $30;
 $33 = (_get4()|0);
 $34 = HEAP32[1524>>2]|0;
 $35 = (($33) + ($34))|0;
 $36 = $nseg;
 $37 = (($seg) + ($36<<3)|0);
 $38 = ((($37)) + 4|0);
 HEAP32[$38>>2] = $35;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $nseg;
  $41 = ($39>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $i;
  $43 = (($seg) + ($42<<3)|0);
  $44 = $holes;
  _smal_decode_segment($43,$44);
  $45 = $i;
  $46 = (($45) + 1)|0;
  $i = $46;
 }
 $47 = $holes;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = $holes;
 _fill_holes($49);
 STACKTOP = sp;return;
}
function _redcine_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _foveon_decoder($size,$code) {
 $size = $size|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $i = 0, $len = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $size;
 $1 = $code;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $i = 0;
  while(1) {
   $4 = $i;
   $5 = $0;
   $6 = ($4>>>0)<($5>>>0);
   if (!($6)) {
    break;
   }
   $7 = (_get4()|0);
   $8 = $i;
   $9 = (2348 + ($8<<2)|0);
   HEAP32[$9>>2] = $7;
   $10 = $i;
   $11 = (($10) + 1)|0;
   $i = $11;
  }
  _memset((6444|0),0,24576)|0;
  HEAP32[31020>>2] = 6444;
 }
 $12 = HEAP32[31020>>2]|0;
 $13 = ((($12)) + 12|0);
 HEAP32[31020>>2] = $13;
 $cur = $12;
 $14 = HEAP32[31020>>2]|0;
 $15 = ($14>>>0)>((31020)>>>0);
 if ($15) {
  $16 = HEAP32[447952>>2]|0;
  $17 = HEAP32[780>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  (_fprintf($16,611569,$vararg_buffer)|0);
  _longjmp((784|0),2);
  // unreachable;
 }
 $18 = $1;
 $19 = ($18|0)!=(0);
 L11: do {
  if ($19) {
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $0;
    $22 = ($20>>>0)<($21>>>0);
    if (!($22)) {
     break L11;
    }
    $23 = $i;
    $24 = (2348 + ($23<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $1;
    $27 = ($25|0)==($26|0);
    $28 = $i;
    if ($27) {
     break;
    }
    $31 = (($28) + 1)|0;
    $i = $31;
   }
   $29 = $cur;
   $30 = ((($29)) + 8|0);
   HEAP32[$30>>2] = $28;
   STACKTOP = sp;return;
  }
 } while(0);
 $32 = $1;
 $33 = $32 >>> 27;
 $len = $33;
 $34 = ($33|0)>(26);
 if ($34) {
  STACKTOP = sp;return;
 }
 $35 = $len;
 $36 = (($35) + 1)|0;
 $37 = $36 << 27;
 $38 = $1;
 $39 = $38 & 67108863;
 $40 = $39 << 1;
 $41 = $37 | $40;
 $1 = $41;
 $42 = HEAP32[31020>>2]|0;
 $43 = $cur;
 HEAP32[$43>>2] = $42;
 $44 = $0;
 $45 = $1;
 _foveon_decoder($44,$45);
 $46 = HEAP32[31020>>2]|0;
 $47 = $cur;
 $48 = ((($47)) + 4|0);
 HEAP32[$48>>2] = $46;
 $49 = $0;
 $50 = $1;
 $51 = (($50) + 1)|0;
 _foveon_decoder($49,$51);
 STACKTOP = sp;return;
}
function _foveon_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $bit = 0, $bitbuf = 0, $buf = 0, $bwide = 0, $c = 0, $col = 0, $dindex = 0, $i = 0, $pred = 0, $row = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pred = sp + 44|0;
 $bitbuf = 0;
 $bit = 1;
 $0 = (_get4()|0);
 $bwide = $0;
 $1 = HEAP32[1676>>2]|0;
 $2 = HEAP16[580260>>1]|0;
 $3 = $2&65535;
 $4 = HEAP16[580262>>1]|0;
 $5 = $4&65535;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_fprintf($1,594415,$vararg_buffer)|0);
 $6 = $bwide;
 $7 = ($6>>>0)>(0);
 if ($7) {
  $8 = $bwide;
  $9 = HEAP16[580260>>1]|0;
  $10 = $9&65535;
  $11 = ($10*3)|0;
  $12 = ($8>>>0)<($11>>>0);
  if ($12) {
   STACKTOP = sp;return;
  }
  $13 = $bwide;
  $14 = (_malloc($13)|0);
  $buf = $14;
  $15 = $buf;
  _merror($15,611597);
  $row = 0;
  while(1) {
   $16 = $row;
   $17 = HEAP16[580262>>1]|0;
   $18 = $17&65535;
   $19 = ($16>>>0)<($18>>>0);
   $20 = $buf;
   if (!($19)) {
    break;
   }
   $21 = $bwide;
   $22 = HEAP32[944>>2]|0;
   (_fread($20,1,$21,$22)|0);
   $23 = $buf;
   $24 = HEAP16[580260>>1]|0;
   $25 = $24&65535;
   $26 = HEAP32[1676>>2]|0;
   (_fwrite($23,3,$25,$26)|0);
   $27 = $row;
   $28 = (($27) + 1)|0;
   $row = $28;
  }
  _free($20);
  STACKTOP = sp;return;
 }
 _foveon_decoder(256,0);
 $row = 0;
 while(1) {
  $29 = $row;
  $30 = HEAP16[580262>>1]|0;
  $31 = $30&65535;
  $32 = ($29>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
  ;HEAP16[$pred>>1]=0|0;HEAP16[$pred+2>>1]=0|0;HEAP16[$pred+4>>1]=0|0;
  $33 = $bit;
  $34 = ($33|0)!=(0);
  if (!($34)) {
   (_get4()|0);
  }
  $col = 0;
  $bit = 0;
  while(1) {
   $35 = $col;
   $36 = HEAP16[580260>>1]|0;
   $37 = $36&65535;
   $38 = ($35>>>0)<($37>>>0);
   if (!($38)) {
    break;
   }
   $c = 0;
   while(1) {
    $39 = $c;
    $40 = ($39>>>0)<(3);
    if (!($40)) {
     break;
    }
    $dindex = 6444;
    while(1) {
     $41 = $dindex;
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)!=(0|0);
     if (!($43)) {
      break;
     }
     $44 = $bit;
     $45 = (($44) - 1)|0;
     $46 = $45 & 31;
     $bit = $46;
     $47 = ($46|0)==(31);
     L27: do {
      if ($47) {
       $i = 0;
       while(1) {
        $48 = $i;
        $49 = ($48>>>0)<(4);
        if (!($49)) {
         break L27;
        }
        $50 = $bitbuf;
        $51 = $50 << 8;
        $52 = HEAP32[944>>2]|0;
        $53 = (_getc_unlocked($52)|0);
        $54 = (($51) + ($53))|0;
        $bitbuf = $54;
        $55 = $i;
        $56 = (($55) + 1)|0;
        $i = $56;
       }
      }
     } while(0);
     $57 = $bitbuf;
     $58 = $bit;
     $59 = $57 >>> $58;
     $60 = $59 & 1;
     $61 = $dindex;
     $62 = (($61) + ($60<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $dindex = $63;
    }
    $64 = $dindex;
    $65 = ((($64)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $c;
    $68 = (($pred) + ($67<<1)|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69 << 16 >> 16;
    $71 = (($70) + ($66))|0;
    $72 = $71&65535;
    HEAP16[$68>>1] = $72;
    $73 = $c;
    $74 = (($pred) + ($73<<1)|0);
    $75 = HEAP16[$74>>1]|0;
    $76 = $75 << 16 >> 16;
    $77 = HEAP32[1676>>2]|0;
    (_fputc($76,$77)|0);
    $78 = $c;
    $79 = (($78) + 1)|0;
    $c = $79;
   }
   $80 = $col;
   $81 = (($80) + 1)|0;
   $col = $81;
  }
  $82 = $row;
  $83 = (($82) + 1)|0;
  $row = $83;
 }
 STACKTOP = sp;return;
}
function _foveon_sd_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $bitbuf = 0, $c = 0, $col = 0, $diff = 0, $dindex = 0, $i = 0, $or$cond = 0, $pred = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $diff = sp + 40|0;
 $pred = sp + 20|0;
 $bitbuf = 0;
 $bit = -1;
 _read_shorts($diff,1024);
 $0 = HEAP32[1068>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  _foveon_decoder(1024,0);
 }
 $row = 0;
 while(1) {
  $2 = $row;
  $3 = HEAP16[580074>>1]|0;
  $4 = $3&65535;
  $5 = ($2|0)<($4|0);
  if (!($5)) {
   break;
  }
  ;HEAP32[$pred>>2]=0|0;HEAP32[$pred+4>>2]=0|0;HEAP32[$pred+8>>2]=0|0;
  $6 = $bit;
  $7 = ($6|0)!=(0);
  $8 = HEAP32[1068>>2]|0;
  $9 = ($8|0)!=(0);
  $or$cond = $7 | $9;
  if (!($or$cond)) {
   $10 = (_atoi((594341))|0);
   $11 = ($10|0)<(14);
   if ($11) {
    (_get4()|0);
   }
  }
  $bit = 0;
  $col = 0;
  while(1) {
   $12 = $col;
   $13 = HEAP16[580076>>1]|0;
   $14 = $13&65535;
   $15 = ($12|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = HEAP32[1068>>2]|0;
   $17 = ($16|0)!=(0);
   L14: do {
    if ($17) {
     $18 = (_get4()|0);
     $bitbuf = $18;
     $c = 0;
     while(1) {
      $19 = $c;
      $20 = ($19|0)<(3);
      if (!($20)) {
       break L14;
      }
      $21 = $bitbuf;
      $22 = $c;
      $23 = ($22*10)|0;
      $24 = $21 >>> $23;
      $25 = $24 & 1023;
      $26 = (($diff) + ($25<<1)|0);
      $27 = HEAP16[$26>>1]|0;
      $28 = $27 << 16 >> 16;
      $29 = $c;
      $30 = (2 - ($29))|0;
      $31 = (($pred) + ($30<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + ($28))|0;
      HEAP32[$31>>2] = $33;
      $34 = $c;
      $35 = (($34) + 1)|0;
      $c = $35;
     }
    } else {
     $c = 0;
     while(1) {
      $36 = $c;
      $37 = ($36|0)<(3);
      if (!($37)) {
       break L14;
      }
      $dindex = 6444;
      while(1) {
       $38 = $dindex;
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)!=(0|0);
       if (!($40)) {
        break;
       }
       $41 = $bit;
       $42 = (($41) - 1)|0;
       $43 = $42 & 31;
       $bit = $43;
       $44 = ($43|0)==(31);
       L26: do {
        if ($44) {
         $i = 0;
         while(1) {
          $45 = $i;
          $46 = ($45|0)<(4);
          if (!($46)) {
           break L26;
          }
          $47 = $bitbuf;
          $48 = $47 << 8;
          $49 = HEAP32[944>>2]|0;
          $50 = (_getc_unlocked($49)|0);
          $51 = (($48) + ($50))|0;
          $bitbuf = $51;
          $52 = $i;
          $53 = (($52) + 1)|0;
          $i = $53;
         }
        }
       } while(0);
       $54 = $bitbuf;
       $55 = $bit;
       $56 = $54 >>> $55;
       $57 = $56 & 1;
       $58 = $dindex;
       $59 = (($58) + ($57<<2)|0);
       $60 = HEAP32[$59>>2]|0;
       $dindex = $60;
      }
      $61 = $dindex;
      $62 = ((($61)) + 8|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($diff) + ($63<<1)|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = $65 << 16 >> 16;
      $67 = $c;
      $68 = (($pred) + ($67<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (($69) + ($66))|0;
      HEAP32[$68>>2] = $70;
      $71 = $c;
      $72 = (($pred) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = $73 >> 16;
      $75 = ($74|0)!=(0);
      if ($75) {
       $76 = $c;
       $77 = (($pred) + ($76<<2)|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = $78 ^ -1;
       $80 = $79 >> 16;
       $81 = ($80|0)!=(0);
       if ($81) {
        _derror();
       }
      }
      $82 = $c;
      $83 = (($82) + 1)|0;
      $c = $83;
     }
    }
   } while(0);
   $c = 0;
   while(1) {
    $84 = $c;
    $85 = ($84|0)<(3);
    if (!($85)) {
     break;
    }
    $86 = $c;
    $87 = (($pred) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88&65535;
    $90 = $c;
    $91 = $row;
    $92 = HEAP16[580076>>1]|0;
    $93 = $92&65535;
    $94 = Math_imul($91, $93)|0;
    $95 = $col;
    $96 = (($94) + ($95))|0;
    $97 = HEAP32[972>>2]|0;
    $98 = (($97) + ($96<<3)|0);
    $99 = (($98) + ($90<<1)|0);
    HEAP16[$99>>1] = $89;
    $100 = $c;
    $101 = (($100) + 1)|0;
    $c = $101;
   }
   $102 = $col;
   $103 = (($102) + 1)|0;
   $col = $103;
  }
  $104 = $row;
  $105 = (($104) + 1)|0;
  $row = $105;
 }
 STACKTOP = sp;return;
}
function _foveon_huff($huff) {
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clen = 0, $code = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $huff;
 $1 = $0;
 HEAP16[$1>>1] = 8;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(13);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[944>>2]|0;
  $5 = (_getc($4)|0);
  $clen = $5;
  $6 = HEAP32[944>>2]|0;
  $7 = (_getc($6)|0);
  $code = $7;
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = $clen;
   $10 = 256 >> $9;
   $11 = ($8|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = $clen;
   $13 = $12 << 8;
   $14 = $i;
   $15 = $13 | $14;
   $16 = $15&65535;
   $17 = $code;
   $18 = $j;
   $19 = (($18) + 1)|0;
   $j = $19;
   $20 = (($17) + ($19))|0;
   $21 = $0;
   $22 = (($21) + ($20<<1)|0);
   HEAP16[$22>>1] = $16;
  }
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 (_get2()|0);
 STACKTOP = sp;return;
}
function _foveon_dp_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $c = 0, $col = 0, $diff = 0;
 var $hpred = 0, $huff = 0, $roff = 0, $row = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $roff = sp + 16|0;
 $huff = sp + 48|0;
 $vpred = sp + 40|0;
 $hpred = sp + 36|0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,8,1)|0);
 _foveon_huff($huff);
 HEAP32[$roff>>2] = 48;
 $c = 0;
 while(1) {
  $1 = $c;
  $2 = ($1>>>0)<(3);
  if (!($2)) {
   break;
  }
  $3 = $c;
  $4 = (($roff) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_get4()|0);
  $7 = (($5) + ($6))|0;
  $8 = (0 - ($7))|0;
  $9 = $8 & -16;
  $10 = (0 - ($9))|0;
  $11 = $c;
  $12 = (($11) + 1)|0;
  $13 = (($roff) + ($12<<2)|0);
  HEAP32[$13>>2] = $10;
  $14 = $c;
  $15 = (($14) + 1)|0;
  $c = $15;
 }
 $c = 0;
 while(1) {
  $16 = $c;
  $17 = ($16>>>0)<(3);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[944>>2]|0;
  $19 = HEAP32[1524>>2]|0;
  $20 = $c;
  $21 = (($roff) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19) + ($22))|0;
  (_fseek($18,$23,0)|0);
  (_getbithuff(-1,0)|0);
  $24 = ((($vpred)) + 4|0);
  $25 = ((($24)) + 2|0);
  HEAP16[$25>>1] = 512;
  $26 = ((($vpred)) + 4|0);
  HEAP16[$26>>1] = 512;
  $27 = ((($vpred)) + 2|0);
  HEAP16[$27>>1] = 512;
  HEAP16[$vpred>>1] = 512;
  $row = 0;
  while(1) {
   $28 = $row;
   $29 = HEAP16[580074>>1]|0;
   $30 = $29&65535;
   $31 = ($28>>>0)<($30>>>0);
   if (!($31)) {
    break;
   }
   $col = 0;
   while(1) {
    $32 = $col;
    $33 = HEAP16[580076>>1]|0;
    $34 = $33&65535;
    $35 = ($32>>>0)<($34>>>0);
    if (!($35)) {
     break;
    }
    $36 = (_ljpeg_diff($huff)|0);
    $diff = $36;
    $37 = $col;
    $38 = ($37>>>0)<(2);
    $39 = $diff;
    $40 = $col;
    if ($38) {
     $41 = $row;
     $42 = $41 & 1;
     $43 = (($vpred) + ($42<<2)|0);
     $44 = (($43) + ($40<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = (($46) + ($39))|0;
     $48 = $47&65535;
     HEAP16[$44>>1] = $48;
     $49 = $col;
     $50 = (($hpred) + ($49<<1)|0);
     HEAP16[$50>>1] = $48;
    } else {
     $51 = $40 & 1;
     $52 = (($hpred) + ($51<<1)|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53&65535;
     $55 = (($54) + ($39))|0;
     $56 = $55&65535;
     HEAP16[$52>>1] = $56;
    }
    $57 = $col;
    $58 = $57 & 1;
    $59 = (($hpred) + ($58<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $c;
    $62 = $row;
    $63 = HEAP16[580076>>1]|0;
    $64 = $63&65535;
    $65 = Math_imul($62, $64)|0;
    $66 = $col;
    $67 = (($65) + ($66))|0;
    $68 = HEAP32[972>>2]|0;
    $69 = (($68) + ($67<<3)|0);
    $70 = (($69) + ($61<<1)|0);
    HEAP16[$70>>1] = $60;
    $71 = $col;
    $72 = (($71) + 1)|0;
    $col = $72;
   }
   $73 = $row;
   $74 = (($73) + 1)|0;
   $row = $74;
  }
  $75 = $c;
  $76 = (($75) + 1)|0;
  $c = $76;
 }
 STACKTOP = sp;return;
}
function _foveon_load_camf() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $diff = 0, $high = 0, $hpred = 0, $huff = 0, $i = 0;
 var $j = 0, $row = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vpred = 0, $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $huff = sp + 56|0;
 $vpred = sp + 48|0;
 $hpred = sp + 40|0;
 ;HEAP16[$vpred>>1]=HEAP16[589154>>1]|0;HEAP16[$vpred+2>>1]=HEAP16[589154+2>>1]|0;HEAP16[$vpred+4>>1]=HEAP16[589154+4>>1]|0;HEAP16[$vpred+6>>1]=HEAP16[589154+6>>1]|0;
 $0 = HEAP32[944>>2]|0;
 $1 = HEAP32[1520>>2]|0;
 (_fseek($0,$1,0)|0);
 $2 = (_get4()|0);
 $type = $2;
 (_get4()|0);
 (_get4()|0);
 $3 = (_get4()|0);
 $wide = $3;
 $4 = (_get4()|0);
 $high = $4;
 $5 = $type;
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = HEAP32[31024>>2]|0;
  $8 = HEAP32[1684>>2]|0;
  $9 = HEAP32[944>>2]|0;
  (_fread($7,1,$8,$9)|0);
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = HEAP32[1684>>2]|0;
   $12 = ($10>>>0)<($11>>>0);
   if (!($12)) {
    break;
   }
   $13 = $high;
   $14 = ($13*1597)|0;
   $15 = (($14) + 51749)|0;
   $16 = (($15>>>0) % 244944)&-1;
   $high = $16;
   $17 = $high;
   $18 = (___muldi3(($17|0),0,301593171,0)|0);
   $19 = tempRet0;
   $20 = (_bitshift64Ashr(($18|0),($19|0),24)|0);
   $21 = tempRet0;
   $wide = $20;
   $22 = $high;
   $23 = $22 << 8;
   $24 = $wide;
   $25 = (($23) - ($24))|0;
   $26 = $25 >>> 1;
   $27 = $wide;
   $28 = (($26) + ($27))|0;
   $29 = $28 >>> 17;
   $30 = $i;
   $31 = HEAP32[31024>>2]|0;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = $34 ^ $29;
   $36 = $35&255;
   HEAP8[$32>>0] = $36;
   $37 = $i;
   $38 = (($37) + 1)|0;
   $i = $38;
  }
  STACKTOP = sp;return;
 }
 $39 = $type;
 $40 = ($39|0)==(4);
 if (!($40)) {
  $111 = HEAP32[447952>>2]|0;
  $112 = HEAP32[780>>2]|0;
  $113 = $type;
  HEAP32[$vararg_buffer>>2] = $112;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $113;
  (_fprintf($111,611631,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $41 = HEAP32[31024>>2]|0;
 _free($41);
 $42 = $wide;
 $43 = $high;
 $44 = Math_imul($42, $43)|0;
 $45 = ($44*3)|0;
 $46 = (($45>>>0) / 2)&-1;
 HEAP32[1684>>2] = $46;
 $47 = (_malloc($46)|0);
 HEAP32[31024>>2] = $47;
 $48 = HEAP32[31024>>2]|0;
 _merror($48,611612);
 _foveon_huff($huff);
 (_get4()|0);
 (_getbithuff(-1,0)|0);
 $row = 0;
 $j = 0;
 while(1) {
  $49 = $row;
  $50 = $high;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $col = 0;
  while(1) {
   $52 = $col;
   $53 = $wide;
   $54 = ($52>>>0)<($53>>>0);
   if (!($54)) {
    break;
   }
   $55 = (_ljpeg_diff($huff)|0);
   $diff = $55;
   $56 = $col;
   $57 = ($56>>>0)<(2);
   $58 = $diff;
   $59 = $col;
   if ($57) {
    $60 = $row;
    $61 = $60 & 1;
    $62 = (($vpred) + ($61<<2)|0);
    $63 = (($62) + ($59<<1)|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64&65535;
    $66 = (($65) + ($58))|0;
    $67 = $66&65535;
    HEAP16[$63>>1] = $67;
    $68 = $col;
    $69 = (($hpred) + ($68<<1)|0);
    HEAP16[$69>>1] = $67;
   } else {
    $70 = $59 & 1;
    $71 = (($hpred) + ($70<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    $73 = $72&65535;
    $74 = (($73) + ($58))|0;
    $75 = $74&65535;
    HEAP16[$71>>1] = $75;
   }
   $76 = $col;
   $77 = $76 & 1;
   $78 = ($77|0)!=(0);
   if ($78) {
    $79 = HEAP16[$hpred>>1]|0;
    $80 = $79&65535;
    $81 = $80 >> 4;
    $82 = $81&255;
    $83 = $j;
    $84 = (($83) + 1)|0;
    $j = $84;
    $85 = HEAP32[31024>>2]|0;
    $86 = (($85) + ($83)|0);
    HEAP8[$86>>0] = $82;
    $87 = HEAP16[$hpred>>1]|0;
    $88 = $87&65535;
    $89 = $88 << 4;
    $90 = ((($hpred)) + 2|0);
    $91 = HEAP16[$90>>1]|0;
    $92 = $91&65535;
    $93 = $92 >> 8;
    $94 = $89 | $93;
    $95 = $94&255;
    $96 = $j;
    $97 = (($96) + 1)|0;
    $j = $97;
    $98 = HEAP32[31024>>2]|0;
    $99 = (($98) + ($96)|0);
    HEAP8[$99>>0] = $95;
    $100 = ((($hpred)) + 2|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = $101&255;
    $103 = $j;
    $104 = (($103) + 1)|0;
    $j = $104;
    $105 = HEAP32[31024>>2]|0;
    $106 = (($105) + ($103)|0);
    HEAP8[$106>>0] = $102;
   }
   $107 = $col;
   $108 = (($107) + 1)|0;
   $col = $108;
  }
  $109 = $row;
  $110 = (($109) + 1)|0;
  $row = $110;
 }
 STACKTOP = sp;return;
}
function _foveon_camf_param($block,$param) {
 $block = $block|0;
 $param = $param|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cp = 0, $dp = 0, $idx = 0, $num = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $block;
 $2 = $param;
 $idx = 0;
 L1: while(1) {
  $3 = $idx;
  $4 = HEAP32[1684>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   label = 11;
   break;
  }
  $6 = HEAP32[31024>>2]|0;
  $7 = $idx;
  $8 = (($6) + ($7)|0);
  $pos = $8;
  $9 = $pos;
  $10 = (_strncmp($9,611661,3)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   label = 11;
   break;
  }
  $12 = $pos;
  $13 = ((($12)) + 3|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(80);
  L5: do {
   if (!($16)) {
    $17 = $1;
    $18 = $pos;
    $19 = $pos;
    $20 = ((($19)) + 12|0);
    $21 = (_sget4($20)|0);
    $22 = (($18) + ($21)|0);
    $23 = (_strcmp($17,$22)|0);
    $24 = ($23|0)!=(0);
    if (!($24)) {
     $25 = $pos;
     $26 = $pos;
     $27 = ((($26)) + 16|0);
     $28 = (_sget4($27)|0);
     $29 = (($25) + ($28)|0);
     $cp = $29;
     $30 = $cp;
     $31 = (_sget4($30)|0);
     $num = $31;
     $32 = $pos;
     $33 = $cp;
     $34 = ((($33)) + 4|0);
     $35 = (_sget4($34)|0);
     $36 = (($32) + ($35)|0);
     $dp = $36;
     while(1) {
      $37 = $num;
      $38 = (($37) + -1)|0;
      $num = $38;
      $39 = ($37|0)!=(0);
      if (!($39)) {
       break L5;
      }
      $40 = $cp;
      $41 = ((($40)) + 8|0);
      $cp = $41;
      $42 = $2;
      $43 = $dp;
      $44 = $cp;
      $45 = (_sget4($44)|0);
      $46 = (($43) + ($45)|0);
      $47 = (_strcmp($42,$46)|0);
      $48 = ($47|0)!=(0);
      if (!($48)) {
       label = 9;
       break L1;
      }
     }
    }
   }
  } while(0);
  $54 = $pos;
  $55 = ((($54)) + 8|0);
  $56 = (_sget4($55)|0);
  $57 = $idx;
  $58 = (($57) + ($56))|0;
  $idx = $58;
 }
 if ((label|0) == 9) {
  $49 = $dp;
  $50 = $cp;
  $51 = ((($50)) + 4|0);
  $52 = (_sget4($51)|0);
  $53 = (($49) + ($52)|0);
  $0 = $53;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _foveon_camf_matrix($dim,$name) {
 $dim = $dim|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp = 0, $dp = 0, $dsize = 0.0, $i = 0, $idx = 0, $mat = 0, $ndim = 0;
 var $or$cond = 0, $pos = 0, $size = 0, $type = 0, $vararg_buffer = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $1 = $dim;
 $2 = $name;
 $idx = 0;
 while(1) {
  $3 = $idx;
  $4 = HEAP32[1684>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[31024>>2]|0;
  $7 = $idx;
  $8 = (($6) + ($7)|0);
  $pos = $8;
  $9 = $pos;
  $10 = (_strncmp($9,611661,3)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   break;
  }
  $12 = $pos;
  $13 = ((($12)) + 3|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(77);
  if (!($16)) {
   $17 = $2;
   $18 = $pos;
   $19 = $pos;
   $20 = ((($19)) + 12|0);
   $21 = (_sget4($20)|0);
   $22 = (($18) + ($21)|0);
   $23 = (_strcmp($17,$22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    label = 6;
    break;
   }
  }
  $104 = $pos;
  $105 = ((($104)) + 8|0);
  $106 = (_sget4($105)|0);
  $107 = $idx;
  $108 = (($107) + ($106))|0;
  $idx = $108;
 }
 if ((label|0) == 6) {
  $25 = $1;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = 1;
  $27 = $1;
  $28 = ((($27)) + 4|0);
  HEAP32[$28>>2] = 1;
  $29 = $1;
  HEAP32[$29>>2] = 1;
  $30 = $pos;
  $31 = $pos;
  $32 = ((($31)) + 16|0);
  $33 = (_sget4($32)|0);
  $34 = (($30) + ($33)|0);
  $cp = $34;
  $35 = $cp;
  $36 = (_sget4($35)|0);
  $type = $36;
  $37 = $cp;
  $38 = ((($37)) + 4|0);
  $39 = (_sget4($38)|0);
  $ndim = $39;
  $40 = ($39>>>0)>(3);
  if (!($40)) {
   $41 = $pos;
   $42 = $cp;
   $43 = ((($42)) + 8|0);
   $44 = (_sget4($43)|0);
   $45 = (($41) + ($44)|0);
   $dp = $45;
   $46 = $ndim;
   $i = $46;
   while(1) {
    $47 = $i;
    $48 = (($47) + -1)|0;
    $i = $48;
    $49 = ($47|0)!=(0);
    if (!($49)) {
     break;
    }
    $50 = $cp;
    $51 = ((($50)) + 12|0);
    $cp = $51;
    $52 = $cp;
    $53 = (_sget4($52)|0);
    $54 = $i;
    $55 = $1;
    $56 = (($55) + ($54<<2)|0);
    HEAP32[$56>>2] = $53;
   }
   $57 = $1;
   $58 = HEAP32[$57>>2]|0;
   $59 = (+($58>>>0));
   $60 = $1;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (+($62>>>0));
   $64 = $59 * $63;
   $65 = $1;
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (+($67>>>0));
   $69 = $64 * $68;
   $dsize = $69;
   $70 = HEAP32[1684>>2]|0;
   $71 = (($70>>>0) / 4)&-1;
   $72 = (+($71>>>0));
   $73 = $69 > $72;
   if (!($73)) {
    $74 = $dsize;
    $75 = (~~(($74))>>>0);
    $size = $75;
    $76 = $75<<2;
    $77 = (_malloc($76)|0);
    $mat = $77;
    $78 = $mat;
    _merror($78,611665);
    $i = 0;
    while(1) {
     $79 = $i;
     $80 = $size;
     $81 = ($79>>>0)<($80>>>0);
     if (!($81)) {
      break;
     }
     $82 = $type;
     $83 = ($82|0)!=(0);
     $84 = $type;
     $85 = ($84|0)!=(6);
     $or$cond = $83 & $85;
     $86 = $dp;
     $87 = $i;
     if ($or$cond) {
      $88 = $87<<2;
      $89 = (($86) + ($88)|0);
      $90 = (_sget4($89)|0);
      $91 = $i;
      $92 = $mat;
      $93 = (($92) + ($91<<2)|0);
      HEAP32[$93>>2] = $90;
     } else {
      $94 = $87<<1;
      $95 = (($86) + ($94)|0);
      $96 = (_sget4($95)|0);
      $97 = $96 & 65535;
      $98 = $i;
      $99 = $mat;
      $100 = (($99) + ($98<<2)|0);
      HEAP32[$100>>2] = $97;
     }
     $101 = $i;
     $102 = (($101) + 1)|0;
     $i = $102;
    }
    $103 = $mat;
    $0 = $103;
    $112 = $0;
    STACKTOP = sp;return ($112|0);
   }
  }
 }
 $109 = HEAP32[447952>>2]|0;
 $110 = HEAP32[780>>2]|0;
 $111 = $2;
 HEAP32[$vararg_buffer>>2] = $110;
 $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr2>>2] = $111;
 (_fprintf($109,611686,$vararg_buffer)|0);
 $0 = 0;
 $112 = $0;
 STACKTOP = sp;return ($112|0);
}
function _foveon_fixed($ptr,$size,$name) {
 $ptr = $ptr|0;
 $size = $size|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dim = 0, $dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dim = sp;
 $1 = $ptr;
 $2 = $size;
 $3 = $name;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 do {
  if ($5) {
   $6 = $3;
   $7 = (_foveon_camf_matrix($dim,$6)|0);
   $dp = $7;
   $8 = $dp;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $1;
    $11 = $dp;
    $12 = $2;
    $13 = $12<<2;
    _memcpy(($10|0),($11|0),($13|0))|0;
    $14 = $dp;
    _free($14);
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function _foveon_avg($pix,$range,$cfilt) {
 $pix = $pix|0;
 $range = $range|0;
 $cfilt = +$cfilt;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $8 = 0, $9 = 0, $i = 0, $max = 0.0, $min = 0.0, $sum = 0.0, $val = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pix;
 $2 = $range;
 $3 = $cfilt;
 $min = 3.4028234663852886E+38;
 $max = -3.4028234663852886E+38;
 $sum = 0.0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $i = $5;
 while(1) {
  $6 = $i;
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<=($9|0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $11<<2;
  $13 = $1;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = (+($16|0));
  $18 = $i;
  $19 = $18<<2;
  $20 = $1;
  $21 = (($20) + ($19<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $i;
  $25 = (($24) - 1)|0;
  $26 = $25<<2;
  $27 = $1;
  $28 = (($27) + ($26<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = (($23) - ($30))|0;
  $32 = (+($31|0));
  $33 = $3;
  $34 = $32 * $33;
  $35 = $17 + $34;
  $val = $35;
  $36 = $sum;
  $37 = $36 + $35;
  $sum = $37;
  $38 = $min;
  $39 = $val;
  $40 = $38 > $39;
  if ($40) {
   $41 = $val;
   $min = $41;
  }
  $42 = $max;
  $43 = $val;
  $44 = $42 < $43;
  if ($44) {
   $45 = $val;
   $max = $45;
  }
  $46 = $i;
  $47 = (($46) + 1)|0;
  $i = $47;
 }
 $48 = $2;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $2;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) - ($52))|0;
 $54 = ($53|0)==(1);
 $55 = $sum;
 if ($54) {
  $56 = $55 / 2.0;
  $0 = $56;
  $70 = $0;
  STACKTOP = sp;return (+$70);
 } else {
  $57 = $min;
  $58 = $55 - $57;
  $59 = $max;
  $60 = $58 - $59;
  $61 = $2;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $2;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) - ($65))|0;
  $67 = (($66) - 1)|0;
  $68 = (+($67|0));
  $69 = $60 / $68;
  $0 = $69;
  $70 = $0;
  STACKTOP = sp;return (+$70);
 }
 return +(0.0);
}
function _foveon_make_curve($max,$mul,$filt) {
 $max = +$max;
 $mul = +$mul;
 $filt = +$filt;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $curve = 0, $i = 0, $size = 0, $x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $max;
 $1 = $mul;
 $2 = $filt;
 $3 = $2;
 $4 = $3 != 0.0;
 if (!($4)) {
  $2 = 0.80000000000000004;
 }
 $5 = $0;
 $6 = 12.566370614359172 * $5;
 $7 = $2;
 $8 = $6 / $7;
 $9 = (~~(($8))>>>0);
 $size = $9;
 $10 = $size;
 $11 = ($10|0)==(-1);
 if ($11) {
  $12 = $size;
  $13 = (($12) + -1)|0;
  $size = $13;
 }
 $14 = $size;
 $15 = (($14) + 1)|0;
 $16 = (_calloc($15,2)|0);
 $curve = $16;
 $17 = $curve;
 _merror($17,611714);
 $18 = $size;
 $19 = $18&65535;
 $20 = $curve;
 HEAP16[$20>>1] = $19;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = $size;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = (+($24>>>0));
  $26 = $2;
  $27 = $25 * $26;
  $28 = $0;
  $29 = $27 / $28;
  $30 = $29 / 4.0;
  $x = $30;
  $31 = $x;
  $32 = (+Math_cos((+$31)));
  $33 = $32 + 1.0;
  $34 = $33 / 2.0;
  $35 = $i;
  $36 = (+($35>>>0));
  $37 = $2;
  $38 = $36 * $37;
  $39 = $1;
  $40 = $38 / $39;
  $41 = (+_tanh($40));
  $42 = $34 * $41;
  $43 = $1;
  $44 = $42 * $43;
  $45 = $44 + 0.5;
  $46 = (~~(($45)));
  $47 = $i;
  $48 = (($47) + 1)|0;
  $49 = $curve;
  $50 = (($49) + ($48<<1)|0);
  HEAP16[$50>>1] = $46;
  $51 = $i;
  $52 = (($51) + 1)|0;
  $i = $52;
 }
 $53 = $curve;
 STACKTOP = sp;return ($53|0);
}
function _foveon_make_curves($curvep,$dq,$div,$filt) {
 $curvep = $curvep|0;
 $dq = $dq|0;
 $div = $div|0;
 $filt = +$filt;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $c = 0, $max = 0.0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mul = sp + 8|0;
 $0 = $curvep;
 $1 = $dq;
 $2 = $div;
 $3 = $filt;
 $max = 0.0;
 $c = 0;
 while(1) {
  $4 = $c;
  $5 = ($4|0)<(3);
  if (!($5)) {
   break;
  }
  $6 = $c;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $c;
  $11 = $2;
  $12 = (($11) + ($10<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $9 / $13;
  $15 = $14;
  $16 = $c;
  $17 = (($mul) + ($16<<3)|0);
  HEAPF64[$17>>3] = $15;
  $18 = $c;
  $19 = (($18) + 1)|0;
  $c = $19;
 }
 $c = 0;
 while(1) {
  $20 = $c;
  $21 = ($20|0)<(3);
  if (!($21)) {
   break;
  }
  $22 = $max;
  $23 = $c;
  $24 = (($mul) + ($23<<3)|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $22 < $25;
  if ($26) {
   $27 = $c;
   $28 = (($mul) + ($27<<3)|0);
   $29 = +HEAPF64[$28>>3];
   $max = $29;
  }
  $30 = $c;
  $31 = (($30) + 1)|0;
  $c = $31;
 }
 $c = 0;
 while(1) {
  $32 = $c;
  $33 = ($32|0)<(3);
  if (!($33)) {
   break;
  }
  $34 = $max;
  $35 = $c;
  $36 = (($mul) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $3;
  $39 = $38;
  $40 = (_foveon_make_curve($34,$37,$39)|0);
  $41 = $c;
  $42 = $0;
  $43 = (($42) + ($41<<2)|0);
  HEAP32[$43>>2] = $40;
  $44 = $c;
  $45 = (($44) + 1)|0;
  $c = $45;
 }
 STACKTOP = sp;return;
}
function _foveon_apply_curve($curve,$i) {
 $curve = $curve|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $curve;
 $2 = $i;
 $3 = $2;
 $4 = (Math_abs(($3|0))|0);
 $5 = $1;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($4|0)>=($7|0);
 if ($8) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $9 = $2;
 $10 = ($9|0)<(0);
 $11 = $2;
 if ($10) {
  $12 = (1 - ($11))|0;
  $13 = $1;
  $14 = (($13) + ($12<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = (0 - ($16))|0;
  $23 = $17;
 } else {
  $18 = (1 + ($11))|0;
  $19 = $1;
  $20 = (($19) + ($18<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $22;
 }
 $0 = $23;
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function _foveon_interpolate() {
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0.0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0.0, $101 = 0.0, $1010 = 0.0, $1011 = 0.0, $1012 = 0.0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0.0, $1023 = 0.0, $1024 = 0.0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0.0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0.0, $1039 = 0.0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0.0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0.0, $1053 = 0.0, $1054 = 0.0, $1055 = 0.0, $1056 = 0.0, $1057 = 0, $1058 = 0.0, $1059 = 0.0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0.0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0;
 var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
 var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
 var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0.0, $1164 = 0, $1165 = 0, $1166 = 0.0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
 var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0.0, $1181 = 0, $1182 = 0.0, $1183 = 0.0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
 var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0;
 var $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0;
 var $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0;
 var $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0;
 var $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0;
 var $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0;
 var $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0;
 var $132 = 0.0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0;
 var $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0;
 var $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0.0, $1367 = 0, $1368 = 0, $1369 = 0.0, $137 = 0, $1370 = 0.0, $1371 = 0, $1372 = 0, $1373 = 0;
 var $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0;
 var $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0;
 var $141 = 0.0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0.0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0;
 var $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0;
 var $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0;
 var $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0;
 var $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0;
 var $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0.0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0;
 var $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0;
 var $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0;
 var $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0;
 var $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0;
 var $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0.0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0;
 var $1608 = 0, $1609 = 0, $161 = 0.0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0.0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0;
 var $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0;
 var $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0;
 var $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0;
 var $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0;
 var $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0;
 var $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0;
 var $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0.0, $1750 = 0, $1751 = 0;
 var $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0.0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0.0;
 var $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0;
 var $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0;
 var $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0.0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0.0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0;
 var $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0.0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0.0, $1840 = 0, $1841 = 0;
 var $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0;
 var $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0;
 var $1879 = 0, $188 = 0.0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0.0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0.0, $1894 = 0, $1895 = 0, $1896 = 0;
 var $1897 = 0, $1898 = 0, $1899 = 0.0, $19 = 0, $190 = 0.0, $1900 = 0.0, $1901 = 0.0, $1902 = 0.0, $1903 = 0.0, $1904 = 0, $1905 = 0, $1906 = 0.0, $1907 = 0, $1908 = 0.0, $1909 = 0, $191 = 0.0, $1910 = 0.0, $1911 = 0.0, $1912 = 0, $1913 = 0;
 var $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0.0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0;
 var $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0;
 var $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0;
 var $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0;
 var $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0;
 var $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0.0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0;
 var $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0;
 var $204 = 0.0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0;
 var $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0;
 var $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0.0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0;
 var $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0;
 var $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0;
 var $213 = 0.0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0;
 var $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0.0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0;
 var $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0.0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0;
 var $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0;
 var $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0;
 var $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0;
 var $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0;
 var $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0;
 var $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0;
 var $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0.0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0;
 var $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0;
 var $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0;
 var $2346 = 0, $2347 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0;
 var $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0.0;
 var $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0.0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0.0, $533 = 0, $534 = 0, $535 = 0, $536 = 0.0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0.0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0.0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0;
 var $594 = 0.0, $595 = 0.0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0.0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0.0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0.0, $683 = 0.0;
 var $684 = 0.0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0, $749 = 0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0.0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0.0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0.0, $783 = 0.0, $784 = 0.0, $785 = 0, $786 = 0, $787 = 0, $788 = 0.0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0;
 var $792 = 0.0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0, $799 = 0, $8 = 0, $80 = 0.0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0, $817 = 0, $818 = 0, $819 = 0.0, $82 = 0, $820 = 0.0, $821 = 0.0, $822 = 0.0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0.0, $832 = 0.0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0.0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0.0, $913 = 0.0, $914 = 0.0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0.0, $921 = 0, $922 = 0, $923 = 0.0, $924 = 0.0, $925 = 0, $926 = 0.0, $927 = 0, $928 = 0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0.0, $941 = 0.0, $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $active = 0, $badpix = 0, $black = 0, $c = 0, $cam_xyz = 0, $cfilt = 0, $chroma_dq = 0, $col = 0, $color_dq = 0, $correct = 0;
 var $cp = 0, $curve = 0, $ddft = 0, $dev = 0, $diag = 0, $diff = 0, $dim = 0, $div = 0, $dscr = 0, $dstb = 0, $dsum = 0.0, $frow = 0.0, $fsum = 0, $i = 0, $ipix = 0, $irow = 0, $j = 0, $keep = 0, $last = 0, $limit = 0;
 var $max = 0, $min = 0, $num = 0.0, $pix = 0, $ppm = 0, $prev = 0, $row = 0, $satlev = 0, $sgain = 0, $sgrow = 0, $sgx = 0, $shrink = 0, $smlast = 0, $smred = 0, $smred_p = 0, $smrow = 0, $str = 0, $sum = 0, $total = 0, $trans = 0;
 var $trsum = 0, $val = 0.0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $work = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $prev = sp + 796|0;
 $curve = sp + 760|0;
 $cfilt = sp + 752|0;
 $ddft = sp + 680|0;
 $ppm = sp + 572|0;
 $cam_xyz = sp + 536|0;
 $correct = sp + 500|0;
 $last = sp + 464|0;
 $trans = sp + 428|0;
 $chroma_dq = sp + 416|0;
 $color_dq = sp + 404|0;
 $diag = sp + 368|0;
 $div = sp + 356|0;
 $fsum = sp + 332|0;
 $dscr = sp + 256|0;
 $dstb = sp + 240|0;
 $smrow = sp + 208|0;
 $total = sp + 192|0;
 $ipix = sp + 176|0;
 $work = sp + 140|0;
 $dev = sp + 116|0;
 $satlev = sp + 104|0;
 $keep = sp + 88|0;
 $active = sp + 72|0;
 $dim = sp + 60|0;
 $trsum = sp;
 $str = sp + 808|0;
 HEAPF32[$cfilt>>2] = 0.0;
 $smred_p = 0;
 $dsum = 0.0;
 $0 = HEAP32[712>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[447952>>2]|0;
  (_fprintf($2,611734,$vararg_buffer)|0);
 }
 _foveon_load_camf();
 (_foveon_fixed($dscr,4,611759)|0);
 (_foveon_fixed($ppm,27,611778)|0);
 (_foveon_fixed($satlev,3,611793)|0);
 (_foveon_fixed($keep,4,611809)|0);
 (_foveon_fixed($active,4,611823)|0);
 (_foveon_fixed($chroma_dq,3,611839)|0);
 $3 = (_foveon_camf_param(611848,611862)|0);
 $4 = ($3|0)!=(0|0);
 $5 = $4 ? 611862 : 611870;
 (_foveon_fixed($color_dq,3,$5)|0);
 $6 = (_foveon_camf_param(611848,611884)|0);
 $7 = ($6|0)!=(0|0);
 if ($7) {
  (_foveon_fixed($cfilt,1,611884)|0);
 }
 dest=$ddft; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (_foveon_camf_param(611848,611897)|0);
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = ((($ddft)) + 24|0);
  $11 = (_foveon_fixed($10,12,611897)|0);
  $12 = ($11|0)!=(0);
  if (!($12)) {
   label = 7;
  }
 } else {
  label = 7;
 }
 L9: do {
  if ((label|0) == 7) {
   $i = 0;
   while(1) {
    $13 = $i;
    $14 = ($13|0)<(2);
    if (!($14)) {
     break L9;
    }
    $15 = $i;
    $16 = ($15|0)!=(0);
    $17 = $16 ? 611907 : 611924;
    (_foveon_fixed($dstb,4,$17)|0);
    $18 = ((($dstb)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $row = $19;
    while(1) {
     $20 = $row;
     $21 = ((($dstb)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)<=($22|0);
     if (!($23)) {
      break;
     }
     $24 = HEAP32[$dstb>>2]|0;
     $col = $24;
     while(1) {
      $25 = $col;
      $26 = ((($dstb)) + 8|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)<=($27|0);
      if (!($28)) {
       break;
      }
      $c = 0;
      while(1) {
       $29 = $c;
       $30 = ($29|0)<(3);
       if (!($30)) {
        break;
       }
       $31 = $c;
       $32 = $row;
       $33 = HEAP16[580076>>1]|0;
       $34 = $33&65535;
       $35 = Math_imul($32, $34)|0;
       $36 = $col;
       $37 = (($35) + ($36))|0;
       $38 = HEAP32[972>>2]|0;
       $39 = (($38) + ($37<<3)|0);
       $40 = (($39) + ($31<<1)|0);
       $41 = HEAP16[$40>>1]|0;
       $42 = $41 << 16 >> 16;
       $43 = (+($42|0));
       $44 = $c;
       $45 = $i;
       $46 = (($45) + 1)|0;
       $47 = (($ddft) + (($46*24)|0)|0);
       $48 = (($47) + ($44<<3)|0);
       $49 = ((($48)) + 4|0);
       $50 = +HEAPF32[$49>>2];
       $51 = $50 + $43;
       HEAPF32[$49>>2] = $51;
       $52 = $c;
       $53 = (($52) + 1)|0;
       $c = $53;
      }
      $54 = $col;
      $55 = (($54) + 1)|0;
      $col = $55;
     }
     $56 = $row;
     $57 = (($56) + 1)|0;
     $row = $57;
    }
    $c = 0;
    while(1) {
     $58 = $c;
     $59 = ($58|0)<(3);
     if (!($59)) {
      break;
     }
     $60 = ((($dstb)) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($dstb)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($61) - ($63))|0;
     $65 = (($64) + 1)|0;
     $66 = ((($dstb)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = HEAP32[$dstb>>2]|0;
     $69 = (($67) - ($68))|0;
     $70 = (($69) + 1)|0;
     $71 = Math_imul($65, $70)|0;
     $72 = (+($71|0));
     $73 = $c;
     $74 = $i;
     $75 = (($74) + 1)|0;
     $76 = (($ddft) + (($75*24)|0)|0);
     $77 = (($76) + ($73<<3)|0);
     $78 = ((($77)) + 4|0);
     $79 = +HEAPF32[$78>>2];
     $80 = $79 / $72;
     HEAPF32[$78>>2] = $80;
     $81 = $c;
     $82 = (($81) + 1)|0;
     $c = $82;
    }
    $83 = $i;
    $84 = (($83) + 1)|0;
    $i = $84;
   }
  }
 } while(0);
 $85 = (_foveon_camf_param(611938,593904)|0);
 $cp = $85;
 $86 = ($85|0)!=(0|0);
 if (!($86)) {
  $87 = HEAP32[447952>>2]|0;
  $88 = HEAP32[780>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $88;
  $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 593904;
  (_fprintf($87,611962,$vararg_buffer2)|0);
  STACKTOP = sp;return;
 }
 $89 = $cp;
 (_foveon_fixed($cam_xyz,9,$89)|0);
 $90 = (_foveon_camf_param(611994,593904)|0);
 (_foveon_fixed($correct,9,$90)|0);
 dest=$last; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $91 = $i;
  $92 = ($91|0)<(3);
  if (!($92)) {
   break;
  }
  $j = 0;
  while(1) {
   $93 = $j;
   $94 = ($93|0)<(3);
   if (!($94)) {
    break;
   }
   $c = 0;
   while(1) {
    $95 = $c;
    $96 = ($95|0)<(3);
    if (!($96)) {
     break;
    }
    $97 = $c;
    $98 = $i;
    $99 = (($correct) + (($98*12)|0)|0);
    $100 = (($99) + ($97<<2)|0);
    $101 = +HEAPF32[$100>>2];
    $102 = $j;
    $103 = $c;
    $104 = (($cam_xyz) + (($103*12)|0)|0);
    $105 = (($104) + ($102<<2)|0);
    $106 = +HEAPF32[$105>>2];
    $107 = $101 * $106;
    $108 = $j;
    $109 = $i;
    $110 = (($last) + (($109*12)|0)|0);
    $111 = (($110) + ($108<<2)|0);
    $112 = +HEAPF32[$111>>2];
    $113 = $112 + $107;
    HEAPF32[$111>>2] = $113;
    $114 = $c;
    $115 = (($114) + 1)|0;
    $c = $115;
   }
   $116 = $j;
   $117 = (($116) + 1)|0;
   $j = $117;
  }
  $118 = $i;
  $119 = (($118) + 1)|0;
  $i = $119;
 }
 $i = 0;
 while(1) {
  $120 = $i;
  $121 = ($120|0)<(3);
  $c = 0;
  if (!($121)) {
   break;
  }
  while(1) {
   $122 = $c;
   $123 = ($122|0)<(3);
   if (!($123)) {
    break;
   }
   $124 = $c;
   $125 = (($124) + 1)|0;
   $126 = (($125|0) % 3)&-1;
   $127 = $i;
   $128 = (($127) + 1)|0;
   $129 = (($128|0) % 3)&-1;
   $130 = (($last) + (($129*12)|0)|0);
   $131 = (($130) + ($126<<2)|0);
   $132 = +HEAPF32[$131>>2];
   $133 = $c;
   $134 = (($133) + 2)|0;
   $135 = (($134|0) % 3)&-1;
   $136 = $i;
   $137 = (($136) + 2)|0;
   $138 = (($137|0) % 3)&-1;
   $139 = (($last) + (($138*12)|0)|0);
   $140 = (($139) + ($135<<2)|0);
   $141 = +HEAPF32[$140>>2];
   $142 = $132 * $141;
   $143 = $c;
   $144 = (($143) + 2)|0;
   $145 = (($144|0) % 3)&-1;
   $146 = $i;
   $147 = (($146) + 1)|0;
   $148 = (($147|0) % 3)&-1;
   $149 = (($last) + (($148*12)|0)|0);
   $150 = (($149) + ($145<<2)|0);
   $151 = +HEAPF32[$150>>2];
   $152 = $c;
   $153 = (($152) + 1)|0;
   $154 = (($153|0) % 3)&-1;
   $155 = $i;
   $156 = (($155) + 2)|0;
   $157 = (($156|0) % 3)&-1;
   $158 = (($last) + (($157*12)|0)|0);
   $159 = (($158) + ($154<<2)|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $151 * $160;
   $162 = $142 - $161;
   $163 = $i;
   $164 = $c;
   $165 = (($diag) + (($164*12)|0)|0);
   $166 = (($165) + ($163<<2)|0);
   HEAPF32[$166>>2] = $162;
   $167 = $c;
   $168 = (($167) + 1)|0;
   $c = $168;
  }
  $169 = $i;
  $170 = (($169) + 1)|0;
  $i = $170;
 }
 while(1) {
  $171 = $c;
  $172 = ($171|0)<(3);
  if (!($172)) {
   break;
  }
  $173 = $c;
  $174 = (($diag) + (($173*12)|0)|0);
  $175 = +HEAPF32[$174>>2];
  $176 = $175;
  $177 = $176 * 0.31269999999999998;
  $178 = $c;
  $179 = (($diag) + (($178*12)|0)|0);
  $180 = ((($179)) + 4|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $181;
  $183 = $182 * 0.32900000000000001;
  $184 = $177 + $183;
  $185 = $c;
  $186 = (($diag) + (($185*12)|0)|0);
  $187 = ((($186)) + 8|0);
  $188 = +HEAPF32[$187>>2];
  $189 = $188;
  $190 = $189 * 0.35830000000000001;
  $191 = $184 + $190;
  $192 = $191;
  $193 = $c;
  $194 = (($div) + ($193<<2)|0);
  HEAPF32[$194>>2] = $192;
  $195 = $c;
  $196 = (($195) + 1)|0;
  $c = $196;
 }
 HEAP32[$vararg_buffer5>>2] = 593904;
 (_sprintf($str,612018,$vararg_buffer5)|0);
 $197 = (_foveon_camf_param(611848,$str)|0);
 $198 = ($197|0)!=(0|0);
 if ($198) {
  (_foveon_fixed($div,3,$str)|0);
 }
 $num = 0.0;
 $c = 0;
 while(1) {
  $199 = $c;
  $200 = ($199|0)<(3);
  if (!($200)) {
   break;
  }
  $201 = $num;
  $202 = $c;
  $203 = (($div) + ($202<<2)|0);
  $204 = +HEAPF32[$203>>2];
  $205 = $201 < $204;
  if ($205) {
   $206 = $c;
   $207 = (($div) + ($206<<2)|0);
   $208 = +HEAPF32[$207>>2];
   $num = $208;
  }
  $209 = $c;
  $210 = (($209) + 1)|0;
  $c = $210;
 }
 $c = 0;
 while(1) {
  $211 = $c;
  $212 = ($211|0)<(3);
  if (!($212)) {
   break;
  }
  $213 = $num;
  $214 = $c;
  $215 = (($div) + ($214<<2)|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $216 / $213;
  HEAPF32[$215>>2] = $217;
  $218 = $c;
  $219 = (($218) + 1)|0;
  $c = $219;
 }
 dest=$trans; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $220 = $i;
  $221 = ($220|0)<(3);
  if (!($221)) {
   break;
  }
  $j = 0;
  while(1) {
   $222 = $j;
   $223 = ($222|0)<(3);
   if (!($223)) {
    break;
   }
   $c = 0;
   while(1) {
    $224 = $c;
    $225 = ($224|0)<(3);
    if (!($225)) {
     break;
    }
    $226 = $c;
    $227 = $i;
    $228 = (984 + ($227<<4)|0);
    $229 = (($228) + ($226<<2)|0);
    $230 = +HEAPF32[$229>>2];
    $231 = $j;
    $232 = $c;
    $233 = (($last) + (($232*12)|0)|0);
    $234 = (($233) + ($231<<2)|0);
    $235 = +HEAPF32[$234>>2];
    $236 = $230 * $235;
    $237 = $j;
    $238 = (($div) + ($237<<2)|0);
    $239 = +HEAPF32[$238>>2];
    $240 = $236 * $239;
    $241 = $j;
    $242 = $i;
    $243 = (($trans) + (($242*12)|0)|0);
    $244 = (($243) + ($241<<2)|0);
    $245 = +HEAPF32[$244>>2];
    $246 = $245 + $240;
    HEAPF32[$244>>2] = $246;
    $247 = $c;
    $248 = (($247) + 1)|0;
    $c = $248;
   }
   $249 = $j;
   $250 = (($249) + 1)|0;
   $j = $250;
  }
  $251 = $i;
  $252 = (($251) + 1)|0;
  $i = $252;
 }
 $c = 0;
 while(1) {
  $253 = $c;
  $254 = ($253|0)<(3);
  if (!($254)) {
   break;
  }
  $255 = $c;
  $256 = (($trans) + (($255*12)|0)|0);
  $257 = +HEAPF32[$256>>2];
  $258 = $c;
  $259 = (($trans) + (($258*12)|0)|0);
  $260 = ((($259)) + 4|0);
  $261 = +HEAPF32[$260>>2];
  $262 = $257 + $261;
  $263 = $c;
  $264 = (($trans) + (($263*12)|0)|0);
  $265 = ((($264)) + 8|0);
  $266 = +HEAPF32[$265>>2];
  $267 = $262 + $266;
  $268 = $267;
  $269 = $c;
  $270 = (($trsum) + ($269<<3)|0);
  HEAPF64[$270>>3] = $268;
  $271 = $c;
  $272 = (($271) + 1)|0;
  $c = $272;
 }
 $273 = +HEAPF64[$trsum>>3];
 $274 = 6.0 * $273;
 $275 = ((($trsum)) + 8|0);
 $276 = +HEAPF64[$275>>3];
 $277 = 11.0 * $276;
 $278 = $274 + $277;
 $279 = ((($trsum)) + 16|0);
 $280 = +HEAPF64[$279>>3];
 $281 = 3.0 * $280;
 $282 = $278 + $281;
 $283 = $282 / 20.0;
 $dsum = $283;
 $i = 0;
 while(1) {
  $284 = $i;
  $285 = ($284|0)<(3);
  if (!($285)) {
   break;
  }
  $c = 0;
  while(1) {
   $286 = $c;
   $287 = ($286|0)<(3);
   if (!($287)) {
    break;
   }
   $288 = $c;
   $289 = $i;
   $290 = (($trans) + (($289*12)|0)|0);
   $291 = (($290) + ($288<<2)|0);
   $292 = +HEAPF32[$291>>2];
   $293 = $292;
   $294 = $dsum;
   $295 = $293 * $294;
   $296 = $i;
   $297 = (($trsum) + ($296<<3)|0);
   $298 = +HEAPF64[$297>>3];
   $299 = $295 / $298;
   $300 = $299;
   $301 = $c;
   $302 = $i;
   $303 = (($last) + (($302*12)|0)|0);
   $304 = (($303) + ($301<<2)|0);
   HEAPF32[$304>>2] = $300;
   $305 = $c;
   $306 = (($305) + 1)|0;
   $c = $306;
  }
  $307 = $i;
  $308 = (($307) + 1)|0;
  $i = $308;
 }
 dest=$trans; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $309 = $i;
  $310 = ($309|0)<(3);
  if (!($310)) {
   break;
  }
  $j = 0;
  while(1) {
   $311 = $j;
   $312 = ($311|0)<(3);
   if (!($312)) {
    break;
   }
   $c = 0;
   while(1) {
    $313 = $c;
    $314 = ($313|0)<(3);
    if (!($314)) {
     break;
    }
    $315 = $i;
    $316 = $c;
    $317 = ($315|0)==($316|0);
    $318 = $317 ? 32 : -1;
    $319 = (+($318|0));
    $320 = $j;
    $321 = $c;
    $322 = (($last) + (($321*12)|0)|0);
    $323 = (($322) + ($320<<2)|0);
    $324 = +HEAPF32[$323>>2];
    $325 = $319 * $324;
    $326 = $325 / 30.0;
    $327 = $j;
    $328 = $i;
    $329 = (($trans) + (($328*12)|0)|0);
    $330 = (($329) + ($327<<2)|0);
    $331 = +HEAPF32[$330>>2];
    $332 = $331 + $326;
    HEAPF32[$330>>2] = $332;
    $333 = $c;
    $334 = (($333) + 1)|0;
    $c = $334;
   }
   $335 = $j;
   $336 = (($335) + 1)|0;
   $j = $336;
  }
  $337 = $i;
  $338 = (($337) + 1)|0;
  $i = $338;
 }
 $339 = +HEAPF32[$cfilt>>2];
 _foveon_make_curves($curve,$color_dq,$div,$339);
 $c = 0;
 while(1) {
  $340 = $c;
  $341 = ($340|0)<(3);
  if (!($341)) {
   break;
  }
  $342 = $c;
  $343 = (($chroma_dq) + ($342<<2)|0);
  $344 = +HEAPF32[$343>>2];
  $345 = $344 / 3.0;
  HEAPF32[$343>>2] = $345;
  $346 = $c;
  $347 = (($346) + 1)|0;
  $c = $347;
 }
 $348 = ((($curve)) + 12|0);
 $349 = +HEAPF32[$cfilt>>2];
 _foveon_make_curves($348,$chroma_dq,$div,$349);
 $c = 0;
 while(1) {
  $350 = $c;
  $351 = ($350|0)<(3);
  if (!($351)) {
   break;
  }
  $352 = $c;
  $353 = (($chroma_dq) + ($352<<2)|0);
  $354 = +HEAPF32[$353>>2];
  $355 = $c;
  $356 = (($div) + ($355<<2)|0);
  $357 = +HEAPF32[$356>>2];
  $358 = $354 / $357;
  $359 = $358;
  $360 = $dsum;
  $361 = $360 + $359;
  $dsum = $361;
  $362 = $c;
  $363 = (($362) + 1)|0;
  $c = $363;
 }
 $364 = $dsum;
 $365 = $dsum;
 $366 = +HEAPF32[$cfilt>>2];
 $367 = $366;
 $368 = (_foveon_make_curve($364,$365,$367)|0);
 $369 = ((($curve)) + 24|0);
 HEAP32[$369>>2] = $368;
 $370 = $dsum;
 $371 = $370 * 2.0;
 $372 = $dsum;
 $373 = $372 * 2.0;
 $374 = +HEAPF32[$cfilt>>2];
 $375 = $374;
 $376 = (_foveon_make_curve($371,$373,$375)|0);
 $377 = ((($curve)) + 28|0);
 HEAP32[$377>>2] = $376;
 $378 = (_foveon_camf_matrix($dim,612031)|0);
 $sgain = $378;
 $379 = $sgain;
 $380 = ($379|0)!=(0|0);
 if (!($380)) {
  STACKTOP = sp;return;
 }
 $381 = ((($dim)) + 4|0);
 $382 = HEAP32[$381>>2]|0;
 $383 = (_calloc($382,12)|0);
 $sgrow = $383;
 $384 = HEAP16[580076>>1]|0;
 $385 = $384&65535;
 $386 = ((($dim)) + 4|0);
 $387 = HEAP32[$386>>2]|0;
 $388 = (($385) + ($387))|0;
 $389 = (($388) - 2)|0;
 $390 = ((($dim)) + 4|0);
 $391 = HEAP32[$390>>2]|0;
 $392 = (($391) - 1)|0;
 $393 = (($389>>>0) / ($392>>>0))&-1;
 $sgx = $393;
 $394 = HEAP16[580074>>1]|0;
 $395 = $394&65535;
 $396 = (_calloc($395,12)|0);
 $black = $396;
 $row = 0;
 while(1) {
  $397 = $row;
  $398 = HEAP16[580074>>1]|0;
  $399 = $398&65535;
  $400 = ($397|0)<($399|0);
  if (!($400)) {
   break;
  }
  $i = 0;
  while(1) {
   $401 = $i;
   $402 = ($401|0)<(6);
   if (!($402)) {
    break;
   }
   $403 = $i;
   $404 = ((($ddft)) + 24|0);
   $405 = (($404) + ($403<<2)|0);
   $406 = +HEAPF32[$405>>2];
   $407 = $406;
   $408 = $row;
   $409 = (+($408|0));
   $410 = HEAP16[580074>>1]|0;
   $411 = $410&65535;
   $412 = (+($411|0));
   $413 = $412 - 1.0;
   $414 = $409 / $413;
   $415 = $i;
   $416 = ((($ddft)) + 48|0);
   $417 = (($416) + ($415<<2)|0);
   $418 = +HEAPF32[$417>>2];
   $419 = $i;
   $420 = ((($ddft)) + 24|0);
   $421 = (($420) + ($419<<2)|0);
   $422 = +HEAPF32[$421>>2];
   $423 = $418 - $422;
   $424 = $423;
   $425 = $414 * $424;
   $426 = $407 + $425;
   $427 = $426;
   $428 = $i;
   $429 = (($ddft) + ($428<<2)|0);
   HEAPF32[$429>>2] = $427;
   $430 = $i;
   $431 = (($430) + 1)|0;
   $i = $431;
  }
  $c = 0;
  while(1) {
   $432 = $c;
   $433 = ($432|0)<(3);
   $434 = $row;
   if (!($433)) {
    break;
   }
   $435 = HEAP16[580076>>1]|0;
   $436 = $435&65535;
   $437 = Math_imul($434, $436)|0;
   $438 = HEAP32[972>>2]|0;
   $439 = (($438) + ($437<<3)|0);
   $440 = $c;
   $441 = (($439) + ($440<<1)|0);
   $442 = +HEAPF32[$cfilt>>2];
   $443 = (+_foveon_avg($441,$dscr,$442));
   $444 = $row;
   $445 = HEAP16[580076>>1]|0;
   $446 = $445&65535;
   $447 = Math_imul($444, $446)|0;
   $448 = HEAP32[972>>2]|0;
   $449 = (($448) + ($447<<3)|0);
   $450 = $c;
   $451 = (($449) + ($450<<1)|0);
   $452 = ((($dscr)) + 8|0);
   $453 = +HEAPF32[$cfilt>>2];
   $454 = (+_foveon_avg($451,$452,$453));
   $455 = $454 * 3.0;
   $456 = $443 + $455;
   $457 = $c;
   $458 = (($ddft) + ($457<<3)|0);
   $459 = +HEAPF32[$458>>2];
   $460 = $456 - $459;
   $461 = $460 / 4.0;
   $462 = $c;
   $463 = (($ddft) + ($462<<3)|0);
   $464 = ((($463)) + 4|0);
   $465 = +HEAPF32[$464>>2];
   $466 = $461 - $465;
   $467 = $c;
   $468 = $row;
   $469 = $black;
   $470 = (($469) + (($468*12)|0)|0);
   $471 = (($470) + ($467<<2)|0);
   HEAPF32[$471>>2] = $466;
   $472 = $c;
   $473 = (($472) + 1)|0;
   $c = $473;
  }
  $474 = (($434) + 1)|0;
  $row = $474;
 }
 $475 = $black;
 $476 = $black;
 $477 = ((($476)) + 96|0);
 dest=$475; src=$477; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $478 = $black;
 $479 = HEAP16[580074>>1]|0;
 $480 = $479&65535;
 $481 = (($478) + (($480*12)|0)|0);
 $482 = ((($481)) + -132|0);
 $483 = $black;
 $484 = HEAP16[580074>>1]|0;
 $485 = $484&65535;
 $486 = (($483) + (($485*12)|0)|0);
 $487 = ((($486)) + -264|0);
 _memcpy(($482|0),($487|0),132)|0;
 $488 = $black;
 dest=$last; src=$488; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $row = 1;
 while(1) {
  $489 = $row;
  $490 = HEAP16[580074>>1]|0;
  $491 = $490&65535;
  $492 = (($491) - 1)|0;
  $493 = ($489|0)<($492|0);
  $c = 0;
  if (!($493)) {
   break;
  }
  while(1) {
   $494 = $c;
   $495 = ($494|0)<(3);
   if (!($495)) {
    break;
   }
   $496 = $c;
   $497 = ((($last)) + 12|0);
   $498 = (($497) + ($496<<2)|0);
   $499 = +HEAPF32[$498>>2];
   $500 = $c;
   $501 = (($last) + ($500<<2)|0);
   $502 = +HEAPF32[$501>>2];
   $503 = $499 > $502;
   $504 = $c;
   $505 = ((($last)) + 12|0);
   $506 = (($505) + ($504<<2)|0);
   $507 = +HEAPF32[$506>>2];
   $508 = $c;
   $509 = ((($last)) + 24|0);
   $510 = (($509) + ($508<<2)|0);
   $511 = +HEAPF32[$510>>2];
   if ($503) {
    $512 = $507 > $511;
    if ($512) {
     $513 = $c;
     $514 = (($last) + ($513<<2)|0);
     $515 = +HEAPF32[$514>>2];
     $516 = $c;
     $517 = ((($last)) + 24|0);
     $518 = (($517) + ($516<<2)|0);
     $519 = +HEAPF32[$518>>2];
     $520 = $515 > $519;
     $521 = $c;
     if ($520) {
      $522 = (($last) + ($521<<2)|0);
      $523 = +HEAPF32[$522>>2];
      $532 = $523;
     } else {
      $524 = ((($last)) + 24|0);
      $525 = (($524) + ($521<<2)|0);
      $526 = +HEAPF32[$525>>2];
      $532 = $526;
     }
     $527 = $c;
     $528 = $row;
     $529 = $black;
     $530 = (($529) + (($528*12)|0)|0);
     $531 = (($530) + ($527<<2)|0);
     HEAPF32[$531>>2] = $532;
    }
   } else {
    $533 = $507 < $511;
    if ($533) {
     $534 = $c;
     $535 = (($last) + ($534<<2)|0);
     $536 = +HEAPF32[$535>>2];
     $537 = $c;
     $538 = ((($last)) + 24|0);
     $539 = (($538) + ($537<<2)|0);
     $540 = +HEAPF32[$539>>2];
     $541 = $536 < $540;
     $542 = $c;
     if ($541) {
      $543 = (($last) + ($542<<2)|0);
      $544 = +HEAPF32[$543>>2];
      $553 = $544;
     } else {
      $545 = ((($last)) + 24|0);
      $546 = (($545) + ($542<<2)|0);
      $547 = +HEAPF32[$546>>2];
      $553 = $547;
     }
     $548 = $c;
     $549 = $row;
     $550 = $black;
     $551 = (($550) + (($549*12)|0)|0);
     $552 = (($551) + ($548<<2)|0);
     HEAPF32[$552>>2] = $553;
    }
   }
   $554 = $c;
   $555 = (($554) + 1)|0;
   $c = $555;
  }
  $556 = ((($last)) + 12|0);
  _memmove(($last|0),($556|0),24)|0;
  $557 = ((($last)) + 24|0);
  $558 = $row;
  $559 = (($558) + 1)|0;
  $560 = $black;
  $561 = (($560) + (($559*12)|0)|0);
  ;HEAP32[$557>>2]=HEAP32[$561>>2]|0;HEAP32[$557+4>>2]=HEAP32[$561+4>>2]|0;HEAP32[$557+8>>2]=HEAP32[$561+8>>2]|0;
  $562 = $row;
  $563 = (($562) + 1)|0;
  $row = $563;
 }
 while(1) {
  $564 = $c;
  $565 = ($564|0)<(3);
  if (!($565)) {
   break;
  }
  $566 = $c;
  $567 = (($last) + ($566<<2)|0);
  $568 = +HEAPF32[$567>>2];
  $569 = $c;
  $570 = ((($last)) + 12|0);
  $571 = (($570) + ($569<<2)|0);
  $572 = +HEAPF32[$571>>2];
  $573 = $568 + $572;
  $574 = $573 / 2.0;
  $575 = $c;
  $576 = $row;
  $577 = $black;
  $578 = (($577) + (($576*12)|0)|0);
  $579 = (($578) + ($575<<2)|0);
  HEAPF32[$579>>2] = $574;
  $580 = $c;
  $581 = (($580) + 1)|0;
  $c = $581;
 }
 $c = 0;
 while(1) {
  $582 = $c;
  $583 = ($582|0)<(3);
  if (!($583)) {
   break;
  }
  $584 = $c;
  $585 = $black;
  $586 = ((($585)) + 12|0);
  $587 = (($586) + ($584<<2)|0);
  $588 = +HEAPF32[$587>>2];
  $589 = $c;
  $590 = $black;
  $591 = ((($590)) + 36|0);
  $592 = (($591) + ($589<<2)|0);
  $593 = +HEAPF32[$592>>2];
  $594 = $588 + $593;
  $595 = $594 / 2.0;
  $596 = $c;
  $597 = $black;
  $598 = (($597) + ($596<<2)|0);
  HEAPF32[$598>>2] = $595;
  $599 = $c;
  $600 = (($599) + 1)|0;
  $c = $600;
 }
 $601 = (+Math_exp(-0.041666666666666664));
 $602 = 1.0 - $601;
 $603 = $602;
 $val = $603;
 $604 = $black;
 ;HEAP32[$fsum>>2]=HEAP32[$604>>2]|0;HEAP32[$fsum+4>>2]=HEAP32[$604+4>>2]|0;HEAP32[$fsum+8>>2]=HEAP32[$604+8>>2]|0;
 $row = 1;
 while(1) {
  $605 = $row;
  $606 = HEAP16[580074>>1]|0;
  $607 = $606&65535;
  $608 = ($605|0)<($607|0);
  if (!($608)) {
   break;
  }
  $c = 0;
  while(1) {
   $609 = $c;
   $610 = ($609|0)<(3);
   if (!($610)) {
    break;
   }
   $611 = $c;
   $612 = $row;
   $613 = $black;
   $614 = (($613) + (($612*12)|0)|0);
   $615 = (($614) + ($611<<2)|0);
   $616 = +HEAPF32[$615>>2];
   $617 = $c;
   $618 = $row;
   $619 = (($618) - 1)|0;
   $620 = $black;
   $621 = (($620) + (($619*12)|0)|0);
   $622 = (($621) + ($617<<2)|0);
   $623 = +HEAPF32[$622>>2];
   $624 = $616 - $623;
   $625 = $val;
   $626 = $624 * $625;
   $627 = $c;
   $628 = $row;
   $629 = (($628) - 1)|0;
   $630 = $black;
   $631 = (($630) + (($629*12)|0)|0);
   $632 = (($631) + ($627<<2)|0);
   $633 = +HEAPF32[$632>>2];
   $634 = $626 + $633;
   $635 = $c;
   $636 = $row;
   $637 = $black;
   $638 = (($637) + (($636*12)|0)|0);
   $639 = (($638) + ($635<<2)|0);
   HEAPF32[$639>>2] = $634;
   $640 = $c;
   $641 = (($fsum) + ($640<<2)|0);
   $642 = +HEAPF32[$641>>2];
   $643 = $642 + $634;
   HEAPF32[$641>>2] = $643;
   $644 = $c;
   $645 = (($644) + 1)|0;
   $c = $645;
  }
  $646 = $row;
  $647 = (($646) + 1)|0;
  $row = $647;
 }
 $648 = HEAP16[580074>>1]|0;
 $649 = $648&65535;
 $650 = (($649) - 1)|0;
 $651 = $black;
 $652 = (($651) + (($650*12)|0)|0);
 ;HEAP32[$last>>2]=HEAP32[$652>>2]|0;HEAP32[$last+4>>2]=HEAP32[$652+4>>2]|0;HEAP32[$last+8>>2]=HEAP32[$652+8>>2]|0;
 $c = 0;
 while(1) {
  $653 = $c;
  $654 = ($653|0)<(3);
  $655 = HEAP16[580074>>1]|0;
  $656 = $655&65535;
  if (!($654)) {
   break;
  }
  $657 = (+($656|0));
  $658 = $c;
  $659 = (($fsum) + ($658<<2)|0);
  $660 = +HEAPF32[$659>>2];
  $661 = $660 / $657;
  HEAPF32[$659>>2] = $661;
  $662 = $c;
  $663 = (($662) + 1)|0;
  $c = $663;
 }
 $row = $656;
 L170: while(1) {
  $664 = $row;
  $665 = (($664) + -1)|0;
  $row = $665;
  $666 = ($664|0)!=(0);
  if (!($666)) {
   break;
  }
  $c = 0;
  while(1) {
   $667 = $c;
   $668 = ($667|0)<(3);
   if (!($668)) {
    continue L170;
   }
   $669 = $c;
   $670 = $row;
   $671 = $black;
   $672 = (($671) + (($670*12)|0)|0);
   $673 = (($672) + ($669<<2)|0);
   $674 = +HEAPF32[$673>>2];
   $675 = $c;
   $676 = (($fsum) + ($675<<2)|0);
   $677 = +HEAPF32[$676>>2];
   $678 = $674 - $677;
   $679 = $c;
   $680 = (($last) + ($679<<2)|0);
   $681 = +HEAPF32[$680>>2];
   $682 = $678 - $681;
   $683 = $val;
   $684 = $682 * $683;
   $685 = $c;
   $686 = (($last) + ($685<<2)|0);
   $687 = +HEAPF32[$686>>2];
   $688 = $684 + $687;
   $689 = $c;
   $690 = $row;
   $691 = $black;
   $692 = (($691) + (($690*12)|0)|0);
   $693 = (($692) + ($689<<2)|0);
   HEAPF32[$693>>2] = $688;
   $694 = $c;
   $695 = (($last) + ($694<<2)|0);
   HEAPF32[$695>>2] = $688;
   $696 = $c;
   $697 = (($696) + 1)|0;
   $c = $697;
  }
 }
 ;HEAP32[$total>>2]=0|0;HEAP32[$total+4>>2]=0|0;HEAP32[$total+8>>2]=0|0;HEAP32[$total+12>>2]=0|0;
 $row = 2;
 while(1) {
  $698 = $row;
  $699 = HEAP16[580074>>1]|0;
  $700 = $699&65535;
  $701 = ($698|0)<($700|0);
  if (!($701)) {
   break;
  }
  $col = 2;
  while(1) {
   $702 = $col;
   $703 = HEAP16[580076>>1]|0;
   $704 = $703&65535;
   $705 = ($702|0)<($704|0);
   if (!($705)) {
    break;
   }
   $c = 0;
   while(1) {
    $706 = $c;
    $707 = ($706|0)<(3);
    if (!($707)) {
     break;
    }
    $708 = $c;
    $709 = $row;
    $710 = HEAP16[580076>>1]|0;
    $711 = $710&65535;
    $712 = Math_imul($709, $711)|0;
    $713 = $col;
    $714 = (($712) + ($713))|0;
    $715 = HEAP32[972>>2]|0;
    $716 = (($715) + ($714<<3)|0);
    $717 = (($716) + ($708<<1)|0);
    $718 = HEAP16[$717>>1]|0;
    $719 = $718 << 16 >> 16;
    $720 = $c;
    $721 = (($total) + ($720<<2)|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = (($722) + ($719))|0;
    HEAP32[$721>>2] = $723;
    $724 = $c;
    $725 = (($724) + 1)|0;
    $c = $725;
   }
   $726 = ((($total)) + 12|0);
   $727 = HEAP32[$726>>2]|0;
   $728 = (($727) + 1)|0;
   HEAP32[$726>>2] = $728;
   $729 = $col;
   $730 = (($729) + 4)|0;
   $col = $730;
  }
  $731 = $row;
  $732 = (($731) + 4)|0;
  $row = $732;
 }
 $row = 0;
 while(1) {
  $733 = $row;
  $734 = HEAP16[580074>>1]|0;
  $735 = $734&65535;
  $736 = ($733|0)<($735|0);
  if (!($736)) {
   break;
  }
  $c = 0;
  while(1) {
   $737 = $c;
   $738 = ($737|0)<(3);
   if (!($738)) {
    break;
   }
   $739 = $c;
   $740 = (($fsum) + ($739<<2)|0);
   $741 = +HEAPF32[$740>>2];
   $742 = $741 / 2.0;
   $743 = $742;
   $744 = $c;
   $745 = (($total) + ($744<<2)|0);
   $746 = HEAP32[$745>>2]|0;
   $747 = (+($746|0));
   $748 = ((($total)) + 12|0);
   $749 = HEAP32[$748>>2]|0;
   $750 = (+($749|0));
   $751 = $750 * 100.0;
   $752 = $747 / $751;
   $753 = $743 + $752;
   $754 = $c;
   $755 = $row;
   $756 = $black;
   $757 = (($756) + (($755*12)|0)|0);
   $758 = (($757) + ($754<<2)|0);
   $759 = +HEAPF32[$758>>2];
   $760 = $759;
   $761 = $760 + $753;
   $762 = $761;
   HEAPF32[$758>>2] = $762;
   $763 = $c;
   $764 = (($763) + 1)|0;
   $c = $764;
  }
  $765 = $row;
  $766 = (($765) + 1)|0;
  $row = $766;
 }
 $row = 0;
 while(1) {
  $767 = $row;
  $768 = HEAP16[580074>>1]|0;
  $769 = $768&65535;
  $770 = ($767|0)<($769|0);
  if (!($770)) {
   break;
  }
  $i = 0;
  while(1) {
   $771 = $i;
   $772 = ($771|0)<(6);
   if (!($772)) {
    break;
   }
   $773 = $i;
   $774 = ((($ddft)) + 24|0);
   $775 = (($774) + ($773<<2)|0);
   $776 = +HEAPF32[$775>>2];
   $777 = $776;
   $778 = $row;
   $779 = (+($778|0));
   $780 = HEAP16[580074>>1]|0;
   $781 = $780&65535;
   $782 = (+($781|0));
   $783 = $782 - 1.0;
   $784 = $779 / $783;
   $785 = $i;
   $786 = ((($ddft)) + 48|0);
   $787 = (($786) + ($785<<2)|0);
   $788 = +HEAPF32[$787>>2];
   $789 = $i;
   $790 = ((($ddft)) + 24|0);
   $791 = (($790) + ($789<<2)|0);
   $792 = +HEAPF32[$791>>2];
   $793 = $788 - $792;
   $794 = $793;
   $795 = $784 * $794;
   $796 = $777 + $795;
   $797 = $796;
   $798 = $i;
   $799 = (($ddft) + ($798<<2)|0);
   HEAPF32[$799>>2] = $797;
   $800 = $i;
   $801 = (($800) + 1)|0;
   $i = $801;
  }
  $802 = $row;
  $803 = HEAP16[580076>>1]|0;
  $804 = $803&65535;
  $805 = Math_imul($802, $804)|0;
  $806 = HEAP32[972>>2]|0;
  $807 = (($806) + ($805<<3)|0);
  $pix = $807;
  $808 = $pix;
  ;HEAP16[$prev>>1]=HEAP16[$808>>1]|0;HEAP16[$prev+2>>1]=HEAP16[$808+2>>1]|0;HEAP16[$prev+4>>1]=HEAP16[$808+4>>1]|0;
  $809 = $row;
  $810 = (+($809|0));
  $811 = HEAP16[580074>>1]|0;
  $812 = $811&65535;
  $813 = (+($812|0));
  $814 = $813 - 1.0;
  $815 = $810 / $814;
  $816 = ((($dim)) + 8|0);
  $817 = HEAP32[$816>>2]|0;
  $818 = (($817) - 1)|0;
  $819 = (+($818>>>0));
  $820 = $815 * $819;
  $821 = $820;
  $frow = $821;
  $822 = $frow;
  $823 = (~~(($822)));
  $irow = $823;
  $824 = ((($dim)) + 8|0);
  $825 = HEAP32[$824>>2]|0;
  $826 = (($825) - 1)|0;
  $827 = ($823|0)==($826|0);
  if ($827) {
   $828 = $irow;
   $829 = (($828) + -1)|0;
   $irow = $829;
  }
  $830 = $irow;
  $831 = (+($830|0));
  $832 = $frow;
  $833 = $832 - $831;
  $frow = $833;
  $i = 0;
  while(1) {
   $834 = $i;
   $835 = ((($dim)) + 4|0);
   $836 = HEAP32[$835>>2]|0;
   $837 = ($834>>>0)<($836>>>0);
   if (!($837)) {
    break;
   }
   $c = 0;
   while(1) {
    $838 = $c;
    $839 = ($838|0)<(3);
    if (!($839)) {
     break;
    }
    $840 = $c;
    $841 = $irow;
    $842 = ((($dim)) + 4|0);
    $843 = HEAP32[$842>>2]|0;
    $844 = Math_imul($841, $843)|0;
    $845 = $i;
    $846 = (($844) + ($845))|0;
    $847 = $sgain;
    $848 = (($847) + (($846*12)|0)|0);
    $849 = (($848) + ($840<<2)|0);
    $850 = +HEAPF32[$849>>2];
    $851 = $frow;
    $852 = 1.0 - $851;
    $853 = $850 * $852;
    $854 = $c;
    $855 = $irow;
    $856 = (($855) + 1)|0;
    $857 = ((($dim)) + 4|0);
    $858 = HEAP32[$857>>2]|0;
    $859 = Math_imul($856, $858)|0;
    $860 = $i;
    $861 = (($859) + ($860))|0;
    $862 = $sgain;
    $863 = (($862) + (($861*12)|0)|0);
    $864 = (($863) + ($854<<2)|0);
    $865 = +HEAPF32[$864>>2];
    $866 = $frow;
    $867 = $865 * $866;
    $868 = $853 + $867;
    $869 = $c;
    $870 = $i;
    $871 = $sgrow;
    $872 = (($871) + (($870*12)|0)|0);
    $873 = (($872) + ($869<<2)|0);
    HEAPF32[$873>>2] = $868;
    $874 = $c;
    $875 = (($874) + 1)|0;
    $c = $875;
   }
   $876 = $i;
   $877 = (($876) + 1)|0;
   $i = $877;
  }
  $col = 0;
  while(1) {
   $878 = $col;
   $879 = HEAP16[580076>>1]|0;
   $880 = $879&65535;
   $881 = ($878|0)<($880|0);
   if (!($881)) {
    break;
   }
   $c = 0;
   while(1) {
    $882 = $c;
    $883 = ($882|0)<(3);
    if (!($883)) {
     break;
    }
    $884 = $c;
    $885 = $pix;
    $886 = (($885) + ($884<<1)|0);
    $887 = HEAP16[$886>>1]|0;
    $888 = $887 << 16 >> 16;
    $889 = $c;
    $890 = (($prev) + ($889<<1)|0);
    $891 = HEAP16[$890>>1]|0;
    $892 = $891 << 16 >> 16;
    $893 = (($888) - ($892))|0;
    $diff = $893;
    $894 = $c;
    $895 = $pix;
    $896 = (($895) + ($894<<1)|0);
    $897 = HEAP16[$896>>1]|0;
    $898 = $c;
    $899 = (($prev) + ($898<<1)|0);
    HEAP16[$899>>1] = $897;
    $900 = $c;
    $901 = $pix;
    $902 = (($901) + ($900<<1)|0);
    $903 = HEAP16[$902>>1]|0;
    $904 = $903 << 16 >> 16;
    $905 = (+($904|0));
    $906 = $diff;
    $907 = $diff;
    $908 = $diff;
    $909 = Math_imul($907, $908)|0;
    $910 = $909 >> 14;
    $911 = (($906) + ($910))|0;
    $912 = (+($911|0));
    $913 = +HEAPF32[$cfilt>>2];
    $914 = $912 * $913;
    $915 = $c;
    $916 = (($ddft) + ($915<<3)|0);
    $917 = ((($916)) + 4|0);
    $918 = +HEAPF32[$917>>2];
    $919 = $914 - $918;
    $920 = $919;
    $921 = $c;
    $922 = (($ddft) + ($921<<3)|0);
    $923 = +HEAPF32[$922>>2];
    $924 = $923;
    $925 = $col;
    $926 = (+($925|0));
    $927 = HEAP16[580076>>1]|0;
    $928 = $927&65535;
    $929 = (+($928|0));
    $930 = $926 / $929;
    $931 = $930;
    $932 = $931 - 0.5;
    $933 = $924 * $932;
    $934 = $920 - $933;
    $935 = $c;
    $936 = $row;
    $937 = $black;
    $938 = (($937) + (($936*12)|0)|0);
    $939 = (($938) + ($935<<2)|0);
    $940 = +HEAPF32[$939>>2];
    $941 = $940;
    $942 = $934 - $941;
    $943 = (+Math_floor((+$942)));
    $944 = $905 + $943;
    $945 = (~~(($944)));
    $946 = $c;
    $947 = (($ipix) + ($946<<2)|0);
    HEAP32[$947>>2] = $945;
    $948 = $c;
    $949 = (($948) + 1)|0;
    $c = $949;
   }
   $c = 0;
   while(1) {
    $950 = $c;
    $951 = ($950|0)<(3);
    if (!($951)) {
     break;
    }
    $952 = $c;
    $953 = (($ipix) + ($952<<2)|0);
    $954 = HEAP32[$953>>2]|0;
    $955 = $c;
    $956 = (($ipix) + ($955<<2)|0);
    $957 = HEAP32[$956>>2]|0;
    $958 = Math_imul($954, $957)|0;
    $959 = $958 >> 14;
    $960 = $c;
    $961 = (($work) + ($960<<2)|0);
    HEAP32[$961>>2] = $959;
    $962 = $c;
    $963 = (($ipix) + ($962<<2)|0);
    $964 = HEAP32[$963>>2]|0;
    $965 = $c;
    $966 = (($work) + ($965<<2)|0);
    $967 = HEAP32[$966>>2]|0;
    $968 = Math_imul($964, $967)|0;
    $969 = $968 >> 14;
    $970 = $c;
    $971 = ((($work)) + 24|0);
    $972 = (($971) + ($970<<2)|0);
    HEAP32[$972>>2] = $969;
    $973 = $c;
    $974 = (($973) + 1)|0;
    $975 = (($974|0) % 3)&-1;
    $976 = (($ipix) + ($975<<2)|0);
    $977 = HEAP32[$976>>2]|0;
    $978 = $c;
    $979 = (($978) + 2)|0;
    $980 = (($979|0) % 3)&-1;
    $981 = (($ipix) + ($980<<2)|0);
    $982 = HEAP32[$981>>2]|0;
    $983 = Math_imul($977, $982)|0;
    $984 = $983 >> 14;
    $985 = $c;
    $986 = (2 - ($985))|0;
    $987 = ((($work)) + 12|0);
    $988 = (($987) + ($986<<2)|0);
    HEAP32[$988>>2] = $984;
    $989 = $c;
    $990 = (($989) + 1)|0;
    $c = $990;
   }
   $c = 0;
   while(1) {
    $991 = $c;
    $992 = ($991|0)<(3);
    if (!($992)) {
     break;
    }
    $i = 0;
    $val = 0.0;
    while(1) {
     $993 = $i;
     $994 = ($993|0)<(3);
     if (!($994)) {
      break;
     }
     $j = 0;
     while(1) {
      $995 = $j;
      $996 = ($995|0)<(3);
      if (!($996)) {
       break;
      }
      $997 = $j;
      $998 = $i;
      $999 = $c;
      $1000 = (($ppm) + (($999*36)|0)|0);
      $1001 = (($1000) + (($998*12)|0)|0);
      $1002 = (($1001) + ($997<<2)|0);
      $1003 = +HEAPF32[$1002>>2];
      $1004 = $j;
      $1005 = $i;
      $1006 = (($work) + (($1005*12)|0)|0);
      $1007 = (($1006) + ($1004<<2)|0);
      $1008 = HEAP32[$1007>>2]|0;
      $1009 = (+($1008|0));
      $1010 = $1003 * $1009;
      $1011 = $val;
      $1012 = $1011 + $1010;
      $val = $1012;
      $1013 = $j;
      $1014 = (($1013) + 1)|0;
      $j = $1014;
     }
     $1015 = $i;
     $1016 = (($1015) + 1)|0;
     $i = $1016;
    }
    $1017 = $c;
    $1018 = (($ipix) + ($1017<<2)|0);
    $1019 = HEAP32[$1018>>2]|0;
    $1020 = (+($1019|0));
    $1021 = $val;
    $1022 = $1021;
    $1023 = (+Math_floor((+$1022)));
    $1024 = $1020 + $1023;
    $1025 = $c;
    $1026 = $col;
    $1027 = $sgx;
    $1028 = (($1026|0) / ($1027|0))&-1;
    $1029 = $sgrow;
    $1030 = (($1029) + (($1028*12)|0)|0);
    $1031 = (($1030) + ($1025<<2)|0);
    $1032 = +HEAPF32[$1031>>2];
    $1033 = $sgx;
    $1034 = $col;
    $1035 = $sgx;
    $1036 = (($1034|0) % ($1035|0))&-1;
    $1037 = (($1033) - ($1036))|0;
    $1038 = (+($1037|0));
    $1039 = $1032 * $1038;
    $1040 = $c;
    $1041 = $col;
    $1042 = $sgx;
    $1043 = (($1041|0) / ($1042|0))&-1;
    $1044 = (($1043) + 1)|0;
    $1045 = $sgrow;
    $1046 = (($1045) + (($1044*12)|0)|0);
    $1047 = (($1046) + ($1040<<2)|0);
    $1048 = +HEAPF32[$1047>>2];
    $1049 = $col;
    $1050 = $sgx;
    $1051 = (($1049|0) % ($1050|0))&-1;
    $1052 = (+($1051|0));
    $1053 = $1048 * $1052;
    $1054 = $1039 + $1053;
    $1055 = $1054;
    $1056 = $1024 * $1055;
    $1057 = $sgx;
    $1058 = (+($1057|0));
    $1059 = $1056 / $1058;
    $1060 = $c;
    $1061 = (($div) + ($1060<<2)|0);
    $1062 = +HEAPF32[$1061>>2];
    $1063 = $1062;
    $1064 = $1059 / $1063;
    $1065 = (+Math_floor((+$1064)));
    $1066 = (~~(($1065)));
    $1067 = $c;
    $1068 = (($ipix) + ($1067<<2)|0);
    HEAP32[$1068>>2] = $1066;
    $1069 = $c;
    $1070 = (($ipix) + ($1069<<2)|0);
    $1071 = HEAP32[$1070>>2]|0;
    $1072 = ($1071|0)>(32000);
    if ($1072) {
     $1073 = $c;
     $1074 = (($ipix) + ($1073<<2)|0);
     HEAP32[$1074>>2] = 32000;
    }
    $1075 = $c;
    $1076 = (($ipix) + ($1075<<2)|0);
    $1077 = HEAP32[$1076>>2]|0;
    $1078 = $1077&65535;
    $1079 = $c;
    $1080 = $pix;
    $1081 = (($1080) + ($1079<<1)|0);
    HEAP16[$1081>>1] = $1078;
    $1082 = $c;
    $1083 = (($1082) + 1)|0;
    $c = $1083;
   }
   $1084 = $pix;
   $1085 = ((($1084)) + 8|0);
   $pix = $1085;
   $1086 = $col;
   $1087 = (($1086) + 1)|0;
   $col = $1087;
  }
  $1088 = $row;
  $1089 = (($1088) + 1)|0;
  $row = $1089;
 }
 $1090 = $black;
 _free($1090);
 $1091 = $sgrow;
 _free($1091);
 $1092 = $sgain;
 _free($1092);
 $1093 = (_foveon_camf_matrix($dim,612043)|0);
 $badpix = $1093;
 $1094 = ($1093|0)!=(0|0);
 if ($1094) {
  $i = 0;
  while(1) {
   $1095 = $i;
   $1096 = HEAP32[$dim>>2]|0;
   $1097 = ($1095>>>0)<($1096>>>0);
   if (!($1097)) {
    break;
   }
   $1098 = $i;
   $1099 = $badpix;
   $1100 = (($1099) + ($1098<<2)|0);
   $1101 = HEAP32[$1100>>2]|0;
   $1102 = $1101 >>> 8;
   $1103 = $1102 & 4095;
   $1104 = HEAP32[$keep>>2]|0;
   $1105 = (($1103) - ($1104))|0;
   $col = $1105;
   $1106 = $i;
   $1107 = $badpix;
   $1108 = (($1107) + ($1106<<2)|0);
   $1109 = HEAP32[$1108>>2]|0;
   $1110 = $1109 >>> 20;
   $1111 = ((($keep)) + 4|0);
   $1112 = HEAP32[$1111>>2]|0;
   $1113 = (($1110) - ($1112))|0;
   $row = $1113;
   $1114 = $row;
   $1115 = (($1114) - 1)|0;
   $1116 = HEAP16[580074>>1]|0;
   $1117 = $1116&65535;
   $1118 = (($1117) - 3)|0;
   $1119 = ($1115>>>0)>($1118>>>0);
   L248: do {
    if (!($1119)) {
     $1120 = $col;
     $1121 = (($1120) - 1)|0;
     $1122 = HEAP16[580076>>1]|0;
     $1123 = $1122&65535;
     $1124 = (($1123) - 3)|0;
     $1125 = ($1121>>>0)>($1124>>>0);
     if (!($1125)) {
      ;HEAP32[$fsum>>2]=0|0;HEAP32[$fsum+4>>2]=0|0;HEAP32[$fsum+8>>2]=0|0;
      $j = 0;
      $sum = 0;
      while(1) {
       $1126 = $j;
       $1127 = ($1126|0)<(8);
       if (!($1127)) {
        break;
       }
       $1128 = $i;
       $1129 = $badpix;
       $1130 = (($1129) + ($1128<<2)|0);
       $1131 = HEAP32[$1130>>2]|0;
       $1132 = $j;
       $1133 = 1 << $1132;
       $1134 = $1131 & $1133;
       $1135 = ($1134|0)!=(0);
       if ($1135) {
        $c = 0;
        while(1) {
         $1136 = $c;
         $1137 = ($1136|0)<(3);
         if (!($1137)) {
          break;
         }
         $1138 = $c;
         $1139 = $row;
         $1140 = $j;
         $1141 = $1140<<1;
         $1142 = (589162 + ($1141<<1)|0);
         $1143 = HEAP16[$1142>>1]|0;
         $1144 = $1143 << 16 >> 16;
         $1145 = (($1139) + ($1144))|0;
         $1146 = HEAP16[580076>>1]|0;
         $1147 = $1146&65535;
         $1148 = Math_imul($1145, $1147)|0;
         $1149 = $col;
         $1150 = (($1148) + ($1149))|0;
         $1151 = $j;
         $1152 = $1151<<1;
         $1153 = (($1152) + 1)|0;
         $1154 = (589162 + ($1153<<1)|0);
         $1155 = HEAP16[$1154>>1]|0;
         $1156 = $1155 << 16 >> 16;
         $1157 = (($1150) + ($1156))|0;
         $1158 = HEAP32[972>>2]|0;
         $1159 = (($1158) + ($1157<<3)|0);
         $1160 = (($1159) + ($1138<<1)|0);
         $1161 = HEAP16[$1160>>1]|0;
         $1162 = $1161 << 16 >> 16;
         $1163 = (+($1162|0));
         $1164 = $c;
         $1165 = (($fsum) + ($1164<<2)|0);
         $1166 = +HEAPF32[$1165>>2];
         $1167 = $1166 + $1163;
         HEAPF32[$1165>>2] = $1167;
         $1168 = $c;
         $1169 = (($1168) + 1)|0;
         $c = $1169;
        }
        $1170 = $sum;
        $1171 = (($1170) + 1)|0;
        $sum = $1171;
       }
       $1172 = $j;
       $1173 = (($1172) + 1)|0;
       $j = $1173;
      }
      $1174 = $sum;
      $1175 = ($1174|0)!=(0);
      if ($1175) {
       $c = 0;
       while(1) {
        $1176 = $c;
        $1177 = ($1176|0)<(3);
        if (!($1177)) {
         break L248;
        }
        $1178 = $c;
        $1179 = (($fsum) + ($1178<<2)|0);
        $1180 = +HEAPF32[$1179>>2];
        $1181 = $sum;
        $1182 = (+($1181|0));
        $1183 = $1180 / $1182;
        $1184 = (~~(($1183)));
        $1185 = $c;
        $1186 = $row;
        $1187 = HEAP16[580076>>1]|0;
        $1188 = $1187&65535;
        $1189 = Math_imul($1186, $1188)|0;
        $1190 = $col;
        $1191 = (($1189) + ($1190))|0;
        $1192 = HEAP32[972>>2]|0;
        $1193 = (($1192) + ($1191<<3)|0);
        $1194 = (($1193) + ($1185<<1)|0);
        HEAP16[$1194>>1] = $1184;
        $1195 = $c;
        $1196 = (($1195) + 1)|0;
        $c = $1196;
       }
      }
     }
    }
   } while(0);
   $1197 = $i;
   $1198 = (($1197) + 1)|0;
   $i = $1198;
  }
  $1199 = $badpix;
  _free($1199);
 }
 $1200 = HEAP16[580076>>1]|0;
 $1201 = $1200&65535;
 $1202 = ($1201*5)|0;
 $1203 = (_calloc($1202,12)|0);
 $1204 = ((($smrow)) + 24|0);
 HEAP32[$1204>>2] = $1203;
 $1205 = ((($smrow)) + 24|0);
 $1206 = HEAP32[$1205>>2]|0;
 _merror($1206,612053);
 $i = 0;
 while(1) {
  $1207 = $i;
  $1208 = ($1207|0)<(5);
  if (!($1208)) {
   break;
  }
  $1209 = ((($smrow)) + 24|0);
  $1210 = HEAP32[$1209>>2]|0;
  $1211 = $i;
  $1212 = HEAP16[580076>>1]|0;
  $1213 = $1212&65535;
  $1214 = Math_imul($1211, $1213)|0;
  $1215 = (($1210) + (($1214*12)|0)|0);
  $1216 = $i;
  $1217 = (($smrow) + ($1216<<2)|0);
  HEAP32[$1217>>2] = $1215;
  $1218 = $i;
  $1219 = (($1218) + 1)|0;
  $i = $1219;
 }
 $smlast = -1;
 $row = 2;
 while(1) {
  $1220 = $row;
  $1221 = HEAP16[580074>>1]|0;
  $1222 = $1221&65535;
  $1223 = (($1222) - 2)|0;
  $1224 = ($1220|0)<($1223|0);
  if (!($1224)) {
   break;
  }
  L275: while(1) {
   $1225 = $smlast;
   $1226 = $row;
   $1227 = (($1226) + 2)|0;
   $1228 = ($1225|0)<($1227|0);
   if (!($1228)) {
    break;
   }
   $i = 0;
   while(1) {
    $1229 = $i;
    $1230 = ($1229|0)<(6);
    if (!($1230)) {
     break;
    }
    $1231 = $i;
    $1232 = (($smrow) + ($1231<<2)|0);
    $1233 = HEAP32[$1232>>2]|0;
    $1234 = $i;
    $1235 = (($1234) + 5)|0;
    $1236 = (($1235|0) % 6)&-1;
    $1237 = (($smrow) + ($1236<<2)|0);
    HEAP32[$1237>>2] = $1233;
    $1238 = $i;
    $1239 = (($1238) + 1)|0;
    $i = $1239;
   }
   $1240 = $smlast;
   $1241 = (($1240) + 1)|0;
   $smlast = $1241;
   $1242 = HEAP16[580076>>1]|0;
   $1243 = $1242&65535;
   $1244 = Math_imul($1241, $1243)|0;
   $1245 = (($1244) + 2)|0;
   $1246 = HEAP32[972>>2]|0;
   $1247 = (($1246) + ($1245<<3)|0);
   $pix = $1247;
   $col = 2;
   while(1) {
    $1248 = $col;
    $1249 = HEAP16[580076>>1]|0;
    $1250 = $1249&65535;
    $1251 = (($1250) - 2)|0;
    $1252 = ($1248|0)<($1251|0);
    if (!($1252)) {
     continue L275;
    }
    $1253 = $pix;
    $1254 = HEAP16[$1253>>1]|0;
    $1255 = $1254 << 16 >> 16;
    $1256 = ($1255*6)|0;
    $1257 = $pix;
    $1258 = ((($1257)) + -8|0);
    $1259 = HEAP16[$1258>>1]|0;
    $1260 = $1259 << 16 >> 16;
    $1261 = $pix;
    $1262 = ((($1261)) + 8|0);
    $1263 = HEAP16[$1262>>1]|0;
    $1264 = $1263 << 16 >> 16;
    $1265 = (($1260) + ($1264))|0;
    $1266 = $1265<<2;
    $1267 = (($1256) + ($1266))|0;
    $1268 = $pix;
    $1269 = ((($1268)) + -16|0);
    $1270 = HEAP16[$1269>>1]|0;
    $1271 = $1270 << 16 >> 16;
    $1272 = (($1267) + ($1271))|0;
    $1273 = $pix;
    $1274 = ((($1273)) + 16|0);
    $1275 = HEAP16[$1274>>1]|0;
    $1276 = $1275 << 16 >> 16;
    $1277 = (($1272) + ($1276))|0;
    $1278 = (($1277) + 8)|0;
    $1279 = $1278 >> 4;
    $1280 = $col;
    $1281 = ((($smrow)) + 16|0);
    $1282 = HEAP32[$1281>>2]|0;
    $1283 = (($1282) + (($1280*12)|0)|0);
    HEAP32[$1283>>2] = $1279;
    $1284 = $pix;
    $1285 = ((($1284)) + 8|0);
    $pix = $1285;
    $1286 = $col;
    $1287 = (($1286) + 1)|0;
    $col = $1287;
   }
  }
  $1288 = $row;
  $1289 = HEAP16[580076>>1]|0;
  $1290 = $1289&65535;
  $1291 = Math_imul($1288, $1290)|0;
  $1292 = (($1291) + 2)|0;
  $1293 = HEAP32[972>>2]|0;
  $1294 = (($1293) + ($1292<<3)|0);
  $pix = $1294;
  $col = 2;
  while(1) {
   $1295 = $col;
   $1296 = HEAP16[580076>>1]|0;
   $1297 = $1296&65535;
   $1298 = (($1297) - 2)|0;
   $1299 = ($1295|0)<($1298|0);
   if (!($1299)) {
    break;
   }
   $1300 = $col;
   $1301 = ((($smrow)) + 8|0);
   $1302 = HEAP32[$1301>>2]|0;
   $1303 = (($1302) + (($1300*12)|0)|0);
   $1304 = HEAP32[$1303>>2]|0;
   $1305 = ($1304*6)|0;
   $1306 = $col;
   $1307 = ((($smrow)) + 4|0);
   $1308 = HEAP32[$1307>>2]|0;
   $1309 = (($1308) + (($1306*12)|0)|0);
   $1310 = HEAP32[$1309>>2]|0;
   $1311 = $col;
   $1312 = ((($smrow)) + 12|0);
   $1313 = HEAP32[$1312>>2]|0;
   $1314 = (($1313) + (($1311*12)|0)|0);
   $1315 = HEAP32[$1314>>2]|0;
   $1316 = (($1310) + ($1315))|0;
   $1317 = $1316<<2;
   $1318 = (($1305) + ($1317))|0;
   $1319 = $col;
   $1320 = HEAP32[$smrow>>2]|0;
   $1321 = (($1320) + (($1319*12)|0)|0);
   $1322 = HEAP32[$1321>>2]|0;
   $1323 = (($1318) + ($1322))|0;
   $1324 = $col;
   $1325 = ((($smrow)) + 16|0);
   $1326 = HEAP32[$1325>>2]|0;
   $1327 = (($1326) + (($1324*12)|0)|0);
   $1328 = HEAP32[$1327>>2]|0;
   $1329 = (($1323) + ($1328))|0;
   $1330 = (($1329) + 8)|0;
   $1331 = $1330 >> 4;
   $smred = $1331;
   $1332 = $col;
   $1333 = ($1332|0)==(2);
   if ($1333) {
    $1334 = $smred;
    $smred_p = $1334;
   }
   $1335 = $pix;
   $1336 = HEAP16[$1335>>1]|0;
   $1337 = $1336 << 16 >> 16;
   $1338 = $pix;
   $1339 = HEAP16[$1338>>1]|0;
   $1340 = $1339 << 16 >> 16;
   $1341 = $smred;
   $1342 = ($1341*7)|0;
   $1343 = $smred_p;
   $1344 = (($1342) + ($1343))|0;
   $1345 = $1344 >> 3;
   $1346 = (($1340) - ($1345))|0;
   $1347 = $1346 >> 3;
   $1348 = (($1337) + ($1347))|0;
   $i = $1348;
   $1349 = $i;
   $1350 = ($1349|0)>(32000);
   $$ = $1350 ? 32000 : $1348;
   $i = $$;
   $1351 = $i;
   $1352 = $1351&65535;
   $1353 = $pix;
   HEAP16[$1353>>1] = $1352;
   $1354 = $smred;
   $smred_p = $1354;
   $1355 = $pix;
   $1356 = ((($1355)) + 8|0);
   $pix = $1356;
   $1357 = $col;
   $1358 = (($1357) + 1)|0;
   $col = $1358;
  }
  $1359 = $row;
  $1360 = (($1359) + 1)|0;
  $row = $1360;
 }
 $min = 65535;
 $c = 0;
 while(1) {
  $1361 = $c;
  $1362 = ($1361|0)<(3);
  if (!($1362)) {
   break;
  }
  $1363 = $c;
  $1364 = (($satlev) + ($1363<<2)|0);
  $1365 = HEAP32[$1364>>2]|0;
  $1366 = (+($1365|0));
  $1367 = $c;
  $1368 = (($div) + ($1367<<2)|0);
  $1369 = +HEAPF32[$1368>>2];
  $1370 = $1366 / $1369;
  $1371 = (~~(($1370)));
  $i = $1371;
  $1372 = $min;
  $1373 = $i;
  $1374 = ($1372|0)>($1373|0);
  if ($1374) {
   $1375 = $i;
   $min = $1375;
  }
  $1376 = $c;
  $1377 = (($1376) + 1)|0;
  $c = $1377;
 }
 $1378 = $min;
 $1379 = ($1378*9)|0;
 $1380 = $1379 >> 4;
 $limit = $1380;
 $1381 = HEAP32[972>>2]|0;
 $pix = $1381;
 while(1) {
  $1382 = $pix;
  $1383 = HEAP16[580074>>1]|0;
  $1384 = $1383&65535;
  $1385 = HEAP16[580076>>1]|0;
  $1386 = $1385&65535;
  $1387 = Math_imul($1384, $1386)|0;
  $1388 = HEAP32[972>>2]|0;
  $1389 = (($1388) + ($1387<<3)|0);
  $1390 = ($1382>>>0)<($1389>>>0);
  if (!($1390)) {
   break;
  }
  $1391 = $pix;
  $1392 = HEAP16[$1391>>1]|0;
  $1393 = $1392 << 16 >> 16;
  $1394 = $limit;
  $1395 = ($1393|0)<=($1394|0);
  L304: do {
   if (!($1395)) {
    $1396 = $pix;
    $1397 = ((($1396)) + 2|0);
    $1398 = HEAP16[$1397>>1]|0;
    $1399 = $1398 << 16 >> 16;
    $1400 = $limit;
    $1401 = ($1399|0)<=($1400|0);
    if (!($1401)) {
     $1402 = $pix;
     $1403 = ((($1402)) + 4|0);
     $1404 = HEAP16[$1403>>1]|0;
     $1405 = $1404 << 16 >> 16;
     $1406 = $limit;
     $1407 = ($1405|0)<=($1406|0);
     if (!($1407)) {
      $1408 = $pix;
      $1409 = HEAP16[$1408>>1]|0;
      $1410 = $1409 << 16 >> 16;
      $max = $1410;
      $min = $1410;
      $c = 1;
      while(1) {
       $1411 = $c;
       $1412 = ($1411|0)<(3);
       $1413 = $min;
       if (!($1412)) {
        break;
       }
       $1414 = $c;
       $1415 = $pix;
       $1416 = (($1415) + ($1414<<1)|0);
       $1417 = HEAP16[$1416>>1]|0;
       $1418 = $1417 << 16 >> 16;
       $1419 = ($1413|0)>($1418|0);
       if ($1419) {
        $1420 = $c;
        $1421 = $pix;
        $1422 = (($1421) + ($1420<<1)|0);
        $1423 = HEAP16[$1422>>1]|0;
        $1424 = $1423 << 16 >> 16;
        $min = $1424;
       }
       $1425 = $max;
       $1426 = $c;
       $1427 = $pix;
       $1428 = (($1427) + ($1426<<1)|0);
       $1429 = HEAP16[$1428>>1]|0;
       $1430 = $1429 << 16 >> 16;
       $1431 = ($1425|0)<($1430|0);
       if ($1431) {
        $1432 = $c;
        $1433 = $pix;
        $1434 = (($1433) + ($1432<<1)|0);
        $1435 = HEAP16[$1434>>1]|0;
        $1436 = $1435 << 16 >> 16;
        $max = $1436;
       }
       $1437 = $c;
       $1438 = (($1437) + 1)|0;
       $c = $1438;
      }
      $1439 = $limit;
      $1440 = $1439<<1;
      $1441 = ($1413|0)>=($1440|0);
      if ($1441) {
       $1442 = $max;
       $1443 = $1442&65535;
       $1444 = $pix;
       $1445 = ((($1444)) + 4|0);
       HEAP16[$1445>>1] = $1443;
       $1446 = $pix;
       $1447 = ((($1446)) + 2|0);
       HEAP16[$1447>>1] = $1443;
       $1448 = $pix;
       HEAP16[$1448>>1] = $1443;
       break;
      }
      $1449 = $min;
      $1450 = $limit;
      $1451 = (($1449) - ($1450))|0;
      $1452 = $1451 << 14;
      $1453 = $limit;
      $1454 = (($1452|0) / ($1453|0))&-1;
      $1455 = (16384 - ($1454))|0;
      $i = $1455;
      $1456 = $i;
      $1457 = $i;
      $1458 = Math_imul($1456, $1457)|0;
      $1459 = $1458 >> 14;
      $1460 = (16384 - ($1459))|0;
      $i = $1460;
      $1461 = $i;
      $1462 = $i;
      $1463 = Math_imul($1461, $1462)|0;
      $1464 = $1463 >> 14;
      $i = $1464;
      $c = 0;
      while(1) {
       $1465 = $c;
       $1466 = ($1465|0)<(3);
       if (!($1466)) {
        break L304;
       }
       $1467 = $max;
       $1468 = $c;
       $1469 = $pix;
       $1470 = (($1469) + ($1468<<1)|0);
       $1471 = HEAP16[$1470>>1]|0;
       $1472 = $1471 << 16 >> 16;
       $1473 = (($1467) - ($1472))|0;
       $1474 = $i;
       $1475 = Math_imul($1473, $1474)|0;
       $1476 = $1475 >> 14;
       $1477 = $c;
       $1478 = $pix;
       $1479 = (($1478) + ($1477<<1)|0);
       $1480 = HEAP16[$1479>>1]|0;
       $1481 = $1480 << 16 >> 16;
       $1482 = (($1481) + ($1476))|0;
       $1483 = $1482&65535;
       HEAP16[$1479>>1] = $1483;
       $1484 = $c;
       $1485 = (($1484) + 1)|0;
       $c = $1485;
      }
     }
    }
   }
  } while(0);
  $1486 = $pix;
  $1487 = ((($1486)) + 8|0);
  $pix = $1487;
 }
 $smlast = -1;
 $row = 2;
 while(1) {
  $1488 = $row;
  $1489 = HEAP16[580074>>1]|0;
  $1490 = $1489&65535;
  $1491 = (($1490) - 2)|0;
  $1492 = ($1488|0)<($1491|0);
  if (!($1492)) {
   break;
  }
  L328: while(1) {
   $1493 = $smlast;
   $1494 = $row;
   $1495 = (($1494) + 2)|0;
   $1496 = ($1493|0)<($1495|0);
   if (!($1496)) {
    break;
   }
   $i = 0;
   while(1) {
    $1497 = $i;
    $1498 = ($1497|0)<(6);
    if (!($1498)) {
     break;
    }
    $1499 = $i;
    $1500 = (($smrow) + ($1499<<2)|0);
    $1501 = HEAP32[$1500>>2]|0;
    $1502 = $i;
    $1503 = (($1502) + 5)|0;
    $1504 = (($1503|0) % 6)&-1;
    $1505 = (($smrow) + ($1504<<2)|0);
    HEAP32[$1505>>2] = $1501;
    $1506 = $i;
    $1507 = (($1506) + 1)|0;
    $i = $1507;
   }
   $1508 = $smlast;
   $1509 = (($1508) + 1)|0;
   $smlast = $1509;
   $1510 = HEAP16[580076>>1]|0;
   $1511 = $1510&65535;
   $1512 = Math_imul($1509, $1511)|0;
   $1513 = (($1512) + 2)|0;
   $1514 = HEAP32[972>>2]|0;
   $1515 = (($1514) + ($1513<<3)|0);
   $pix = $1515;
   $col = 2;
   while(1) {
    $1516 = $col;
    $1517 = HEAP16[580076>>1]|0;
    $1518 = $1517&65535;
    $1519 = (($1518) - 2)|0;
    $1520 = ($1516|0)<($1519|0);
    if (!($1520)) {
     continue L328;
    }
    $c = 0;
    while(1) {
     $1521 = $c;
     $1522 = ($1521|0)<(3);
     if (!($1522)) {
      break;
     }
     $1523 = $c;
     $1524 = (($1523) - 4)|0;
     $1525 = $pix;
     $1526 = (($1525) + ($1524<<1)|0);
     $1527 = HEAP16[$1526>>1]|0;
     $1528 = $1527 << 16 >> 16;
     $1529 = $c;
     $1530 = $pix;
     $1531 = (($1530) + ($1529<<1)|0);
     $1532 = HEAP16[$1531>>1]|0;
     $1533 = $1532 << 16 >> 16;
     $1534 = $1533<<1;
     $1535 = (($1528) + ($1534))|0;
     $1536 = $c;
     $1537 = (($1536) + 4)|0;
     $1538 = $pix;
     $1539 = (($1538) + ($1537<<1)|0);
     $1540 = HEAP16[$1539>>1]|0;
     $1541 = $1540 << 16 >> 16;
     $1542 = (($1535) + ($1541))|0;
     $1543 = (($1542) + 2)|0;
     $1544 = $1543 >> 2;
     $1545 = $c;
     $1546 = $col;
     $1547 = ((($smrow)) + 16|0);
     $1548 = HEAP32[$1547>>2]|0;
     $1549 = (($1548) + (($1546*12)|0)|0);
     $1550 = (($1549) + ($1545<<2)|0);
     HEAP32[$1550>>2] = $1544;
     $1551 = $c;
     $1552 = (($1551) + 1)|0;
     $c = $1552;
    }
    $1553 = $pix;
    $1554 = ((($1553)) + 8|0);
    $pix = $1554;
    $1555 = $col;
    $1556 = (($1555) + 1)|0;
    $col = $1556;
   }
  }
  $1557 = $row;
  $1558 = HEAP16[580076>>1]|0;
  $1559 = $1558&65535;
  $1560 = Math_imul($1557, $1559)|0;
  $1561 = (($1560) + 2)|0;
  $1562 = HEAP32[972>>2]|0;
  $1563 = (($1562) + ($1561<<3)|0);
  $pix = $1563;
  $col = 2;
  while(1) {
   $1564 = $col;
   $1565 = HEAP16[580076>>1]|0;
   $1566 = $1565&65535;
   $1567 = (($1566) - 2)|0;
   $1568 = ($1564|0)<($1567|0);
   if (!($1568)) {
    break;
   }
   $c = 0;
   while(1) {
    $1569 = $c;
    $1570 = ($1569|0)<(3);
    if (!($1570)) {
     break;
    }
    $1571 = ((($curve)) + 28|0);
    $1572 = HEAP32[$1571>>2]|0;
    $1573 = $c;
    $1574 = $pix;
    $1575 = (($1574) + ($1573<<1)|0);
    $1576 = HEAP16[$1575>>1]|0;
    $1577 = $1576 << 16 >> 16;
    $1578 = $c;
    $1579 = $col;
    $1580 = ((($smrow)) + 4|0);
    $1581 = HEAP32[$1580>>2]|0;
    $1582 = (($1581) + (($1579*12)|0)|0);
    $1583 = (($1582) + ($1578<<2)|0);
    $1584 = HEAP32[$1583>>2]|0;
    $1585 = $c;
    $1586 = $col;
    $1587 = ((($smrow)) + 8|0);
    $1588 = HEAP32[$1587>>2]|0;
    $1589 = (($1588) + (($1586*12)|0)|0);
    $1590 = (($1589) + ($1585<<2)|0);
    $1591 = HEAP32[$1590>>2]|0;
    $1592 = $1591<<1;
    $1593 = (($1584) + ($1592))|0;
    $1594 = $c;
    $1595 = $col;
    $1596 = ((($smrow)) + 12|0);
    $1597 = HEAP32[$1596>>2]|0;
    $1598 = (($1597) + (($1595*12)|0)|0);
    $1599 = (($1598) + ($1594<<2)|0);
    $1600 = HEAP32[$1599>>2]|0;
    $1601 = (($1593) + ($1600))|0;
    $1602 = $1601 >> 2;
    $1603 = (($1577) - ($1602))|0;
    $1604 = (_foveon_apply_curve($1572,$1603)|0);
    $1605 = (0 - ($1604))|0;
    $1606 = $c;
    $1607 = (($dev) + ($1606<<2)|0);
    HEAP32[$1607>>2] = $1605;
    $1608 = $c;
    $1609 = (($1608) + 1)|0;
    $c = $1609;
   }
   $1610 = HEAP32[$dev>>2]|0;
   $1611 = ((($dev)) + 4|0);
   $1612 = HEAP32[$1611>>2]|0;
   $1613 = (($1610) + ($1612))|0;
   $1614 = ((($dev)) + 8|0);
   $1615 = HEAP32[$1614>>2]|0;
   $1616 = (($1613) + ($1615))|0;
   $1617 = $1616 >> 3;
   $sum = $1617;
   $c = 0;
   while(1) {
    $1618 = $c;
    $1619 = ($1618|0)<(3);
    if (!($1619)) {
     break;
    }
    $1620 = $c;
    $1621 = (($dev) + ($1620<<2)|0);
    $1622 = HEAP32[$1621>>2]|0;
    $1623 = $sum;
    $1624 = (($1622) - ($1623))|0;
    $1625 = $c;
    $1626 = $pix;
    $1627 = (($1626) + ($1625<<1)|0);
    $1628 = HEAP16[$1627>>1]|0;
    $1629 = $1628 << 16 >> 16;
    $1630 = (($1629) + ($1624))|0;
    $1631 = $1630&65535;
    HEAP16[$1627>>1] = $1631;
    $1632 = $c;
    $1633 = (($1632) + 1)|0;
    $c = $1633;
   }
   $1634 = $pix;
   $1635 = ((($1634)) + 8|0);
   $pix = $1635;
   $1636 = $col;
   $1637 = (($1636) + 1)|0;
   $col = $1637;
  }
  $1638 = $row;
  $1639 = (($1638) + 1)|0;
  $row = $1639;
 }
 $smlast = -1;
 $row = 2;
 while(1) {
  $1640 = $row;
  $1641 = HEAP16[580074>>1]|0;
  $1642 = $1641&65535;
  $1643 = (($1642) - 2)|0;
  $1644 = ($1640|0)<($1643|0);
  if (!($1644)) {
   break;
  }
  L358: while(1) {
   $1645 = $smlast;
   $1646 = $row;
   $1647 = (($1646) + 2)|0;
   $1648 = ($1645|0)<($1647|0);
   if (!($1648)) {
    break;
   }
   $i = 0;
   while(1) {
    $1649 = $i;
    $1650 = ($1649|0)<(6);
    if (!($1650)) {
     break;
    }
    $1651 = $i;
    $1652 = (($smrow) + ($1651<<2)|0);
    $1653 = HEAP32[$1652>>2]|0;
    $1654 = $i;
    $1655 = (($1654) + 5)|0;
    $1656 = (($1655|0) % 6)&-1;
    $1657 = (($smrow) + ($1656<<2)|0);
    HEAP32[$1657>>2] = $1653;
    $1658 = $i;
    $1659 = (($1658) + 1)|0;
    $i = $1659;
   }
   $1660 = $smlast;
   $1661 = (($1660) + 1)|0;
   $smlast = $1661;
   $1662 = HEAP16[580076>>1]|0;
   $1663 = $1662&65535;
   $1664 = Math_imul($1661, $1663)|0;
   $1665 = (($1664) + 2)|0;
   $1666 = HEAP32[972>>2]|0;
   $1667 = (($1666) + ($1665<<3)|0);
   $pix = $1667;
   $col = 2;
   while(1) {
    $1668 = $col;
    $1669 = HEAP16[580076>>1]|0;
    $1670 = $1669&65535;
    $1671 = (($1670) - 2)|0;
    $1672 = ($1668|0)<($1671|0);
    if (!($1672)) {
     continue L358;
    }
    $c = 0;
    while(1) {
     $1673 = $c;
     $1674 = ($1673|0)<(3);
     if (!($1674)) {
      break;
     }
     $1675 = $c;
     $1676 = (($1675) - 8)|0;
     $1677 = $pix;
     $1678 = (($1677) + ($1676<<1)|0);
     $1679 = HEAP16[$1678>>1]|0;
     $1680 = $1679 << 16 >> 16;
     $1681 = $c;
     $1682 = (($1681) - 4)|0;
     $1683 = $pix;
     $1684 = (($1683) + ($1682<<1)|0);
     $1685 = HEAP16[$1684>>1]|0;
     $1686 = $1685 << 16 >> 16;
     $1687 = (($1680) + ($1686))|0;
     $1688 = $c;
     $1689 = $pix;
     $1690 = (($1689) + ($1688<<1)|0);
     $1691 = HEAP16[$1690>>1]|0;
     $1692 = $1691 << 16 >> 16;
     $1693 = (($1687) + ($1692))|0;
     $1694 = $c;
     $1695 = (($1694) + 4)|0;
     $1696 = $pix;
     $1697 = (($1696) + ($1695<<1)|0);
     $1698 = HEAP16[$1697>>1]|0;
     $1699 = $1698 << 16 >> 16;
     $1700 = (($1693) + ($1699))|0;
     $1701 = $c;
     $1702 = (($1701) + 8)|0;
     $1703 = $pix;
     $1704 = (($1703) + ($1702<<1)|0);
     $1705 = HEAP16[$1704>>1]|0;
     $1706 = $1705 << 16 >> 16;
     $1707 = (($1700) + ($1706))|0;
     $1708 = (($1707) + 2)|0;
     $1709 = $1708 >> 2;
     $1710 = $c;
     $1711 = $col;
     $1712 = ((($smrow)) + 16|0);
     $1713 = HEAP32[$1712>>2]|0;
     $1714 = (($1713) + (($1711*12)|0)|0);
     $1715 = (($1714) + ($1710<<2)|0);
     HEAP32[$1715>>2] = $1709;
     $1716 = $c;
     $1717 = (($1716) + 1)|0;
     $c = $1717;
    }
    $1718 = $pix;
    $1719 = ((($1718)) + 8|0);
    $pix = $1719;
    $1720 = $col;
    $1721 = (($1720) + 1)|0;
    $col = $1721;
   }
  }
  $1722 = $row;
  $1723 = HEAP16[580076>>1]|0;
  $1724 = $1723&65535;
  $1725 = Math_imul($1722, $1724)|0;
  $1726 = (($1725) + 2)|0;
  $1727 = HEAP32[972>>2]|0;
  $1728 = (($1727) + ($1726<<3)|0);
  $pix = $1728;
  $col = 2;
  while(1) {
   $1729 = $col;
   $1730 = HEAP16[580076>>1]|0;
   $1731 = $1730&65535;
   $1732 = (($1731) - 2)|0;
   $1733 = ($1729|0)<($1732|0);
   if (!($1733)) {
    break;
   }
   $1734 = ((($total)) + 12|0);
   HEAP32[$1734>>2] = 375;
   $sum = 60;
   $c = 0;
   while(1) {
    $1735 = $c;
    $1736 = ($1735|0)<(3);
    if (!($1736)) {
     break;
    }
    $i = 0;
    $1737 = $c;
    $1738 = (($total) + ($1737<<2)|0);
    HEAP32[$1738>>2] = 0;
    while(1) {
     $1739 = $i;
     $1740 = ($1739|0)<(5);
     $1741 = $c;
     if (!($1740)) {
      break;
     }
     $1742 = $col;
     $1743 = $i;
     $1744 = (($smrow) + ($1743<<2)|0);
     $1745 = HEAP32[$1744>>2]|0;
     $1746 = (($1745) + (($1742*12)|0)|0);
     $1747 = (($1746) + ($1741<<2)|0);
     $1748 = HEAP32[$1747>>2]|0;
     $1749 = $c;
     $1750 = (($total) + ($1749<<2)|0);
     $1751 = HEAP32[$1750>>2]|0;
     $1752 = (($1751) + ($1748))|0;
     HEAP32[$1750>>2] = $1752;
     $1753 = $i;
     $1754 = (($1753) + 1)|0;
     $i = $1754;
    }
    $1755 = (($total) + ($1741<<2)|0);
    $1756 = HEAP32[$1755>>2]|0;
    $1757 = ((($total)) + 12|0);
    $1758 = HEAP32[$1757>>2]|0;
    $1759 = (($1758) + ($1756))|0;
    HEAP32[$1757>>2] = $1759;
    $1760 = $c;
    $1761 = $pix;
    $1762 = (($1761) + ($1760<<1)|0);
    $1763 = HEAP16[$1762>>1]|0;
    $1764 = $1763 << 16 >> 16;
    $1765 = $sum;
    $1766 = (($1765) + ($1764))|0;
    $sum = $1766;
    $1767 = $c;
    $1768 = (($1767) + 1)|0;
    $c = $1768;
   }
   $1769 = $sum;
   $1770 = ($1769|0)<(0);
   if ($1770) {
    $sum = 0;
   }
   $1771 = ((($total)) + 12|0);
   $1772 = HEAP32[$1771>>2]|0;
   $1773 = ($1772|0)>(375);
   $1774 = $sum;
   if ($1773) {
    $1775 = $1774 << 16;
    $1776 = ((($total)) + 12|0);
    $1777 = HEAP32[$1776>>2]|0;
    $1778 = (($1775|0) / ($1777|0))&-1;
    $1780 = $1778;
   } else {
    $1779 = ($1774*174)|0;
    $1780 = $1779;
   }
   $j = $1780;
   $c = 0;
   while(1) {
    $1781 = $c;
    $1782 = ($1781|0)<(3);
    if (!($1782)) {
     break;
    }
    $1783 = ((($curve)) + 24|0);
    $1784 = HEAP32[$1783>>2]|0;
    $1785 = $j;
    $1786 = $c;
    $1787 = (($total) + ($1786<<2)|0);
    $1788 = HEAP32[$1787>>2]|0;
    $1789 = Math_imul($1785, $1788)|0;
    $1790 = (($1789) + 32768)|0;
    $1791 = $1790 >> 16;
    $1792 = $c;
    $1793 = $pix;
    $1794 = (($1793) + ($1792<<1)|0);
    $1795 = HEAP16[$1794>>1]|0;
    $1796 = $1795 << 16 >> 16;
    $1797 = (($1791) - ($1796))|0;
    $1798 = (_foveon_apply_curve($1784,$1797)|0);
    $1799 = $c;
    $1800 = $pix;
    $1801 = (($1800) + ($1799<<1)|0);
    $1802 = HEAP16[$1801>>1]|0;
    $1803 = $1802 << 16 >> 16;
    $1804 = (($1803) + ($1798))|0;
    $1805 = $1804&65535;
    HEAP16[$1801>>1] = $1805;
    $1806 = $c;
    $1807 = (($1806) + 1)|0;
    $c = $1807;
   }
   $1808 = $pix;
   $1809 = ((($1808)) + 8|0);
   $pix = $1809;
   $1810 = $col;
   $1811 = (($1810) + 1)|0;
   $col = $1811;
  }
  $1812 = $row;
  $1813 = (($1812) + 1)|0;
  $row = $1813;
 }
 $1814 = HEAP32[972>>2]|0;
 $pix = $1814;
 while(1) {
  $1815 = $pix;
  $1816 = HEAP16[580074>>1]|0;
  $1817 = $1816&65535;
  $1818 = HEAP16[580076>>1]|0;
  $1819 = $1818&65535;
  $1820 = Math_imul($1817, $1819)|0;
  $1821 = HEAP32[972>>2]|0;
  $1822 = (($1821) + ($1820<<3)|0);
  $1823 = ($1815>>>0)<($1822>>>0);
  if (!($1823)) {
   break;
  }
  $c = 0;
  while(1) {
   $1824 = $c;
   $1825 = ($1824|0)<(3);
   if (!($1825)) {
    break;
   }
   $1826 = $c;
   $1827 = (($curve) + ($1826<<2)|0);
   $1828 = HEAP32[$1827>>2]|0;
   $1829 = $c;
   $1830 = $pix;
   $1831 = (($1830) + ($1829<<1)|0);
   $1832 = HEAP16[$1831>>1]|0;
   $1833 = $1832 << 16 >> 16;
   $1834 = (_foveon_apply_curve($1828,$1833)|0);
   $1835 = $c;
   $1836 = $pix;
   $1837 = (($1836) + ($1835<<1)|0);
   $1838 = HEAP16[$1837>>1]|0;
   $1839 = $1838 << 16 >> 16;
   $1840 = (($1839) - ($1834))|0;
   $1841 = $1840&65535;
   HEAP16[$1837>>1] = $1841;
   $1842 = $c;
   $1843 = (($1842) + 1)|0;
   $c = $1843;
  }
  $1844 = $pix;
  $1845 = HEAP16[$1844>>1]|0;
  $1846 = $1845 << 16 >> 16;
  $1847 = $pix;
  $1848 = ((($1847)) + 2|0);
  $1849 = HEAP16[$1848>>1]|0;
  $1850 = $1849 << 16 >> 16;
  $1851 = (($1846) + ($1850))|0;
  $1852 = $pix;
  $1853 = ((($1852)) + 2|0);
  $1854 = HEAP16[$1853>>1]|0;
  $1855 = $1854 << 16 >> 16;
  $1856 = (($1851) + ($1855))|0;
  $1857 = $pix;
  $1858 = ((($1857)) + 4|0);
  $1859 = HEAP16[$1858>>1]|0;
  $1860 = $1859 << 16 >> 16;
  $1861 = (($1856) + ($1860))|0;
  $1862 = $1861 >> 2;
  $sum = $1862;
  $c = 0;
  while(1) {
   $1863 = $c;
   $1864 = ($1863|0)<(3);
   if (!($1864)) {
    break;
   }
   $1865 = $c;
   $1866 = (($curve) + ($1865<<2)|0);
   $1867 = HEAP32[$1866>>2]|0;
   $1868 = $c;
   $1869 = $pix;
   $1870 = (($1869) + ($1868<<1)|0);
   $1871 = HEAP16[$1870>>1]|0;
   $1872 = $1871 << 16 >> 16;
   $1873 = $sum;
   $1874 = (($1872) - ($1873))|0;
   $1875 = (_foveon_apply_curve($1867,$1874)|0);
   $1876 = $c;
   $1877 = $pix;
   $1878 = (($1877) + ($1876<<1)|0);
   $1879 = HEAP16[$1878>>1]|0;
   $1880 = $1879 << 16 >> 16;
   $1881 = (($1880) - ($1875))|0;
   $1882 = $1881&65535;
   HEAP16[$1878>>1] = $1882;
   $1883 = $c;
   $1884 = (($1883) + 1)|0;
   $c = $1884;
  }
  $c = 0;
  while(1) {
   $1885 = $c;
   $1886 = ($1885|0)<(3);
   if (!($1886)) {
    break;
   }
   $i = 0;
   $dsum = 0.0;
   while(1) {
    $1887 = $i;
    $1888 = ($1887|0)<(3);
    if (!($1888)) {
     break;
    }
    $1889 = $i;
    $1890 = $c;
    $1891 = (($trans) + (($1890*12)|0)|0);
    $1892 = (($1891) + ($1889<<2)|0);
    $1893 = +HEAPF32[$1892>>2];
    $1894 = $i;
    $1895 = $pix;
    $1896 = (($1895) + ($1894<<1)|0);
    $1897 = HEAP16[$1896>>1]|0;
    $1898 = $1897 << 16 >> 16;
    $1899 = (+($1898|0));
    $1900 = $1893 * $1899;
    $1901 = $1900;
    $1902 = $dsum;
    $1903 = $1902 + $1901;
    $dsum = $1903;
    $1904 = $i;
    $1905 = (($1904) + 1)|0;
    $i = $1905;
   }
   $1906 = $dsum;
   $1907 = $1906 < 0.0;
   if ($1907) {
    $dsum = 0.0;
   }
   $1908 = $dsum;
   $1909 = $1908 > 24000.0;
   if ($1909) {
    $dsum = 24000.0;
   }
   $1910 = $dsum;
   $1911 = $1910 + 0.5;
   $1912 = (~~(($1911)));
   $1913 = $c;
   $1914 = (($ipix) + ($1913<<2)|0);
   HEAP32[$1914>>2] = $1912;
   $1915 = $c;
   $1916 = (($1915) + 1)|0;
   $c = $1916;
  }
  $c = 0;
  while(1) {
   $1917 = $c;
   $1918 = ($1917|0)<(3);
   if (!($1918)) {
    break;
   }
   $1919 = $c;
   $1920 = (($ipix) + ($1919<<2)|0);
   $1921 = HEAP32[$1920>>2]|0;
   $1922 = $1921&65535;
   $1923 = $c;
   $1924 = $pix;
   $1925 = (($1924) + ($1923<<1)|0);
   HEAP16[$1925>>1] = $1922;
   $1926 = $c;
   $1927 = (($1926) + 1)|0;
   $c = $1927;
  }
  $1928 = $pix;
  $1929 = ((($1928)) + 8|0);
  $pix = $1929;
 }
 $1930 = HEAP16[580074>>1]|0;
 $1931 = $1930&65535;
 $1932 = (($1931|0) / 4)&-1;
 $1933 = HEAP16[580076>>1]|0;
 $1934 = $1933&65535;
 $1935 = (($1934|0) / 4)&-1;
 $1936 = ($1935*6)|0;
 $1937 = (_calloc($1932,$1936)|0);
 $shrink = $1937;
 $1938 = $shrink;
 _merror($1938,612053);
 $1939 = HEAP16[580074>>1]|0;
 $1940 = $1939&65535;
 $1941 = (($1940|0) / 4)&-1;
 $row = $1941;
 L427: while(1) {
  $1942 = $row;
  $1943 = (($1942) + -1)|0;
  $row = $1943;
  $1944 = ($1942|0)!=(0);
  if (!($1944)) {
   break;
  }
  $col = 0;
  while(1) {
   $1945 = $col;
   $1946 = HEAP16[580076>>1]|0;
   $1947 = $1946&65535;
   $1948 = (($1947|0) / 4)&-1;
   $1949 = ($1945|0)<($1948|0);
   if (!($1949)) {
    continue L427;
   }
   $1950 = ((($ipix)) + 8|0);
   HEAP32[$1950>>2] = 0;
   $1951 = ((($ipix)) + 4|0);
   HEAP32[$1951>>2] = 0;
   HEAP32[$ipix>>2] = 0;
   $i = 0;
   while(1) {
    $1952 = $i;
    $1953 = ($1952|0)<(4);
    if (!($1953)) {
     break;
    }
    $j = 0;
    while(1) {
     $1954 = $j;
     $1955 = ($1954|0)<(4);
     if (!($1955)) {
      break;
     }
     $c = 0;
     while(1) {
      $1956 = $c;
      $1957 = ($1956|0)<(3);
      if (!($1957)) {
       break;
      }
      $1958 = $c;
      $1959 = $row;
      $1960 = $1959<<2;
      $1961 = $i;
      $1962 = (($1960) + ($1961))|0;
      $1963 = HEAP16[580076>>1]|0;
      $1964 = $1963&65535;
      $1965 = Math_imul($1962, $1964)|0;
      $1966 = $col;
      $1967 = $1966<<2;
      $1968 = (($1965) + ($1967))|0;
      $1969 = $j;
      $1970 = (($1968) + ($1969))|0;
      $1971 = HEAP32[972>>2]|0;
      $1972 = (($1971) + ($1970<<3)|0);
      $1973 = (($1972) + ($1958<<1)|0);
      $1974 = HEAP16[$1973>>1]|0;
      $1975 = $1974 << 16 >> 16;
      $1976 = $c;
      $1977 = (($ipix) + ($1976<<2)|0);
      $1978 = HEAP32[$1977>>2]|0;
      $1979 = (($1978) + ($1975))|0;
      HEAP32[$1977>>2] = $1979;
      $1980 = $c;
      $1981 = (($1980) + 1)|0;
      $c = $1981;
     }
     $1982 = $j;
     $1983 = (($1982) + 1)|0;
     $j = $1983;
    }
    $1984 = $i;
    $1985 = (($1984) + 1)|0;
    $i = $1985;
   }
   $c = 0;
   while(1) {
    $1986 = $c;
    $1987 = ($1986|0)<(3);
    if (!($1987)) {
     break;
    }
    $1988 = $row;
    $1989 = (($1988) + 2)|0;
    $1990 = HEAP16[580074>>1]|0;
    $1991 = $1990&65535;
    $1992 = (($1991|0) / 4)&-1;
    $1993 = ($1989|0)>($1992|0);
    $1994 = $c;
    if ($1993) {
     $1995 = (($ipix) + ($1994<<2)|0);
     $1996 = HEAP32[$1995>>2]|0;
     $1997 = $1996 >> 4;
     $1998 = $1997&65535;
     $1999 = $c;
     $2000 = $row;
     $2001 = HEAP16[580076>>1]|0;
     $2002 = $2001&65535;
     $2003 = (($2002|0) / 4)&-1;
     $2004 = Math_imul($2000, $2003)|0;
     $2005 = $col;
     $2006 = (($2004) + ($2005))|0;
     $2007 = $shrink;
     $2008 = (($2007) + (($2006*6)|0)|0);
     $2009 = (($2008) + ($1999<<1)|0);
     HEAP16[$2009>>1] = $1998;
    } else {
     $2010 = $row;
     $2011 = (($2010) + 1)|0;
     $2012 = HEAP16[580076>>1]|0;
     $2013 = $2012&65535;
     $2014 = (($2013|0) / 4)&-1;
     $2015 = Math_imul($2011, $2014)|0;
     $2016 = $col;
     $2017 = (($2015) + ($2016))|0;
     $2018 = $shrink;
     $2019 = (($2018) + (($2017*6)|0)|0);
     $2020 = (($2019) + ($1994<<1)|0);
     $2021 = HEAP16[$2020>>1]|0;
     $2022 = $2021 << 16 >> 16;
     $2023 = ($2022*1840)|0;
     $2024 = $c;
     $2025 = (($ipix) + ($2024<<2)|0);
     $2026 = HEAP32[$2025>>2]|0;
     $2027 = ($2026*141)|0;
     $2028 = (($2023) + ($2027))|0;
     $2029 = (($2028) + 2048)|0;
     $2030 = $2029 >> 12;
     $2031 = $2030&65535;
     $2032 = $c;
     $2033 = $row;
     $2034 = HEAP16[580076>>1]|0;
     $2035 = $2034&65535;
     $2036 = (($2035|0) / 4)&-1;
     $2037 = Math_imul($2033, $2036)|0;
     $2038 = $col;
     $2039 = (($2037) + ($2038))|0;
     $2040 = $shrink;
     $2041 = (($2040) + (($2039*6)|0)|0);
     $2042 = (($2041) + ($2032<<1)|0);
     HEAP16[$2042>>1] = $2031;
    }
    $2043 = $c;
    $2044 = (($2043) + 1)|0;
    $c = $2044;
   }
   $2045 = $col;
   $2046 = (($2045) + 1)|0;
   $col = $2046;
  }
 }
 $row = 0;
 while(1) {
  $2047 = $row;
  $2048 = HEAP16[580074>>1]|0;
  $2049 = $2048&65535;
  $2050 = $2049 & -4;
  $2051 = ($2047|0)<($2050|0);
  if (!($2051)) {
   break;
  }
  $2052 = ((($ipix)) + 8|0);
  HEAP32[$2052>>2] = 0;
  $2053 = ((($ipix)) + 4|0);
  HEAP32[$2053>>2] = 0;
  HEAP32[$ipix>>2] = 0;
  $2054 = $row;
  $2055 = $2054 & 3;
  $2056 = ($2055|0)==(0);
  L457: do {
   if ($2056) {
    $2057 = HEAP16[580076>>1]|0;
    $2058 = $2057&65535;
    $2059 = $2058 & -4;
    $col = $2059;
    L459: while(1) {
     $2060 = $col;
     $2061 = (($2060) + -1)|0;
     $col = $2061;
     $2062 = ($2060|0)!=(0);
     if (!($2062)) {
      break L457;
     }
     $c = 0;
     while(1) {
      $2063 = $c;
      $2064 = ($2063|0)<(3);
      if (!($2064)) {
       continue L459;
      }
      $2065 = $c;
      $2066 = $row;
      $2067 = (($2066|0) / 4)&-1;
      $2068 = HEAP16[580076>>1]|0;
      $2069 = $2068&65535;
      $2070 = (($2069|0) / 4)&-1;
      $2071 = Math_imul($2067, $2070)|0;
      $2072 = $col;
      $2073 = (($2072|0) / 4)&-1;
      $2074 = (($2071) + ($2073))|0;
      $2075 = $shrink;
      $2076 = (($2075) + (($2074*6)|0)|0);
      $2077 = (($2076) + ($2065<<1)|0);
      $2078 = HEAP16[$2077>>1]|0;
      $2079 = $2078 << 16 >> 16;
      $2080 = ($2079*1485)|0;
      $2081 = $c;
      $2082 = (($ipix) + ($2081<<2)|0);
      $2083 = HEAP32[$2082>>2]|0;
      $2084 = ($2083*6707)|0;
      $2085 = (($2080) + ($2084))|0;
      $2086 = (($2085) + 4096)|0;
      $2087 = $2086 >> 13;
      $2088 = $c;
      $2089 = (($ipix) + ($2088<<2)|0);
      HEAP32[$2089>>2] = $2087;
      $2090 = $c;
      $2091 = $col;
      $2092 = HEAP32[$smrow>>2]|0;
      $2093 = (($2092) + (($2091*12)|0)|0);
      $2094 = (($2093) + ($2090<<2)|0);
      HEAP32[$2094>>2] = $2087;
      $2095 = $c;
      $2096 = (($2095) + 1)|0;
      $c = $2096;
     }
    }
   }
  } while(0);
  $2097 = ((($ipix)) + 8|0);
  HEAP32[$2097>>2] = 0;
  $2098 = ((($ipix)) + 4|0);
  HEAP32[$2098>>2] = 0;
  HEAP32[$ipix>>2] = 0;
  $col = 0;
  while(1) {
   $2099 = $col;
   $2100 = HEAP16[580076>>1]|0;
   $2101 = $2100&65535;
   $2102 = $2101 & -4;
   $2103 = ($2099|0)<($2102|0);
   if (!($2103)) {
    break;
   }
   $c = 0;
   while(1) {
    $2104 = $c;
    $2105 = ($2104|0)<(3);
    if (!($2105)) {
     break;
    }
    $2106 = $c;
    $2107 = $col;
    $2108 = HEAP32[$smrow>>2]|0;
    $2109 = (($2108) + (($2107*12)|0)|0);
    $2110 = (($2109) + ($2106<<2)|0);
    $2111 = HEAP32[$2110>>2]|0;
    $2112 = ($2111*1485)|0;
    $2113 = $c;
    $2114 = (($ipix) + ($2113<<2)|0);
    $2115 = HEAP32[$2114>>2]|0;
    $2116 = ($2115*6707)|0;
    $2117 = (($2112) + ($2116))|0;
    $2118 = (($2117) + 4096)|0;
    $2119 = $2118 >> 13;
    $2120 = $c;
    $2121 = (($ipix) + ($2120<<2)|0);
    HEAP32[$2121>>2] = $2119;
    $2122 = $c;
    $2123 = $col;
    $2124 = ((($smrow)) + 4|0);
    $2125 = HEAP32[$2124>>2]|0;
    $2126 = (($2125) + (($2123*12)|0)|0);
    $2127 = (($2126) + ($2122<<2)|0);
    HEAP32[$2127>>2] = $2119;
    $2128 = $c;
    $2129 = (($2128) + 1)|0;
    $c = $2129;
   }
   $2130 = $col;
   $2131 = (($2130) + 1)|0;
   $col = $2131;
  }
  $2132 = $row;
  $2133 = ($2132|0)==(0);
  L474: do {
   if ($2133) {
    $2134 = ((($smrow)) + 8|0);
    $2135 = HEAP32[$2134>>2]|0;
    $2136 = ((($smrow)) + 4|0);
    $2137 = HEAP32[$2136>>2]|0;
    $2138 = HEAP16[580076>>1]|0;
    $2139 = $2138&65535;
    $2140 = ($2139*12)|0;
    _memcpy(($2135|0),($2137|0),($2140|0))|0;
   } else {
    $col = 0;
    while(1) {
     $2141 = $col;
     $2142 = HEAP16[580076>>1]|0;
     $2143 = $2142&65535;
     $2144 = $2143 & -4;
     $2145 = ($2141|0)<($2144|0);
     if (!($2145)) {
      break L474;
     }
     $c = 0;
     while(1) {
      $2146 = $c;
      $2147 = ($2146|0)<(3);
      if (!($2147)) {
       break;
      }
      $2148 = $c;
      $2149 = $col;
      $2150 = ((($smrow)) + 8|0);
      $2151 = HEAP32[$2150>>2]|0;
      $2152 = (($2151) + (($2149*12)|0)|0);
      $2153 = (($2152) + ($2148<<2)|0);
      $2154 = HEAP32[$2153>>2]|0;
      $2155 = ($2154*6707)|0;
      $2156 = $c;
      $2157 = $col;
      $2158 = ((($smrow)) + 4|0);
      $2159 = HEAP32[$2158>>2]|0;
      $2160 = (($2159) + (($2157*12)|0)|0);
      $2161 = (($2160) + ($2156<<2)|0);
      $2162 = HEAP32[$2161>>2]|0;
      $2163 = ($2162*1485)|0;
      $2164 = (($2155) + ($2163))|0;
      $2165 = (($2164) + 4096)|0;
      $2166 = $2165 >> 13;
      $2167 = $c;
      $2168 = $col;
      $2169 = ((($smrow)) + 8|0);
      $2170 = HEAP32[$2169>>2]|0;
      $2171 = (($2170) + (($2168*12)|0)|0);
      $2172 = (($2171) + ($2167<<2)|0);
      HEAP32[$2172>>2] = $2166;
      $2173 = $c;
      $2174 = (($2173) + 1)|0;
      $c = $2174;
     }
     $2175 = $col;
     $2176 = (($2175) + 1)|0;
     $col = $2176;
    }
   }
  } while(0);
  $col = 0;
  while(1) {
   $2177 = $col;
   $2178 = HEAP16[580076>>1]|0;
   $2179 = $2178&65535;
   $2180 = $2179 & -4;
   $2181 = ($2177|0)<($2180|0);
   if (!($2181)) {
    break;
   }
   $j = 30;
   $i = 30;
   $c = 0;
   while(1) {
    $2182 = $c;
    $2183 = ($2182|0)<(3);
    if (!($2183)) {
     break;
    }
    $2184 = $c;
    $2185 = $col;
    $2186 = ((($smrow)) + 8|0);
    $2187 = HEAP32[$2186>>2]|0;
    $2188 = (($2187) + (($2185*12)|0)|0);
    $2189 = (($2188) + ($2184<<2)|0);
    $2190 = HEAP32[$2189>>2]|0;
    $2191 = $i;
    $2192 = (($2191) + ($2190))|0;
    $i = $2192;
    $2193 = $c;
    $2194 = $row;
    $2195 = HEAP16[580076>>1]|0;
    $2196 = $2195&65535;
    $2197 = Math_imul($2194, $2196)|0;
    $2198 = $col;
    $2199 = (($2197) + ($2198))|0;
    $2200 = HEAP32[972>>2]|0;
    $2201 = (($2200) + ($2199<<3)|0);
    $2202 = (($2201) + ($2193<<1)|0);
    $2203 = HEAP16[$2202>>1]|0;
    $2204 = $2203 << 16 >> 16;
    $2205 = $j;
    $2206 = (($2205) + ($2204))|0;
    $j = $2206;
    $2207 = $c;
    $2208 = (($2207) + 1)|0;
    $c = $2208;
   }
   $2209 = $j;
   $2210 = $2209 << 16;
   $2211 = $i;
   $2212 = (($2210|0) / ($2211|0))&-1;
   $j = $2212;
   $c = 0;
   $sum = 0;
   while(1) {
    $2213 = $c;
    $2214 = ($2213|0)<(3);
    if (!($2214)) {
     break;
    }
    $2215 = $c;
    $2216 = (($2215) + 3)|0;
    $2217 = (($curve) + ($2216<<2)|0);
    $2218 = HEAP32[$2217>>2]|0;
    $2219 = $c;
    $2220 = $col;
    $2221 = ((($smrow)) + 8|0);
    $2222 = HEAP32[$2221>>2]|0;
    $2223 = (($2222) + (($2220*12)|0)|0);
    $2224 = (($2223) + ($2219<<2)|0);
    $2225 = HEAP32[$2224>>2]|0;
    $2226 = $j;
    $2227 = Math_imul($2225, $2226)|0;
    $2228 = (($2227) + 32768)|0;
    $2229 = $2228 >> 16;
    $2230 = $c;
    $2231 = $row;
    $2232 = HEAP16[580076>>1]|0;
    $2233 = $2232&65535;
    $2234 = Math_imul($2231, $2233)|0;
    $2235 = $col;
    $2236 = (($2234) + ($2235))|0;
    $2237 = HEAP32[972>>2]|0;
    $2238 = (($2237) + ($2236<<3)|0);
    $2239 = (($2238) + ($2230<<1)|0);
    $2240 = HEAP16[$2239>>1]|0;
    $2241 = $2240 << 16 >> 16;
    $2242 = (($2229) - ($2241))|0;
    $2243 = (_foveon_apply_curve($2218,$2242)|0);
    $2244 = $c;
    $2245 = (($ipix) + ($2244<<2)|0);
    HEAP32[$2245>>2] = $2243;
    $2246 = $c;
    $2247 = (($ipix) + ($2246<<2)|0);
    $2248 = HEAP32[$2247>>2]|0;
    $2249 = $sum;
    $2250 = (($2249) + ($2248))|0;
    $sum = $2250;
    $2251 = $c;
    $2252 = (($2251) + 1)|0;
    $c = $2252;
   }
   $2253 = $sum;
   $2254 = $2253 >> 3;
   $sum = $2254;
   $c = 0;
   while(1) {
    $2255 = $c;
    $2256 = ($2255|0)<(3);
    if (!($2256)) {
     break;
    }
    $2257 = $c;
    $2258 = $row;
    $2259 = HEAP16[580076>>1]|0;
    $2260 = $2259&65535;
    $2261 = Math_imul($2258, $2260)|0;
    $2262 = $col;
    $2263 = (($2261) + ($2262))|0;
    $2264 = HEAP32[972>>2]|0;
    $2265 = (($2264) + ($2263<<3)|0);
    $2266 = (($2265) + ($2257<<1)|0);
    $2267 = HEAP16[$2266>>1]|0;
    $2268 = $2267 << 16 >> 16;
    $2269 = $c;
    $2270 = (($ipix) + ($2269<<2)|0);
    $2271 = HEAP32[$2270>>2]|0;
    $2272 = (($2268) + ($2271))|0;
    $2273 = $sum;
    $2274 = (($2272) - ($2273))|0;
    $i = $2274;
    $2275 = $i;
    $2276 = ($2275|0)<(0);
    $$1 = $2276 ? 0 : $2274;
    $i = $$1;
    $2277 = $i;
    $2278 = $2277&65535;
    $2279 = $c;
    $2280 = $row;
    $2281 = HEAP16[580076>>1]|0;
    $2282 = $2281&65535;
    $2283 = Math_imul($2280, $2282)|0;
    $2284 = $col;
    $2285 = (($2283) + ($2284))|0;
    $2286 = HEAP32[972>>2]|0;
    $2287 = (($2286) + ($2285<<3)|0);
    $2288 = (($2287) + ($2279<<1)|0);
    HEAP16[$2288>>1] = $2278;
    $2289 = $c;
    $2290 = (($2289) + 1)|0;
    $c = $2290;
   }
   $2291 = $col;
   $2292 = (($2291) + 1)|0;
   $col = $2292;
  }
  $2293 = $row;
  $2294 = (($2293) + 1)|0;
  $row = $2294;
 }
 $2295 = $shrink;
 _free($2295);
 $2296 = ((($smrow)) + 24|0);
 $2297 = HEAP32[$2296>>2]|0;
 _free($2297);
 $i = 0;
 while(1) {
  $2298 = $i;
  $2299 = ($2298|0)<(8);
  if (!($2299)) {
   break;
  }
  $2300 = $i;
  $2301 = (($curve) + ($2300<<2)|0);
  $2302 = HEAP32[$2301>>2]|0;
  _free($2302);
  $2303 = $i;
  $2304 = (($2303) + 1)|0;
  $i = $2304;
 }
 $2305 = ((($keep)) + 4|0);
 $2306 = HEAP32[$2305>>2]|0;
 $2307 = ((($active)) + 4|0);
 $2308 = HEAP32[$2307>>2]|0;
 $2309 = (($2308) - ($2306))|0;
 HEAP32[$2307>>2] = $2309;
 $2310 = ((($active)) + 12|0);
 $2311 = HEAP32[$2310>>2]|0;
 $2312 = (($2311) - 2)|0;
 HEAP32[$2310>>2] = $2312;
 $2313 = ((($active)) + 8|0);
 $2314 = HEAP32[$2313>>2]|0;
 $2315 = HEAP32[$active>>2]|0;
 $2316 = (($2314) - ($2315))|0;
 $i = $2316;
 $row = 0;
 while(1) {
  $2317 = $row;
  $2318 = ((($active)) + 12|0);
  $2319 = HEAP32[$2318>>2]|0;
  $2320 = ((($active)) + 4|0);
  $2321 = HEAP32[$2320>>2]|0;
  $2322 = (($2319) - ($2321))|0;
  $2323 = ($2317|0)<($2322|0);
  if (!($2323)) {
   break;
  }
  $2324 = $row;
  $2325 = $i;
  $2326 = Math_imul($2324, $2325)|0;
  $2327 = HEAP32[972>>2]|0;
  $2328 = (($2327) + ($2326<<3)|0);
  $2329 = $row;
  $2330 = ((($active)) + 4|0);
  $2331 = HEAP32[$2330>>2]|0;
  $2332 = (($2329) + ($2331))|0;
  $2333 = HEAP16[580076>>1]|0;
  $2334 = $2333&65535;
  $2335 = Math_imul($2332, $2334)|0;
  $2336 = HEAP32[$active>>2]|0;
  $2337 = (($2335) + ($2336))|0;
  $2338 = HEAP32[972>>2]|0;
  $2339 = (($2338) + ($2337<<3)|0);
  $2340 = $i;
  $2341 = $2340<<3;
  _memcpy(($2328|0),($2339|0),($2341|0))|0;
  $2342 = $row;
  $2343 = (($2342) + 1)|0;
  $row = $2343;
 }
 $2344 = $i;
 $2345 = $2344&65535;
 HEAP16[580076>>1] = $2345;
 $2346 = $row;
 $2347 = $2346&65535;
 HEAP16[580074>>1] = $2347;
 STACKTOP = sp;return;
}
function _crop_masked_pixels() {
 var $$old = 0, $$old6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $m = 0, $mblack = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $r = 0, $row = 0, $val = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mblack = sp + 8|0;
 $0 = HEAP32[31028>>2]|0;
 $1 = ($0|0)==(7|0);
 $2 = HEAP32[31028>>2]|0;
 $3 = ($2|0)==(8|0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  _phase_one_correct();
 }
 $4 = HEAP16[589194>>1]|0;
 $5 = ($4<<16>>16)!=(0);
 $row = 0;
 L4: do {
  if ($5) {
   while(1) {
    $6 = $row;
    $7 = HEAP16[580244>>1]|0;
    $8 = $7&65535;
    $9 = HEAP16[448958>>1]|0;
    $10 = $9&65535;
    $11 = $10<<1;
    $12 = (($8) - ($11))|0;
    $13 = ($6|0)<($12|0);
    if (!($13)) {
     break L4;
    }
    $col = 0;
    while(1) {
     $14 = $col;
     $15 = HEAP16[589194>>1]|0;
     $16 = $15&65535;
     $17 = HEAP32[31032>>2]|0;
     $18 = ($17|0)!=(0);
     $19 = $18 ^ 1;
     $20 = $19&1;
     $21 = $16 << $20;
     $22 = ($14|0)<($21|0);
     if (!($22)) {
      break;
     }
     $23 = HEAP32[31032>>2]|0;
     $24 = ($23|0)!=(0);
     $25 = HEAP16[589194>>1]|0;
     $26 = $25&65535;
     $27 = (($26) - 1)|0;
     if ($24) {
      $28 = $col;
      $29 = (($27) - ($28))|0;
      $30 = $row;
      $31 = $30 >> 1;
      $32 = (($29) + ($31))|0;
      $r = $32;
      $33 = $col;
      $34 = $row;
      $35 = (($34) + 1)|0;
      $36 = $35 >> 1;
      $37 = (($33) + ($36))|0;
      $c = $37;
     } else {
      $38 = $row;
      $39 = (($27) + ($38))|0;
      $40 = $col;
      $41 = $40 >> 1;
      $42 = (($39) - ($41))|0;
      $r = $42;
      $43 = $row;
      $44 = $col;
      $45 = (($44) + 1)|0;
      $46 = $45 >> 1;
      $47 = (($43) + ($46))|0;
      $c = $47;
     }
     $48 = $r;
     $49 = HEAP16[580074>>1]|0;
     $50 = $49&65535;
     $51 = ($48>>>0)<($50>>>0);
     if ($51) {
      $52 = $c;
      $53 = HEAP16[580076>>1]|0;
      $54 = $53&65535;
      $55 = ($52>>>0)<($54>>>0);
      if ($55) {
       $56 = $row;
       $57 = HEAP16[448958>>1]|0;
       $58 = $57&65535;
       $59 = (($56) + ($58))|0;
       $60 = HEAP16[580226>>1]|0;
       $61 = $60&65535;
       $62 = Math_imul($59, $61)|0;
       $63 = $col;
       $64 = HEAP16[448956>>1]|0;
       $65 = $64&65535;
       $66 = (($63) + ($65))|0;
       $67 = (($62) + ($66))|0;
       $68 = HEAP32[1032>>2]|0;
       $69 = (($68) + ($67<<1)|0);
       $70 = HEAP16[$69>>1]|0;
       $71 = HEAP32[776>>2]|0;
       $72 = $r;
       $73 = $72 << 1;
       $74 = $73 & 14;
       $75 = $c;
       $76 = $75 & 1;
       $77 = (($74) + ($76))|0;
       $78 = $77 << 1;
       $79 = $71 >>> $78;
       $80 = $79 & 3;
       $81 = $r;
       $82 = HEAP16[580078>>1]|0;
       $83 = $82&65535;
       $84 = $81 >>> $83;
       $85 = HEAP16[580080>>1]|0;
       $86 = $85&65535;
       $87 = Math_imul($84, $86)|0;
       $88 = $c;
       $89 = HEAP16[580078>>1]|0;
       $90 = $89&65535;
       $91 = $88 >>> $90;
       $92 = (($87) + ($91))|0;
       $93 = HEAP32[972>>2]|0;
       $94 = (($93) + ($92<<3)|0);
       $95 = (($94) + ($80<<1)|0);
       HEAP16[$95>>1] = $70;
      }
     }
     $96 = $col;
     $97 = (($96) + 1)|0;
     $col = $97;
    }
    $98 = $row;
    $99 = (($98) + 1)|0;
    $row = $99;
   }
  } else {
   while(1) {
    $100 = $row;
    $101 = HEAP16[580074>>1]|0;
    $102 = $101&65535;
    $103 = ($100|0)<($102|0);
    if (!($103)) {
     break L4;
    }
    $col = 0;
    while(1) {
     $104 = $col;
     $105 = HEAP16[580076>>1]|0;
     $106 = $105&65535;
     $107 = ($104|0)<($106|0);
     $108 = $row;
     if (!($107)) {
      break;
     }
     $109 = HEAP16[448958>>1]|0;
     $110 = $109&65535;
     $111 = (($108) + ($110))|0;
     $112 = HEAP16[580226>>1]|0;
     $113 = $112&65535;
     $114 = Math_imul($111, $113)|0;
     $115 = $col;
     $116 = HEAP16[448956>>1]|0;
     $117 = $116&65535;
     $118 = (($115) + ($117))|0;
     $119 = (($114) + ($118))|0;
     $120 = HEAP32[1032>>2]|0;
     $121 = (($120) + ($119<<1)|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = $row;
     $124 = $col;
     $125 = (_fcol($123,$124)|0);
     $126 = $row;
     $127 = HEAP16[580078>>1]|0;
     $128 = $127&65535;
     $129 = $126 >> $128;
     $130 = HEAP16[580080>>1]|0;
     $131 = $130&65535;
     $132 = Math_imul($129, $131)|0;
     $133 = $col;
     $134 = HEAP16[580078>>1]|0;
     $135 = $134&65535;
     $136 = $133 >> $135;
     $137 = (($132) + ($136))|0;
     $138 = HEAP32[972>>2]|0;
     $139 = (($138) + ($137<<3)|0);
     $140 = (($139) + ($125<<1)|0);
     HEAP16[$140>>1] = $122;
     $141 = $col;
     $142 = (($141) + 1)|0;
     $col = $142;
    }
    $143 = (($108) + 1)|0;
    $row = $143;
   }
  }
 } while(0);
 $144 = HEAP32[(31048)>>2]|0;
 $145 = ($144|0)>(0);
 if (!($145)) {
  $146 = HEAP32[31028>>2]|0;
  $147 = ($146|0)==(9|0);
  $148 = HEAP32[31028>>2]|0;
  $149 = ($148|0)==(10|0);
  $or$cond3 = $147 | $149;
  do {
   if ($or$cond3) {
    $150 = HEAP32[(31056)>>2]|0;
    $151 = (($150) + 2)|0;
    HEAP32[(31056)>>2] = $151;
    HEAP32[(31040)>>2] = $151;
    $152 = HEAP32[(31048)>>2]|0;
    $153 = (($152) - 2)|0;
    HEAP32[(31048)>>2] = $153;
    label = 29;
   } else {
    $154 = HEAP32[31028>>2]|0;
    $155 = ($154|0)==(11|0);
    $156 = HEAP32[31028>>2]|0;
    $157 = ($156|0)==(12|0);
    $or$cond5 = $155 | $157;
    if ($or$cond5) {
     label = 29;
    } else {
     $158 = HEAP32[31028>>2]|0;
     $159 = ($158|0)==(13|0);
     if ($159) {
      $160 = (_strncmp(594339,612074,3)|0);
      $161 = ($160|0)!=(0);
      $162 = HEAP32[31028>>2]|0;
      $163 = ($162|0)==(14|0);
      $or$cond7 = $161 | $163;
      if ($or$cond7) {
       label = 29;
       break;
      }
     } else {
      $$old = HEAP32[31028>>2]|0;
      $$old6 = ($$old|0)==(14|0);
      if ($$old6) {
       label = 29;
       break;
      }
     }
     $164 = HEAP32[31028>>2]|0;
     $165 = ($164|0)==(15|0);
     if ($165) {
      $166 = HEAP32[1068>>2]|0;
      $167 = $166 & 32;
      $168 = ($167|0)!=(0);
      if ($168) {
       label = 29;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 29) {
   $169 = HEAP16[448958>>1]|0;
   $170 = $169&65535;
   HEAP32[(31052)>>2] = $170;
   HEAP32[31036>>2] = $170;
   $171 = HEAP16[448958>>1]|0;
   $172 = $171&65535;
   $173 = HEAP16[580074>>1]|0;
   $174 = $173&65535;
   $175 = (($172) + ($174))|0;
   HEAP32[(31060)>>2] = $175;
   HEAP32[(31044)>>2] = $175;
   $176 = HEAP16[448956>>1]|0;
   $177 = $176&65535;
   $178 = HEAP32[(31048)>>2]|0;
   $179 = (($178) + ($177))|0;
   HEAP32[(31048)>>2] = $179;
   $180 = HEAP16[448956>>1]|0;
   $181 = $180&65535;
   $182 = HEAP16[580076>>1]|0;
   $183 = $182&65535;
   $184 = (($181) + ($183))|0;
   $185 = HEAP32[(31056)>>2]|0;
   $186 = (($185) + ($184))|0;
   HEAP32[(31056)>>2] = $186;
   $187 = HEAP16[580226>>1]|0;
   $188 = $187&65535;
   $189 = HEAP32[(31064)>>2]|0;
   $190 = (($189) + ($188))|0;
   HEAP32[(31064)>>2] = $190;
  }
  $191 = HEAP32[31028>>2]|0;
  $192 = ($191|0)==(16|0);
  if ($192) {
   $193 = HEAP16[448958>>1]|0;
   $194 = $193&65535;
   HEAP32[(31044)>>2] = $194;
   $195 = HEAP16[580076>>1]|0;
   $196 = $195&65535;
   HEAP32[(31048)>>2] = $196;
  }
 }
 ;HEAP32[$mblack>>2]=0|0;HEAP32[$mblack+4>>2]=0|0;HEAP32[$mblack+8>>2]=0|0;HEAP32[$mblack+12>>2]=0|0;HEAP32[$mblack+16>>2]=0|0;HEAP32[$mblack+20>>2]=0|0;HEAP32[$mblack+24>>2]=0|0;HEAP32[$mblack+28>>2]=0|0;
 $m = 0;
 $zero = 0;
 while(1) {
  $197 = $m;
  $198 = ($197>>>0)<(8);
  if (!($198)) {
   break;
  }
  $199 = $m;
  $200 = (31036 + ($199<<4)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)>(0);
  if ($202) {
   $203 = $m;
   $204 = (31036 + ($203<<4)|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $205;
  } else {
   $206 = 0;
  }
  $row = $206;
  while(1) {
   $207 = $row;
   $208 = $m;
   $209 = (31036 + ($208<<4)|0);
   $210 = ((($209)) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = HEAP16[580244>>1]|0;
   $213 = $212&65535;
   $214 = ($211|0)<($213|0);
   if ($214) {
    $215 = $m;
    $216 = (31036 + ($215<<4)|0);
    $217 = ((($216)) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    $222 = $218;
   } else {
    $219 = HEAP16[580244>>1]|0;
    $220 = $219&65535;
    $222 = $220;
   }
   $221 = ($207|0)<($222|0);
   $223 = $m;
   if (!($221)) {
    break;
   }
   $224 = (31036 + ($223<<4)|0);
   $225 = ((($224)) + 4|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = ($226|0)>(0);
   if ($227) {
    $228 = $m;
    $229 = (31036 + ($228<<4)|0);
    $230 = ((($229)) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $231;
   } else {
    $232 = 0;
   }
   $col = $232;
   while(1) {
    $233 = $col;
    $234 = $m;
    $235 = (31036 + ($234<<4)|0);
    $236 = ((($235)) + 12|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = HEAP16[580226>>1]|0;
    $239 = $238&65535;
    $240 = ($237|0)<($239|0);
    if ($240) {
     $241 = $m;
     $242 = (31036 + ($241<<4)|0);
     $243 = ((($242)) + 12|0);
     $244 = HEAP32[$243>>2]|0;
     $248 = $244;
    } else {
     $245 = HEAP16[580226>>1]|0;
     $246 = $245&65535;
     $248 = $246;
    }
    $247 = ($233|0)<($248|0);
    if (!($247)) {
     break;
    }
    $249 = HEAP32[776>>2]|0;
    $250 = $row;
    $251 = HEAP16[448958>>1]|0;
    $252 = $251&65535;
    $253 = (($250) - ($252))|0;
    $254 = $253 << 1;
    $255 = $254 & 14;
    $256 = $col;
    $257 = HEAP16[448956>>1]|0;
    $258 = $257&65535;
    $259 = (($256) - ($258))|0;
    $260 = $259 & 1;
    $261 = (($255) + ($260))|0;
    $262 = $261 << 1;
    $263 = $249 >>> $262;
    $264 = $263 & 3;
    $c = $264;
    $265 = $row;
    $266 = HEAP16[580226>>1]|0;
    $267 = $266&65535;
    $268 = Math_imul($265, $267)|0;
    $269 = $col;
    $270 = (($268) + ($269))|0;
    $271 = HEAP32[1032>>2]|0;
    $272 = (($271) + ($270<<1)|0);
    $273 = HEAP16[$272>>1]|0;
    $274 = $273&65535;
    $val = $274;
    $275 = $c;
    $276 = (($mblack) + ($275<<2)|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = (($277) + ($274))|0;
    HEAP32[$276>>2] = $278;
    $279 = $c;
    $280 = (4 + ($279))|0;
    $281 = (($mblack) + ($280<<2)|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + 1)|0;
    HEAP32[$281>>2] = $283;
    $284 = $val;
    $285 = ($284|0)!=(0);
    $286 = $285 ^ 1;
    $287 = $286&1;
    $288 = $zero;
    $289 = (($288) + ($287))|0;
    $zero = $289;
    $290 = $col;
    $291 = (($290) + 1)|0;
    $col = $291;
   }
   $292 = $row;
   $293 = (($292) + 1)|0;
   $row = $293;
  }
  $294 = (($223) + 1)|0;
  $m = $294;
 }
 $295 = HEAP32[31028>>2]|0;
 $296 = ($295|0)==(11|0);
 if ($296) {
  $297 = HEAP16[580076>>1]|0;
  $298 = $297&65535;
  $299 = HEAP16[580226>>1]|0;
  $300 = $299&65535;
  $301 = ($298|0)<($300|0);
  if ($301) {
   $302 = HEAP32[$mblack>>2]|0;
   $303 = ((($mblack)) + 4|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = (($302) + ($304))|0;
   $306 = ((($mblack)) + 8|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + ($307))|0;
   $309 = ((($mblack)) + 12|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = (($308) + ($310))|0;
   $312 = ((($mblack)) + 16|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = ((($mblack)) + 20|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (($313) + ($315))|0;
   $317 = ((($mblack)) + 24|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($316) + ($318))|0;
   $320 = ((($mblack)) + 28|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = (($319) + ($321))|0;
   $323 = (($311>>>0) / ($322>>>0))&-1;
   $324 = (($323) - 4)|0;
   HEAP32[1036>>2] = $324;
   _canon_600_correct();
   STACKTOP = sp;return;
  }
 }
 $325 = $zero;
 $326 = ((($mblack)) + 16|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = ($325>>>0)<($327>>>0);
 if (!($328)) {
  STACKTOP = sp;return;
 }
 $329 = ((($mblack)) + 20|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = ($330|0)!=(0);
 if (!($331)) {
  STACKTOP = sp;return;
 }
 $332 = ((($mblack)) + 24|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = ($333|0)!=(0);
 if (!($334)) {
  STACKTOP = sp;return;
 }
 $335 = ((($mblack)) + 28|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = ($336|0)!=(0);
 if (!($337)) {
  STACKTOP = sp;return;
 }
 $c = 0;
 while(1) {
  $338 = $c;
  $339 = ($338>>>0)<(4);
  if (!($339)) {
   break;
  }
  $340 = $c;
  $341 = (($mblack) + ($340<<2)|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = $c;
  $344 = (4 + ($343))|0;
  $345 = (($mblack) + ($344<<2)|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = (($342>>>0) / ($346>>>0))&-1;
  $348 = $347&65535;
  $349 = $c;
  $350 = (580264 + ($349<<1)|0);
  HEAP16[$350>>1] = $348;
  $351 = $c;
  $352 = (($351) + 1)|0;
  $c = $352;
 }
 HEAP16[(580276)>>1] = 0;
 HEAP16[(580274)>>1] = 0;
 HEAP16[(580272)>>1] = 0;
 STACKTOP = sp;return;
}
function _remove_zeroes() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $n = 0, $r = 0, $row = 0, $tot = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row = 0;
 while(1) {
  $0 = $row;
  $1 = HEAP16[580074>>1]|0;
  $2 = $1&65535;
  $3 = ($0>>>0)<($2>>>0);
  if (!($3)) {
   break;
  }
  $col = 0;
  while(1) {
   $4 = $col;
   $5 = HEAP16[580076>>1]|0;
   $6 = $5&65535;
   $7 = ($4>>>0)<($6>>>0);
   if (!($7)) {
    break;
   }
   $8 = HEAP32[776>>2]|0;
   $9 = $row;
   $10 = $9 << 1;
   $11 = $10 & 14;
   $12 = $col;
   $13 = $12 & 1;
   $14 = (($11) + ($13))|0;
   $15 = $14 << 1;
   $16 = $8 >>> $15;
   $17 = $16 & 3;
   $18 = $row;
   $19 = HEAP16[580078>>1]|0;
   $20 = $19&65535;
   $21 = $18 >>> $20;
   $22 = HEAP16[580080>>1]|0;
   $23 = $22&65535;
   $24 = Math_imul($21, $23)|0;
   $25 = $col;
   $26 = HEAP16[580078>>1]|0;
   $27 = $26&65535;
   $28 = $25 >>> $27;
   $29 = (($24) + ($28))|0;
   $30 = HEAP32[972>>2]|0;
   $31 = (($30) + ($29<<3)|0);
   $32 = (($31) + ($17<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = ($34|0)==(0);
   if ($35) {
    $n = 0;
    $tot = 0;
    $36 = $row;
    $37 = (($36) - 2)|0;
    $r = $37;
    while(1) {
     $38 = $r;
     $39 = $row;
     $40 = (($39) + 2)|0;
     $41 = ($38>>>0)<=($40>>>0);
     if (!($41)) {
      break;
     }
     $42 = $col;
     $43 = (($42) - 2)|0;
     $c = $43;
     while(1) {
      $44 = $c;
      $45 = $col;
      $46 = (($45) + 2)|0;
      $47 = ($44>>>0)<=($46>>>0);
      $48 = $r;
      if (!($47)) {
       break;
      }
      $49 = HEAP16[580074>>1]|0;
      $50 = $49&65535;
      $51 = ($48>>>0)<($50>>>0);
      if ($51) {
       $52 = $c;
       $53 = HEAP16[580076>>1]|0;
       $54 = $53&65535;
       $55 = ($52>>>0)<($54>>>0);
       if ($55) {
        $56 = HEAP32[776>>2]|0;
        $57 = $r;
        $58 = $57 << 1;
        $59 = $58 & 14;
        $60 = $c;
        $61 = $60 & 1;
        $62 = (($59) + ($61))|0;
        $63 = $62 << 1;
        $64 = $56 >>> $63;
        $65 = $64 & 3;
        $66 = HEAP32[776>>2]|0;
        $67 = $row;
        $68 = $67 << 1;
        $69 = $68 & 14;
        $70 = $col;
        $71 = $70 & 1;
        $72 = (($69) + ($71))|0;
        $73 = $72 << 1;
        $74 = $66 >>> $73;
        $75 = $74 & 3;
        $76 = ($65|0)==($75|0);
        if ($76) {
         $77 = HEAP32[776>>2]|0;
         $78 = $r;
         $79 = $78 << 1;
         $80 = $79 & 14;
         $81 = $c;
         $82 = $81 & 1;
         $83 = (($80) + ($82))|0;
         $84 = $83 << 1;
         $85 = $77 >>> $84;
         $86 = $85 & 3;
         $87 = $r;
         $88 = HEAP16[580078>>1]|0;
         $89 = $88&65535;
         $90 = $87 >>> $89;
         $91 = HEAP16[580080>>1]|0;
         $92 = $91&65535;
         $93 = Math_imul($90, $92)|0;
         $94 = $c;
         $95 = HEAP16[580078>>1]|0;
         $96 = $95&65535;
         $97 = $94 >>> $96;
         $98 = (($93) + ($97))|0;
         $99 = HEAP32[972>>2]|0;
         $100 = (($99) + ($98<<3)|0);
         $101 = (($100) + ($86<<1)|0);
         $102 = HEAP16[$101>>1]|0;
         $103 = $102&65535;
         $104 = ($103|0)!=(0);
         if ($104) {
          $105 = $n;
          $106 = (($105) + 1)|0;
          $n = $106;
          $107 = HEAP32[776>>2]|0;
          $108 = $r;
          $109 = $108 << 1;
          $110 = $109 & 14;
          $111 = $c;
          $112 = $111 & 1;
          $113 = (($110) + ($112))|0;
          $114 = $113 << 1;
          $115 = $107 >>> $114;
          $116 = $115 & 3;
          $117 = $r;
          $118 = HEAP16[580078>>1]|0;
          $119 = $118&65535;
          $120 = $117 >>> $119;
          $121 = HEAP16[580080>>1]|0;
          $122 = $121&65535;
          $123 = Math_imul($120, $122)|0;
          $124 = $c;
          $125 = HEAP16[580078>>1]|0;
          $126 = $125&65535;
          $127 = $124 >>> $126;
          $128 = (($123) + ($127))|0;
          $129 = HEAP32[972>>2]|0;
          $130 = (($129) + ($128<<3)|0);
          $131 = (($130) + ($116<<1)|0);
          $132 = HEAP16[$131>>1]|0;
          $133 = $132&65535;
          $134 = $tot;
          $135 = (($134) + ($133))|0;
          $tot = $135;
         }
        }
       }
      }
      $136 = $c;
      $137 = (($136) + 1)|0;
      $c = $137;
     }
     $138 = (($48) + 1)|0;
     $r = $138;
    }
    $139 = $n;
    $140 = ($139|0)!=(0);
    if ($140) {
     $141 = $tot;
     $142 = $n;
     $143 = (($141>>>0) / ($142>>>0))&-1;
     $144 = $143&65535;
     $145 = HEAP32[776>>2]|0;
     $146 = $row;
     $147 = $146 << 1;
     $148 = $147 & 14;
     $149 = $col;
     $150 = $149 & 1;
     $151 = (($148) + ($150))|0;
     $152 = $151 << 1;
     $153 = $145 >>> $152;
     $154 = $153 & 3;
     $155 = $row;
     $156 = HEAP16[580078>>1]|0;
     $157 = $156&65535;
     $158 = $155 >>> $157;
     $159 = HEAP16[580080>>1]|0;
     $160 = $159&65535;
     $161 = Math_imul($158, $160)|0;
     $162 = $col;
     $163 = HEAP16[580078>>1]|0;
     $164 = $163&65535;
     $165 = $162 >>> $164;
     $166 = (($161) + ($165))|0;
     $167 = HEAP32[972>>2]|0;
     $168 = (($167) + ($166<<3)|0);
     $169 = (($168) + ($154<<1)|0);
     HEAP16[$169>>1] = $144;
    }
   }
   $170 = $col;
   $171 = (($170) + 1)|0;
   $col = $171;
  }
  $172 = $row;
  $173 = (($172) + 1)|0;
  $row = $173;
 }
 STACKTOP = sp;return;
}
function _bad_pixels($cfname) {
 $cfname = $cfname|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $cp = 0;
 var $fixed = 0, $fname = 0, $fp = 0, $len = 0, $line = 0, $n = 0, $r = 0, $rad = 0, $row = 0, $time = 0, $tot = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $line = sp + 88|0;
 $time = sp + 64|0;
 $row = sp + 60|0;
 $col = sp + 56|0;
 $0 = $cfname;
 $fp = 0;
 $fixed = 0;
 $1 = HEAP32[776>>2]|0;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $0;
   $6 = (_fopen($5,612078)|0);
   $fp = $6;
  } else {
   $len = 32;
   while(1) {
    $7 = $len;
    $8 = (_malloc($7)|0);
    $fname = $8;
    $9 = $fname;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     label = 46;
     break;
    }
    $11 = $fname;
    $12 = $len;
    $13 = (($12) - 16)|0;
    $14 = (_getcwd($11,$13)|0);
    $15 = ($14|0)!=(0|0);
    $16 = $fname;
    if ($15) {
     label = 9;
     break;
    }
    _free($16);
    $17 = (___errno_location()|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(34);
    if ($19) {
     label = 46;
     break;
    }
    $20 = $len;
    $21 = $20<<1;
    $len = $21;
   }
   if ((label|0) == 9) {
    $22 = $fname;
    $23 = (_strlen($22)|0);
    $24 = (($16) + ($23)|0);
    $cp = $24;
    $25 = $cp;
    $26 = ((($25)) + -1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = ($28|0)==(47);
    if ($29) {
     $30 = $cp;
     $31 = ((($30)) + -1|0);
     $cp = $31;
    }
    L18: while(1) {
     $32 = $fname;
     $33 = HEAP8[$32>>0]|0;
     $34 = $33 << 24 >> 24;
     $35 = ($34|0)==(47);
     if (!($35)) {
      break;
     }
     $36 = $cp;
     (_strcpy($36,612080)|0);
     $37 = $fname;
     $38 = (_fopen($37,612078)|0);
     $fp = $38;
     $39 = ($38|0)!=(0|0);
     if ($39) {
      break;
     }
     $40 = $cp;
     $41 = $fname;
     $42 = ($40|0)==($41|0);
     if ($42) {
      break;
     }
     while(1) {
      $43 = $cp;
      $44 = ((($43)) + -1|0);
      $cp = $44;
      $45 = HEAP8[$44>>0]|0;
      $46 = $45 << 24 >> 24;
      $47 = ($46|0)!=(47);
      if (!($47)) {
       continue L18;
      }
     }
    }
    $48 = $fname;
    _free($48);
    break;
   }
   else if ((label|0) == 46) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $49 = $fp;
 $50 = ($49|0)!=(0|0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $51 = $fp;
  $52 = (_fgets($line,128,$51)|0);
  $53 = ($52|0)!=(0|0);
  if (!($53)) {
   break;
  }
  $54 = (_strchr($line,35)|0);
  $cp = $54;
  $55 = $cp;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = $cp;
   HEAP8[$57>>0] = 0;
  }
  HEAP32[$vararg_buffer>>2] = $col;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $row;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $time;
  $58 = (_sscanf($line,612092,$vararg_buffer)|0);
  $59 = ($58|0)!=(3);
  if ($59) {
   continue;
  }
  $60 = HEAP32[$col>>2]|0;
  $61 = HEAP16[580076>>1]|0;
  $62 = $61&65535;
  $63 = ($60>>>0)>=($62>>>0);
  if ($63) {
   continue;
  }
  $64 = HEAP32[$row>>2]|0;
  $65 = HEAP16[580074>>1]|0;
  $66 = $65&65535;
  $67 = ($64>>>0)>=($66>>>0);
  if ($67) {
   continue;
  }
  $68 = HEAP32[$time>>2]|0;
  $69 = HEAP32[31164>>2]|0;
  $70 = ($68|0)>($69|0);
  if ($70) {
   continue;
  }
  $n = 0;
  $tot = 0;
  $rad = 1;
  while(1) {
   $71 = $rad;
   $72 = ($71|0)<(3);
   $73 = $n;
   $74 = ($73|0)==(0);
   $75 = $72 ? $74 : 0;
   if (!($75)) {
    break;
   }
   $76 = HEAP32[$row>>2]|0;
   $77 = $rad;
   $78 = (($76) - ($77))|0;
   $r = $78;
   while(1) {
    $79 = $r;
    $80 = HEAP32[$row>>2]|0;
    $81 = $rad;
    $82 = (($80) + ($81))|0;
    $83 = ($79|0)<=($82|0);
    if (!($83)) {
     break;
    }
    $84 = HEAP32[$col>>2]|0;
    $85 = $rad;
    $86 = (($84) - ($85))|0;
    $c = $86;
    while(1) {
     $87 = $c;
     $88 = HEAP32[$col>>2]|0;
     $89 = $rad;
     $90 = (($88) + ($89))|0;
     $91 = ($87|0)<=($90|0);
     $92 = $r;
     if (!($91)) {
      break;
     }
     $93 = HEAP16[580074>>1]|0;
     $94 = $93&65535;
     $95 = ($92>>>0)<($94>>>0);
     do {
      if ($95) {
       $96 = $c;
       $97 = HEAP16[580076>>1]|0;
       $98 = $97&65535;
       $99 = ($96>>>0)<($98>>>0);
       if ($99) {
        $100 = $r;
        $101 = HEAP32[$row>>2]|0;
        $102 = ($100|0)!=($101|0);
        if (!($102)) {
         $103 = $c;
         $104 = HEAP32[$col>>2]|0;
         $105 = ($103|0)!=($104|0);
         if (!($105)) {
          break;
         }
        }
        $106 = $r;
        $107 = $c;
        $108 = (_fcol($106,$107)|0);
        $109 = HEAP32[$row>>2]|0;
        $110 = HEAP32[$col>>2]|0;
        $111 = (_fcol($109,$110)|0);
        $112 = ($108|0)==($111|0);
        if (!($112)) {
         break;
        }
        $113 = $r;
        $114 = $c;
        $115 = (_fcol($113,$114)|0);
        $116 = $r;
        $117 = HEAP16[580078>>1]|0;
        $118 = $117&65535;
        $119 = $116 >> $118;
        $120 = HEAP16[580080>>1]|0;
        $121 = $120&65535;
        $122 = Math_imul($119, $121)|0;
        $123 = $c;
        $124 = HEAP16[580078>>1]|0;
        $125 = $124&65535;
        $126 = $123 >> $125;
        $127 = (($122) + ($126))|0;
        $128 = HEAP32[972>>2]|0;
        $129 = (($128) + ($127<<3)|0);
        $130 = (($129) + ($115<<1)|0);
        $131 = HEAP16[$130>>1]|0;
        $132 = $131&65535;
        $133 = $tot;
        $134 = (($133) + ($132))|0;
        $tot = $134;
        $135 = $n;
        $136 = (($135) + 1)|0;
        $n = $136;
       }
      }
     } while(0);
     $137 = $c;
     $138 = (($137) + 1)|0;
     $c = $138;
    }
    $139 = (($92) + 1)|0;
    $r = $139;
   }
   $140 = $rad;
   $141 = (($140) + 1)|0;
   $rad = $141;
  }
  $142 = $tot;
  $143 = $n;
  $144 = (($142|0) / ($143|0))&-1;
  $145 = $144&65535;
  $146 = HEAP32[$row>>2]|0;
  $147 = HEAP32[$col>>2]|0;
  $148 = (_fcol($146,$147)|0);
  $149 = HEAP32[$row>>2]|0;
  $150 = HEAP16[580078>>1]|0;
  $151 = $150&65535;
  $152 = $149 >> $151;
  $153 = HEAP16[580080>>1]|0;
  $154 = $153&65535;
  $155 = Math_imul($152, $154)|0;
  $156 = HEAP32[$col>>2]|0;
  $157 = HEAP16[580078>>1]|0;
  $158 = $157&65535;
  $159 = $156 >> $158;
  $160 = (($155) + ($159))|0;
  $161 = HEAP32[972>>2]|0;
  $162 = (($161) + ($160<<3)|0);
  $163 = (($162) + ($148<<1)|0);
  HEAP16[$163>>1] = $145;
  $164 = HEAP32[712>>2]|0;
  $165 = ($164|0)!=(0);
  if (!($165)) {
   continue;
  }
  $166 = $fixed;
  $167 = (($166) + 1)|0;
  $fixed = $167;
  $168 = ($166|0)!=(0);
  if (!($168)) {
   $169 = HEAP32[447952>>2]|0;
   (_fprintf($169,612101,$vararg_buffer3)|0);
  }
  $170 = HEAP32[447952>>2]|0;
  $171 = HEAP32[$col>>2]|0;
  $172 = HEAP32[$row>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $171;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $172;
  (_fprintf($170,612123,$vararg_buffer5)|0);
 }
 $173 = $fixed;
 $174 = ($173|0)!=(0);
 if ($174) {
  $175 = HEAP32[447952>>2]|0;
  (_fputc(10,$175)|0);
 }
 $176 = $fp;
 (_fclose($176)|0);
 STACKTOP = sp;return;
}
function _subtract($fname) {
 $fname = $fname|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $comment = 0, $dim = 0, $error = 0, $fp = 0, $nd = 0, $number = 0, $or$cond = 0, $or$cond3 = 0, $pixel = 0, $row = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $dim = sp + 44|0;
 $0 = $fname;
 ;HEAP32[$dim>>2]=0|0;HEAP32[$dim+4>>2]=0|0;HEAP32[$dim+8>>2]=0|0;
 $comment = 0;
 $number = 0;
 $error = 0;
 $nd = 0;
 $1 = $0;
 $2 = (_fopen($1,612130)|0);
 $fp = $2;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $4 = $0;
  _perror($4);
  STACKTOP = sp;return;
 }
 $5 = $fp;
 $6 = (_getc_unlocked($5)|0);
 $7 = ($6|0)!=(80);
 if ($7) {
  label = 5;
 } else {
  $8 = $fp;
  $9 = (_getc_unlocked($8)|0);
  $10 = ($9|0)!=(53);
  if ($10) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $error = 1;
 }
 while(1) {
  $11 = $error;
  $12 = ($11|0)==(0);
  $13 = $nd;
  $14 = ($13|0)<(3);
  $or$cond = $12 & $14;
  if (!($or$cond)) {
   break;
  }
  $15 = $fp;
  $16 = (_getc_unlocked($15)|0);
  $c = $16;
  $17 = ($16|0)!=(-1);
  if (!($17)) {
   break;
  }
  $18 = $c;
  $19 = ($18|0)==(35);
  if ($19) {
   $comment = 1;
  }
  $20 = $c;
  $21 = ($20|0)==(10);
  if ($21) {
   $comment = 0;
  }
  $22 = $comment;
  $23 = ($22|0)!=(0);
  if ($23) {
   continue;
  }
  $24 = $c;
  $25 = (_isdigit($24)|0);
  $26 = ($25|0)!=(0);
  if ($26) {
   $number = 1;
  }
  $27 = $number;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   continue;
  }
  $29 = $c;
  $30 = (_isdigit($29)|0);
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $nd;
   $33 = (($dim) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34*10)|0;
   $36 = $c;
   $37 = (($35) + ($36))|0;
   $38 = (($37) - 48)|0;
   $39 = $nd;
   $40 = (($dim) + ($39<<2)|0);
   HEAP32[$40>>2] = $38;
   continue;
  }
  $41 = $c;
  $42 = (_isspace($41)|0);
  $43 = ($42|0)!=(0);
  if ($43) {
   $number = 0;
   $44 = $nd;
   $45 = (($44) + 1)|0;
   $nd = $45;
   continue;
  } else {
   $error = 1;
   continue;
  }
 }
 $46 = $error;
 $47 = ($46|0)!=(0);
 $48 = $nd;
 $49 = ($48|0)<(3);
 $or$cond3 = $47 | $49;
 if ($or$cond3) {
  $50 = HEAP32[447952>>2]|0;
  $51 = $0;
  HEAP32[$vararg_buffer>>2] = $51;
  (_fprintf($50,612133,$vararg_buffer)|0);
  $52 = $fp;
  (_fclose($52)|0);
  STACKTOP = sp;return;
 }
 $53 = HEAP32[$dim>>2]|0;
 $54 = HEAP16[580076>>1]|0;
 $55 = $54&65535;
 $56 = ($53|0)!=($55|0);
 if (!($56)) {
  $57 = ((($dim)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP16[580074>>1]|0;
  $60 = $59&65535;
  $61 = ($58|0)!=($60|0);
  if (!($61)) {
   $62 = ((($dim)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(65535);
   if (!($64)) {
    $68 = HEAP16[580076>>1]|0;
    $69 = $68&65535;
    $70 = (_calloc($69,2)|0);
    $pixel = $70;
    $71 = $pixel;
    _merror($71,612192);
    $row = 0;
    while(1) {
     $72 = $row;
     $73 = HEAP16[580074>>1]|0;
     $74 = $73&65535;
     $75 = ($72|0)<($74|0);
     $76 = $pixel;
     if (!($75)) {
      break;
     }
     $77 = HEAP16[580076>>1]|0;
     $78 = $77&65535;
     $79 = $fp;
     (_fread($76,2,$78,$79)|0);
     $col = 0;
     while(1) {
      $80 = $col;
      $81 = HEAP16[580076>>1]|0;
      $82 = $81&65535;
      $83 = ($80|0)<($82|0);
      if (!($83)) {
       break;
      }
      $84 = HEAP32[776>>2]|0;
      $85 = $row;
      $86 = $85 << 1;
      $87 = $86 & 14;
      $88 = $col;
      $89 = $88 & 1;
      $90 = (($87) + ($89))|0;
      $91 = $90 << 1;
      $92 = $84 >>> $91;
      $93 = $92 & 3;
      $94 = $row;
      $95 = HEAP16[580078>>1]|0;
      $96 = $95&65535;
      $97 = $94 >> $96;
      $98 = HEAP16[580080>>1]|0;
      $99 = $98&65535;
      $100 = Math_imul($97, $99)|0;
      $101 = $col;
      $102 = HEAP16[580078>>1]|0;
      $103 = $102&65535;
      $104 = $101 >> $103;
      $105 = (($100) + ($104))|0;
      $106 = HEAP32[972>>2]|0;
      $107 = (($106) + ($105<<3)|0);
      $108 = (($107) + ($93<<1)|0);
      $109 = HEAP16[$108>>1]|0;
      $110 = $109&65535;
      $111 = $col;
      $112 = $pixel;
      $113 = (($112) + ($111<<1)|0);
      $114 = HEAP16[$113>>1]|0;
      $115 = (_ntohs($114)|0);
      $116 = $115&65535;
      $117 = (($110) - ($116))|0;
      $118 = ($117|0)>(0);
      if ($118) {
       $119 = HEAP32[776>>2]|0;
       $120 = $row;
       $121 = $120 << 1;
       $122 = $121 & 14;
       $123 = $col;
       $124 = $123 & 1;
       $125 = (($122) + ($124))|0;
       $126 = $125 << 1;
       $127 = $119 >>> $126;
       $128 = $127 & 3;
       $129 = $row;
       $130 = HEAP16[580078>>1]|0;
       $131 = $130&65535;
       $132 = $129 >> $131;
       $133 = HEAP16[580080>>1]|0;
       $134 = $133&65535;
       $135 = Math_imul($132, $134)|0;
       $136 = $col;
       $137 = HEAP16[580078>>1]|0;
       $138 = $137&65535;
       $139 = $136 >> $138;
       $140 = (($135) + ($139))|0;
       $141 = HEAP32[972>>2]|0;
       $142 = (($141) + ($140<<3)|0);
       $143 = (($142) + ($128<<1)|0);
       $144 = HEAP16[$143>>1]|0;
       $145 = $144&65535;
       $146 = $col;
       $147 = $pixel;
       $148 = (($147) + ($146<<1)|0);
       $149 = HEAP16[$148>>1]|0;
       $150 = (_ntohs($149)|0);
       $151 = $150&65535;
       $152 = (($145) - ($151))|0;
       $154 = $152;
      } else {
       $154 = 0;
      }
      $153 = $154&65535;
      $155 = HEAP32[776>>2]|0;
      $156 = $row;
      $157 = $156 << 1;
      $158 = $157 & 14;
      $159 = $col;
      $160 = $159 & 1;
      $161 = (($158) + ($160))|0;
      $162 = $161 << 1;
      $163 = $155 >>> $162;
      $164 = $163 & 3;
      $165 = $row;
      $166 = HEAP16[580078>>1]|0;
      $167 = $166&65535;
      $168 = $165 >> $167;
      $169 = HEAP16[580080>>1]|0;
      $170 = $169&65535;
      $171 = Math_imul($168, $170)|0;
      $172 = $col;
      $173 = HEAP16[580078>>1]|0;
      $174 = $173&65535;
      $175 = $172 >> $174;
      $176 = (($171) + ($175))|0;
      $177 = HEAP32[972>>2]|0;
      $178 = (($177) + ($176<<3)|0);
      $179 = (($178) + ($164<<1)|0);
      HEAP16[$179>>1] = $153;
      $180 = $col;
      $181 = (($180) + 1)|0;
      $col = $181;
     }
     $182 = $row;
     $183 = (($182) + 1)|0;
     $row = $183;
    }
    _free($76);
    $184 = $fp;
    (_fclose($184)|0);
    _memset((580264|0),0,8204)|0;
    HEAP32[1036>>2] = 0;
    STACKTOP = sp;return;
   }
  }
 }
 $65 = HEAP32[447952>>2]|0;
 $66 = $0;
 HEAP32[$vararg_buffer4>>2] = $66;
 (_fprintf($65,612162,$vararg_buffer4)|0);
 $67 = $fp;
 (_fclose($67)|0);
 STACKTOP = sp;return;
}
function _gamma_curve($pwr,$ts,$mode,$imax) {
 $pwr = +$pwr;
 $ts = +$ts;
 $mode = $mode|0;
 $imax = $imax|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $bnd = 0, $g = 0, $i = 0, $r = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp + 24|0;
 $bnd = sp + 8|0;
 $0 = $pwr;
 $1 = $ts;
 $2 = $mode;
 $3 = $imax;
 ;HEAP32[$bnd>>2]=0|0;HEAP32[$bnd+4>>2]=0|0;HEAP32[$bnd+8>>2]=0|0;HEAP32[$bnd+12>>2]=0|0;
 $4 = $0;
 HEAPF64[$g>>3] = $4;
 $5 = $1;
 $6 = ((($g)) + 8|0);
 HEAPF64[$6>>3] = $5;
 $7 = ((($g)) + 32|0);
 HEAPF64[$7>>3] = 0.0;
 $8 = ((($g)) + 24|0);
 HEAPF64[$8>>3] = 0.0;
 $9 = ((($g)) + 16|0);
 HEAPF64[$9>>3] = 0.0;
 $10 = ((($g)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 >= 1.0;
 $13 = $12&1;
 $14 = (($bnd) + ($13<<3)|0);
 HEAPF64[$14>>3] = 1.0;
 $15 = ((($g)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 != 0.0;
 if ($17) {
  $18 = ((($g)) + 8|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 - 1.0;
  $21 = +HEAPF64[$g>>3];
  $22 = $21 - 1.0;
  $23 = $20 * $22;
  $24 = $23 <= 0.0;
  if ($24) {
   $i = 0;
   while(1) {
    $25 = $i;
    $26 = ($25|0)<(48);
    if (!($26)) {
     break;
    }
    $27 = +HEAPF64[$bnd>>3];
    $28 = ((($bnd)) + 8|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $27 + $29;
    $31 = $30 / 2.0;
    $32 = ((($g)) + 16|0);
    HEAPF64[$32>>3] = $31;
    $33 = +HEAPF64[$g>>3];
    $34 = $33 != 0.0;
    $35 = ((($g)) + 16|0);
    $36 = +HEAPF64[$35>>3];
    $37 = ((($g)) + 16|0);
    $38 = +HEAPF64[$37>>3];
    if ($34) {
     $39 = ((($g)) + 8|0);
     $40 = +HEAPF64[$39>>3];
     $41 = $38 / $40;
     $42 = +HEAPF64[$g>>3];
     $43 = -$42;
     $44 = (+Math_pow((+$41),(+$43)));
     $45 = $44 - 1.0;
     $46 = +HEAPF64[$g>>3];
     $47 = $45 / $46;
     $48 = ((($g)) + 16|0);
     $49 = +HEAPF64[$48>>3];
     $50 = 1.0 / $49;
     $51 = $47 - $50;
     $52 = $51 > -1.0;
     $53 = $52&1;
     $54 = (($bnd) + ($53<<3)|0);
     HEAPF64[$54>>3] = $36;
    } else {
     $55 = ((($g)) + 16|0);
     $56 = +HEAPF64[$55>>3];
     $57 = 1.0 / $56;
     $58 = 1.0 - $57;
     $59 = (+Math_exp((+$58)));
     $60 = $38 / $59;
     $61 = ((($g)) + 8|0);
     $62 = +HEAPF64[$61>>3];
     $63 = $60 < $62;
     $64 = $63&1;
     $65 = (($bnd) + ($64<<3)|0);
     HEAPF64[$65>>3] = $36;
    }
    $66 = $i;
    $67 = (($66) + 1)|0;
    $i = $67;
   }
   $68 = ((($g)) + 16|0);
   $69 = +HEAPF64[$68>>3];
   $70 = ((($g)) + 8|0);
   $71 = +HEAPF64[$70>>3];
   $72 = $69 / $71;
   $73 = ((($g)) + 24|0);
   HEAPF64[$73>>3] = $72;
   $74 = +HEAPF64[$g>>3];
   $75 = $74 != 0.0;
   if ($75) {
    $76 = ((($g)) + 16|0);
    $77 = +HEAPF64[$76>>3];
    $78 = +HEAPF64[$g>>3];
    $79 = 1.0 / $78;
    $80 = $79 - 1.0;
    $81 = $77 * $80;
    $82 = ((($g)) + 32|0);
    HEAPF64[$82>>3] = $81;
   }
  }
 }
 $83 = +HEAPF64[$g>>3];
 $84 = $83 != 0.0;
 $85 = ((($g)) + 8|0);
 $86 = +HEAPF64[$85>>3];
 $87 = ((($g)) + 24|0);
 $88 = +HEAPF64[$87>>3];
 $89 = ((($g)) + 24|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $88 * $90;
 $92 = $86 * $91;
 $93 = $92 / 2.0;
 if ($84) {
  $94 = ((($g)) + 32|0);
  $95 = +HEAPF64[$94>>3];
  $96 = ((($g)) + 24|0);
  $97 = +HEAPF64[$96>>3];
  $98 = 1.0 - $97;
  $99 = $95 * $98;
  $100 = $93 - $99;
  $101 = ((($g)) + 24|0);
  $102 = +HEAPF64[$101>>3];
  $103 = +HEAPF64[$g>>3];
  $104 = 1.0 + $103;
  $105 = (+Math_pow((+$102),(+$104)));
  $106 = 1.0 - $105;
  $107 = ((($g)) + 32|0);
  $108 = +HEAPF64[$107>>3];
  $109 = 1.0 + $108;
  $110 = $106 * $109;
  $111 = +HEAPF64[$g>>3];
  $112 = 1.0 + $111;
  $113 = $110 / $112;
  $114 = $100 + $113;
  $115 = 1.0 / $114;
  $116 = $115 - 1.0;
  $117 = ((($g)) + 40|0);
  HEAPF64[$117>>3] = $116;
 } else {
  $118 = $93 + 1.0;
  $119 = ((($g)) + 16|0);
  $120 = +HEAPF64[$119>>3];
  $121 = $118 - $120;
  $122 = ((($g)) + 24|0);
  $123 = +HEAPF64[$122>>3];
  $124 = $121 - $123;
  $125 = ((($g)) + 16|0);
  $126 = +HEAPF64[$125>>3];
  $127 = ((($g)) + 24|0);
  $128 = +HEAPF64[$127>>3];
  $129 = $126 * $128;
  $130 = ((($g)) + 24|0);
  $131 = +HEAPF64[$130>>3];
  $132 = (+Math_log((+$131)));
  $133 = $132 - 1.0;
  $134 = $129 * $133;
  $135 = $124 - $134;
  $136 = 1.0 / $135;
  $137 = $136 - 1.0;
  $138 = ((($g)) + 40|0);
  HEAPF64[$138>>3] = $137;
 }
 $139 = $2;
 $140 = (($139) + -1)|0;
 $2 = $140;
 $141 = ($139|0)!=(0);
 if (!($141)) {
  dest=40; src=$g; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $142 = $i;
  $143 = ($142|0)<(65536);
  if (!($143)) {
   break;
  }
  $144 = $i;
  $145 = (448962 + ($144<<1)|0);
  HEAP16[$145>>1] = -1;
  $146 = $i;
  $147 = (+($146|0));
  $148 = $3;
  $149 = (+($148|0));
  $150 = $147 / $149;
  $r = $150;
  $151 = $150 < 1.0;
  if ($151) {
   $152 = $2;
   $153 = ($152|0)!=(0);
   $154 = $r;
   do {
    if ($153) {
     $155 = ((($g)) + 24|0);
     $156 = +HEAPF64[$155>>3];
     $157 = $154 < $156;
     if ($157) {
      $158 = $r;
      $159 = ((($g)) + 8|0);
      $160 = +HEAPF64[$159>>3];
      $161 = $158 * $160;
      $205 = $161;
      break;
     }
     $162 = +HEAPF64[$g>>3];
     $163 = $162 != 0.0;
     $164 = $r;
     if ($163) {
      $165 = +HEAPF64[$g>>3];
      $166 = (+Math_pow((+$164),(+$165)));
      $167 = ((($g)) + 32|0);
      $168 = +HEAPF64[$167>>3];
      $169 = 1.0 + $168;
      $170 = $166 * $169;
      $171 = ((($g)) + 32|0);
      $172 = +HEAPF64[$171>>3];
      $173 = $170 - $172;
      $205 = $173;
      break;
     } else {
      $174 = (+Math_log((+$164)));
      $175 = ((($g)) + 16|0);
      $176 = +HEAPF64[$175>>3];
      $177 = $174 * $176;
      $178 = $177 + 1.0;
      $205 = $178;
      break;
     }
    } else {
     $179 = ((($g)) + 16|0);
     $180 = +HEAPF64[$179>>3];
     $181 = $154 < $180;
     if ($181) {
      $182 = $r;
      $183 = ((($g)) + 8|0);
      $184 = +HEAPF64[$183>>3];
      $185 = $182 / $184;
      $205 = $185;
      break;
     }
     $186 = +HEAPF64[$g>>3];
     $187 = $186 != 0.0;
     $188 = $r;
     if ($187) {
      $189 = ((($g)) + 32|0);
      $190 = +HEAPF64[$189>>3];
      $191 = $188 + $190;
      $192 = ((($g)) + 32|0);
      $193 = +HEAPF64[$192>>3];
      $194 = 1.0 + $193;
      $195 = $191 / $194;
      $196 = +HEAPF64[$g>>3];
      $197 = 1.0 / $196;
      $198 = (+Math_pow((+$195),(+$197)));
      $205 = $198;
      break;
     } else {
      $199 = $188 - 1.0;
      $200 = ((($g)) + 16|0);
      $201 = +HEAPF64[$200>>3];
      $202 = $199 / $201;
      $203 = (+Math_exp((+$202)));
      $205 = $203;
      break;
     }
    }
   } while(0);
   $204 = 65536.0 * $205;
   $206 = (~~(($204))&65535);
   $207 = $i;
   $208 = (448962 + ($207<<1)|0);
   HEAP16[$208>>1] = $206;
  }
  $209 = $i;
  $210 = (($209) + 1)|0;
  $i = $210;
 }
 STACKTOP = sp;return;
}
function _pseudoinverse($in,$out,$size) {
 $in = $in|0;
 $out = $out|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $num = 0.0;
 var $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $work = sp + 8|0;
 $0 = $in;
 $1 = $out;
 $2 = $size;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = ($5|0)<(6);
   if (!($6)) {
    break;
   }
   $7 = $j;
   $8 = $i;
   $9 = (($8) + 3)|0;
   $10 = ($7|0)==($9|0);
   $11 = $10&1;
   $12 = (+($11|0));
   $13 = $j;
   $14 = $i;
   $15 = (($work) + (($14*48)|0)|0);
   $16 = (($15) + ($13<<3)|0);
   HEAPF64[$16>>3] = $12;
   $17 = $j;
   $18 = (($17) + 1)|0;
   $j = $18;
  }
  $j = 0;
  while(1) {
   $19 = $j;
   $20 = ($19|0)<(3);
   if (!($20)) {
    break;
   }
   $k = 0;
   while(1) {
    $21 = $k;
    $22 = $2;
    $23 = ($21|0)<($22|0);
    if (!($23)) {
     break;
    }
    $24 = $i;
    $25 = $k;
    $26 = $0;
    $27 = (($26) + (($25*24)|0)|0);
    $28 = (($27) + ($24<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $j;
    $31 = $k;
    $32 = $0;
    $33 = (($32) + (($31*24)|0)|0);
    $34 = (($33) + ($30<<3)|0);
    $35 = +HEAPF64[$34>>3];
    $36 = $29 * $35;
    $37 = $j;
    $38 = $i;
    $39 = (($work) + (($38*48)|0)|0);
    $40 = (($39) + ($37<<3)|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $41 + $36;
    HEAPF64[$40>>3] = $42;
    $43 = $k;
    $44 = (($43) + 1)|0;
    $k = $44;
   }
   $45 = $j;
   $46 = (($45) + 1)|0;
   $j = $46;
  }
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 $i = 0;
 while(1) {
  $49 = $i;
  $50 = ($49|0)<(3);
  if (!($50)) {
   break;
  }
  $51 = $i;
  $52 = $i;
  $53 = (($work) + (($52*48)|0)|0);
  $54 = (($53) + ($51<<3)|0);
  $55 = +HEAPF64[$54>>3];
  $num = $55;
  $j = 0;
  while(1) {
   $56 = $j;
   $57 = ($56|0)<(6);
   if (!($57)) {
    break;
   }
   $58 = $num;
   $59 = $j;
   $60 = $i;
   $61 = (($work) + (($60*48)|0)|0);
   $62 = (($61) + ($59<<3)|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $63 / $58;
   HEAPF64[$62>>3] = $64;
   $65 = $j;
   $66 = (($65) + 1)|0;
   $j = $66;
  }
  $k = 0;
  while(1) {
   $67 = $k;
   $68 = ($67|0)<(3);
   if (!($68)) {
    break;
   }
   $69 = $k;
   $70 = $i;
   $71 = ($69|0)==($70|0);
   L27: do {
    if (!($71)) {
     $72 = $i;
     $73 = $k;
     $74 = (($work) + (($73*48)|0)|0);
     $75 = (($74) + ($72<<3)|0);
     $76 = +HEAPF64[$75>>3];
     $num = $76;
     $j = 0;
     while(1) {
      $77 = $j;
      $78 = ($77|0)<(6);
      if (!($78)) {
       break L27;
      }
      $79 = $j;
      $80 = $i;
      $81 = (($work) + (($80*48)|0)|0);
      $82 = (($81) + ($79<<3)|0);
      $83 = +HEAPF64[$82>>3];
      $84 = $num;
      $85 = $83 * $84;
      $86 = $j;
      $87 = $k;
      $88 = (($work) + (($87*48)|0)|0);
      $89 = (($88) + ($86<<3)|0);
      $90 = +HEAPF64[$89>>3];
      $91 = $90 - $85;
      HEAPF64[$89>>3] = $91;
      $92 = $j;
      $93 = (($92) + 1)|0;
      $j = $93;
     }
    }
   } while(0);
   $94 = $k;
   $95 = (($94) + 1)|0;
   $k = $95;
  }
  $96 = $i;
  $97 = (($96) + 1)|0;
  $i = $97;
 }
 $i = 0;
 while(1) {
  $98 = $i;
  $99 = $2;
  $100 = ($98|0)<($99|0);
  if (!($100)) {
   break;
  }
  $j = 0;
  while(1) {
   $101 = $j;
   $102 = ($101|0)<(3);
   if (!($102)) {
    break;
   }
   $k = 0;
   $103 = $j;
   $104 = $i;
   $105 = $1;
   $106 = (($105) + (($104*24)|0)|0);
   $107 = (($106) + ($103<<3)|0);
   HEAPF64[$107>>3] = 0.0;
   while(1) {
    $108 = $k;
    $109 = ($108|0)<(3);
    if (!($109)) {
     break;
    }
    $110 = $k;
    $111 = (($110) + 3)|0;
    $112 = $j;
    $113 = (($work) + (($112*48)|0)|0);
    $114 = (($113) + ($111<<3)|0);
    $115 = +HEAPF64[$114>>3];
    $116 = $k;
    $117 = $i;
    $118 = $0;
    $119 = (($118) + (($117*24)|0)|0);
    $120 = (($119) + ($116<<3)|0);
    $121 = +HEAPF64[$120>>3];
    $122 = $115 * $121;
    $123 = $j;
    $124 = $i;
    $125 = $1;
    $126 = (($125) + (($124*24)|0)|0);
    $127 = (($126) + ($123<<3)|0);
    $128 = +HEAPF64[$127>>3];
    $129 = $128 + $122;
    HEAPF64[$127>>3] = $129;
    $130 = $k;
    $131 = (($130) + 1)|0;
    $k = $131;
   }
   $132 = $j;
   $133 = (($132) + 1)|0;
   $j = $133;
  }
  $134 = $i;
  $135 = (($134) + 1)|0;
  $i = $135;
 }
 STACKTOP = sp;return;
}
function _cam_xyz_coeff($rgb_cam,$cam_xyz) {
 $rgb_cam = $rgb_cam|0;
 $cam_xyz = $cam_xyz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $cam_rgb = 0, $i = 0, $inverse = 0, $j = 0, $k = 0, $num = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cam_rgb = sp + 104|0;
 $inverse = sp + 8|0;
 $0 = $rgb_cam;
 $1 = $cam_xyz;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = HEAP32[980>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = ($5|0)<(3);
   if (!($6)) {
    break;
   }
   $k = 0;
   $7 = $j;
   $8 = $i;
   $9 = (($cam_rgb) + (($8*24)|0)|0);
   $10 = (($9) + ($7<<3)|0);
   HEAPF64[$10>>3] = 0.0;
   while(1) {
    $11 = $k;
    $12 = ($11|0)<(3);
    if (!($12)) {
     break;
    }
    $13 = $k;
    $14 = $i;
    $15 = $1;
    $16 = (($15) + (($14*24)|0)|0);
    $17 = (($16) + ($13<<3)|0);
    $18 = +HEAPF64[$17>>3];
    $19 = $j;
    $20 = $k;
    $21 = (88 + (($20*24)|0)|0);
    $22 = (($21) + ($19<<3)|0);
    $23 = +HEAPF64[$22>>3];
    $24 = $18 * $23;
    $25 = $j;
    $26 = $i;
    $27 = (($cam_rgb) + (($26*24)|0)|0);
    $28 = (($27) + ($25<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = $29 + $24;
    HEAPF64[$28>>3] = $30;
    $31 = $k;
    $32 = (($31) + 1)|0;
    $k = $32;
   }
   $33 = $j;
   $34 = (($33) + 1)|0;
   $j = $34;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = HEAP32[980>>2]|0;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $j = 0;
  $num = 0.0;
  while(1) {
   $40 = $j;
   $41 = ($40|0)<(3);
   if (!($41)) {
    break;
   }
   $42 = $j;
   $43 = $i;
   $44 = (($cam_rgb) + (($43*24)|0)|0);
   $45 = (($44) + ($42<<3)|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $num;
   $48 = $47 + $46;
   $num = $48;
   $49 = $j;
   $50 = (($49) + 1)|0;
   $j = $50;
  }
  $j = 0;
  while(1) {
   $51 = $j;
   $52 = ($51|0)<(3);
   $53 = $num;
   if (!($52)) {
    break;
   }
   $54 = $j;
   $55 = $i;
   $56 = (($cam_rgb) + (($55*24)|0)|0);
   $57 = (($56) + ($54<<3)|0);
   $58 = +HEAPF64[$57>>3];
   $59 = $58 / $53;
   HEAPF64[$57>>3] = $59;
   $60 = $j;
   $61 = (($60) + 1)|0;
   $j = $61;
  }
  $62 = 1.0 / $53;
  $63 = $62;
  $64 = $i;
  $65 = (948 + ($64<<2)|0);
  HEAPF32[$65>>2] = $63;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 $68 = HEAP32[980>>2]|0;
 _pseudoinverse($cam_rgb,$inverse,$68);
 $i = 0;
 while(1) {
  $69 = $i;
  $70 = ($69|0)<(3);
  if (!($70)) {
   break;
  }
  $j = 0;
  while(1) {
   $71 = $j;
   $72 = HEAP32[980>>2]|0;
   $73 = ($71>>>0)<($72>>>0);
   $74 = $i;
   if (!($73)) {
    break;
   }
   $75 = $j;
   $76 = (($inverse) + (($75*24)|0)|0);
   $77 = (($76) + ($74<<3)|0);
   $78 = +HEAPF64[$77>>3];
   $79 = $78;
   $80 = $j;
   $81 = $i;
   $82 = $0;
   $83 = (($82) + ($81<<4)|0);
   $84 = (($83) + ($80<<2)|0);
   HEAPF32[$84>>2] = $79;
   $85 = $j;
   $86 = (($85) + 1)|0;
   $j = $86;
  }
  $87 = (($74) + 1)|0;
  $i = $87;
 }
 STACKTOP = sp;return;
}
function _hat_transform($temp,$base,$st,$size,$sc) {
 $temp = $temp|0;
 $base = $base|0;
 $st = $st|0;
 $size = $size|0;
 $sc = $sc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $temp;
 $1 = $base;
 $2 = $st;
 $3 = $size;
 $4 = $sc;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = $i;
  $10 = Math_imul($8, $9)|0;
  $11 = $1;
  $12 = (($11) + ($10<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = 2.0 * $13;
  $15 = $2;
  $16 = $4;
  $17 = $i;
  $18 = (($16) - ($17))|0;
  $19 = Math_imul($15, $18)|0;
  $20 = $1;
  $21 = (($20) + ($19<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $14 + $22;
  $24 = $2;
  $25 = $i;
  $26 = $4;
  $27 = (($25) + ($26))|0;
  $28 = Math_imul($24, $27)|0;
  $29 = $1;
  $30 = (($29) + ($28<<2)|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $23 + $31;
  $33 = $i;
  $34 = $0;
  $35 = (($34) + ($33<<2)|0);
  HEAPF32[$35>>2] = $32;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 while(1) {
  $38 = $i;
  $39 = $4;
  $40 = (($38) + ($39))|0;
  $41 = $3;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $2;
  $44 = $i;
  $45 = Math_imul($43, $44)|0;
  $46 = $1;
  $47 = (($46) + ($45<<2)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = 2.0 * $48;
  $50 = $2;
  $51 = $i;
  $52 = $4;
  $53 = (($51) - ($52))|0;
  $54 = Math_imul($50, $53)|0;
  $55 = $1;
  $56 = (($55) + ($54<<2)|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $49 + $57;
  $59 = $2;
  $60 = $i;
  $61 = $4;
  $62 = (($60) + ($61))|0;
  $63 = Math_imul($59, $62)|0;
  $64 = $1;
  $65 = (($64) + ($63<<2)|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $58 + $66;
  $68 = $i;
  $69 = $0;
  $70 = (($69) + ($68<<2)|0);
  HEAPF32[$70>>2] = $67;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 while(1) {
  $73 = $i;
  $74 = $3;
  $75 = ($73|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $2;
  $77 = $i;
  $78 = Math_imul($76, $77)|0;
  $79 = $1;
  $80 = (($79) + ($78<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $82 = 2.0 * $81;
  $83 = $2;
  $84 = $i;
  $85 = $4;
  $86 = (($84) - ($85))|0;
  $87 = Math_imul($83, $86)|0;
  $88 = $1;
  $89 = (($88) + ($87<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $82 + $90;
  $92 = $2;
  $93 = $3;
  $94 = $93<<1;
  $95 = (($94) - 2)|0;
  $96 = $i;
  $97 = $4;
  $98 = (($96) + ($97))|0;
  $99 = (($95) - ($98))|0;
  $100 = Math_imul($92, $99)|0;
  $101 = $1;
  $102 = (($101) + ($100<<2)|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $91 + $103;
  $105 = $i;
  $106 = $0;
  $107 = (($106) + ($105<<2)|0);
  HEAPF32[$107>>2] = $104;
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 STACKTOP = sp;return;
}
function _wavelet_denoise() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0;
 var $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0.0;
 var $602 = 0.0, $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0;
 var $620 = 0.0, $621 = 0.0, $622 = 0.0, $623 = 0.0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0.0, $638 = 0.0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0;
 var $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0.0, $blk = 0, $c = 0, $col = 0, $diff = 0.0;
 var $fimg = 0, $hpass = 0, $i = 0, $lev = 0, $lpass = 0, $mul = 0, $nc = 0, $or$cond = 0, $or$cond3 = 0, $row = 0, $scale = 0, $size = 0, $temp = 0, $thold = 0.0, $vararg_buffer = 0, $window = 0, $wlast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mul = sp + 88|0;
 $blk = sp + 24|0;
 $window = sp + 8|0;
 $fimg = 0;
 $scale = 1;
 $0 = HEAP32[712>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[447952>>2]|0;
  (_fprintf($2,612203,$vararg_buffer)|0);
 }
 while(1) {
  $3 = HEAP32[1040>>2]|0;
  $4 = $scale;
  $5 = $3 << $4;
  $6 = ($5>>>0)<(65536);
  $7 = $scale;
  if (!($6)) {
   break;
  }
  $8 = (($7) + 1)|0;
  $scale = $8;
 }
 $9 = (($7) + -1)|0;
 $scale = $9;
 $10 = HEAP32[1040>>2]|0;
 $11 = $10 << $9;
 HEAP32[1040>>2] = $11;
 $12 = $scale;
 $13 = HEAP32[1036>>2]|0;
 $14 = $13 << $12;
 HEAP32[1036>>2] = $14;
 $c = 0;
 while(1) {
  $15 = $c;
  $16 = ($15|0)<(4);
  if (!($16)) {
   break;
  }
  $17 = $scale;
  $18 = $c;
  $19 = (580264 + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = $21 << $17;
  $23 = $22&65535;
  HEAP16[$19>>1] = $23;
  $24 = $c;
  $25 = (($24) + 1)|0;
  $c = $25;
 }
 $26 = HEAP16[589196>>1]|0;
 $27 = $26&65535;
 $28 = HEAP16[580080>>1]|0;
 $29 = $28&65535;
 $30 = Math_imul($27, $29)|0;
 $size = $30;
 $31 = ($30|0)<(357892096);
 if ($31) {
  $32 = $size;
  $33 = ($32*3)|0;
  $34 = HEAP16[589196>>1]|0;
  $35 = $34&65535;
  $36 = (($33) + ($35))|0;
  $37 = HEAP16[580080>>1]|0;
  $38 = $37&65535;
  $39 = (($36) + ($38))|0;
  $40 = $39<<2;
  $41 = (_malloc($40)|0);
  $fimg = $41;
 }
 $42 = $fimg;
 _merror($42,612225);
 $43 = $fimg;
 $44 = $size;
 $45 = ($44*3)|0;
 $46 = (($43) + ($45<<2)|0);
 $temp = $46;
 $47 = HEAP32[980>>2]|0;
 $nc = $47;
 $48 = ($47|0)==(3);
 $49 = HEAP32[776>>2]|0;
 $50 = ($49|0)!=(0);
 $or$cond = $48 & $50;
 if ($or$cond) {
  $51 = $nc;
  $52 = (($51) + 1)|0;
  $nc = $52;
 }
 $c = 0;
 while(1) {
  $53 = $c;
  $54 = $nc;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $i = 0;
  while(1) {
   $56 = $i;
   $57 = $size;
   $58 = ($56|0)<($57|0);
   if (!($58)) {
    break;
   }
   $59 = $c;
   $60 = $i;
   $61 = HEAP32[972>>2]|0;
   $62 = (($61) + ($60<<3)|0);
   $63 = (($62) + ($59<<1)|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   $66 = $scale;
   $67 = $65 << $66;
   $68 = (+($67|0));
   $69 = (+Math_sqrt((+$68)));
   $70 = 256.0 * $69;
   $71 = $70;
   $72 = $i;
   $73 = $fimg;
   $74 = (($73) + ($72<<2)|0);
   HEAPF32[$74>>2] = $71;
   $75 = $i;
   $76 = (($75) + 1)|0;
   $i = $76;
  }
  $lev = 0;
  $hpass = 0;
  while(1) {
   $77 = $lev;
   $78 = ($77|0)<(5);
   if (!($78)) {
    break;
   }
   $79 = $size;
   $80 = $lev;
   $81 = $80 & 1;
   $82 = (($81) + 1)|0;
   $83 = Math_imul($79, $82)|0;
   $lpass = $83;
   $row = 0;
   while(1) {
    $84 = $row;
    $85 = HEAP16[589196>>1]|0;
    $86 = $85&65535;
    $87 = ($84|0)<($86|0);
    if (!($87)) {
     break;
    }
    $88 = $temp;
    $89 = $fimg;
    $90 = $hpass;
    $91 = (($89) + ($90<<2)|0);
    $92 = $row;
    $93 = HEAP16[580080>>1]|0;
    $94 = $93&65535;
    $95 = Math_imul($92, $94)|0;
    $96 = (($91) + ($95<<2)|0);
    $97 = HEAP16[580080>>1]|0;
    $98 = $97&65535;
    $99 = $lev;
    $100 = 1 << $99;
    _hat_transform($88,$96,1,$98,$100);
    $col = 0;
    while(1) {
     $101 = $col;
     $102 = HEAP16[580080>>1]|0;
     $103 = $102&65535;
     $104 = ($101|0)<($103|0);
     if (!($104)) {
      break;
     }
     $105 = $col;
     $106 = $temp;
     $107 = (($106) + ($105<<2)|0);
     $108 = +HEAPF32[$107>>2];
     $109 = $108;
     $110 = $109 * 0.25;
     $111 = $110;
     $112 = $lpass;
     $113 = $row;
     $114 = HEAP16[580080>>1]|0;
     $115 = $114&65535;
     $116 = Math_imul($113, $115)|0;
     $117 = (($112) + ($116))|0;
     $118 = $col;
     $119 = (($117) + ($118))|0;
     $120 = $fimg;
     $121 = (($120) + ($119<<2)|0);
     HEAPF32[$121>>2] = $111;
     $122 = $col;
     $123 = (($122) + 1)|0;
     $col = $123;
    }
    $124 = $row;
    $125 = (($124) + 1)|0;
    $row = $125;
   }
   $col = 0;
   while(1) {
    $126 = $col;
    $127 = HEAP16[580080>>1]|0;
    $128 = $127&65535;
    $129 = ($126|0)<($128|0);
    if (!($129)) {
     break;
    }
    $130 = $temp;
    $131 = $fimg;
    $132 = $lpass;
    $133 = (($131) + ($132<<2)|0);
    $134 = $col;
    $135 = (($133) + ($134<<2)|0);
    $136 = HEAP16[580080>>1]|0;
    $137 = $136&65535;
    $138 = HEAP16[589196>>1]|0;
    $139 = $138&65535;
    $140 = $lev;
    $141 = 1 << $140;
    _hat_transform($130,$135,$137,$139,$141);
    $row = 0;
    while(1) {
     $142 = $row;
     $143 = HEAP16[589196>>1]|0;
     $144 = $143&65535;
     $145 = ($142|0)<($144|0);
     if (!($145)) {
      break;
     }
     $146 = $row;
     $147 = $temp;
     $148 = (($147) + ($146<<2)|0);
     $149 = +HEAPF32[$148>>2];
     $150 = $149;
     $151 = $150 * 0.25;
     $152 = $151;
     $153 = $lpass;
     $154 = $row;
     $155 = HEAP16[580080>>1]|0;
     $156 = $155&65535;
     $157 = Math_imul($154, $156)|0;
     $158 = (($153) + ($157))|0;
     $159 = $col;
     $160 = (($158) + ($159))|0;
     $161 = $fimg;
     $162 = (($161) + ($160<<2)|0);
     HEAPF32[$162>>2] = $152;
     $163 = $row;
     $164 = (($163) + 1)|0;
     $row = $164;
    }
    $165 = $col;
    $166 = (($165) + 1)|0;
    $col = $166;
   }
   $167 = +HEAPF32[692>>2];
   $168 = $lev;
   $169 = (31168 + ($168<<2)|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $167 * $170;
   $thold = $171;
   $i = 0;
   while(1) {
    $172 = $i;
    $173 = $size;
    $174 = ($172|0)<($173|0);
    $175 = $lpass;
    if (!($174)) {
     break;
    }
    $176 = $i;
    $177 = (($175) + ($176))|0;
    $178 = $fimg;
    $179 = (($178) + ($177<<2)|0);
    $180 = +HEAPF32[$179>>2];
    $181 = $hpass;
    $182 = $i;
    $183 = (($181) + ($182))|0;
    $184 = $fimg;
    $185 = (($184) + ($183<<2)|0);
    $186 = +HEAPF32[$185>>2];
    $187 = $186 - $180;
    HEAPF32[$185>>2] = $187;
    $188 = $hpass;
    $189 = $i;
    $190 = (($188) + ($189))|0;
    $191 = $fimg;
    $192 = (($191) + ($190<<2)|0);
    $193 = +HEAPF32[$192>>2];
    $194 = $thold;
    $195 = -$194;
    $196 = $193 < $195;
    do {
     if ($196) {
      $197 = $thold;
      $198 = $hpass;
      $199 = $i;
      $200 = (($198) + ($199))|0;
      $201 = $fimg;
      $202 = (($201) + ($200<<2)|0);
      $203 = +HEAPF32[$202>>2];
      $204 = $203 + $197;
      HEAPF32[$202>>2] = $204;
     } else {
      $205 = $hpass;
      $206 = $i;
      $207 = (($205) + ($206))|0;
      $208 = $fimg;
      $209 = (($208) + ($207<<2)|0);
      $210 = +HEAPF32[$209>>2];
      $211 = $thold;
      $212 = $210 > $211;
      if ($212) {
       $213 = $thold;
       $214 = $hpass;
       $215 = $i;
       $216 = (($214) + ($215))|0;
       $217 = $fimg;
       $218 = (($217) + ($216<<2)|0);
       $219 = +HEAPF32[$218>>2];
       $220 = $219 - $213;
       HEAPF32[$218>>2] = $220;
       break;
      } else {
       $221 = $hpass;
       $222 = $i;
       $223 = (($221) + ($222))|0;
       $224 = $fimg;
       $225 = (($224) + ($223<<2)|0);
       HEAPF32[$225>>2] = 0.0;
       break;
      }
     }
    } while(0);
    $226 = $hpass;
    $227 = ($226|0)!=(0);
    if ($227) {
     $228 = $hpass;
     $229 = $i;
     $230 = (($228) + ($229))|0;
     $231 = $fimg;
     $232 = (($231) + ($230<<2)|0);
     $233 = +HEAPF32[$232>>2];
     $234 = $i;
     $235 = $fimg;
     $236 = (($235) + ($234<<2)|0);
     $237 = +HEAPF32[$236>>2];
     $238 = $237 + $233;
     HEAPF32[$236>>2] = $238;
    }
    $239 = $i;
    $240 = (($239) + 1)|0;
    $i = $240;
   }
   $hpass = $175;
   $241 = $lev;
   $242 = (($241) + 1)|0;
   $lev = $242;
  }
  $i = 0;
  while(1) {
   $243 = $i;
   $244 = $size;
   $245 = ($243|0)<($244|0);
   if (!($245)) {
    break;
   }
   $246 = $i;
   $247 = $fimg;
   $248 = (($247) + ($246<<2)|0);
   $249 = +HEAPF32[$248>>2];
   $250 = $lpass;
   $251 = $i;
   $252 = (($250) + ($251))|0;
   $253 = $fimg;
   $254 = (($253) + ($252<<2)|0);
   $255 = +HEAPF32[$254>>2];
   $256 = $249 + $255;
   $257 = $i;
   $258 = $fimg;
   $259 = (($258) + ($257<<2)|0);
   $260 = +HEAPF32[$259>>2];
   $261 = $lpass;
   $262 = $i;
   $263 = (($261) + ($262))|0;
   $264 = $fimg;
   $265 = (($264) + ($263<<2)|0);
   $266 = +HEAPF32[$265>>2];
   $267 = $260 + $266;
   $268 = $256 * $267;
   $269 = $268 / 65536.0;
   $270 = (~~(($269)));
   $271 = ($270|0)<(65535);
   if ($271) {
    $272 = $i;
    $273 = $fimg;
    $274 = (($273) + ($272<<2)|0);
    $275 = +HEAPF32[$274>>2];
    $276 = $lpass;
    $277 = $i;
    $278 = (($276) + ($277))|0;
    $279 = $fimg;
    $280 = (($279) + ($278<<2)|0);
    $281 = +HEAPF32[$280>>2];
    $282 = $275 + $281;
    $283 = $i;
    $284 = $fimg;
    $285 = (($284) + ($283<<2)|0);
    $286 = +HEAPF32[$285>>2];
    $287 = $lpass;
    $288 = $i;
    $289 = (($287) + ($288))|0;
    $290 = $fimg;
    $291 = (($290) + ($289<<2)|0);
    $292 = +HEAPF32[$291>>2];
    $293 = $286 + $292;
    $294 = $282 * $293;
    $295 = $294 / 65536.0;
    $296 = (~~(($295)));
    $298 = $296;
   } else {
    $298 = 65535;
   }
   $297 = (0)>($298|0);
   if ($297) {
    $351 = 0;
   } else {
    $299 = $i;
    $300 = $fimg;
    $301 = (($300) + ($299<<2)|0);
    $302 = +HEAPF32[$301>>2];
    $303 = $lpass;
    $304 = $i;
    $305 = (($303) + ($304))|0;
    $306 = $fimg;
    $307 = (($306) + ($305<<2)|0);
    $308 = +HEAPF32[$307>>2];
    $309 = $302 + $308;
    $310 = $i;
    $311 = $fimg;
    $312 = (($311) + ($310<<2)|0);
    $313 = +HEAPF32[$312>>2];
    $314 = $lpass;
    $315 = $i;
    $316 = (($314) + ($315))|0;
    $317 = $fimg;
    $318 = (($317) + ($316<<2)|0);
    $319 = +HEAPF32[$318>>2];
    $320 = $313 + $319;
    $321 = $309 * $320;
    $322 = $321 / 65536.0;
    $323 = (~~(($322)));
    $324 = ($323|0)<(65535);
    if ($324) {
     $325 = $i;
     $326 = $fimg;
     $327 = (($326) + ($325<<2)|0);
     $328 = +HEAPF32[$327>>2];
     $329 = $lpass;
     $330 = $i;
     $331 = (($329) + ($330))|0;
     $332 = $fimg;
     $333 = (($332) + ($331<<2)|0);
     $334 = +HEAPF32[$333>>2];
     $335 = $328 + $334;
     $336 = $i;
     $337 = $fimg;
     $338 = (($337) + ($336<<2)|0);
     $339 = +HEAPF32[$338>>2];
     $340 = $lpass;
     $341 = $i;
     $342 = (($340) + ($341))|0;
     $343 = $fimg;
     $344 = (($343) + ($342<<2)|0);
     $345 = +HEAPF32[$344>>2];
     $346 = $339 + $345;
     $347 = $335 * $346;
     $348 = $347 / 65536.0;
     $349 = (~~(($348)));
     $351 = $349;
    } else {
     $351 = 65535;
    }
   }
   $350 = $351&65535;
   $352 = $c;
   $353 = $i;
   $354 = HEAP32[972>>2]|0;
   $355 = (($354) + ($353<<3)|0);
   $356 = (($355) + ($352<<1)|0);
   HEAP16[$356>>1] = $350;
   $357 = $i;
   $358 = (($357) + 1)|0;
   $i = $358;
  }
  $359 = $c;
  $360 = (($359) + 1)|0;
  $c = $360;
 }
 $361 = HEAP32[776>>2]|0;
 $362 = ($361|0)!=(0);
 $363 = HEAP32[980>>2]|0;
 $364 = ($363|0)==(3);
 $or$cond3 = $362 & $364;
 if (!($or$cond3)) {
  $694 = $fimg;
  _free($694);
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $365 = $row;
  $366 = ($365|0)<(2);
  if (!($366)) {
   break;
  }
  $367 = HEAP32[776>>2]|0;
  $368 = $row;
  $369 = (($368) + 1)|0;
  $370 = $369 << 1;
  $371 = $370 & 14;
  $372 = (($371) + 0)|0;
  $373 = $372 << 1;
  $374 = $367 >>> $373;
  $375 = $374 & 3;
  $376 = $375 | 1;
  $377 = (948 + ($376<<2)|0);
  $378 = +HEAPF32[$377>>2];
  $379 = $378;
  $380 = 0.125 * $379;
  $381 = HEAP32[776>>2]|0;
  $382 = $row;
  $383 = $382 << 1;
  $384 = $383 & 14;
  $385 = (($384) + 0)|0;
  $386 = $385 << 1;
  $387 = $381 >>> $386;
  $388 = $387 & 3;
  $389 = $388 | 1;
  $390 = (948 + ($389<<2)|0);
  $391 = +HEAPF32[$390>>2];
  $392 = $391;
  $393 = $380 / $392;
  $394 = $393;
  $395 = $row;
  $396 = (($mul) + ($395<<2)|0);
  HEAPF32[$396>>2] = $394;
  $397 = HEAP32[776>>2]|0;
  $398 = $row;
  $399 = $398 << 1;
  $400 = $399 & 14;
  $401 = (($400) + 0)|0;
  $402 = $401 << 1;
  $403 = $397 >>> $402;
  $404 = $403 & 3;
  $405 = $404 | 1;
  $406 = (580264 + ($405<<1)|0);
  $407 = HEAP16[$406>>1]|0;
  $408 = $407&65535;
  $409 = $row;
  $410 = (($blk) + ($409<<2)|0);
  HEAP32[$410>>2] = $408;
  $411 = $row;
  $412 = (($411) + 1)|0;
  $row = $412;
 }
 $i = 0;
 while(1) {
  $413 = $i;
  $414 = ($413|0)<(4);
  if (!($414)) {
   break;
  }
  $415 = $fimg;
  $416 = HEAP16[580076>>1]|0;
  $417 = $416&65535;
  $418 = $i;
  $419 = Math_imul($417, $418)|0;
  $420 = (($415) + ($419<<1)|0);
  $421 = $i;
  $422 = (($window) + ($421<<2)|0);
  HEAP32[$422>>2] = $420;
  $423 = $i;
  $424 = (($423) + 1)|0;
  $i = $424;
 }
 $wlast = -1;
 $row = 1;
 while(1) {
  $425 = $row;
  $426 = HEAP16[580074>>1]|0;
  $427 = $426&65535;
  $428 = (($427) - 1)|0;
  $429 = ($425|0)<($428|0);
  if (!($429)) {
   break;
  }
  L83: while(1) {
   $430 = $wlast;
   $431 = $row;
   $432 = (($431) + 1)|0;
   $433 = ($430|0)<($432|0);
   if (!($433)) {
    break;
   }
   $434 = $wlast;
   $435 = (($434) + 1)|0;
   $wlast = $435;
   $i = 0;
   while(1) {
    $436 = $i;
    $437 = ($436|0)<(4);
    if (!($437)) {
     break;
    }
    $438 = $i;
    $439 = (($window) + ($438<<2)|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = $i;
    $442 = (($441) + 3)|0;
    $443 = $442 & 3;
    $444 = (($window) + ($443<<2)|0);
    HEAP32[$444>>2] = $440;
    $445 = $i;
    $446 = (($445) + 1)|0;
    $i = $446;
   }
   $447 = HEAP32[776>>2]|0;
   $448 = $wlast;
   $449 = $448 << 1;
   $450 = $449 & 14;
   $451 = (($450) + 1)|0;
   $452 = $451 << 1;
   $453 = $447 >>> $452;
   $454 = $453 & 3;
   $455 = $454 & 1;
   $col = $455;
   while(1) {
    $456 = $col;
    $457 = HEAP16[580076>>1]|0;
    $458 = $457&65535;
    $459 = ($456|0)<($458|0);
    if (!($459)) {
     continue L83;
    }
    $460 = HEAP32[776>>2]|0;
    $461 = $wlast;
    $462 = $461 << 1;
    $463 = $462 & 14;
    $464 = $col;
    $465 = $464 & 1;
    $466 = (($463) + ($465))|0;
    $467 = $466 << 1;
    $468 = $460 >>> $467;
    $469 = $468 & 3;
    $470 = $wlast;
    $471 = HEAP16[580078>>1]|0;
    $472 = $471&65535;
    $473 = $470 >> $472;
    $474 = HEAP16[580080>>1]|0;
    $475 = $474&65535;
    $476 = Math_imul($473, $475)|0;
    $477 = $col;
    $478 = HEAP16[580078>>1]|0;
    $479 = $478&65535;
    $480 = $477 >> $479;
    $481 = (($476) + ($480))|0;
    $482 = HEAP32[972>>2]|0;
    $483 = (($482) + ($481<<3)|0);
    $484 = (($483) + ($469<<1)|0);
    $485 = HEAP16[$484>>1]|0;
    $486 = $col;
    $487 = ((($window)) + 8|0);
    $488 = HEAP32[$487>>2]|0;
    $489 = (($488) + ($486<<1)|0);
    HEAP16[$489>>1] = $485;
    $490 = $col;
    $491 = (($490) + 2)|0;
    $col = $491;
   }
  }
  $492 = +HEAPF32[692>>2];
  $493 = $492 / 512.0;
  $thold = $493;
  $494 = HEAP32[776>>2]|0;
  $495 = $row;
  $496 = $495 << 1;
  $497 = $496 & 14;
  $498 = (($497) + 0)|0;
  $499 = $498 << 1;
  $500 = $494 >>> $499;
  $501 = $500 & 3;
  $502 = $501 & 1;
  $503 = (($502) + 1)|0;
  $col = $503;
  while(1) {
   $504 = $col;
   $505 = HEAP16[580076>>1]|0;
   $506 = $505&65535;
   $507 = (($506) - 1)|0;
   $508 = ($504|0)<($507|0);
   if (!($508)) {
    break;
   }
   $509 = $col;
   $510 = (($509) - 1)|0;
   $511 = HEAP32[$window>>2]|0;
   $512 = (($511) + ($510<<1)|0);
   $513 = HEAP16[$512>>1]|0;
   $514 = $513&65535;
   $515 = $col;
   $516 = (($515) + 1)|0;
   $517 = HEAP32[$window>>2]|0;
   $518 = (($517) + ($516<<1)|0);
   $519 = HEAP16[$518>>1]|0;
   $520 = $519&65535;
   $521 = (($514) + ($520))|0;
   $522 = $col;
   $523 = (($522) - 1)|0;
   $524 = ((($window)) + 8|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = (($525) + ($523<<1)|0);
   $527 = HEAP16[$526>>1]|0;
   $528 = $527&65535;
   $529 = (($521) + ($528))|0;
   $530 = $col;
   $531 = (($530) + 1)|0;
   $532 = ((($window)) + 8|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = (($533) + ($531<<1)|0);
   $535 = HEAP16[$534>>1]|0;
   $536 = $535&65535;
   $537 = (($529) + ($536))|0;
   $538 = $row;
   $539 = $538 ^ -1;
   $540 = $539 & 1;
   $541 = (($blk) + ($540<<2)|0);
   $542 = HEAP32[$541>>2]|0;
   $543 = $542<<2;
   $544 = (($537) - ($543))|0;
   $545 = (+($544|0));
   $546 = $row;
   $547 = $546 & 1;
   $548 = (($mul) + ($547<<2)|0);
   $549 = +HEAPF32[$548>>2];
   $550 = $545 * $549;
   $551 = $550;
   $552 = $col;
   $553 = ((($window)) + 4|0);
   $554 = HEAP32[$553>>2]|0;
   $555 = (($554) + ($552<<1)|0);
   $556 = HEAP16[$555>>1]|0;
   $557 = $556&65535;
   $558 = $row;
   $559 = $558 & 1;
   $560 = (($blk) + ($559<<2)|0);
   $561 = HEAP32[$560>>2]|0;
   $562 = (($557) + ($561))|0;
   $563 = (+($562|0));
   $564 = $563 * 0.5;
   $565 = $551 + $564;
   $566 = $565;
   $avg = $566;
   $567 = $avg;
   $568 = $567 < 0.0;
   if ($568) {
    $573 = 0.0;
   } else {
    $569 = $avg;
    $570 = $569;
    $571 = (+Math_sqrt((+$570)));
    $573 = $571;
   }
   $572 = $573;
   $avg = $572;
   $574 = HEAP32[776>>2]|0;
   $575 = $row;
   $576 = $575 << 1;
   $577 = $576 & 14;
   $578 = $col;
   $579 = $578 & 1;
   $580 = (($577) + ($579))|0;
   $581 = $580 << 1;
   $582 = $574 >>> $581;
   $583 = $582 & 3;
   $584 = $row;
   $585 = HEAP16[580078>>1]|0;
   $586 = $585&65535;
   $587 = $584 >> $586;
   $588 = HEAP16[580080>>1]|0;
   $589 = $588&65535;
   $590 = Math_imul($587, $589)|0;
   $591 = $col;
   $592 = HEAP16[580078>>1]|0;
   $593 = $592&65535;
   $594 = $591 >> $593;
   $595 = (($590) + ($594))|0;
   $596 = HEAP32[972>>2]|0;
   $597 = (($596) + ($595<<3)|0);
   $598 = (($597) + ($583<<1)|0);
   $599 = HEAP16[$598>>1]|0;
   $600 = (+($599&65535));
   $601 = (+Math_sqrt((+$600)));
   $602 = $avg;
   $603 = $602;
   $604 = $601 - $603;
   $605 = $604;
   $diff = $605;
   $606 = $diff;
   $607 = $thold;
   $608 = -$607;
   $609 = $606 < $608;
   do {
    if ($609) {
     $610 = $thold;
     $611 = $diff;
     $612 = $611 + $610;
     $diff = $612;
    } else {
     $613 = $diff;
     $614 = $thold;
     $615 = $613 > $614;
     if ($615) {
      $616 = $thold;
      $617 = $diff;
      $618 = $617 - $616;
      $diff = $618;
      break;
     } else {
      $diff = 0.0;
      break;
     }
    }
   } while(0);
   $619 = $avg;
   $620 = $diff;
   $621 = $619 + $620;
   $622 = $avg;
   $623 = $diff;
   $624 = $622 + $623;
   $625 = $621 * $624;
   $626 = $625;
   $627 = $626 + 0.5;
   $628 = (~~(($627)));
   $629 = ($628|0)<(65535);
   if ($629) {
    $630 = $avg;
    $631 = $diff;
    $632 = $630 + $631;
    $633 = $avg;
    $634 = $diff;
    $635 = $633 + $634;
    $636 = $632 * $635;
    $637 = $636;
    $638 = $637 + 0.5;
    $639 = (~~(($638)));
    $641 = $639;
   } else {
    $641 = 65535;
   }
   $640 = (0)>($641|0);
   if ($640) {
    $664 = 0;
   } else {
    $642 = $avg;
    $643 = $diff;
    $644 = $642 + $643;
    $645 = $avg;
    $646 = $diff;
    $647 = $645 + $646;
    $648 = $644 * $647;
    $649 = $648;
    $650 = $649 + 0.5;
    $651 = (~~(($650)));
    $652 = ($651|0)<(65535);
    if ($652) {
     $653 = $avg;
     $654 = $diff;
     $655 = $653 + $654;
     $656 = $avg;
     $657 = $diff;
     $658 = $656 + $657;
     $659 = $655 * $658;
     $660 = $659;
     $661 = $660 + 0.5;
     $662 = (~~(($661)));
     $664 = $662;
    } else {
     $664 = 65535;
    }
   }
   $663 = $664&65535;
   $665 = HEAP32[776>>2]|0;
   $666 = $row;
   $667 = $666 << 1;
   $668 = $667 & 14;
   $669 = $col;
   $670 = $669 & 1;
   $671 = (($668) + ($670))|0;
   $672 = $671 << 1;
   $673 = $665 >>> $672;
   $674 = $673 & 3;
   $675 = $row;
   $676 = HEAP16[580078>>1]|0;
   $677 = $676&65535;
   $678 = $675 >> $677;
   $679 = HEAP16[580080>>1]|0;
   $680 = $679&65535;
   $681 = Math_imul($678, $680)|0;
   $682 = $col;
   $683 = HEAP16[580078>>1]|0;
   $684 = $683&65535;
   $685 = $682 >> $684;
   $686 = (($681) + ($685))|0;
   $687 = HEAP32[972>>2]|0;
   $688 = (($687) + ($686<<3)|0);
   $689 = (($688) + ($674<<1)|0);
   HEAP16[$689>>1] = $663;
   $690 = $col;
   $691 = (($690) + 2)|0;
   $col = $691;
  }
  $692 = $row;
  $693 = (($692) + 1)|0;
  $row = $693;
 }
 $694 = $fimg;
 _free($694);
 STACKTOP = sp;return;
}
function _scale_colors() {
 var $$ = 0, $0 = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0;
 var $421 = 0.0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0.0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0.0;
 var $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0;
 var $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0.0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bottom = 0, $c = 0, $col = 0, $dark = 0, $dmax = 0.0, $dmin = 0.0, $dsum = 0, $fc = 0.0, $fr = 0.0, $i = 0, $img = 0, $or$cond = 0, $or$cond10 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0;
 var $pix = 0, $right = 0, $row = 0, $sat = 0, $scale_mul = 0, $size = 0, $sum = 0, $uc = 0, $ur = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_ptr14 = 0, $x = 0, $y = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer18 = sp + 104|0;
 $vararg_buffer15 = sp + 96|0;
 $vararg_buffer11 = sp + 88|0;
 $vararg_buffer = sp + 80|0;
 $sum = sp + 160|0;
 $dsum = sp + 16|0;
 $scale_mul = sp + 128|0;
 $img = 0;
 $0 = +HEAPF32[676>>2];
 $1 = $0 != 0.0;
 if ($1) {
  ;HEAP32[948>>2]=HEAP32[676>>2]|0;HEAP32[948+4>>2]=HEAP32[676+4>>2]|0;HEAP32[948+8>>2]=HEAP32[676+8>>2]|0;HEAP32[948+12>>2]=HEAP32[676+12>>2]|0;
 }
 $2 = HEAP32[716>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  label = 5;
 } else {
  $4 = HEAP32[720>>2]|0;
  $5 = ($4|0)!=(0);
  $6 = +HEAPF32[1528>>2];
  $7 = $6 == -1.0;
  $or$cond = $5 & $7;
  if ($or$cond) {
   label = 5;
  }
 }
 L6: do {
  if ((label|0) == 5) {
   dest=$dsum; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $8 = HEAP32[(752)>>2]|0;
   $9 = HEAP32[(760)>>2]|0;
   $10 = (($8) + ($9))|0;
   $11 = HEAP16[580074>>1]|0;
   $12 = $11&65535;
   $13 = ($10>>>0)<($12>>>0);
   if ($13) {
    $14 = HEAP32[(752)>>2]|0;
    $15 = HEAP32[(760)>>2]|0;
    $16 = (($14) + ($15))|0;
    $19 = $16;
   } else {
    $17 = HEAP16[580074>>1]|0;
    $18 = $17&65535;
    $19 = $18;
   }
   $bottom = $19;
   $20 = HEAP32[748>>2]|0;
   $21 = HEAP32[(756)>>2]|0;
   $22 = (($20) + ($21))|0;
   $23 = HEAP16[580076>>1]|0;
   $24 = $23&65535;
   $25 = ($22>>>0)<($24>>>0);
   if ($25) {
    $26 = HEAP32[748>>2]|0;
    $27 = HEAP32[(756)>>2]|0;
    $28 = (($26) + ($27))|0;
    $31 = $28;
   } else {
    $29 = HEAP16[580076>>1]|0;
    $30 = $29&65535;
    $31 = $30;
   }
   $right = $31;
   $32 = HEAP32[(752)>>2]|0;
   $row = $32;
   while(1) {
    $33 = $row;
    $34 = $bottom;
    $35 = ($33>>>0)<($34>>>0);
    if (!($35)) {
     break;
    }
    $36 = HEAP32[748>>2]|0;
    $col = $36;
    while(1) {
     $37 = $col;
     $38 = $right;
     $39 = ($37>>>0)<($38>>>0);
     if (!($39)) {
      break;
     }
     ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
     $40 = $row;
     $y = $40;
     L22: while(1) {
      $41 = $y;
      $42 = $row;
      $43 = (($42) + 8)|0;
      $44 = ($41>>>0)<($43>>>0);
      if (!($44)) {
       label = 31;
       break;
      }
      $45 = $y;
      $46 = $bottom;
      $47 = ($45>>>0)<($46>>>0);
      if (!($47)) {
       label = 31;
       break;
      }
      $48 = $col;
      $x = $48;
      while(1) {
       $49 = $x;
       $50 = $col;
       $51 = (($50) + 8)|0;
       $52 = ($49>>>0)<($51>>>0);
       if (!($52)) {
        break;
       }
       $53 = $x;
       $54 = $right;
       $55 = ($53>>>0)<($54>>>0);
       if (!($55)) {
        break;
       }
       $c = 0;
       while(1) {
        $56 = $c;
        $57 = ($56>>>0)<(4);
        if (!($57)) {
         break;
        }
        $58 = HEAP32[776>>2]|0;
        $59 = ($58|0)!=(0);
        if ($59) {
         $60 = $y;
         $61 = $x;
         $62 = (_fcol($60,$61)|0);
         $c = $62;
         $63 = $y;
         $64 = $x;
         $65 = (_fcol($63,$64)|0);
         $66 = $y;
         $67 = HEAP16[580078>>1]|0;
         $68 = $67&65535;
         $69 = $66 >>> $68;
         $70 = HEAP16[580080>>1]|0;
         $71 = $70&65535;
         $72 = Math_imul($69, $71)|0;
         $73 = $x;
         $74 = HEAP16[580078>>1]|0;
         $75 = $74&65535;
         $76 = $73 >>> $75;
         $77 = (($72) + ($76))|0;
         $78 = HEAP32[972>>2]|0;
         $79 = (($78) + ($77<<3)|0);
         $80 = (($79) + ($65<<1)|0);
         $81 = HEAP16[$80>>1]|0;
         $82 = $81&65535;
         $val = $82;
        } else {
         $83 = $c;
         $84 = $y;
         $85 = HEAP16[580076>>1]|0;
         $86 = $85&65535;
         $87 = Math_imul($84, $86)|0;
         $88 = $x;
         $89 = (($87) + ($88))|0;
         $90 = HEAP32[972>>2]|0;
         $91 = (($90) + ($89<<3)|0);
         $92 = (($91) + ($83<<1)|0);
         $93 = HEAP16[$92>>1]|0;
         $94 = $93&65535;
         $val = $94;
        }
        $95 = $val;
        $96 = HEAP32[1040>>2]|0;
        $97 = (($96) - 25)|0;
        $98 = ($95>>>0)>($97>>>0);
        if ($98) {
         break L22;
        }
        $99 = $c;
        $100 = (580264 + ($99<<1)|0);
        $101 = HEAP16[$100>>1]|0;
        $102 = $101&65535;
        $103 = $val;
        $104 = (($103) - ($102))|0;
        $val = $104;
        $105 = ($104|0)<(0);
        $$ = $105 ? 0 : $104;
        $val = $$;
        $106 = $val;
        $107 = $c;
        $108 = (($sum) + ($107<<2)|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = (($109) + ($106))|0;
        HEAP32[$108>>2] = $110;
        $111 = $c;
        $112 = (($111) + 4)|0;
        $113 = (($sum) + ($112<<2)|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = (($114) + 1)|0;
        HEAP32[$113>>2] = $115;
        $116 = HEAP32[776>>2]|0;
        $117 = ($116|0)!=(0);
        if ($117) {
         break;
        }
        $118 = $c;
        $119 = (($118) + 1)|0;
        $c = $119;
       }
       $120 = $x;
       $121 = (($120) + 1)|0;
       $x = $121;
      }
      $122 = $y;
      $123 = (($122) + 1)|0;
      $y = $123;
     }
     L41: do {
      if ((label|0) == 31) {
       label = 0;
       $c = 0;
       while(1) {
        $124 = $c;
        $125 = ($124>>>0)<(8);
        if (!($125)) {
         break L41;
        }
        $126 = $c;
        $127 = (($sum) + ($126<<2)|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = (+($128>>>0));
        $130 = $c;
        $131 = (($dsum) + ($130<<3)|0);
        $132 = +HEAPF64[$131>>3];
        $133 = $132 + $129;
        HEAPF64[$131>>3] = $133;
        $134 = $c;
        $135 = (($134) + 1)|0;
        $c = $135;
       }
      }
     } while(0);
     $136 = $col;
     $137 = (($136) + 8)|0;
     $col = $137;
    }
    $138 = $row;
    $139 = (($138) + 8)|0;
    $row = $139;
   }
   $c = 0;
   while(1) {
    $140 = $c;
    $141 = ($140>>>0)<(4);
    if (!($141)) {
     break L6;
    }
    $142 = $c;
    $143 = (($dsum) + ($142<<3)|0);
    $144 = +HEAPF64[$143>>3];
    $145 = $144 != 0.0;
    if ($145) {
     $146 = $c;
     $147 = (($146) + 4)|0;
     $148 = (($dsum) + ($147<<3)|0);
     $149 = +HEAPF64[$148>>3];
     $150 = $c;
     $151 = (($dsum) + ($150<<3)|0);
     $152 = +HEAPF64[$151>>3];
     $153 = $149 / $152;
     $154 = $153;
     $155 = $c;
     $156 = (948 + ($155<<2)|0);
     HEAPF32[$156>>2] = $154;
    }
    $157 = $c;
    $158 = (($157) + 1)|0;
    $c = $158;
   }
  }
 } while(0);
 $159 = HEAP32[720>>2]|0;
 $160 = ($159|0)!=(0);
 $161 = +HEAPF32[1528>>2];
 $162 = $161 != -1.0;
 $or$cond4 = $160 & $162;
 L56: do {
  if ($or$cond4) {
   ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
   $row = 0;
   while(1) {
    $163 = $row;
    $164 = ($163>>>0)<(8);
    if (!($164)) {
     break;
    }
    $col = 0;
    while(1) {
     $165 = $col;
     $166 = ($165>>>0)<(8);
     if (!($166)) {
      break;
     }
     $167 = HEAP32[776>>2]|0;
     $168 = $row;
     $169 = $168 << 1;
     $170 = $169 & 14;
     $171 = $col;
     $172 = $171 & 1;
     $173 = (($170) + ($172))|0;
     $174 = $173 << 1;
     $175 = $167 >>> $174;
     $176 = $175 & 3;
     $c = $176;
     $177 = $col;
     $178 = $row;
     $179 = (589198 + ($178<<4)|0);
     $180 = (($179) + ($177<<1)|0);
     $181 = HEAP16[$180>>1]|0;
     $182 = $181&65535;
     $183 = $c;
     $184 = (580264 + ($183<<1)|0);
     $185 = HEAP16[$184>>1]|0;
     $186 = $185&65535;
     $187 = (($182) - ($186))|0;
     $val = $187;
     $188 = ($187|0)>(0);
     if ($188) {
      $189 = $val;
      $190 = $c;
      $191 = (($sum) + ($190<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = (($192) + ($189))|0;
      HEAP32[$191>>2] = $193;
     }
     $194 = $c;
     $195 = (($194) + 4)|0;
     $196 = (($sum) + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($197) + 1)|0;
     HEAP32[$196>>2] = $198;
     $199 = $col;
     $200 = (($199) + 1)|0;
     $col = $200;
    }
    $201 = $row;
    $202 = (($201) + 1)|0;
    $row = $202;
   }
   $203 = HEAP32[$sum>>2]|0;
   $204 = ($203|0)!=(0);
   if ($204) {
    $205 = ((($sum)) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($206|0)!=(0);
    if ($207) {
     $208 = ((($sum)) + 8|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)!=(0);
     if ($210) {
      $211 = ((($sum)) + 12|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = ($212|0)!=(0);
      if ($213) {
       $c = 0;
       while(1) {
        $214 = $c;
        $215 = ($214>>>0)<(4);
        if (!($215)) {
         break L56;
        }
        $216 = $c;
        $217 = (($216) + 4)|0;
        $218 = (($sum) + ($217<<2)|0);
        $219 = HEAP32[$218>>2]|0;
        $220 = (+($219>>>0));
        $221 = $c;
        $222 = (($sum) + ($221<<2)|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = (+($223>>>0));
        $225 = $220 / $224;
        $226 = $c;
        $227 = (948 + ($226<<2)|0);
        HEAPF32[$227>>2] = $225;
        $228 = $c;
        $229 = (($228) + 1)|0;
        $c = $229;
       }
      }
     }
    }
   }
   $230 = +HEAPF32[1528>>2];
   $231 = $230 != 0.0;
   $232 = +HEAPF32[(1536)>>2];
   $233 = $232 != 0.0;
   $or$cond6 = $231 & $233;
   if ($or$cond6) {
    ;HEAP32[948>>2]=HEAP32[1528>>2]|0;HEAP32[948+4>>2]=HEAP32[1528+4>>2]|0;HEAP32[948+8>>2]=HEAP32[1528+8>>2]|0;HEAP32[948+12>>2]=HEAP32[1528+12>>2]|0;
    break;
   } else {
    $234 = HEAP32[447952>>2]|0;
    $235 = HEAP32[780>>2]|0;
    HEAP32[$vararg_buffer>>2] = $235;
    (_fprintf($234,612243,$vararg_buffer)|0);
    break;
   }
  }
 } while(0);
 $236 = +HEAPF32[(952)>>2];
 $237 = $236 == 0.0;
 if ($237) {
  HEAPF32[(952)>>2] = 1.0;
 }
 $238 = +HEAPF32[(960)>>2];
 $239 = $238 == 0.0;
 if ($239) {
  $240 = HEAP32[980>>2]|0;
  $241 = ($240>>>0)<(4);
  $242 = +HEAPF32[(952)>>2];
  $243 = $241 ? $242 : 1.0;
  HEAPF32[(960)>>2] = $243;
 }
 $244 = HEAP32[1036>>2]|0;
 $dark = $244;
 $245 = HEAP32[1040>>2]|0;
 $sat = $245;
 $246 = +HEAPF32[692>>2];
 $247 = $246 != 0.0;
 if ($247) {
  _wavelet_denoise();
 }
 $248 = HEAP32[1036>>2]|0;
 $249 = HEAP32[1040>>2]|0;
 $250 = (($249) - ($248))|0;
 HEAP32[1040>>2] = $250;
 $dmin = 1.7976931348623157E+308;
 $c = 0;
 $dmax = 0.0;
 while(1) {
  $251 = $c;
  $252 = ($251>>>0)<(4);
  if (!($252)) {
   break;
  }
  $253 = $dmin;
  $254 = $c;
  $255 = (948 + ($254<<2)|0);
  $256 = +HEAPF32[$255>>2];
  $257 = $256;
  $258 = $253 > $257;
  if ($258) {
   $259 = $c;
   $260 = (948 + ($259<<2)|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $261;
   $dmin = $262;
  }
  $263 = $dmax;
  $264 = $c;
  $265 = (948 + ($264<<2)|0);
  $266 = +HEAPF32[$265>>2];
  $267 = $266;
  $268 = $263 < $267;
  if ($268) {
   $269 = $c;
   $270 = (948 + ($269<<2)|0);
   $271 = +HEAPF32[$270>>2];
   $272 = $271;
   $dmax = $272;
  }
  $273 = $c;
  $274 = (($273) + 1)|0;
  $c = $274;
 }
 $275 = HEAP32[708>>2]|0;
 $276 = ($275|0)!=(0);
 if (!($276)) {
  $277 = $dmin;
  $dmax = $277;
 }
 $c = 0;
 while(1) {
  $278 = $c;
  $279 = ($278>>>0)<(4);
  if (!($279)) {
   break;
  }
  $280 = $dmax;
  $281 = $c;
  $282 = (948 + ($281<<2)|0);
  $283 = +HEAPF32[$282>>2];
  $284 = $283;
  $285 = $284 / $280;
  $286 = $285;
  HEAPF32[$282>>2] = $286;
  $287 = $286;
  $288 = $287 * 65535.0;
  $289 = HEAP32[1040>>2]|0;
  $290 = (+($289>>>0));
  $291 = $288 / $290;
  $292 = $291;
  $293 = $c;
  $294 = (($scale_mul) + ($293<<2)|0);
  HEAPF32[$294>>2] = $292;
  $295 = $c;
  $296 = (($295) + 1)|0;
  $c = $296;
 }
 $297 = HEAP32[712>>2]|0;
 $298 = ($297|0)!=(0);
 if ($298) {
  $299 = HEAP32[447952>>2]|0;
  $300 = $dark;
  $301 = $sat;
  HEAP32[$vararg_buffer11>>2] = $300;
  $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr14>>2] = $301;
  (_fprintf($299,612281,$vararg_buffer11)|0);
  $c = 0;
  while(1) {
   $302 = $c;
   $303 = ($302>>>0)<(4);
   $304 = HEAP32[447952>>2]|0;
   if (!($303)) {
    break;
   }
   $305 = $c;
   $306 = (948 + ($305<<2)|0);
   $307 = +HEAPF32[$306>>2];
   $308 = $307;
   HEAPF64[$vararg_buffer15>>3] = $308;
   (_fprintf($304,612338,$vararg_buffer15)|0);
   $309 = $c;
   $310 = (($309) + 1)|0;
   $c = $310;
  }
  (_fputc(10,$304)|0);
 }
 $311 = HEAP32[776>>2]|0;
 $312 = ($311>>>0)>(1000);
 if ($312) {
  $313 = HEAP16[(580272)>>1]|0;
  $314 = $313&65535;
  $315 = (($314) + 1)|0;
  $316 = (($315|0) / 2)&-1;
  $317 = ($316|0)==(1);
  if ($317) {
   $318 = HEAP16[(580274)>>1]|0;
   $319 = $318&65535;
   $320 = (($319) + 1)|0;
   $321 = (($320|0) / 2)&-1;
   $322 = ($321|0)==(1);
   if ($322) {
    $c = 0;
    while(1) {
     $323 = $c;
     $324 = ($323>>>0)<(4);
     if (!($324)) {
      break;
     }
     $325 = $c;
     $326 = (($325>>>0) / 2)&-1;
     $327 = HEAP16[(580272)>>1]|0;
     $328 = $327&65535;
     $329 = (($326>>>0) % ($328>>>0))&-1;
     $330 = HEAP16[(580274)>>1]|0;
     $331 = $330&65535;
     $332 = Math_imul($329, $331)|0;
     $333 = (6 + ($332))|0;
     $334 = $c;
     $335 = (($334>>>0) % 2)&-1;
     $336 = HEAP16[(580274)>>1]|0;
     $337 = $336&65535;
     $338 = (($335>>>0) % ($337>>>0))&-1;
     $339 = (($333) + ($338))|0;
     $340 = (580264 + ($339<<1)|0);
     $341 = HEAP16[$340>>1]|0;
     $342 = $341&65535;
     $343 = HEAP32[776>>2]|0;
     $344 = $c;
     $345 = (($344>>>0) / 2)&-1;
     $346 = $345 << 1;
     $347 = $346 & 14;
     $348 = $c;
     $349 = (($348>>>0) % 2)&-1;
     $350 = $349 & 1;
     $351 = (($347) + ($350))|0;
     $352 = $351 << 1;
     $353 = $343 >>> $352;
     $354 = $353 & 3;
     $355 = (580264 + ($354<<1)|0);
     $356 = HEAP16[$355>>1]|0;
     $357 = $356&65535;
     $358 = (($357) + ($342))|0;
     $359 = $358&65535;
     HEAP16[$355>>1] = $359;
     $360 = $c;
     $361 = (($360) + 1)|0;
     $c = $361;
    }
    HEAP16[(580274)>>1] = 0;
    HEAP16[(580272)>>1] = 0;
   }
  }
 }
 $362 = HEAP16[589196>>1]|0;
 $363 = $362&65535;
 $364 = HEAP16[580080>>1]|0;
 $365 = $364&65535;
 $366 = Math_imul($363, $365)|0;
 $size = $366;
 $i = 0;
 while(1) {
  $367 = $i;
  $368 = $size;
  $369 = $368<<2;
  $370 = ($367>>>0)<($369>>>0);
  if (!($370)) {
   break;
  }
  $371 = $i;
  $372 = HEAP32[972>>2]|0;
  $373 = (($372) + ($371<<1)|0);
  $374 = HEAP16[$373>>1]|0;
  $375 = $374&65535;
  $val = $375;
  $376 = ($375|0)!=(0);
  if ($376) {
   $377 = HEAP16[(580272)>>1]|0;
   $378 = $377&65535;
   $379 = ($378|0)!=(0);
   if ($379) {
    $380 = HEAP16[(580274)>>1]|0;
    $381 = $380&65535;
    $382 = ($381|0)!=(0);
    if ($382) {
     $383 = $i;
     $384 = (($383>>>0) / 4)&-1;
     $385 = HEAP16[580080>>1]|0;
     $386 = $385&65535;
     $387 = (($384>>>0) / ($386>>>0))&-1;
     $388 = HEAP16[(580272)>>1]|0;
     $389 = $388&65535;
     $390 = (($387>>>0) % ($389>>>0))&-1;
     $391 = HEAP16[(580274)>>1]|0;
     $392 = $391&65535;
     $393 = Math_imul($390, $392)|0;
     $394 = (6 + ($393))|0;
     $395 = $i;
     $396 = (($395>>>0) / 4)&-1;
     $397 = HEAP16[580080>>1]|0;
     $398 = $397&65535;
     $399 = (($396>>>0) % ($398>>>0))&-1;
     $400 = HEAP16[(580274)>>1]|0;
     $401 = $400&65535;
     $402 = (($399>>>0) % ($401>>>0))&-1;
     $403 = (($394) + ($402))|0;
     $404 = (580264 + ($403<<1)|0);
     $405 = HEAP16[$404>>1]|0;
     $406 = $405&65535;
     $407 = $val;
     $408 = (($407) - ($406))|0;
     $val = $408;
    }
   }
   $409 = $i;
   $410 = $409 & 3;
   $411 = (580264 + ($410<<1)|0);
   $412 = HEAP16[$411>>1]|0;
   $413 = $412&65535;
   $414 = $val;
   $415 = (($414) - ($413))|0;
   $val = $415;
   $416 = $i;
   $417 = $416 & 3;
   $418 = (($scale_mul) + ($417<<2)|0);
   $419 = +HEAPF32[$418>>2];
   $420 = $val;
   $421 = (+($420|0));
   $422 = $421 * $419;
   $423 = (~~(($422)));
   $val = $423;
   $424 = $val;
   $425 = ($424|0)<(65535);
   $426 = $val;
   $427 = $425 ? $426 : 65535;
   $428 = (0)>($427|0);
   if ($428) {
    $434 = 0;
   } else {
    $429 = $val;
    $430 = ($429|0)<(65535);
    $431 = $val;
    $432 = $430 ? $431 : 65535;
    $434 = $432;
   }
   $433 = $434&65535;
   $435 = $i;
   $436 = HEAP32[972>>2]|0;
   $437 = (($436) + ($435<<1)|0);
   HEAP16[$437>>1] = $433;
  }
  $438 = $i;
  $439 = (($438) + 1)|0;
  $i = $439;
 }
 $440 = +HEAPF64[8>>3];
 $441 = $440 != 1.0;
 $442 = +HEAPF64[(24)>>3];
 $443 = $442 != 1.0;
 $or$cond8 = $441 | $443;
 $444 = HEAP32[980>>2]|0;
 $445 = ($444|0)==(3);
 $or$cond10 = $or$cond8 & $445;
 if (!($or$cond10)) {
  STACKTOP = sp;return;
 }
 $446 = HEAP32[712>>2]|0;
 $447 = ($446|0)!=(0);
 if ($447) {
  $448 = HEAP32[447952>>2]|0;
  (_fprintf($448,612342,$vararg_buffer18)|0);
 }
 $c = 0;
 while(1) {
  $449 = $c;
  $450 = ($449>>>0)<(4);
  if (!($450)) {
   break;
  }
  $451 = $c;
  $452 = (8 + ($451<<3)|0);
  $453 = +HEAPF64[$452>>3];
  $454 = $453 == 1.0;
  if (!($454)) {
   $455 = $size;
   $456 = $455<<1;
   $457 = (_malloc($456)|0);
   $img = $457;
   $458 = $img;
   _merror($458,612378);
   $i = 0;
   while(1) {
    $459 = $i;
    $460 = $size;
    $461 = ($459>>>0)<($460>>>0);
    if (!($461)) {
     break;
    }
    $462 = $c;
    $463 = $i;
    $464 = HEAP32[972>>2]|0;
    $465 = (($464) + ($463<<3)|0);
    $466 = (($465) + ($462<<1)|0);
    $467 = HEAP16[$466>>1]|0;
    $468 = $i;
    $469 = $img;
    $470 = (($469) + ($468<<1)|0);
    HEAP16[$470>>1] = $467;
    $471 = $i;
    $472 = (($471) + 1)|0;
    $i = $472;
   }
   $row = 0;
   while(1) {
    $473 = $row;
    $474 = HEAP16[589196>>1]|0;
    $475 = $474&65535;
    $476 = ($473>>>0)<($475>>>0);
    if (!($476)) {
     break;
    }
    $477 = $row;
    $478 = (+($477>>>0));
    $479 = HEAP16[589196>>1]|0;
    $480 = $479&65535;
    $481 = (+($480|0));
    $482 = $481 * 0.5;
    $483 = $478 - $482;
    $484 = $c;
    $485 = (8 + ($484<<3)|0);
    $486 = +HEAPF64[$485>>3];
    $487 = $483 * $486;
    $488 = HEAP16[589196>>1]|0;
    $489 = $488&65535;
    $490 = (+($489|0));
    $491 = $490 * 0.5;
    $492 = $487 + $491;
    $493 = $492;
    $fr = $493;
    $494 = (~~(($493))>>>0);
    $ur = $494;
    $495 = $ur;
    $496 = HEAP16[589196>>1]|0;
    $497 = $496&65535;
    $498 = (($497) - 2)|0;
    $499 = ($495>>>0)>($498>>>0);
    L156: do {
     if (!($499)) {
      $500 = $ur;
      $501 = (+($500>>>0));
      $502 = $fr;
      $503 = $502 - $501;
      $fr = $503;
      $col = 0;
      while(1) {
       $504 = $col;
       $505 = HEAP16[580080>>1]|0;
       $506 = $505&65535;
       $507 = ($504>>>0)<($506>>>0);
       if (!($507)) {
        break L156;
       }
       $508 = $col;
       $509 = (+($508>>>0));
       $510 = HEAP16[580080>>1]|0;
       $511 = $510&65535;
       $512 = (+($511|0));
       $513 = $512 * 0.5;
       $514 = $509 - $513;
       $515 = $c;
       $516 = (8 + ($515<<3)|0);
       $517 = +HEAPF64[$516>>3];
       $518 = $514 * $517;
       $519 = HEAP16[580080>>1]|0;
       $520 = $519&65535;
       $521 = (+($520|0));
       $522 = $521 * 0.5;
       $523 = $518 + $522;
       $524 = $523;
       $fc = $524;
       $525 = (~~(($524))>>>0);
       $uc = $525;
       $526 = $uc;
       $527 = HEAP16[580080>>1]|0;
       $528 = $527&65535;
       $529 = (($528) - 2)|0;
       $530 = ($526>>>0)>($529>>>0);
       if (!($530)) {
        $531 = $uc;
        $532 = (+($531>>>0));
        $533 = $fc;
        $534 = $533 - $532;
        $fc = $534;
        $535 = $img;
        $536 = $ur;
        $537 = HEAP16[580080>>1]|0;
        $538 = $537&65535;
        $539 = Math_imul($536, $538)|0;
        $540 = (($535) + ($539<<1)|0);
        $541 = $uc;
        $542 = (($540) + ($541<<1)|0);
        $pix = $542;
        $543 = $pix;
        $544 = HEAP16[$543>>1]|0;
        $545 = $544&65535;
        $546 = (+($545|0));
        $547 = $fc;
        $548 = 1.0 - $547;
        $549 = $546 * $548;
        $550 = $pix;
        $551 = ((($550)) + 2|0);
        $552 = HEAP16[$551>>1]|0;
        $553 = $552&65535;
        $554 = (+($553|0));
        $555 = $fc;
        $556 = $554 * $555;
        $557 = $549 + $556;
        $558 = $fr;
        $559 = 1.0 - $558;
        $560 = $557 * $559;
        $561 = HEAP16[580080>>1]|0;
        $562 = $561&65535;
        $563 = $pix;
        $564 = (($563) + ($562<<1)|0);
        $565 = HEAP16[$564>>1]|0;
        $566 = $565&65535;
        $567 = (+($566|0));
        $568 = $fc;
        $569 = 1.0 - $568;
        $570 = $567 * $569;
        $571 = HEAP16[580080>>1]|0;
        $572 = $571&65535;
        $573 = (($572) + 1)|0;
        $574 = $pix;
        $575 = (($574) + ($573<<1)|0);
        $576 = HEAP16[$575>>1]|0;
        $577 = $576&65535;
        $578 = (+($577|0));
        $579 = $fc;
        $580 = $578 * $579;
        $581 = $570 + $580;
        $582 = $fr;
        $583 = $581 * $582;
        $584 = $560 + $583;
        $585 = (~~(($584))&65535);
        $586 = $c;
        $587 = $row;
        $588 = HEAP16[580080>>1]|0;
        $589 = $588&65535;
        $590 = Math_imul($587, $589)|0;
        $591 = $col;
        $592 = (($590) + ($591))|0;
        $593 = HEAP32[972>>2]|0;
        $594 = (($593) + ($592<<3)|0);
        $595 = (($594) + ($586<<1)|0);
        HEAP16[$595>>1] = $585;
       }
       $596 = $col;
       $597 = (($596) + 1)|0;
       $col = $597;
      }
     }
    } while(0);
    $598 = $row;
    $599 = (($598) + 1)|0;
    $row = $599;
   }
   $600 = $img;
   _free($600);
  }
  $601 = $c;
  $602 = (($601) + 2)|0;
  $c = $602;
 }
 STACKTOP = sp;return;
}
function _pre_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $img = 0, $or$cond = 0, $row = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[580078>>1]|0;
 $1 = ($0<<16>>16)!=(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[696>>2]|0;
   $3 = ($2|0)!=(0);
   if (!($3)) {
    $85 = HEAP16[580074>>1]|0;
    $86 = $85&65535;
    $87 = HEAP16[580076>>1]|0;
    $88 = $87&65535;
    $89 = $88<<3;
    $90 = (_calloc($86,$89)|0);
    $img = $90;
    $91 = $img;
    _merror($91,612393);
    $row = 0;
    while(1) {
     $92 = $row;
     $93 = HEAP16[580074>>1]|0;
     $94 = $93&65535;
     $95 = ($92|0)<($94|0);
     if (!($95)) {
      break;
     }
     $col = 0;
     while(1) {
      $96 = $col;
      $97 = HEAP16[580076>>1]|0;
      $98 = $97&65535;
      $99 = ($96|0)<($98|0);
      $100 = $row;
      if (!($99)) {
       break;
      }
      $101 = $col;
      $102 = (_fcol($100,$101)|0);
      $c = $102;
      $103 = $c;
      $104 = $row;
      $105 = $104 >> 1;
      $106 = HEAP16[580080>>1]|0;
      $107 = $106&65535;
      $108 = Math_imul($105, $107)|0;
      $109 = $col;
      $110 = $109 >> 1;
      $111 = (($108) + ($110))|0;
      $112 = HEAP32[972>>2]|0;
      $113 = (($112) + ($111<<3)|0);
      $114 = (($113) + ($103<<1)|0);
      $115 = HEAP16[$114>>1]|0;
      $116 = $c;
      $117 = $row;
      $118 = HEAP16[580076>>1]|0;
      $119 = $118&65535;
      $120 = Math_imul($117, $119)|0;
      $121 = $col;
      $122 = (($120) + ($121))|0;
      $123 = $img;
      $124 = (($123) + ($122<<3)|0);
      $125 = (($124) + ($116<<1)|0);
      HEAP16[$125>>1] = $115;
      $126 = $col;
      $127 = (($126) + 1)|0;
      $col = $127;
     }
     $128 = (($100) + 1)|0;
     $row = $128;
    }
    $129 = HEAP32[972>>2]|0;
    _free($129);
    $130 = $img;
    HEAP32[972>>2] = $130;
    HEAP16[580078>>1] = 0;
    break;
   }
   $4 = HEAP16[589196>>1]|0;
   HEAP16[580074>>1] = $4;
   $5 = HEAP16[580080>>1]|0;
   HEAP16[580076>>1] = $5;
   $6 = HEAP32[776>>2]|0;
   $7 = ($6|0)==(9);
   if ($7) {
    $row = 0;
    L15: while(1) {
     $8 = $row;
     $9 = ($8|0)<(3);
     if (!($9)) {
      break;
     }
     $col = 1;
     while(1) {
      $10 = $col;
      $11 = ($10|0)<(4);
      $12 = $row;
      if (!($11)) {
       break;
      }
      $13 = HEAP16[580076>>1]|0;
      $14 = $13&65535;
      $15 = Math_imul($12, $14)|0;
      $16 = $col;
      $17 = (($15) + ($16))|0;
      $18 = HEAP32[972>>2]|0;
      $19 = (($18) + ($17<<3)|0);
      $20 = HEAP16[$19>>1]|0;
      $21 = $20&65535;
      $22 = $row;
      $23 = HEAP16[580076>>1]|0;
      $24 = $23&65535;
      $25 = Math_imul($22, $24)|0;
      $26 = $col;
      $27 = (($25) + ($26))|0;
      $28 = HEAP32[972>>2]|0;
      $29 = (($28) + ($27<<3)|0);
      $30 = ((($29)) + 4|0);
      $31 = HEAP16[$30>>1]|0;
      $32 = $31&65535;
      $33 = $21 | $32;
      $34 = ($33|0)!=(0);
      if (!($34)) {
       break L15;
      }
      $35 = $col;
      $36 = (($35) + 1)|0;
      $col = $36;
     }
     $37 = (($12) + 1)|0;
     $row = $37;
    }
    while(1) {
     $38 = $row;
     $39 = HEAP16[580074>>1]|0;
     $40 = $39&65535;
     $41 = ($38|0)<($40|0);
     if (!($41)) {
      break L1;
     }
     $42 = $col;
     $43 = (($42) - 1)|0;
     $44 = (($43|0) % 3)&-1;
     $45 = (($44) + 1)|0;
     $col = $45;
     while(1) {
      $46 = $col;
      $47 = HEAP16[580076>>1]|0;
      $48 = $47&65535;
      $49 = (($48) - 1)|0;
      $50 = ($46|0)<($49|0);
      if (!($50)) {
       break;
      }
      $51 = HEAP32[972>>2]|0;
      $52 = $row;
      $53 = HEAP16[580076>>1]|0;
      $54 = $53&65535;
      $55 = Math_imul($52, $54)|0;
      $56 = (($51) + ($55<<3)|0);
      $57 = $col;
      $58 = (($56) + ($57<<3)|0);
      $img = $58;
      $c = 0;
      while(1) {
       $59 = $c;
       $60 = ($59|0)<(3);
       if (!($60)) {
        break;
       }
       $61 = $c;
       $62 = $img;
       $63 = ((($62)) + -8|0);
       $64 = (($63) + ($61<<1)|0);
       $65 = HEAP16[$64>>1]|0;
       $66 = $65&65535;
       $67 = $c;
       $68 = $img;
       $69 = ((($68)) + 8|0);
       $70 = (($69) + ($67<<1)|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = $71&65535;
       $73 = (($66) + ($72))|0;
       $74 = $73 >> 1;
       $75 = $74&65535;
       $76 = $c;
       $77 = $img;
       $78 = (($77) + ($76<<1)|0);
       HEAP16[$78>>1] = $75;
       $79 = $c;
       $80 = (($79) + 2)|0;
       $c = $80;
      }
      $81 = $col;
      $82 = (($81) + 3)|0;
      $col = $82;
     }
     $83 = $row;
     $84 = (($83) + 3)|0;
     $row = $84;
    }
   }
  }
 } while(0);
 $131 = HEAP32[776>>2]|0;
 $132 = ($131>>>0)>(1000);
 $133 = HEAP32[980>>2]|0;
 $134 = ($133|0)==(3);
 $or$cond = $132 & $134;
 do {
  if ($or$cond) {
   $135 = HEAP32[700>>2]|0;
   $136 = HEAP32[696>>2]|0;
   $137 = $135 ^ $136;
   HEAP32[1788>>2] = $137;
   $138 = HEAP32[700>>2]|0;
   $139 = HEAP32[696>>2]|0;
   $140 = $138 | $139;
   $141 = ($140|0)!=(0);
   if ($141) {
    $142 = HEAP32[980>>2]|0;
    $143 = (($142) + 1)|0;
    HEAP32[980>>2] = $143;
    break;
   }
   $144 = HEAP32[776>>2]|0;
   $145 = $144 >>> 4;
   $146 = $145 & 3;
   $147 = $146 >>> 1;
   $row = $147;
   while(1) {
    $148 = $row;
    $149 = HEAP16[580074>>1]|0;
    $150 = $149&65535;
    $151 = ($148|0)<($150|0);
    $152 = HEAP32[776>>2]|0;
    if (!($151)) {
     break;
    }
    $153 = $row;
    $154 = $153 << 1;
    $155 = $154 & 14;
    $156 = (($155) + 1)|0;
    $157 = $156 << 1;
    $158 = $152 >>> $157;
    $159 = $158 & 3;
    $160 = $159 & 1;
    $col = $160;
    while(1) {
     $161 = $col;
     $162 = HEAP16[580076>>1]|0;
     $163 = $162&65535;
     $164 = ($161|0)<($163|0);
     $165 = $row;
     if (!($164)) {
      break;
     }
     $166 = HEAP16[580076>>1]|0;
     $167 = $166&65535;
     $168 = Math_imul($165, $167)|0;
     $169 = $col;
     $170 = (($168) + ($169))|0;
     $171 = HEAP32[972>>2]|0;
     $172 = (($171) + ($170<<3)|0);
     $173 = ((($172)) + 6|0);
     $174 = HEAP16[$173>>1]|0;
     $175 = $row;
     $176 = HEAP16[580076>>1]|0;
     $177 = $176&65535;
     $178 = Math_imul($175, $177)|0;
     $179 = $col;
     $180 = (($178) + ($179))|0;
     $181 = HEAP32[972>>2]|0;
     $182 = (($181) + ($180<<3)|0);
     $183 = ((($182)) + 2|0);
     HEAP16[$183>>1] = $174;
     $184 = $col;
     $185 = (($184) + 2)|0;
     $col = $185;
    }
    $186 = (($165) + 2)|0;
    $row = $186;
   }
   $187 = $152 & 1431655765;
   $188 = $187 << 1;
   $189 = $188 ^ -1;
   $190 = HEAP32[776>>2]|0;
   $191 = $190 & $189;
   HEAP32[776>>2] = $191;
  }
 } while(0);
 $192 = HEAP32[696>>2]|0;
 $193 = ($192|0)!=(0);
 if (!($193)) {
  STACKTOP = sp;return;
 }
 HEAP32[776>>2] = 0;
 STACKTOP = sp;return;
}
function _border_interpolate($border) {
 $border = $border|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $f = 0, $row = 0, $sum = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sum = sp;
 $0 = $border;
 $row = 0;
 while(1) {
  $1 = $row;
  $2 = HEAP16[580074>>1]|0;
  $3 = $2&65535;
  $4 = ($1>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $col = 0;
  while(1) {
   $5 = $col;
   $6 = HEAP16[580076>>1]|0;
   $7 = $6&65535;
   $8 = ($5>>>0)<($7>>>0);
   if (!($8)) {
    break;
   }
   $9 = $col;
   $10 = $0;
   $11 = ($9|0)==($10|0);
   if ($11) {
    $12 = $row;
    $13 = $0;
    $14 = ($12>>>0)>=($13>>>0);
    if ($14) {
     $15 = $row;
     $16 = HEAP16[580074>>1]|0;
     $17 = $16&65535;
     $18 = $0;
     $19 = (($17) - ($18))|0;
     $20 = ($15>>>0)<($19>>>0);
     if ($20) {
      $21 = HEAP16[580076>>1]|0;
      $22 = $21&65535;
      $23 = $0;
      $24 = (($22) - ($23))|0;
      $col = $24;
     }
    }
   }
   ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
   $25 = $row;
   $26 = (($25) - 1)|0;
   $y = $26;
   while(1) {
    $27 = $y;
    $28 = $row;
    $29 = (($28) + 2)|0;
    $30 = ($27|0)!=($29|0);
    if (!($30)) {
     break;
    }
    $31 = $col;
    $32 = (($31) - 1)|0;
    $x = $32;
    while(1) {
     $33 = $x;
     $34 = $col;
     $35 = (($34) + 2)|0;
     $36 = ($33|0)!=($35|0);
     $37 = $y;
     if (!($36)) {
      break;
     }
     $38 = HEAP16[580074>>1]|0;
     $39 = $38&65535;
     $40 = ($37>>>0)<($39>>>0);
     if ($40) {
      $41 = $x;
      $42 = HEAP16[580076>>1]|0;
      $43 = $42&65535;
      $44 = ($41>>>0)<($43>>>0);
      if ($44) {
       $45 = $y;
       $46 = $x;
       $47 = (_fcol($45,$46)|0);
       $f = $47;
       $48 = $f;
       $49 = $y;
       $50 = HEAP16[580076>>1]|0;
       $51 = $50&65535;
       $52 = Math_imul($49, $51)|0;
       $53 = $x;
       $54 = (($52) + ($53))|0;
       $55 = HEAP32[972>>2]|0;
       $56 = (($55) + ($54<<3)|0);
       $57 = (($56) + ($48<<1)|0);
       $58 = HEAP16[$57>>1]|0;
       $59 = $58&65535;
       $60 = $f;
       $61 = (($sum) + ($60<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($62) + ($59))|0;
       HEAP32[$61>>2] = $63;
       $64 = $f;
       $65 = (($64) + 4)|0;
       $66 = (($sum) + ($65<<2)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($67) + 1)|0;
       HEAP32[$66>>2] = $68;
      }
     }
     $69 = $x;
     $70 = (($69) + 1)|0;
     $x = $70;
    }
    $71 = (($37) + 1)|0;
    $y = $71;
   }
   $72 = $row;
   $73 = $col;
   $74 = (_fcol($72,$73)|0);
   $f = $74;
   $c = 0;
   while(1) {
    $75 = $c;
    $76 = HEAP32[980>>2]|0;
    $77 = ($75>>>0)<($76>>>0);
    if (!($77)) {
     break;
    }
    $78 = $c;
    $79 = $f;
    $80 = ($78|0)!=($79|0);
    if ($80) {
     $81 = $c;
     $82 = (($81) + 4)|0;
     $83 = (($sum) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)!=(0);
     if ($85) {
      $86 = $c;
      $87 = (($sum) + ($86<<2)|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = $c;
      $90 = (($89) + 4)|0;
      $91 = (($sum) + ($90<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($88>>>0) / ($92>>>0))&-1;
      $94 = $93&65535;
      $95 = $c;
      $96 = $row;
      $97 = HEAP16[580076>>1]|0;
      $98 = $97&65535;
      $99 = Math_imul($96, $98)|0;
      $100 = $col;
      $101 = (($99) + ($100))|0;
      $102 = HEAP32[972>>2]|0;
      $103 = (($102) + ($101<<3)|0);
      $104 = (($103) + ($95<<1)|0);
      HEAP16[$104>>1] = $94;
     }
    }
    $105 = $c;
    $106 = (($105) + 1)|0;
    $c = $106;
   }
   $107 = $col;
   $108 = (($107) + 1)|0;
   $col = $108;
  }
  $109 = $row;
  $110 = (($109) + 1)|0;
  $row = $110;
 }
 STACKTOP = sp;return;
}
function _lin_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0, $col = 0, $color = 0, $f = 0, $i = 0;
 var $ip = 0, $pix = 0, $row = 0, $shift = 0, $size = 0, $sum = 0, $vararg_buffer = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32848|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $code = sp + 72|0;
 $sum = sp + 48|0;
 $size = 16;
 $0 = HEAP32[712>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[447952>>2]|0;
  (_fprintf($2,612411,$vararg_buffer)|0);
 }
 $3 = HEAP32[776>>2]|0;
 $4 = ($3|0)==(9);
 if ($4) {
  $size = 6;
 }
 _border_interpolate(1);
 $row = 0;
 while(1) {
  $5 = $row;
  $6 = $size;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $col = 0;
  while(1) {
   $8 = $col;
   $9 = $size;
   $10 = ($8|0)<($9|0);
   if (!($10)) {
    break;
   }
   $11 = $col;
   $12 = $row;
   $13 = (($code) + ($12<<11)|0);
   $14 = (($13) + ($11<<7)|0);
   $15 = ((($14)) + 4|0);
   $ip = $15;
   $16 = $row;
   $17 = $col;
   $18 = (_fcol($16,$17)|0);
   $f = $18;
   ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
   $y = -1;
   while(1) {
    $19 = $y;
    $20 = ($19|0)<=(1);
    if (!($20)) {
     break;
    }
    $x = -1;
    while(1) {
     $21 = $x;
     $22 = ($21|0)<=(1);
     $23 = $y;
     if (!($22)) {
      break;
     }
     $24 = ($23|0)==(0);
     $25 = $24&1;
     $26 = $x;
     $27 = ($26|0)==(0);
     $28 = $27&1;
     $29 = (($25) + ($28))|0;
     $shift = $29;
     $30 = $row;
     $31 = $y;
     $32 = (($30) + ($31))|0;
     $33 = $col;
     $34 = $x;
     $35 = (($33) + ($34))|0;
     $36 = (_fcol($32,$35)|0);
     $color = $36;
     $37 = $color;
     $38 = $f;
     $39 = ($37|0)==($38|0);
     if (!($39)) {
      $40 = HEAP16[580076>>1]|0;
      $41 = $40&65535;
      $42 = $y;
      $43 = Math_imul($41, $42)|0;
      $44 = $x;
      $45 = (($43) + ($44))|0;
      $46 = $45<<2;
      $47 = $color;
      $48 = (($46) + ($47))|0;
      $49 = $ip;
      $50 = ((($49)) + 4|0);
      $ip = $50;
      HEAP32[$49>>2] = $48;
      $51 = $shift;
      $52 = $ip;
      $53 = ((($52)) + 4|0);
      $ip = $53;
      HEAP32[$52>>2] = $51;
      $54 = $color;
      $55 = $ip;
      $56 = ((($55)) + 4|0);
      $ip = $56;
      HEAP32[$55>>2] = $54;
      $57 = $shift;
      $58 = 1 << $57;
      $59 = $color;
      $60 = (($sum) + ($59<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + ($58))|0;
      HEAP32[$60>>2] = $62;
     }
     $63 = $x;
     $64 = (($63) + 1)|0;
     $x = $64;
    }
    $65 = (($23) + 1)|0;
    $y = $65;
   }
   $66 = $ip;
   $67 = $col;
   $68 = $row;
   $69 = (($code) + ($68<<11)|0);
   $70 = (($69) + ($67<<7)|0);
   $71 = $66;
   $72 = $70;
   $73 = (($71) - ($72))|0;
   $74 = (($73|0) / 4)&-1;
   $75 = (($74|0) / 3)&-1;
   $76 = $col;
   $77 = $row;
   $78 = (($code) + ($77<<11)|0);
   $79 = (($78) + ($76<<7)|0);
   HEAP32[$79>>2] = $75;
   $c = 0;
   while(1) {
    $80 = $c;
    $81 = HEAP32[980>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if (!($82)) {
     break;
    }
    $83 = $c;
    $84 = $f;
    $85 = ($83|0)!=($84|0);
    if ($85) {
     $86 = $c;
     $87 = $ip;
     $88 = ((($87)) + 4|0);
     $ip = $88;
     HEAP32[$87>>2] = $86;
     $89 = $c;
     $90 = (($sum) + ($89<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (256 / ($91|0))&-1;
     $93 = $ip;
     $94 = ((($93)) + 4|0);
     $ip = $94;
     HEAP32[$93>>2] = $92;
    }
    $95 = $c;
    $96 = (($95) + 1)|0;
    $c = $96;
   }
   $97 = $col;
   $98 = (($97) + 1)|0;
   $col = $98;
  }
  $99 = $row;
  $100 = (($99) + 1)|0;
  $row = $100;
 }
 $row = 1;
 while(1) {
  $101 = $row;
  $102 = HEAP16[580074>>1]|0;
  $103 = $102&65535;
  $104 = (($103) - 1)|0;
  $105 = ($101|0)<($104|0);
  if (!($105)) {
   break;
  }
  $col = 1;
  while(1) {
   $106 = $col;
   $107 = HEAP16[580076>>1]|0;
   $108 = $107&65535;
   $109 = (($108) - 1)|0;
   $110 = ($106|0)<($109|0);
   $111 = $row;
   if (!($110)) {
    break;
   }
   $112 = HEAP16[580076>>1]|0;
   $113 = $112&65535;
   $114 = Math_imul($111, $113)|0;
   $115 = $col;
   $116 = (($114) + ($115))|0;
   $117 = HEAP32[972>>2]|0;
   $118 = (($117) + ($116<<3)|0);
   $pix = $118;
   $119 = $col;
   $120 = $size;
   $121 = (($119|0) % ($120|0))&-1;
   $122 = $row;
   $123 = $size;
   $124 = (($122|0) % ($123|0))&-1;
   $125 = (($code) + ($124<<11)|0);
   $126 = (($125) + ($121<<7)|0);
   $ip = $126;
   ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
   $127 = $ip;
   $128 = ((($127)) + 4|0);
   $ip = $128;
   $129 = HEAP32[$127>>2]|0;
   $i = $129;
   while(1) {
    $130 = $i;
    $131 = (($130) + -1)|0;
    $i = $131;
    $132 = ($130|0)!=(0);
    if (!($132)) {
     break;
    }
    $133 = $ip;
    $134 = HEAP32[$133>>2]|0;
    $135 = $pix;
    $136 = (($135) + ($134<<1)|0);
    $137 = HEAP16[$136>>1]|0;
    $138 = $137&65535;
    $139 = $ip;
    $140 = ((($139)) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $138 << $141;
    $143 = $ip;
    $144 = ((($143)) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($sum) + ($145<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = (($147) + ($142))|0;
    HEAP32[$146>>2] = $148;
    $149 = $ip;
    $150 = ((($149)) + 12|0);
    $ip = $150;
   }
   $151 = HEAP32[980>>2]|0;
   $i = $151;
   while(1) {
    $152 = $i;
    $153 = (($152) + -1)|0;
    $i = $153;
    $154 = ($153|0)!=(0);
    if (!($154)) {
     break;
    }
    $155 = $ip;
    $156 = HEAP32[$155>>2]|0;
    $157 = (($sum) + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $ip;
    $160 = ((($159)) + 4|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = Math_imul($158, $161)|0;
    $163 = $162 >> 8;
    $164 = $163&65535;
    $165 = $ip;
    $166 = HEAP32[$165>>2]|0;
    $167 = $pix;
    $168 = (($167) + ($166<<1)|0);
    HEAP16[$168>>1] = $164;
    $169 = $ip;
    $170 = ((($169)) + 8|0);
    $ip = $170;
   }
   $171 = $col;
   $172 = (($171) + 1)|0;
   $col = $172;
  }
  $173 = (($111) + 1)|0;
  $row = $173;
 }
 STACKTOP = sp;return;
}
function _vng_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brow = 0, $c = 0, $code = 0, $col = 0, $color = 0, $diag = 0;
 var $diff = 0, $g = 0, $gmax = 0, $gmin = 0, $grads = 0, $gval = 0, $ip = 0, $num = 0, $pcol = 0, $pix = 0, $prow = 0, $row = 0, $sum = 0, $t = 0, $thold = 0, $vararg_buffer = 0, $weight = 0, $x = 0, $x1 = 0, $x2 = 0;
 var $y = 0, $y1 = 0, $y2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $brow = sp + 1176|0;
 $code = sp + 136|0;
 $gval = sp + 104|0;
 $sum = sp + 80|0;
 $prow = 8;
 $pcol = 2;
 _lin_interpolate();
 $0 = HEAP32[712>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[447952>>2]|0;
  (_fprintf($2,612838,$vararg_buffer)|0);
 }
 $3 = HEAP32[776>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $pcol = 16;
  $prow = 16;
 }
 $5 = HEAP32[776>>2]|0;
 $6 = ($5|0)==(9);
 if ($6) {
  $pcol = 6;
  $prow = 6;
 }
 $7 = $prow;
 $8 = $pcol;
 $9 = Math_imul($7, $8)|0;
 $10 = (_calloc($9,1280)|0);
 $ip = $10;
 $11 = $ip;
 _merror($11,612860);
 $row = 0;
 while(1) {
  $12 = $row;
  $13 = $prow;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $col = 0;
  while(1) {
   $15 = $col;
   $16 = $pcol;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $ip;
   $19 = $col;
   $20 = $row;
   $21 = (($code) + ($20<<6)|0);
   $22 = (($21) + ($19<<2)|0);
   HEAP32[$22>>2] = $18;
   HEAP32[31200>>2] = 612438;
   $t = 0;
   while(1) {
    $23 = $t;
    $24 = ($23|0)<(64);
    if (!($24)) {
     break;
    }
    $25 = HEAP32[31200>>2]|0;
    $26 = ((($25)) + 1|0);
    HEAP32[31200>>2] = $26;
    $27 = HEAP8[$25>>0]|0;
    $28 = $27 << 24 >> 24;
    $y1 = $28;
    $29 = HEAP32[31200>>2]|0;
    $30 = ((($29)) + 1|0);
    HEAP32[31200>>2] = $30;
    $31 = HEAP8[$29>>0]|0;
    $32 = $31 << 24 >> 24;
    $x1 = $32;
    $33 = HEAP32[31200>>2]|0;
    $34 = ((($33)) + 1|0);
    HEAP32[31200>>2] = $34;
    $35 = HEAP8[$33>>0]|0;
    $36 = $35 << 24 >> 24;
    $y2 = $36;
    $37 = HEAP32[31200>>2]|0;
    $38 = ((($37)) + 1|0);
    HEAP32[31200>>2] = $38;
    $39 = HEAP8[$37>>0]|0;
    $40 = $39 << 24 >> 24;
    $x2 = $40;
    $41 = HEAP32[31200>>2]|0;
    $42 = ((($41)) + 1|0);
    HEAP32[31200>>2] = $42;
    $43 = HEAP8[$41>>0]|0;
    $44 = $43 << 24 >> 24;
    $weight = $44;
    $45 = HEAP32[31200>>2]|0;
    $46 = ((($45)) + 1|0);
    HEAP32[31200>>2] = $46;
    $47 = HEAP8[$45>>0]|0;
    $48 = $47 << 24 >> 24;
    $grads = $48;
    $49 = $row;
    $50 = $y1;
    $51 = (($49) + ($50))|0;
    $52 = $col;
    $53 = $x1;
    $54 = (($52) + ($53))|0;
    $55 = (_fcol($51,$54)|0);
    $color = $55;
    $56 = $row;
    $57 = $y2;
    $58 = (($56) + ($57))|0;
    $59 = $col;
    $60 = $x2;
    $61 = (($59) + ($60))|0;
    $62 = (_fcol($58,$61)|0);
    $63 = $color;
    $64 = ($62|0)!=($63|0);
    do {
     if (!($64)) {
      $65 = $row;
      $66 = $col;
      $67 = (($66) + 1)|0;
      $68 = (_fcol($65,$67)|0);
      $69 = $color;
      $70 = ($68|0)==($69|0);
      if ($70) {
       $71 = $row;
       $72 = (($71) + 1)|0;
       $73 = $col;
       $74 = (_fcol($72,$73)|0);
       $75 = $color;
       $76 = ($74|0)==($75|0);
       $78 = $76;
      } else {
       $78 = 0;
      }
      $77 = $78 ? 2 : 1;
      $diag = $77;
      $79 = $y1;
      $80 = $y2;
      $81 = (($79) - ($80))|0;
      $82 = (Math_abs(($81|0))|0);
      $83 = $diag;
      $84 = ($82|0)==($83|0);
      if ($84) {
       $85 = $x1;
       $86 = $x2;
       $87 = (($85) - ($86))|0;
       $88 = (Math_abs(($87|0))|0);
       $89 = $diag;
       $90 = ($88|0)==($89|0);
       if ($90) {
        break;
       }
      }
      $91 = $y1;
      $92 = HEAP16[580076>>1]|0;
      $93 = $92&65535;
      $94 = Math_imul($91, $93)|0;
      $95 = $x1;
      $96 = (($94) + ($95))|0;
      $97 = $96<<2;
      $98 = $color;
      $99 = (($97) + ($98))|0;
      $100 = $ip;
      $101 = ((($100)) + 4|0);
      $ip = $101;
      HEAP32[$100>>2] = $99;
      $102 = $y2;
      $103 = HEAP16[580076>>1]|0;
      $104 = $103&65535;
      $105 = Math_imul($102, $104)|0;
      $106 = $x2;
      $107 = (($105) + ($106))|0;
      $108 = $107<<2;
      $109 = $color;
      $110 = (($108) + ($109))|0;
      $111 = $ip;
      $112 = ((($111)) + 4|0);
      $ip = $112;
      HEAP32[$111>>2] = $110;
      $113 = $weight;
      $114 = $ip;
      $115 = ((($114)) + 4|0);
      $ip = $115;
      HEAP32[$114>>2] = $113;
      $g = 0;
      while(1) {
       $116 = $g;
       $117 = ($116|0)<(8);
       if (!($117)) {
        break;
       }
       $118 = $grads;
       $119 = $g;
       $120 = 1 << $119;
       $121 = $118 & $120;
       $122 = ($121|0)!=(0);
       if ($122) {
        $123 = $g;
        $124 = $ip;
        $125 = ((($124)) + 4|0);
        $ip = $125;
        HEAP32[$124>>2] = $123;
       }
       $126 = $g;
       $127 = (($126) + 1)|0;
       $g = $127;
      }
      $128 = $ip;
      $129 = ((($128)) + 4|0);
      $ip = $129;
      HEAP32[$128>>2] = -1;
     }
    } while(0);
    $130 = $t;
    $131 = (($130) + 1)|0;
    $t = $131;
   }
   $132 = $ip;
   $133 = ((($132)) + 4|0);
   $ip = $133;
   HEAP32[$132>>2] = 2147483647;
   HEAP32[31200>>2] = 612822;
   $g = 0;
   while(1) {
    $134 = $g;
    $135 = ($134|0)<(8);
    if (!($135)) {
     break;
    }
    $136 = HEAP32[31200>>2]|0;
    $137 = ((($136)) + 1|0);
    HEAP32[31200>>2] = $137;
    $138 = HEAP8[$136>>0]|0;
    $139 = $138 << 24 >> 24;
    $y = $139;
    $140 = HEAP32[31200>>2]|0;
    $141 = ((($140)) + 1|0);
    HEAP32[31200>>2] = $141;
    $142 = HEAP8[$140>>0]|0;
    $143 = $142 << 24 >> 24;
    $x = $143;
    $144 = $y;
    $145 = HEAP16[580076>>1]|0;
    $146 = $145&65535;
    $147 = Math_imul($144, $146)|0;
    $148 = $x;
    $149 = (($147) + ($148))|0;
    $150 = $149<<2;
    $151 = $ip;
    $152 = ((($151)) + 4|0);
    $ip = $152;
    HEAP32[$151>>2] = $150;
    $153 = $row;
    $154 = $col;
    $155 = (_fcol($153,$154)|0);
    $color = $155;
    $156 = $row;
    $157 = $y;
    $158 = (($156) + ($157))|0;
    $159 = $col;
    $160 = $x;
    $161 = (($159) + ($160))|0;
    $162 = (_fcol($158,$161)|0);
    $163 = $color;
    $164 = ($162|0)!=($163|0);
    if ($164) {
     $165 = $row;
     $166 = $y;
     $167 = $166<<1;
     $168 = (($165) + ($167))|0;
     $169 = $col;
     $170 = $x;
     $171 = $170<<1;
     $172 = (($169) + ($171))|0;
     $173 = (_fcol($168,$172)|0);
     $174 = $color;
     $175 = ($173|0)==($174|0);
     if ($175) {
      $176 = $y;
      $177 = HEAP16[580076>>1]|0;
      $178 = $177&65535;
      $179 = Math_imul($176, $178)|0;
      $180 = $x;
      $181 = (($179) + ($180))|0;
      $182 = $181<<3;
      $183 = $color;
      $184 = (($182) + ($183))|0;
      $185 = $ip;
      $186 = ((($185)) + 4|0);
      $ip = $186;
      HEAP32[$185>>2] = $184;
     } else {
      label = 30;
     }
    } else {
     label = 30;
    }
    if ((label|0) == 30) {
     label = 0;
     $187 = $ip;
     $188 = ((($187)) + 4|0);
     $ip = $188;
     HEAP32[$187>>2] = 0;
    }
    $189 = $g;
    $190 = (($189) + 1)|0;
    $g = $190;
   }
   $191 = $col;
   $192 = (($191) + 1)|0;
   $col = $192;
  }
  $193 = $row;
  $194 = (($193) + 1)|0;
  $row = $194;
 }
 $195 = HEAP16[580076>>1]|0;
 $196 = $195&65535;
 $197 = ($196*3)|0;
 $198 = (_calloc($197,8)|0);
 $199 = ((($brow)) + 16|0);
 HEAP32[$199>>2] = $198;
 $200 = ((($brow)) + 16|0);
 $201 = HEAP32[$200>>2]|0;
 _merror($201,612860);
 $row = 0;
 while(1) {
  $202 = $row;
  $203 = ($202|0)<(3);
  if (!($203)) {
   break;
  }
  $204 = ((($brow)) + 16|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $row;
  $207 = HEAP16[580076>>1]|0;
  $208 = $207&65535;
  $209 = Math_imul($206, $208)|0;
  $210 = (($205) + ($209<<3)|0);
  $211 = $row;
  $212 = (($brow) + ($211<<2)|0);
  HEAP32[$212>>2] = $210;
  $213 = $row;
  $214 = (($213) + 1)|0;
  $row = $214;
 }
 $row = 2;
 while(1) {
  $215 = $row;
  $216 = HEAP16[580074>>1]|0;
  $217 = $216&65535;
  $218 = (($217) - 2)|0;
  $219 = ($215|0)<($218|0);
  if (!($219)) {
   break;
  }
  $col = 2;
  while(1) {
   $220 = $col;
   $221 = HEAP16[580076>>1]|0;
   $222 = $221&65535;
   $223 = (($222) - 2)|0;
   $224 = ($220|0)<($223|0);
   $225 = $row;
   if (!($224)) {
    break;
   }
   $226 = HEAP16[580076>>1]|0;
   $227 = $226&65535;
   $228 = Math_imul($225, $227)|0;
   $229 = $col;
   $230 = (($228) + ($229))|0;
   $231 = HEAP32[972>>2]|0;
   $232 = (($231) + ($230<<3)|0);
   $pix = $232;
   $233 = $col;
   $234 = $pcol;
   $235 = (($233|0) % ($234|0))&-1;
   $236 = $row;
   $237 = $prow;
   $238 = (($236|0) % ($237|0))&-1;
   $239 = (($code) + ($238<<6)|0);
   $240 = (($239) + ($235<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $ip = $241;
   ;HEAP32[$gval>>2]=0|0;HEAP32[$gval+4>>2]=0|0;HEAP32[$gval+8>>2]=0|0;HEAP32[$gval+12>>2]=0|0;HEAP32[$gval+16>>2]=0|0;HEAP32[$gval+20>>2]=0|0;HEAP32[$gval+24>>2]=0|0;HEAP32[$gval+28>>2]=0|0;
   L58: while(1) {
    $242 = $ip;
    $243 = HEAP32[$242>>2]|0;
    $g = $243;
    $244 = ($243|0)!=(2147483647);
    if (!($244)) {
     break;
    }
    $245 = $g;
    $246 = $pix;
    $247 = (($246) + ($245<<1)|0);
    $248 = HEAP16[$247>>1]|0;
    $249 = $248&65535;
    $250 = $ip;
    $251 = ((($250)) + 4|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $pix;
    $254 = (($253) + ($252<<1)|0);
    $255 = HEAP16[$254>>1]|0;
    $256 = $255&65535;
    $257 = (($249) - ($256))|0;
    $258 = $g;
    $259 = $pix;
    $260 = (($259) + ($258<<1)|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261&65535;
    $263 = $ip;
    $264 = ((($263)) + 4|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $pix;
    $267 = (($266) + ($265<<1)|0);
    $268 = HEAP16[$267>>1]|0;
    $269 = $268&65535;
    $270 = (($262) - ($269))|0;
    $271 = $270 >> 31;
    $272 = $257 ^ $271;
    $273 = $g;
    $274 = $pix;
    $275 = (($274) + ($273<<1)|0);
    $276 = HEAP16[$275>>1]|0;
    $277 = $276&65535;
    $278 = $ip;
    $279 = ((($278)) + 4|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = $pix;
    $282 = (($281) + ($280<<1)|0);
    $283 = HEAP16[$282>>1]|0;
    $284 = $283&65535;
    $285 = (($277) - ($284))|0;
    $286 = $285 >> 31;
    $287 = (($272) - ($286))|0;
    $288 = $ip;
    $289 = ((($288)) + 8|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $287 << $290;
    $diff = $291;
    $292 = $diff;
    $293 = $ip;
    $294 = ((($293)) + 12|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($gval) + ($295<<2)|0);
    $297 = HEAP32[$296>>2]|0;
    $298 = (($297) + ($292))|0;
    HEAP32[$296>>2] = $298;
    $299 = $ip;
    $300 = ((($299)) + 20|0);
    $ip = $300;
    $301 = $ip;
    $302 = ((($301)) + -4|0);
    $303 = HEAP32[$302>>2]|0;
    $g = $303;
    $304 = ($303|0)==(-1);
    if ($304) {
     continue;
    }
    $305 = $diff;
    $306 = $g;
    $307 = (($gval) + ($306<<2)|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = (($308) + ($305))|0;
    HEAP32[$307>>2] = $309;
    while(1) {
     $310 = $ip;
     $311 = ((($310)) + 4|0);
     $ip = $311;
     $312 = HEAP32[$310>>2]|0;
     $g = $312;
     $313 = ($312|0)!=(-1);
     if (!($313)) {
      continue L58;
     }
     $314 = $diff;
     $315 = $g;
     $316 = (($gval) + ($315<<2)|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = (($317) + ($314))|0;
     HEAP32[$316>>2] = $318;
    }
   }
   $319 = $ip;
   $320 = ((($319)) + 4|0);
   $ip = $320;
   $321 = HEAP32[$gval>>2]|0;
   $gmax = $321;
   $gmin = $321;
   $g = 1;
   while(1) {
    $322 = $g;
    $323 = ($322|0)<(8);
    if (!($323)) {
     break;
    }
    $324 = $gmin;
    $325 = $g;
    $326 = (($gval) + ($325<<2)|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ($324|0)>($327|0);
    if ($328) {
     $329 = $g;
     $330 = (($gval) + ($329<<2)|0);
     $331 = HEAP32[$330>>2]|0;
     $gmin = $331;
    }
    $332 = $gmax;
    $333 = $g;
    $334 = (($gval) + ($333<<2)|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ($332|0)<($335|0);
    if ($336) {
     $337 = $g;
     $338 = (($gval) + ($337<<2)|0);
     $339 = HEAP32[$338>>2]|0;
     $gmax = $339;
    }
    $340 = $g;
    $341 = (($340) + 1)|0;
    $g = $341;
   }
   $342 = $gmax;
   $343 = ($342|0)==(0);
   L76: do {
    if ($343) {
     $344 = $col;
     $345 = ((($brow)) + 8|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = (($346) + ($344<<3)|0);
     $348 = $pix;
     ;HEAP16[$347>>1]=HEAP16[$348>>1]|0;HEAP16[$347+2>>1]=HEAP16[$348+2>>1]|0;HEAP16[$347+4>>1]=HEAP16[$348+4>>1]|0;HEAP16[$347+6>>1]=HEAP16[$348+6>>1]|0;
    } else {
     $349 = $gmin;
     $350 = $gmax;
     $351 = $350 >> 1;
     $352 = (($349) + ($351))|0;
     $thold = $352;
     ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
     $353 = $row;
     $354 = $col;
     $355 = (_fcol($353,$354)|0);
     $color = $355;
     $g = 0;
     $num = 0;
     while(1) {
      $356 = $g;
      $357 = ($356|0)<(8);
      if (!($357)) {
       break;
      }
      $358 = $g;
      $359 = (($gval) + ($358<<2)|0);
      $360 = HEAP32[$359>>2]|0;
      $361 = $thold;
      $362 = ($360|0)<=($361|0);
      if ($362) {
       $c = 0;
       while(1) {
        $363 = $c;
        $364 = HEAP32[980>>2]|0;
        $365 = ($363>>>0)<($364>>>0);
        if (!($365)) {
         break;
        }
        $366 = $c;
        $367 = $color;
        $368 = ($366|0)==($367|0);
        if ($368) {
         $369 = $ip;
         $370 = ((($369)) + 4|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = ($371|0)!=(0);
         if ($372) {
          $373 = $c;
          $374 = $pix;
          $375 = (($374) + ($373<<1)|0);
          $376 = HEAP16[$375>>1]|0;
          $377 = $376&65535;
          $378 = $ip;
          $379 = ((($378)) + 4|0);
          $380 = HEAP32[$379>>2]|0;
          $381 = $pix;
          $382 = (($381) + ($380<<1)|0);
          $383 = HEAP16[$382>>1]|0;
          $384 = $383&65535;
          $385 = (($377) + ($384))|0;
          $386 = $385 >> 1;
          $387 = $c;
          $388 = (($sum) + ($387<<2)|0);
          $389 = HEAP32[$388>>2]|0;
          $390 = (($389) + ($386))|0;
          HEAP32[$388>>2] = $390;
         } else {
          label = 64;
         }
        } else {
         label = 64;
        }
        if ((label|0) == 64) {
         label = 0;
         $391 = $ip;
         $392 = HEAP32[$391>>2]|0;
         $393 = $c;
         $394 = (($392) + ($393))|0;
         $395 = $pix;
         $396 = (($395) + ($394<<1)|0);
         $397 = HEAP16[$396>>1]|0;
         $398 = $397&65535;
         $399 = $c;
         $400 = (($sum) + ($399<<2)|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = (($401) + ($398))|0;
         HEAP32[$400>>2] = $402;
        }
        $403 = $c;
        $404 = (($403) + 1)|0;
        $c = $404;
       }
       $405 = $num;
       $406 = (($405) + 1)|0;
       $num = $406;
      }
      $407 = $g;
      $408 = (($407) + 1)|0;
      $g = $408;
      $409 = $ip;
      $410 = ((($409)) + 8|0);
      $ip = $410;
     }
     $c = 0;
     while(1) {
      $411 = $c;
      $412 = HEAP32[980>>2]|0;
      $413 = ($411>>>0)<($412>>>0);
      if (!($413)) {
       break L76;
      }
      $414 = $color;
      $415 = $pix;
      $416 = (($415) + ($414<<1)|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $t = $418;
      $419 = $c;
      $420 = $color;
      $421 = ($419|0)!=($420|0);
      if ($421) {
       $422 = $c;
       $423 = (($sum) + ($422<<2)|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = $color;
       $426 = (($sum) + ($425<<2)|0);
       $427 = HEAP32[$426>>2]|0;
       $428 = (($424) - ($427))|0;
       $429 = $num;
       $430 = (($428|0) / ($429|0))&-1;
       $431 = $t;
       $432 = (($431) + ($430))|0;
       $t = $432;
      }
      $433 = $t;
      $434 = ($433|0)<(65535);
      $435 = $t;
      $436 = $434 ? $435 : 65535;
      $437 = (0)>($436|0);
      if ($437) {
       $443 = 0;
      } else {
       $438 = $t;
       $439 = ($438|0)<(65535);
       $440 = $t;
       $441 = $439 ? $440 : 65535;
       $443 = $441;
      }
      $442 = $443&65535;
      $444 = $c;
      $445 = $col;
      $446 = ((($brow)) + 8|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = (($447) + ($445<<3)|0);
      $449 = (($448) + ($444<<1)|0);
      HEAP16[$449>>1] = $442;
      $450 = $c;
      $451 = (($450) + 1)|0;
      $c = $451;
     }
    }
   } while(0);
   $452 = $col;
   $453 = (($452) + 1)|0;
   $col = $453;
  }
  $454 = ($225|0)>(3);
  if ($454) {
   $455 = $row;
   $456 = (($455) - 2)|0;
   $457 = HEAP16[580076>>1]|0;
   $458 = $457&65535;
   $459 = Math_imul($456, $458)|0;
   $460 = (($459) + 2)|0;
   $461 = HEAP32[972>>2]|0;
   $462 = (($461) + ($460<<3)|0);
   $463 = HEAP32[$brow>>2]|0;
   $464 = ((($463)) + 16|0);
   $465 = HEAP16[580076>>1]|0;
   $466 = $465&65535;
   $467 = (($466) - 4)|0;
   $468 = $467<<3;
   _memcpy(($462|0),($464|0),($468|0))|0;
  }
  $g = 0;
  while(1) {
   $469 = $g;
   $470 = ($469|0)<(4);
   if (!($470)) {
    break;
   }
   $471 = $g;
   $472 = (($brow) + ($471<<2)|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = $g;
   $475 = (($474) - 1)|0;
   $476 = $475 & 3;
   $477 = (($brow) + ($476<<2)|0);
   HEAP32[$477>>2] = $473;
   $478 = $g;
   $479 = (($478) + 1)|0;
   $g = $479;
  }
  $480 = $row;
  $481 = (($480) + 1)|0;
  $row = $481;
 }
 $482 = $row;
 $483 = (($482) - 2)|0;
 $484 = HEAP16[580076>>1]|0;
 $485 = $484&65535;
 $486 = Math_imul($483, $485)|0;
 $487 = (($486) + 2)|0;
 $488 = HEAP32[972>>2]|0;
 $489 = (($488) + ($487<<3)|0);
 $490 = HEAP32[$brow>>2]|0;
 $491 = ((($490)) + 16|0);
 $492 = HEAP16[580076>>1]|0;
 $493 = $492&65535;
 $494 = (($493) - 4)|0;
 $495 = $494<<3;
 _memcpy(($489|0),($491|0),($495|0))|0;
 $496 = $row;
 $497 = (($496) - 1)|0;
 $498 = HEAP16[580076>>1]|0;
 $499 = $498&65535;
 $500 = Math_imul($497, $499)|0;
 $501 = (($500) + 2)|0;
 $502 = HEAP32[972>>2]|0;
 $503 = (($502) + ($501<<3)|0);
 $504 = ((($brow)) + 4|0);
 $505 = HEAP32[$504>>2]|0;
 $506 = ((($505)) + 16|0);
 $507 = HEAP16[580076>>1]|0;
 $508 = $507&65535;
 $509 = (($508) - 4)|0;
 $510 = $509<<3;
 _memcpy(($503|0),($506|0),($510|0))|0;
 $511 = ((($brow)) + 16|0);
 $512 = HEAP32[$511>>2]|0;
 _free($512);
 $513 = HEAP32[$code>>2]|0;
 _free($513);
 STACKTOP = sp;return;
}
function _ppg_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $c = 0, $col = 0, $d = 0, $diff = 0;
 var $dir = 0, $guess = 0, $i = 0, $pix = 0, $row = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $dir = sp + 48|0;
 $diff = sp + 32|0;
 $guess = sp + 24|0;
 HEAP32[$dir>>2] = 1;
 $0 = ((($dir)) + 4|0);
 $1 = HEAP16[580076>>1]|0;
 $2 = $1&65535;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP16[580076>>1]|0;
 $6 = $5&65535;
 $7 = (0 - ($6))|0;
 HEAP32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = 1;
 _border_interpolate(3);
 $9 = HEAP32[712>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[447952>>2]|0;
  (_fprintf($11,612878,$vararg_buffer)|0);
 }
 $row = 3;
 while(1) {
  $12 = $row;
  $13 = HEAP16[580074>>1]|0;
  $14 = $13&65535;
  $15 = (($14) - 3)|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[776>>2]|0;
  $18 = $row;
  $19 = $18 << 1;
  $20 = $19 & 14;
  $21 = (($20) + 1)|0;
  $22 = $21 << 1;
  $23 = $17 >>> $22;
  $24 = $23 & 3;
  $25 = $24 & 1;
  $26 = (3 + ($25))|0;
  $col = $26;
  $27 = HEAP32[776>>2]|0;
  $28 = $row;
  $29 = $28 << 1;
  $30 = $29 & 14;
  $31 = $col;
  $32 = $31 & 1;
  $33 = (($30) + ($32))|0;
  $34 = $33 << 1;
  $35 = $27 >>> $34;
  $36 = $35 & 3;
  $c = $36;
  while(1) {
   $37 = $col;
   $38 = HEAP16[580076>>1]|0;
   $39 = $38&65535;
   $40 = (($39) - 3)|0;
   $41 = ($37|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = HEAP32[972>>2]|0;
   $43 = $row;
   $44 = HEAP16[580076>>1]|0;
   $45 = $44&65535;
   $46 = Math_imul($43, $45)|0;
   $47 = (($42) + ($46<<3)|0);
   $48 = $col;
   $49 = (($47) + ($48<<3)|0);
   $pix = $49;
   $i = 0;
   while(1) {
    $50 = $i;
    $51 = (($dir) + ($50<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $d = $52;
    $53 = ($52|0)>(0);
    if (!($53)) {
     break;
    }
    $54 = $d;
    $55 = (0 - ($54))|0;
    $56 = $pix;
    $57 = (($56) + ($55<<3)|0);
    $58 = ((($57)) + 2|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = $c;
    $62 = $pix;
    $63 = (($62) + ($61<<1)|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64&65535;
    $66 = (($60) + ($65))|0;
    $67 = $d;
    $68 = $pix;
    $69 = (($68) + ($67<<3)|0);
    $70 = ((($69)) + 2|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $73 = (($66) + ($72))|0;
    $74 = $73<<1;
    $75 = $c;
    $76 = $d;
    $77 = Math_imul(-2, $76)|0;
    $78 = $pix;
    $79 = (($78) + ($77<<3)|0);
    $80 = (($79) + ($75<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $81&65535;
    $83 = (($74) - ($82))|0;
    $84 = $c;
    $85 = $d;
    $86 = $85<<1;
    $87 = $pix;
    $88 = (($87) + ($86<<3)|0);
    $89 = (($88) + ($84<<1)|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90&65535;
    $92 = (($83) - ($91))|0;
    $93 = $i;
    $94 = (($guess) + ($93<<2)|0);
    HEAP32[$94>>2] = $92;
    $95 = $c;
    $96 = $d;
    $97 = Math_imul(-2, $96)|0;
    $98 = $pix;
    $99 = (($98) + ($97<<3)|0);
    $100 = (($99) + ($95<<1)|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = $101&65535;
    $103 = $c;
    $104 = $pix;
    $105 = (($104) + ($103<<1)|0);
    $106 = HEAP16[$105>>1]|0;
    $107 = $106&65535;
    $108 = (($102) - ($107))|0;
    $109 = $c;
    $110 = $d;
    $111 = Math_imul(-2, $110)|0;
    $112 = $pix;
    $113 = (($112) + ($111<<3)|0);
    $114 = (($113) + ($109<<1)|0);
    $115 = HEAP16[$114>>1]|0;
    $116 = $115&65535;
    $117 = $c;
    $118 = $pix;
    $119 = (($118) + ($117<<1)|0);
    $120 = HEAP16[$119>>1]|0;
    $121 = $120&65535;
    $122 = (($116) - ($121))|0;
    $123 = $122 >> 31;
    $124 = $108 ^ $123;
    $125 = $c;
    $126 = $d;
    $127 = Math_imul(-2, $126)|0;
    $128 = $pix;
    $129 = (($128) + ($127<<3)|0);
    $130 = (($129) + ($125<<1)|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $131&65535;
    $133 = $c;
    $134 = $pix;
    $135 = (($134) + ($133<<1)|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = $136&65535;
    $138 = (($132) - ($137))|0;
    $139 = $138 >> 31;
    $140 = (($124) - ($139))|0;
    $141 = $c;
    $142 = $d;
    $143 = $142<<1;
    $144 = $pix;
    $145 = (($144) + ($143<<3)|0);
    $146 = (($145) + ($141<<1)|0);
    $147 = HEAP16[$146>>1]|0;
    $148 = $147&65535;
    $149 = $c;
    $150 = $pix;
    $151 = (($150) + ($149<<1)|0);
    $152 = HEAP16[$151>>1]|0;
    $153 = $152&65535;
    $154 = (($148) - ($153))|0;
    $155 = $c;
    $156 = $d;
    $157 = $156<<1;
    $158 = $pix;
    $159 = (($158) + ($157<<3)|0);
    $160 = (($159) + ($155<<1)|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = $161&65535;
    $163 = $c;
    $164 = $pix;
    $165 = (($164) + ($163<<1)|0);
    $166 = HEAP16[$165>>1]|0;
    $167 = $166&65535;
    $168 = (($162) - ($167))|0;
    $169 = $168 >> 31;
    $170 = $154 ^ $169;
    $171 = $c;
    $172 = $d;
    $173 = $172<<1;
    $174 = $pix;
    $175 = (($174) + ($173<<3)|0);
    $176 = (($175) + ($171<<1)|0);
    $177 = HEAP16[$176>>1]|0;
    $178 = $177&65535;
    $179 = $c;
    $180 = $pix;
    $181 = (($180) + ($179<<1)|0);
    $182 = HEAP16[$181>>1]|0;
    $183 = $182&65535;
    $184 = (($178) - ($183))|0;
    $185 = $184 >> 31;
    $186 = (($170) - ($185))|0;
    $187 = (($140) + ($186))|0;
    $188 = $d;
    $189 = (0 - ($188))|0;
    $190 = $pix;
    $191 = (($190) + ($189<<3)|0);
    $192 = ((($191)) + 2|0);
    $193 = HEAP16[$192>>1]|0;
    $194 = $193&65535;
    $195 = $d;
    $196 = $pix;
    $197 = (($196) + ($195<<3)|0);
    $198 = ((($197)) + 2|0);
    $199 = HEAP16[$198>>1]|0;
    $200 = $199&65535;
    $201 = (($194) - ($200))|0;
    $202 = $d;
    $203 = (0 - ($202))|0;
    $204 = $pix;
    $205 = (($204) + ($203<<3)|0);
    $206 = ((($205)) + 2|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207&65535;
    $209 = $d;
    $210 = $pix;
    $211 = (($210) + ($209<<3)|0);
    $212 = ((($211)) + 2|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $215 = (($208) - ($214))|0;
    $216 = $215 >> 31;
    $217 = $201 ^ $216;
    $218 = $d;
    $219 = (0 - ($218))|0;
    $220 = $pix;
    $221 = (($220) + ($219<<3)|0);
    $222 = ((($221)) + 2|0);
    $223 = HEAP16[$222>>1]|0;
    $224 = $223&65535;
    $225 = $d;
    $226 = $pix;
    $227 = (($226) + ($225<<3)|0);
    $228 = ((($227)) + 2|0);
    $229 = HEAP16[$228>>1]|0;
    $230 = $229&65535;
    $231 = (($224) - ($230))|0;
    $232 = $231 >> 31;
    $233 = (($217) - ($232))|0;
    $234 = (($187) + ($233))|0;
    $235 = ($234*3)|0;
    $236 = $d;
    $237 = ($236*3)|0;
    $238 = $pix;
    $239 = (($238) + ($237<<3)|0);
    $240 = ((($239)) + 2|0);
    $241 = HEAP16[$240>>1]|0;
    $242 = $241&65535;
    $243 = $d;
    $244 = $pix;
    $245 = (($244) + ($243<<3)|0);
    $246 = ((($245)) + 2|0);
    $247 = HEAP16[$246>>1]|0;
    $248 = $247&65535;
    $249 = (($242) - ($248))|0;
    $250 = $d;
    $251 = ($250*3)|0;
    $252 = $pix;
    $253 = (($252) + ($251<<3)|0);
    $254 = ((($253)) + 2|0);
    $255 = HEAP16[$254>>1]|0;
    $256 = $255&65535;
    $257 = $d;
    $258 = $pix;
    $259 = (($258) + ($257<<3)|0);
    $260 = ((($259)) + 2|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261&65535;
    $263 = (($256) - ($262))|0;
    $264 = $263 >> 31;
    $265 = $249 ^ $264;
    $266 = $d;
    $267 = ($266*3)|0;
    $268 = $pix;
    $269 = (($268) + ($267<<3)|0);
    $270 = ((($269)) + 2|0);
    $271 = HEAP16[$270>>1]|0;
    $272 = $271&65535;
    $273 = $d;
    $274 = $pix;
    $275 = (($274) + ($273<<3)|0);
    $276 = ((($275)) + 2|0);
    $277 = HEAP16[$276>>1]|0;
    $278 = $277&65535;
    $279 = (($272) - ($278))|0;
    $280 = $279 >> 31;
    $281 = (($265) - ($280))|0;
    $282 = $d;
    $283 = Math_imul(-3, $282)|0;
    $284 = $pix;
    $285 = (($284) + ($283<<3)|0);
    $286 = ((($285)) + 2|0);
    $287 = HEAP16[$286>>1]|0;
    $288 = $287&65535;
    $289 = $d;
    $290 = (0 - ($289))|0;
    $291 = $pix;
    $292 = (($291) + ($290<<3)|0);
    $293 = ((($292)) + 2|0);
    $294 = HEAP16[$293>>1]|0;
    $295 = $294&65535;
    $296 = (($288) - ($295))|0;
    $297 = $d;
    $298 = Math_imul(-3, $297)|0;
    $299 = $pix;
    $300 = (($299) + ($298<<3)|0);
    $301 = ((($300)) + 2|0);
    $302 = HEAP16[$301>>1]|0;
    $303 = $302&65535;
    $304 = $d;
    $305 = (0 - ($304))|0;
    $306 = $pix;
    $307 = (($306) + ($305<<3)|0);
    $308 = ((($307)) + 2|0);
    $309 = HEAP16[$308>>1]|0;
    $310 = $309&65535;
    $311 = (($303) - ($310))|0;
    $312 = $311 >> 31;
    $313 = $296 ^ $312;
    $314 = $d;
    $315 = Math_imul(-3, $314)|0;
    $316 = $pix;
    $317 = (($316) + ($315<<3)|0);
    $318 = ((($317)) + 2|0);
    $319 = HEAP16[$318>>1]|0;
    $320 = $319&65535;
    $321 = $d;
    $322 = (0 - ($321))|0;
    $323 = $pix;
    $324 = (($323) + ($322<<3)|0);
    $325 = ((($324)) + 2|0);
    $326 = HEAP16[$325>>1]|0;
    $327 = $326&65535;
    $328 = (($320) - ($327))|0;
    $329 = $328 >> 31;
    $330 = (($313) - ($329))|0;
    $331 = (($281) + ($330))|0;
    $332 = $331<<1;
    $333 = (($235) + ($332))|0;
    $334 = $i;
    $335 = (($diff) + ($334<<2)|0);
    HEAP32[$335>>2] = $333;
    $336 = $i;
    $337 = (($336) + 1)|0;
    $i = $337;
   }
   $338 = HEAP32[$diff>>2]|0;
   $339 = ((($diff)) + 4|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($338|0)>($340|0);
   $342 = $341&1;
   $i = $342;
   $343 = (($dir) + ($342<<2)|0);
   $344 = HEAP32[$343>>2]|0;
   $d = $344;
   $345 = $d;
   $346 = $pix;
   $347 = (($346) + ($345<<3)|0);
   $348 = ((($347)) + 2|0);
   $349 = HEAP16[$348>>1]|0;
   $350 = $349&65535;
   $351 = $d;
   $352 = (0 - ($351))|0;
   $353 = $pix;
   $354 = (($353) + ($352<<3)|0);
   $355 = ((($354)) + 2|0);
   $356 = HEAP16[$355>>1]|0;
   $357 = $356&65535;
   $358 = ($350|0)<($357|0);
   $359 = $d;
   do {
    if ($358) {
     $360 = $pix;
     $361 = (($360) + ($359<<3)|0);
     $362 = ((($361)) + 2|0);
     $363 = HEAP16[$362>>1]|0;
     $364 = $363&65535;
     $365 = $i;
     $366 = (($guess) + ($365<<2)|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $367 >> 2;
     $369 = $d;
     $370 = (0 - ($369))|0;
     $371 = $pix;
     $372 = (($371) + ($370<<3)|0);
     $373 = ((($372)) + 2|0);
     $374 = HEAP16[$373>>1]|0;
     $375 = $374&65535;
     $376 = ($368|0)<($375|0);
     if ($376) {
      $377 = $i;
      $378 = (($guess) + ($377<<2)|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = $379 >> 2;
      $389 = $380;
     } else {
      $381 = $d;
      $382 = (0 - ($381))|0;
      $383 = $pix;
      $384 = (($383) + ($382<<3)|0);
      $385 = ((($384)) + 2|0);
      $386 = HEAP16[$385>>1]|0;
      $387 = $386&65535;
      $389 = $387;
     }
     $388 = ($364|0)>($389|0);
     if ($388) {
      $390 = $d;
      $391 = $pix;
      $392 = (($391) + ($390<<3)|0);
      $393 = ((($392)) + 2|0);
      $394 = HEAP16[$393>>1]|0;
      $395 = $394&65535;
      $477 = $395;
      break;
     }
     $396 = $i;
     $397 = (($guess) + ($396<<2)|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = $398 >> 2;
     $400 = $d;
     $401 = (0 - ($400))|0;
     $402 = $pix;
     $403 = (($402) + ($401<<3)|0);
     $404 = ((($403)) + 2|0);
     $405 = HEAP16[$404>>1]|0;
     $406 = $405&65535;
     $407 = ($399|0)<($406|0);
     if ($407) {
      $408 = $i;
      $409 = (($guess) + ($408<<2)|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = $410 >> 2;
      $477 = $411;
      break;
     } else {
      $412 = $d;
      $413 = (0 - ($412))|0;
      $414 = $pix;
      $415 = (($414) + ($413<<3)|0);
      $416 = ((($415)) + 2|0);
      $417 = HEAP16[$416>>1]|0;
      $418 = $417&65535;
      $477 = $418;
      break;
     }
    } else {
     $419 = (0 - ($359))|0;
     $420 = $pix;
     $421 = (($420) + ($419<<3)|0);
     $422 = ((($421)) + 2|0);
     $423 = HEAP16[$422>>1]|0;
     $424 = $423&65535;
     $425 = $i;
     $426 = (($guess) + ($425<<2)|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = $427 >> 2;
     $429 = $d;
     $430 = $pix;
     $431 = (($430) + ($429<<3)|0);
     $432 = ((($431)) + 2|0);
     $433 = HEAP16[$432>>1]|0;
     $434 = $433&65535;
     $435 = ($428|0)<($434|0);
     if ($435) {
      $436 = $i;
      $437 = (($guess) + ($436<<2)|0);
      $438 = HEAP32[$437>>2]|0;
      $439 = $438 >> 2;
      $447 = $439;
     } else {
      $440 = $d;
      $441 = $pix;
      $442 = (($441) + ($440<<3)|0);
      $443 = ((($442)) + 2|0);
      $444 = HEAP16[$443>>1]|0;
      $445 = $444&65535;
      $447 = $445;
     }
     $446 = ($424|0)>($447|0);
     if ($446) {
      $448 = $d;
      $449 = (0 - ($448))|0;
      $450 = $pix;
      $451 = (($450) + ($449<<3)|0);
      $452 = ((($451)) + 2|0);
      $453 = HEAP16[$452>>1]|0;
      $454 = $453&65535;
      $477 = $454;
      break;
     }
     $455 = $i;
     $456 = (($guess) + ($455<<2)|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = $457 >> 2;
     $459 = $d;
     $460 = $pix;
     $461 = (($460) + ($459<<3)|0);
     $462 = ((($461)) + 2|0);
     $463 = HEAP16[$462>>1]|0;
     $464 = $463&65535;
     $465 = ($458|0)<($464|0);
     if ($465) {
      $466 = $i;
      $467 = (($guess) + ($466<<2)|0);
      $468 = HEAP32[$467>>2]|0;
      $469 = $468 >> 2;
      $477 = $469;
      break;
     } else {
      $470 = $d;
      $471 = $pix;
      $472 = (($471) + ($470<<3)|0);
      $473 = ((($472)) + 2|0);
      $474 = HEAP16[$473>>1]|0;
      $475 = $474&65535;
      $477 = $475;
      break;
     }
    }
   } while(0);
   $476 = $477&65535;
   $478 = $pix;
   $479 = ((($478)) + 2|0);
   HEAP16[$479>>1] = $476;
   $480 = $col;
   $481 = (($480) + 2)|0;
   $col = $481;
  }
  $482 = $row;
  $483 = (($482) + 1)|0;
  $row = $483;
 }
 $row = 1;
 while(1) {
  $484 = $row;
  $485 = HEAP16[580074>>1]|0;
  $486 = $485&65535;
  $487 = (($486) - 1)|0;
  $488 = ($484|0)<($487|0);
  if (!($488)) {
   break;
  }
  $489 = HEAP32[776>>2]|0;
  $490 = $row;
  $491 = $490 << 1;
  $492 = $491 & 14;
  $493 = (($492) + 0)|0;
  $494 = $493 << 1;
  $495 = $489 >>> $494;
  $496 = $495 & 3;
  $497 = $496 & 1;
  $498 = (1 + ($497))|0;
  $col = $498;
  $499 = HEAP32[776>>2]|0;
  $500 = $row;
  $501 = $500 << 1;
  $502 = $501 & 14;
  $503 = $col;
  $504 = (($503) + 1)|0;
  $505 = $504 & 1;
  $506 = (($502) + ($505))|0;
  $507 = $506 << 1;
  $508 = $499 >>> $507;
  $509 = $508 & 3;
  $c = $509;
  while(1) {
   $510 = $col;
   $511 = HEAP16[580076>>1]|0;
   $512 = $511&65535;
   $513 = (($512) - 1)|0;
   $514 = ($510|0)<($513|0);
   if (!($514)) {
    break;
   }
   $515 = HEAP32[972>>2]|0;
   $516 = $row;
   $517 = HEAP16[580076>>1]|0;
   $518 = $517&65535;
   $519 = Math_imul($516, $518)|0;
   $520 = (($515) + ($519<<3)|0);
   $521 = $col;
   $522 = (($520) + ($521<<3)|0);
   $pix = $522;
   $i = 0;
   while(1) {
    $523 = $i;
    $524 = (($dir) + ($523<<2)|0);
    $525 = HEAP32[$524>>2]|0;
    $d = $525;
    $526 = ($525|0)>(0);
    if (!($526)) {
     break;
    }
    $527 = $c;
    $528 = $d;
    $529 = (0 - ($528))|0;
    $530 = $pix;
    $531 = (($530) + ($529<<3)|0);
    $532 = (($531) + ($527<<1)|0);
    $533 = HEAP16[$532>>1]|0;
    $534 = $533&65535;
    $535 = $c;
    $536 = $d;
    $537 = $pix;
    $538 = (($537) + ($536<<3)|0);
    $539 = (($538) + ($535<<1)|0);
    $540 = HEAP16[$539>>1]|0;
    $541 = $540&65535;
    $542 = (($534) + ($541))|0;
    $543 = $pix;
    $544 = ((($543)) + 2|0);
    $545 = HEAP16[$544>>1]|0;
    $546 = $545&65535;
    $547 = $546<<1;
    $548 = (($542) + ($547))|0;
    $549 = $d;
    $550 = (0 - ($549))|0;
    $551 = $pix;
    $552 = (($551) + ($550<<3)|0);
    $553 = ((($552)) + 2|0);
    $554 = HEAP16[$553>>1]|0;
    $555 = $554&65535;
    $556 = (($548) - ($555))|0;
    $557 = $d;
    $558 = $pix;
    $559 = (($558) + ($557<<3)|0);
    $560 = ((($559)) + 2|0);
    $561 = HEAP16[$560>>1]|0;
    $562 = $561&65535;
    $563 = (($556) - ($562))|0;
    $564 = $563 >> 1;
    $565 = ($564|0)<(65535);
    if ($565) {
     $566 = $c;
     $567 = $d;
     $568 = (0 - ($567))|0;
     $569 = $pix;
     $570 = (($569) + ($568<<3)|0);
     $571 = (($570) + ($566<<1)|0);
     $572 = HEAP16[$571>>1]|0;
     $573 = $572&65535;
     $574 = $c;
     $575 = $d;
     $576 = $pix;
     $577 = (($576) + ($575<<3)|0);
     $578 = (($577) + ($574<<1)|0);
     $579 = HEAP16[$578>>1]|0;
     $580 = $579&65535;
     $581 = (($573) + ($580))|0;
     $582 = $pix;
     $583 = ((($582)) + 2|0);
     $584 = HEAP16[$583>>1]|0;
     $585 = $584&65535;
     $586 = $585<<1;
     $587 = (($581) + ($586))|0;
     $588 = $d;
     $589 = (0 - ($588))|0;
     $590 = $pix;
     $591 = (($590) + ($589<<3)|0);
     $592 = ((($591)) + 2|0);
     $593 = HEAP16[$592>>1]|0;
     $594 = $593&65535;
     $595 = (($587) - ($594))|0;
     $596 = $d;
     $597 = $pix;
     $598 = (($597) + ($596<<3)|0);
     $599 = ((($598)) + 2|0);
     $600 = HEAP16[$599>>1]|0;
     $601 = $600&65535;
     $602 = (($595) - ($601))|0;
     $603 = $602 >> 1;
     $605 = $603;
    } else {
     $605 = 65535;
    }
    $604 = (0)>($605|0);
    if ($604) {
     $684 = 0;
    } else {
     $606 = $c;
     $607 = $d;
     $608 = (0 - ($607))|0;
     $609 = $pix;
     $610 = (($609) + ($608<<3)|0);
     $611 = (($610) + ($606<<1)|0);
     $612 = HEAP16[$611>>1]|0;
     $613 = $612&65535;
     $614 = $c;
     $615 = $d;
     $616 = $pix;
     $617 = (($616) + ($615<<3)|0);
     $618 = (($617) + ($614<<1)|0);
     $619 = HEAP16[$618>>1]|0;
     $620 = $619&65535;
     $621 = (($613) + ($620))|0;
     $622 = $pix;
     $623 = ((($622)) + 2|0);
     $624 = HEAP16[$623>>1]|0;
     $625 = $624&65535;
     $626 = $625<<1;
     $627 = (($621) + ($626))|0;
     $628 = $d;
     $629 = (0 - ($628))|0;
     $630 = $pix;
     $631 = (($630) + ($629<<3)|0);
     $632 = ((($631)) + 2|0);
     $633 = HEAP16[$632>>1]|0;
     $634 = $633&65535;
     $635 = (($627) - ($634))|0;
     $636 = $d;
     $637 = $pix;
     $638 = (($637) + ($636<<3)|0);
     $639 = ((($638)) + 2|0);
     $640 = HEAP16[$639>>1]|0;
     $641 = $640&65535;
     $642 = (($635) - ($641))|0;
     $643 = $642 >> 1;
     $644 = ($643|0)<(65535);
     if ($644) {
      $645 = $c;
      $646 = $d;
      $647 = (0 - ($646))|0;
      $648 = $pix;
      $649 = (($648) + ($647<<3)|0);
      $650 = (($649) + ($645<<1)|0);
      $651 = HEAP16[$650>>1]|0;
      $652 = $651&65535;
      $653 = $c;
      $654 = $d;
      $655 = $pix;
      $656 = (($655) + ($654<<3)|0);
      $657 = (($656) + ($653<<1)|0);
      $658 = HEAP16[$657>>1]|0;
      $659 = $658&65535;
      $660 = (($652) + ($659))|0;
      $661 = $pix;
      $662 = ((($661)) + 2|0);
      $663 = HEAP16[$662>>1]|0;
      $664 = $663&65535;
      $665 = $664<<1;
      $666 = (($660) + ($665))|0;
      $667 = $d;
      $668 = (0 - ($667))|0;
      $669 = $pix;
      $670 = (($669) + ($668<<3)|0);
      $671 = ((($670)) + 2|0);
      $672 = HEAP16[$671>>1]|0;
      $673 = $672&65535;
      $674 = (($666) - ($673))|0;
      $675 = $d;
      $676 = $pix;
      $677 = (($676) + ($675<<3)|0);
      $678 = ((($677)) + 2|0);
      $679 = HEAP16[$678>>1]|0;
      $680 = $679&65535;
      $681 = (($674) - ($680))|0;
      $682 = $681 >> 1;
      $684 = $682;
     } else {
      $684 = 65535;
     }
    }
    $683 = $684&65535;
    $685 = $c;
    $686 = $pix;
    $687 = (($686) + ($685<<1)|0);
    HEAP16[$687>>1] = $683;
    $688 = $c;
    $689 = (2 - ($688))|0;
    $c = $689;
    $690 = $i;
    $691 = (($690) + 1)|0;
    $i = $691;
   }
   $692 = $col;
   $693 = (($692) + 2)|0;
   $col = $693;
  }
  $694 = $row;
  $695 = (($694) + 1)|0;
  $row = $695;
 }
 $row = 1;
 while(1) {
  $696 = $row;
  $697 = HEAP16[580074>>1]|0;
  $698 = $697&65535;
  $699 = (($698) - 1)|0;
  $700 = ($696|0)<($699|0);
  if (!($700)) {
   break;
  }
  $701 = HEAP32[776>>2]|0;
  $702 = $row;
  $703 = $702 << 1;
  $704 = $703 & 14;
  $705 = (($704) + 1)|0;
  $706 = $705 << 1;
  $707 = $701 >>> $706;
  $708 = $707 & 3;
  $709 = $708 & 1;
  $710 = (1 + ($709))|0;
  $col = $710;
  $711 = HEAP32[776>>2]|0;
  $712 = $row;
  $713 = $712 << 1;
  $714 = $713 & 14;
  $715 = $col;
  $716 = $715 & 1;
  $717 = (($714) + ($716))|0;
  $718 = $717 << 1;
  $719 = $711 >>> $718;
  $720 = $719 & 3;
  $721 = (2 - ($720))|0;
  $c = $721;
  while(1) {
   $722 = $col;
   $723 = HEAP16[580076>>1]|0;
   $724 = $723&65535;
   $725 = (($724) - 1)|0;
   $726 = ($722|0)<($725|0);
   if (!($726)) {
    break;
   }
   $727 = HEAP32[972>>2]|0;
   $728 = $row;
   $729 = HEAP16[580076>>1]|0;
   $730 = $729&65535;
   $731 = Math_imul($728, $730)|0;
   $732 = (($727) + ($731<<3)|0);
   $733 = $col;
   $734 = (($732) + ($733<<3)|0);
   $pix = $734;
   $i = 0;
   while(1) {
    $735 = $i;
    $736 = (($dir) + ($735<<2)|0);
    $737 = HEAP32[$736>>2]|0;
    $738 = $i;
    $739 = (($738) + 1)|0;
    $740 = (($dir) + ($739<<2)|0);
    $741 = HEAP32[$740>>2]|0;
    $742 = (($737) + ($741))|0;
    $d = $742;
    $743 = ($742|0)>(0);
    if (!($743)) {
     break;
    }
    $744 = $c;
    $745 = $d;
    $746 = (0 - ($745))|0;
    $747 = $pix;
    $748 = (($747) + ($746<<3)|0);
    $749 = (($748) + ($744<<1)|0);
    $750 = HEAP16[$749>>1]|0;
    $751 = $750&65535;
    $752 = $c;
    $753 = $d;
    $754 = $pix;
    $755 = (($754) + ($753<<3)|0);
    $756 = (($755) + ($752<<1)|0);
    $757 = HEAP16[$756>>1]|0;
    $758 = $757&65535;
    $759 = (($751) - ($758))|0;
    $760 = $c;
    $761 = $d;
    $762 = (0 - ($761))|0;
    $763 = $pix;
    $764 = (($763) + ($762<<3)|0);
    $765 = (($764) + ($760<<1)|0);
    $766 = HEAP16[$765>>1]|0;
    $767 = $766&65535;
    $768 = $c;
    $769 = $d;
    $770 = $pix;
    $771 = (($770) + ($769<<3)|0);
    $772 = (($771) + ($768<<1)|0);
    $773 = HEAP16[$772>>1]|0;
    $774 = $773&65535;
    $775 = (($767) - ($774))|0;
    $776 = $775 >> 31;
    $777 = $759 ^ $776;
    $778 = $c;
    $779 = $d;
    $780 = (0 - ($779))|0;
    $781 = $pix;
    $782 = (($781) + ($780<<3)|0);
    $783 = (($782) + ($778<<1)|0);
    $784 = HEAP16[$783>>1]|0;
    $785 = $784&65535;
    $786 = $c;
    $787 = $d;
    $788 = $pix;
    $789 = (($788) + ($787<<3)|0);
    $790 = (($789) + ($786<<1)|0);
    $791 = HEAP16[$790>>1]|0;
    $792 = $791&65535;
    $793 = (($785) - ($792))|0;
    $794 = $793 >> 31;
    $795 = (($777) - ($794))|0;
    $796 = $d;
    $797 = (0 - ($796))|0;
    $798 = $pix;
    $799 = (($798) + ($797<<3)|0);
    $800 = ((($799)) + 2|0);
    $801 = HEAP16[$800>>1]|0;
    $802 = $801&65535;
    $803 = $pix;
    $804 = ((($803)) + 2|0);
    $805 = HEAP16[$804>>1]|0;
    $806 = $805&65535;
    $807 = (($802) - ($806))|0;
    $808 = $d;
    $809 = (0 - ($808))|0;
    $810 = $pix;
    $811 = (($810) + ($809<<3)|0);
    $812 = ((($811)) + 2|0);
    $813 = HEAP16[$812>>1]|0;
    $814 = $813&65535;
    $815 = $pix;
    $816 = ((($815)) + 2|0);
    $817 = HEAP16[$816>>1]|0;
    $818 = $817&65535;
    $819 = (($814) - ($818))|0;
    $820 = $819 >> 31;
    $821 = $807 ^ $820;
    $822 = $d;
    $823 = (0 - ($822))|0;
    $824 = $pix;
    $825 = (($824) + ($823<<3)|0);
    $826 = ((($825)) + 2|0);
    $827 = HEAP16[$826>>1]|0;
    $828 = $827&65535;
    $829 = $pix;
    $830 = ((($829)) + 2|0);
    $831 = HEAP16[$830>>1]|0;
    $832 = $831&65535;
    $833 = (($828) - ($832))|0;
    $834 = $833 >> 31;
    $835 = (($821) - ($834))|0;
    $836 = (($795) + ($835))|0;
    $837 = $d;
    $838 = $pix;
    $839 = (($838) + ($837<<3)|0);
    $840 = ((($839)) + 2|0);
    $841 = HEAP16[$840>>1]|0;
    $842 = $841&65535;
    $843 = $pix;
    $844 = ((($843)) + 2|0);
    $845 = HEAP16[$844>>1]|0;
    $846 = $845&65535;
    $847 = (($842) - ($846))|0;
    $848 = $d;
    $849 = $pix;
    $850 = (($849) + ($848<<3)|0);
    $851 = ((($850)) + 2|0);
    $852 = HEAP16[$851>>1]|0;
    $853 = $852&65535;
    $854 = $pix;
    $855 = ((($854)) + 2|0);
    $856 = HEAP16[$855>>1]|0;
    $857 = $856&65535;
    $858 = (($853) - ($857))|0;
    $859 = $858 >> 31;
    $860 = $847 ^ $859;
    $861 = $d;
    $862 = $pix;
    $863 = (($862) + ($861<<3)|0);
    $864 = ((($863)) + 2|0);
    $865 = HEAP16[$864>>1]|0;
    $866 = $865&65535;
    $867 = $pix;
    $868 = ((($867)) + 2|0);
    $869 = HEAP16[$868>>1]|0;
    $870 = $869&65535;
    $871 = (($866) - ($870))|0;
    $872 = $871 >> 31;
    $873 = (($860) - ($872))|0;
    $874 = (($836) + ($873))|0;
    $875 = $i;
    $876 = (($diff) + ($875<<2)|0);
    HEAP32[$876>>2] = $874;
    $877 = $c;
    $878 = $d;
    $879 = (0 - ($878))|0;
    $880 = $pix;
    $881 = (($880) + ($879<<3)|0);
    $882 = (($881) + ($877<<1)|0);
    $883 = HEAP16[$882>>1]|0;
    $884 = $883&65535;
    $885 = $c;
    $886 = $d;
    $887 = $pix;
    $888 = (($887) + ($886<<3)|0);
    $889 = (($888) + ($885<<1)|0);
    $890 = HEAP16[$889>>1]|0;
    $891 = $890&65535;
    $892 = (($884) + ($891))|0;
    $893 = $pix;
    $894 = ((($893)) + 2|0);
    $895 = HEAP16[$894>>1]|0;
    $896 = $895&65535;
    $897 = $896<<1;
    $898 = (($892) + ($897))|0;
    $899 = $d;
    $900 = (0 - ($899))|0;
    $901 = $pix;
    $902 = (($901) + ($900<<3)|0);
    $903 = ((($902)) + 2|0);
    $904 = HEAP16[$903>>1]|0;
    $905 = $904&65535;
    $906 = (($898) - ($905))|0;
    $907 = $d;
    $908 = $pix;
    $909 = (($908) + ($907<<3)|0);
    $910 = ((($909)) + 2|0);
    $911 = HEAP16[$910>>1]|0;
    $912 = $911&65535;
    $913 = (($906) - ($912))|0;
    $914 = $i;
    $915 = (($guess) + ($914<<2)|0);
    HEAP32[$915>>2] = $913;
    $916 = $i;
    $917 = (($916) + 1)|0;
    $i = $917;
   }
   $918 = HEAP32[$diff>>2]|0;
   $919 = ((($diff)) + 4|0);
   $920 = HEAP32[$919>>2]|0;
   $921 = ($918|0)!=($920|0);
   if ($921) {
    $922 = HEAP32[$diff>>2]|0;
    $923 = ((($diff)) + 4|0);
    $924 = HEAP32[$923>>2]|0;
    $925 = ($922|0)>($924|0);
    $926 = $925&1;
    $927 = (($guess) + ($926<<2)|0);
    $928 = HEAP32[$927>>2]|0;
    $929 = $928 >> 1;
    $930 = ($929|0)<(65535);
    if ($930) {
     $931 = HEAP32[$diff>>2]|0;
     $932 = ((($diff)) + 4|0);
     $933 = HEAP32[$932>>2]|0;
     $934 = ($931|0)>($933|0);
     $935 = $934&1;
     $936 = (($guess) + ($935<<2)|0);
     $937 = HEAP32[$936>>2]|0;
     $938 = $937 >> 1;
     $940 = $938;
    } else {
     $940 = 65535;
    }
    $939 = (0)>($940|0);
    if ($939) {
     $959 = 0;
    } else {
     $941 = HEAP32[$diff>>2]|0;
     $942 = ((($diff)) + 4|0);
     $943 = HEAP32[$942>>2]|0;
     $944 = ($941|0)>($943|0);
     $945 = $944&1;
     $946 = (($guess) + ($945<<2)|0);
     $947 = HEAP32[$946>>2]|0;
     $948 = $947 >> 1;
     $949 = ($948|0)<(65535);
     if ($949) {
      $950 = HEAP32[$diff>>2]|0;
      $951 = ((($diff)) + 4|0);
      $952 = HEAP32[$951>>2]|0;
      $953 = ($950|0)>($952|0);
      $954 = $953&1;
      $955 = (($guess) + ($954<<2)|0);
      $956 = HEAP32[$955>>2]|0;
      $957 = $956 >> 1;
      $959 = $957;
     } else {
      $959 = 65535;
     }
    }
    $958 = $959&65535;
    $960 = $c;
    $961 = $pix;
    $962 = (($961) + ($960<<1)|0);
    HEAP16[$962>>1] = $958;
   } else {
    $963 = HEAP32[$guess>>2]|0;
    $964 = ((($guess)) + 4|0);
    $965 = HEAP32[$964>>2]|0;
    $966 = (($963) + ($965))|0;
    $967 = $966 >> 2;
    $968 = ($967|0)<(65535);
    if ($968) {
     $969 = HEAP32[$guess>>2]|0;
     $970 = ((($guess)) + 4|0);
     $971 = HEAP32[$970>>2]|0;
     $972 = (($969) + ($971))|0;
     $973 = $972 >> 2;
     $975 = $973;
    } else {
     $975 = 65535;
    }
    $974 = (0)>($975|0);
    if ($974) {
     $988 = 0;
    } else {
     $976 = HEAP32[$guess>>2]|0;
     $977 = ((($guess)) + 4|0);
     $978 = HEAP32[$977>>2]|0;
     $979 = (($976) + ($978))|0;
     $980 = $979 >> 2;
     $981 = ($980|0)<(65535);
     if ($981) {
      $982 = HEAP32[$guess>>2]|0;
      $983 = ((($guess)) + 4|0);
      $984 = HEAP32[$983>>2]|0;
      $985 = (($982) + ($984))|0;
      $986 = $985 >> 2;
      $988 = $986;
     } else {
      $988 = 65535;
     }
    }
    $987 = $988&65535;
    $989 = $c;
    $990 = $pix;
    $991 = (($990) + ($989<<1)|0);
    HEAP16[$991>>1] = $987;
   }
   $992 = $col;
   $993 = (($992) + 2)|0;
   $col = $993;
  }
  $994 = $row;
  $995 = (($994) + 1)|0;
  $row = $995;
 }
 STACKTOP = sp;return;
}
function _cielab($rgb,$lab) {
 $rgb = $rgb|0;
 $lab = $lab|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0;
 var $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $c = 0, $i = 0, $j = 0, $k = 0, $r = 0.0, $xyz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xyz = sp;
 $0 = $rgb;
 $1 = $lab;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $66 = ((($xyz)) + 8|0);
  HEAPF32[$66>>2] = 0.5;
  $67 = ((($xyz)) + 4|0);
  HEAPF32[$67>>2] = 0.5;
  HEAPF32[$xyz>>2] = 0.5;
  $c = 0;
  while(1) {
   $68 = $c;
   $69 = HEAP32[980>>2]|0;
   $70 = ($68>>>0)<($69>>>0);
   if (!($70)) {
    break;
   }
   $71 = $c;
   $72 = (293348 + ($71<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $74 = $c;
   $75 = $0;
   $76 = (($75) + ($74<<1)|0);
   $77 = HEAP16[$76>>1]|0;
   $78 = $77&65535;
   $79 = (+($78|0));
   $80 = $73 * $79;
   $81 = +HEAPF32[$xyz>>2];
   $82 = $81 + $80;
   HEAPF32[$xyz>>2] = $82;
   $83 = $c;
   $84 = ((293364) + ($83<<2)|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $c;
   $87 = $0;
   $88 = (($87) + ($86<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89&65535;
   $91 = (+($90|0));
   $92 = $85 * $91;
   $93 = ((($xyz)) + 4|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $94 + $92;
   HEAPF32[$93>>2] = $95;
   $96 = $c;
   $97 = ((293380) + ($96<<2)|0);
   $98 = +HEAPF32[$97>>2];
   $99 = $c;
   $100 = $0;
   $101 = (($100) + ($99<<1)|0);
   $102 = HEAP16[$101>>1]|0;
   $103 = $102&65535;
   $104 = (+($103|0));
   $105 = $98 * $104;
   $106 = ((($xyz)) + 8|0);
   $107 = +HEAPF32[$106>>2];
   $108 = $107 + $105;
   HEAPF32[$106>>2] = $108;
   $109 = $c;
   $110 = (($109) + 1)|0;
   $c = $110;
  }
  $111 = +HEAPF32[$xyz>>2];
  $112 = (~~(($111)));
  $113 = ($112|0)<(65535);
  $114 = +HEAPF32[$xyz>>2];
  $115 = (~~(($114)));
  $116 = $113 ? $115 : 65535;
  $117 = (0)>($116|0);
  if ($117) {
   $125 = 0;
  } else {
   $118 = +HEAPF32[$xyz>>2];
   $119 = (~~(($118)));
   $120 = ($119|0)<(65535);
   $121 = +HEAPF32[$xyz>>2];
   $122 = (~~(($121)));
   $123 = $120 ? $122 : 65535;
   $125 = $123;
  }
  $124 = (31204 + ($125<<2)|0);
  $126 = +HEAPF32[$124>>2];
  HEAPF32[$xyz>>2] = $126;
  $127 = ((($xyz)) + 4|0);
  $128 = +HEAPF32[$127>>2];
  $129 = (~~(($128)));
  $130 = ($129|0)<(65535);
  $131 = ((($xyz)) + 4|0);
  $132 = +HEAPF32[$131>>2];
  $133 = (~~(($132)));
  $134 = $130 ? $133 : 65535;
  $135 = (0)>($134|0);
  if ($135) {
   $145 = 0;
  } else {
   $136 = ((($xyz)) + 4|0);
   $137 = +HEAPF32[$136>>2];
   $138 = (~~(($137)));
   $139 = ($138|0)<(65535);
   $140 = ((($xyz)) + 4|0);
   $141 = +HEAPF32[$140>>2];
   $142 = (~~(($141)));
   $143 = $139 ? $142 : 65535;
   $145 = $143;
  }
  $144 = (31204 + ($145<<2)|0);
  $146 = +HEAPF32[$144>>2];
  $147 = ((($xyz)) + 4|0);
  HEAPF32[$147>>2] = $146;
  $148 = ((($xyz)) + 8|0);
  $149 = +HEAPF32[$148>>2];
  $150 = (~~(($149)));
  $151 = ($150|0)<(65535);
  $152 = ((($xyz)) + 8|0);
  $153 = +HEAPF32[$152>>2];
  $154 = (~~(($153)));
  $155 = $151 ? $154 : 65535;
  $156 = (0)>($155|0);
  if ($156) {
   $166 = 0;
  } else {
   $157 = ((($xyz)) + 8|0);
   $158 = +HEAPF32[$157>>2];
   $159 = (~~(($158)));
   $160 = ($159|0)<(65535);
   $161 = ((($xyz)) + 8|0);
   $162 = +HEAPF32[$161>>2];
   $163 = (~~(($162)));
   $164 = $160 ? $163 : 65535;
   $166 = $164;
  }
  $165 = (31204 + ($166<<2)|0);
  $167 = +HEAPF32[$165>>2];
  $168 = ((($xyz)) + 8|0);
  HEAPF32[$168>>2] = $167;
  $169 = ((($xyz)) + 4|0);
  $170 = +HEAPF32[$169>>2];
  $171 = 116.0 * $170;
  $172 = $171 - 16.0;
  $173 = 64.0 * $172;
  $174 = (~~(($173)));
  $175 = $1;
  HEAP16[$175>>1] = $174;
  $176 = +HEAPF32[$xyz>>2];
  $177 = ((($xyz)) + 4|0);
  $178 = +HEAPF32[$177>>2];
  $179 = $176 - $178;
  $180 = 32000.0 * $179;
  $181 = (~~(($180)));
  $182 = $1;
  $183 = ((($182)) + 2|0);
  HEAP16[$183>>1] = $181;
  $184 = ((($xyz)) + 4|0);
  $185 = +HEAPF32[$184>>2];
  $186 = ((($xyz)) + 8|0);
  $187 = +HEAPF32[$186>>2];
  $188 = $185 - $187;
  $189 = 12800.0 * $188;
  $190 = (~~(($189)));
  $191 = $1;
  $192 = ((($191)) + 4|0);
  HEAP16[$192>>1] = $190;
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(65536);
  if (!($5)) {
   break;
  }
  $6 = $i;
  $7 = (+($6|0));
  $8 = $7 / 65535.0;
  $9 = $8;
  $r = $9;
  $10 = $r;
  $11 = $10;
  $12 = $11 > 0.0088559999999999993;
  $13 = $r;
  $14 = $13;
  if ($12) {
   $15 = (+Math_pow((+$14),0.33333333333333331));
   $19 = $15;
  } else {
   $16 = 7.7869999999999999 * $14;
   $17 = $16 + 0.13793103448275862;
   $19 = $17;
  }
  $18 = $19;
  $20 = $i;
  $21 = (31204 + ($20<<2)|0);
  HEAPF32[$21>>2] = $18;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<(3);
  if (!($25)) {
   break;
  }
  $j = 0;
  while(1) {
   $26 = $j;
   $27 = HEAP32[980>>2]|0;
   $28 = ($26>>>0)<($27>>>0);
   if (!($28)) {
    break;
   }
   $k = 0;
   $29 = $j;
   $30 = $i;
   $31 = (293348 + ($30<<4)|0);
   $32 = (($31) + ($29<<2)|0);
   HEAPF32[$32>>2] = 0.0;
   while(1) {
    $33 = $k;
    $34 = ($33|0)<(3);
    if (!($34)) {
     break;
    }
    $35 = $k;
    $36 = $i;
    $37 = (88 + (($36*24)|0)|0);
    $38 = (($37) + ($35<<3)|0);
    $39 = +HEAPF64[$38>>3];
    $40 = $j;
    $41 = $k;
    $42 = (984 + ($41<<4)|0);
    $43 = (($42) + ($40<<2)|0);
    $44 = +HEAPF32[$43>>2];
    $45 = $44;
    $46 = $39 * $45;
    $47 = $i;
    $48 = (764 + ($47<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = $49;
    $51 = $46 / $50;
    $52 = $j;
    $53 = $i;
    $54 = (293348 + ($53<<4)|0);
    $55 = (($54) + ($52<<2)|0);
    $56 = +HEAPF32[$55>>2];
    $57 = $56;
    $58 = $57 + $51;
    $59 = $58;
    HEAPF32[$55>>2] = $59;
    $60 = $k;
    $61 = (($60) + 1)|0;
    $k = $61;
   }
   $62 = $j;
   $63 = (($62) + 1)|0;
   $j = $63;
  }
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 STACKTOP = sp;return;
}
function _xtrans_interpolate($passes) {
 $passes = $passes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0.0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0.0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0.0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0.0, $2043 = 0, $2044 = 0, $2045 = 0.0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0.0, $2065 = 0.0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0.0, $98 = 0, $980 = 0, $981 = 0, $982 = 0.0, $983 = 0.0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0.0, $997 = 0, $998 = 0, $999 = 0.0, $allhex = 0, $avg = 0, $buffer = 0, $c = 0, $col = 0, $color = 0, $d = 0, $diff = 0, $drv = 0, $f = 0, $g = 0, $h = 0, $hex = 0, $hm = 0;
 var $homo = 0, $i = 0, $lab = 0, $left = 0, $lix = 0, $max = 0, $mcol = 0, $min = 0, $mrow = 0, $ndir = 0, $ng = 0, $or$cond = 0, $pass = 0, $pix = 0, $rgb = 0, $rix = 0, $row = 0, $sgcol = 0, $sgrow = 0, $top = 0;
 var $tr = 0.0, $v = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hm = sp + 184|0;
 $avg = sp + 168|0;
 $color = sp + 72|0;
 $allhex = sp + 296|0;
 $diff = sp + 16|0;
 $0 = $passes;
 $1 = HEAP32[712>>2]|0;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP32[447952>>2]|0;
  $4 = $0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_fprintf($3,612900,$vararg_buffer)|0);
 }
 _cielab(0,0);
 $5 = $0;
 $6 = ($5|0)>(1);
 $7 = $6&1;
 $8 = 4 << $7;
 $ndir = $8;
 $9 = $ndir;
 $10 = ($9*11)|0;
 $11 = (($10) + 6)|0;
 $12 = $11<<18;
 $13 = (_malloc($12)|0);
 $buffer = $13;
 $14 = $buffer;
 _merror($14,612934);
 $15 = $buffer;
 $rgb = $15;
 $16 = $buffer;
 $17 = $ndir;
 $18 = ($17*6)|0;
 $19 = $18<<18;
 $20 = (($16) + ($19)|0);
 $lab = $20;
 $21 = $buffer;
 $22 = $ndir;
 $23 = ($22*6)|0;
 $24 = (($23) + 6)|0;
 $25 = $24<<18;
 $26 = (($21) + ($25)|0);
 $drv = $26;
 $27 = $buffer;
 $28 = $ndir;
 $29 = ($28*10)|0;
 $30 = (($29) + 6)|0;
 $31 = $30<<18;
 $32 = (($27) + ($31)|0);
 $homo = $32;
 $row = 0;
 while(1) {
  $33 = $row;
  $34 = ($33|0)<(3);
  if (!($34)) {
   break;
  }
  $col = 0;
  while(1) {
   $35 = $col;
   $36 = ($35|0)<(3);
   if (!($36)) {
    break;
   }
   $d = 0;
   $ng = 0;
   while(1) {
    $37 = $d;
    $38 = ($37|0)<(10);
    $39 = $col;
    if (!($38)) {
     break;
    }
    $40 = (($39) + 6)|0;
    $41 = (($40|0) % 6)&-1;
    $42 = $row;
    $43 = (($42) + 6)|0;
    $44 = (($43|0) % 6)&-1;
    $45 = (593126 + (($44*6)|0)|0);
    $46 = (($45) + ($41)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47 << 24 >> 24;
    $49 = ($48|0)==(1);
    $50 = $49&1;
    $g = $50;
    $51 = $col;
    $52 = $d;
    $53 = (($52) + 2)|0;
    $54 = (589326 + ($53<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 << 16 >> 16;
    $57 = (($51) + ($56))|0;
    $58 = (($57) + 6)|0;
    $59 = (($58|0) % 6)&-1;
    $60 = $row;
    $61 = $d;
    $62 = (589326 + ($61<<1)|0);
    $63 = HEAP16[$62>>1]|0;
    $64 = $63 << 16 >> 16;
    $65 = (($60) + ($64))|0;
    $66 = (($65) + 6)|0;
    $67 = (($66|0) % 6)&-1;
    $68 = (593126 + (($67*6)|0)|0);
    $69 = (($68) + ($59)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = ($71|0)==(1);
    if ($72) {
     $ng = 0;
    } else {
     $73 = $ng;
     $74 = (($73) + 1)|0;
     $ng = $74;
    }
    $75 = $ng;
    $76 = ($75|0)==(4);
    if ($76) {
     $77 = $row;
     $78 = $77&65535;
     $sgrow = $78;
     $79 = $col;
     $80 = $79&65535;
     $sgcol = $80;
    }
    $81 = $ng;
    $82 = $g;
    $83 = (($82) + 1)|0;
    $84 = ($81|0)==($83|0);
    L20: do {
     if ($84) {
      $c = 0;
      while(1) {
       $85 = $c;
       $86 = ($85|0)<(8);
       if (!($86)) {
        break L20;
       }
       $87 = $d;
       $88 = (589326 + ($87<<1)|0);
       $89 = HEAP16[$88>>1]|0;
       $90 = $89 << 16 >> 16;
       $91 = $c;
       $92 = $91<<1;
       $93 = $g;
       $94 = (589350 + ($93<<5)|0);
       $95 = (($94) + ($92<<1)|0);
       $96 = HEAP16[$95>>1]|0;
       $97 = $96 << 16 >> 16;
       $98 = Math_imul($90, $97)|0;
       $99 = $d;
       $100 = (($99) + 1)|0;
       $101 = (589326 + ($100<<1)|0);
       $102 = HEAP16[$101>>1]|0;
       $103 = $102 << 16 >> 16;
       $104 = $c;
       $105 = $104<<1;
       $106 = (($105) + 1)|0;
       $107 = $g;
       $108 = (589350 + ($107<<5)|0);
       $109 = (($108) + ($106<<1)|0);
       $110 = HEAP16[$109>>1]|0;
       $111 = $110 << 16 >> 16;
       $112 = Math_imul($103, $111)|0;
       $113 = (($98) + ($112))|0;
       $v = $113;
       $114 = $d;
       $115 = (($114) + 2)|0;
       $116 = (589326 + ($115<<1)|0);
       $117 = HEAP16[$116>>1]|0;
       $118 = $117 << 16 >> 16;
       $119 = $c;
       $120 = $119<<1;
       $121 = $g;
       $122 = (589350 + ($121<<5)|0);
       $123 = (($122) + ($120<<1)|0);
       $124 = HEAP16[$123>>1]|0;
       $125 = $124 << 16 >> 16;
       $126 = Math_imul($118, $125)|0;
       $127 = $d;
       $128 = (($127) + 3)|0;
       $129 = (589326 + ($128<<1)|0);
       $130 = HEAP16[$129>>1]|0;
       $131 = $130 << 16 >> 16;
       $132 = $c;
       $133 = $132<<1;
       $134 = (($133) + 1)|0;
       $135 = $g;
       $136 = (589350 + ($135<<5)|0);
       $137 = (($136) + ($134<<1)|0);
       $138 = HEAP16[$137>>1]|0;
       $139 = $138 << 16 >> 16;
       $140 = Math_imul($131, $139)|0;
       $141 = (($126) + ($140))|0;
       $h = $141;
       $142 = $h;
       $143 = $v;
       $144 = HEAP16[580076>>1]|0;
       $145 = $144&65535;
       $146 = Math_imul($143, $145)|0;
       $147 = (($142) + ($146))|0;
       $148 = $147&65535;
       $149 = $c;
       $150 = $g;
       $151 = $150<<1;
       $152 = $d;
       $153 = $151 & $152;
       $154 = $149 ^ $153;
       $155 = $col;
       $156 = $row;
       $157 = (($allhex) + (($156*96)|0)|0);
       $158 = (($157) + ($155<<5)|0);
       $159 = (($158) + ($154<<1)|0);
       HEAP16[$159>>1] = $148;
       $160 = $h;
       $161 = $v;
       $162 = $161<<9;
       $163 = (($160) + ($162))|0;
       $164 = $163&65535;
       $165 = $c;
       $166 = $g;
       $167 = $166<<1;
       $168 = $d;
       $169 = $167 & $168;
       $170 = $165 ^ $169;
       $171 = $col;
       $172 = $row;
       $173 = (($allhex) + (($172*96)|0)|0);
       $174 = (($173) + ($171<<5)|0);
       $175 = ((($174)) + 16|0);
       $176 = (($175) + ($170<<1)|0);
       HEAP16[$176>>1] = $164;
       $177 = $c;
       $178 = (($177) + 1)|0;
       $c = $178;
      }
     }
    } while(0);
    $179 = $d;
    $180 = (($179) + 2)|0;
    $d = $180;
   }
   $181 = (($39) + 1)|0;
   $col = $181;
  }
  $182 = $row;
  $183 = (($182) + 1)|0;
  $row = $183;
 }
 $row = 2;
 while(1) {
  $184 = $row;
  $185 = HEAP16[580074>>1]|0;
  $186 = $185&65535;
  $187 = (($186) - 2)|0;
  $188 = ($184|0)<($187|0);
  if (!($188)) {
   break;
  }
  $max = 0;
  $min = -1;
  $col = 2;
  while(1) {
   $189 = $col;
   $190 = HEAP16[580076>>1]|0;
   $191 = $190&65535;
   $192 = (($191) - 2)|0;
   $193 = ($189|0)<($192|0);
   if (!($193)) {
    break;
   }
   $194 = $col;
   $195 = (($194) + 6)|0;
   $196 = (($195|0) % 6)&-1;
   $197 = $row;
   $198 = (($197) + 6)|0;
   $199 = (($198|0) % 6)&-1;
   $200 = (593126 + (($199*6)|0)|0);
   $201 = (($200) + ($196)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202 << 24 >> 24;
   $204 = ($203|0)==(1);
   L35: do {
    if ($204) {
     $max = 0;
     $min = -1;
    } else {
     $205 = HEAP32[972>>2]|0;
     $206 = $row;
     $207 = HEAP16[580076>>1]|0;
     $208 = $207&65535;
     $209 = Math_imul($206, $208)|0;
     $210 = (($205) + ($209<<3)|0);
     $211 = $col;
     $212 = (($210) + ($211<<3)|0);
     $pix = $212;
     $213 = $col;
     $214 = (($213|0) % 3)&-1;
     $215 = $row;
     $216 = (($215|0) % 3)&-1;
     $217 = (($allhex) + (($216*96)|0)|0);
     $218 = (($217) + ($214<<5)|0);
     $hex = $218;
     $219 = $max;
     $220 = ($219<<16>>16)!=(0);
     L38: do {
      if (!($220)) {
       $c = 0;
       while(1) {
        $221 = $c;
        $222 = ($221|0)<(6);
        if (!($222)) {
         break L38;
        }
        $223 = $c;
        $224 = $hex;
        $225 = (($224) + ($223<<1)|0);
        $226 = HEAP16[$225>>1]|0;
        $227 = $226 << 16 >> 16;
        $228 = $pix;
        $229 = (($228) + ($227<<3)|0);
        $230 = ((($229)) + 2|0);
        $231 = HEAP16[$230>>1]|0;
        $232 = $231&65535;
        $val = $232;
        $233 = $min;
        $234 = $233&65535;
        $235 = $val;
        $236 = ($234|0)>($235|0);
        if ($236) {
         $237 = $val;
         $238 = $237&65535;
         $min = $238;
        }
        $239 = $max;
        $240 = $239&65535;
        $241 = $val;
        $242 = ($240|0)<($241|0);
        if ($242) {
         $243 = $val;
         $244 = $243&65535;
         $max = $244;
        }
        $245 = $c;
        $246 = (($245) + 1)|0;
        $c = $246;
       }
      }
     } while(0);
     $247 = $min;
     $248 = $pix;
     $249 = ((($248)) + 2|0);
     HEAP16[$249>>1] = $247;
     $250 = $max;
     $251 = $pix;
     $252 = ((($251)) + 6|0);
     HEAP16[$252>>1] = $250;
     $253 = $row;
     $254 = $sgrow;
     $255 = $254&65535;
     $256 = (($253) - ($255))|0;
     $257 = (($256|0) % 3)&-1;
     switch ($257|0) {
     case 1:  {
      $258 = $row;
      $259 = HEAP16[580074>>1]|0;
      $260 = $259&65535;
      $261 = (($260) - 3)|0;
      $262 = ($258|0)<($261|0);
      if (!($262)) {
       break L35;
      }
      $263 = $row;
      $264 = (($263) + 1)|0;
      $row = $264;
      $265 = $col;
      $266 = (($265) + -1)|0;
      $col = $266;
      break L35;
      break;
     }
     case 2:  {
      $max = 0;
      $min = -1;
      $267 = $col;
      $268 = (($267) + 2)|0;
      $col = $268;
      $269 = HEAP16[580076>>1]|0;
      $270 = $269&65535;
      $271 = (($270) - 3)|0;
      $272 = ($268|0)<($271|0);
      $273 = $row;
      $274 = ($273|0)>(2);
      $or$cond = $272 & $274;
      if (!($or$cond)) {
       break L35;
      }
      $275 = $row;
      $276 = (($275) + -1)|0;
      $row = $276;
      break L35;
      break;
     }
     default: {
      break L35;
     }
     }
    }
   } while(0);
   $277 = $col;
   $278 = (($277) + 1)|0;
   $col = $278;
  }
  $279 = $row;
  $280 = (($279) + 1)|0;
  $row = $280;
 }
 $top = 3;
 while(1) {
  $281 = $top;
  $282 = HEAP16[580074>>1]|0;
  $283 = $282&65535;
  $284 = (($283) - 19)|0;
  $285 = ($281|0)<($284|0);
  if (!($285)) {
   break;
  }
  $left = 3;
  while(1) {
   $286 = $left;
   $287 = HEAP16[580076>>1]|0;
   $288 = $287&65535;
   $289 = (($288) - 19)|0;
   $290 = ($286|0)<($289|0);
   $291 = $top;
   if (!($290)) {
    break;
   }
   $292 = (($291) + 512)|0;
   $293 = HEAP16[580074>>1]|0;
   $294 = $293&65535;
   $295 = (($294) - 3)|0;
   $296 = ($292|0)<($295|0);
   if ($296) {
    $297 = $top;
    $298 = (($297) + 512)|0;
    $302 = $298;
   } else {
    $299 = HEAP16[580074>>1]|0;
    $300 = $299&65535;
    $301 = (($300) - 3)|0;
    $302 = $301;
   }
   $mrow = $302;
   $303 = $left;
   $304 = (($303) + 512)|0;
   $305 = HEAP16[580076>>1]|0;
   $306 = $305&65535;
   $307 = (($306) - 3)|0;
   $308 = ($304|0)<($307|0);
   if ($308) {
    $309 = $left;
    $310 = (($309) + 512)|0;
    $314 = $310;
   } else {
    $311 = HEAP16[580076>>1]|0;
    $312 = $311&65535;
    $313 = (($312) - 3)|0;
    $314 = $313;
   }
   $mcol = $314;
   $315 = $top;
   $row = $315;
   while(1) {
    $316 = $row;
    $317 = $mrow;
    $318 = ($316|0)<($317|0);
    if (!($318)) {
     break;
    }
    $319 = $left;
    $col = $319;
    while(1) {
     $320 = $col;
     $321 = $mcol;
     $322 = ($320|0)<($321|0);
     if (!($322)) {
      break;
     }
     $323 = $col;
     $324 = $left;
     $325 = (($323) - ($324))|0;
     $326 = $row;
     $327 = $top;
     $328 = (($326) - ($327))|0;
     $329 = $rgb;
     $330 = (($329) + (($328*3072)|0)|0);
     $331 = (($330) + (($325*6)|0)|0);
     $332 = $row;
     $333 = HEAP16[580076>>1]|0;
     $334 = $333&65535;
     $335 = Math_imul($332, $334)|0;
     $336 = $col;
     $337 = (($335) + ($336))|0;
     $338 = HEAP32[972>>2]|0;
     $339 = (($338) + ($337<<3)|0);
     ;HEAP16[$331>>1]=HEAP16[$339>>1]|0;HEAP16[$331+2>>1]=HEAP16[$339+2>>1]|0;HEAP16[$331+4>>1]=HEAP16[$339+4>>1]|0;
     $340 = $col;
     $341 = (($340) + 1)|0;
     $col = $341;
    }
    $342 = $row;
    $343 = (($342) + 1)|0;
    $row = $343;
   }
   $c = 0;
   while(1) {
    $344 = $c;
    $345 = ($344|0)<(3);
    if (!($345)) {
     break;
    }
    $346 = $c;
    $347 = (($346) + 1)|0;
    $348 = $rgb;
    $349 = (($348) + (Math_imul($347, 1572864)|0)|0);
    $350 = $rgb;
    _memcpy(($349|0),($350|0),1572864)|0;
    $351 = $c;
    $352 = (($351) + 1)|0;
    $c = $352;
   }
   $353 = $top;
   $row = $353;
   while(1) {
    $354 = $row;
    $355 = $mrow;
    $356 = ($354|0)<($355|0);
    if (!($356)) {
     break;
    }
    $357 = $left;
    $col = $357;
    while(1) {
     $358 = $col;
     $359 = $mcol;
     $360 = ($358|0)<($359|0);
     if (!($360)) {
      break;
     }
     $361 = $col;
     $362 = (($361) + 6)|0;
     $363 = (($362|0) % 6)&-1;
     $364 = $row;
     $365 = (($364) + 6)|0;
     $366 = (($365|0) % 6)&-1;
     $367 = (593126 + (($366*6)|0)|0);
     $368 = (($367) + ($363)|0);
     $369 = HEAP8[$368>>0]|0;
     $370 = $369 << 24 >> 24;
     $f = $370;
     $371 = ($370|0)==(1);
     L90: do {
      if (!($371)) {
       $372 = HEAP32[972>>2]|0;
       $373 = $row;
       $374 = HEAP16[580076>>1]|0;
       $375 = $374&65535;
       $376 = Math_imul($373, $375)|0;
       $377 = (($372) + ($376<<3)|0);
       $378 = $col;
       $379 = (($377) + ($378<<3)|0);
       $pix = $379;
       $380 = $col;
       $381 = (($380|0) % 3)&-1;
       $382 = $row;
       $383 = (($382|0) % 3)&-1;
       $384 = (($allhex) + (($383*96)|0)|0);
       $385 = (($384) + ($381<<5)|0);
       $hex = $385;
       $386 = $hex;
       $387 = ((($386)) + 2|0);
       $388 = HEAP16[$387>>1]|0;
       $389 = $388 << 16 >> 16;
       $390 = $pix;
       $391 = (($390) + ($389<<3)|0);
       $392 = ((($391)) + 2|0);
       $393 = HEAP16[$392>>1]|0;
       $394 = $393&65535;
       $395 = $hex;
       $396 = HEAP16[$395>>1]|0;
       $397 = $396 << 16 >> 16;
       $398 = $pix;
       $399 = (($398) + ($397<<3)|0);
       $400 = ((($399)) + 2|0);
       $401 = HEAP16[$400>>1]|0;
       $402 = $401&65535;
       $403 = (($394) + ($402))|0;
       $404 = ($403*174)|0;
       $405 = $hex;
       $406 = ((($405)) + 2|0);
       $407 = HEAP16[$406>>1]|0;
       $408 = $407 << 16 >> 16;
       $409 = $408<<1;
       $410 = $pix;
       $411 = (($410) + ($409<<3)|0);
       $412 = ((($411)) + 2|0);
       $413 = HEAP16[$412>>1]|0;
       $414 = $413&65535;
       $415 = $hex;
       $416 = HEAP16[$415>>1]|0;
       $417 = $416 << 16 >> 16;
       $418 = $417<<1;
       $419 = $pix;
       $420 = (($419) + ($418<<3)|0);
       $421 = ((($420)) + 2|0);
       $422 = HEAP16[$421>>1]|0;
       $423 = $422&65535;
       $424 = (($414) + ($423))|0;
       $425 = ($424*46)|0;
       $426 = (($404) - ($425))|0;
       $427 = ((($color)) + 32|0);
       HEAP32[$427>>2] = $426;
       $428 = $hex;
       $429 = ((($428)) + 6|0);
       $430 = HEAP16[$429>>1]|0;
       $431 = $430 << 16 >> 16;
       $432 = $pix;
       $433 = (($432) + ($431<<3)|0);
       $434 = ((($433)) + 2|0);
       $435 = HEAP16[$434>>1]|0;
       $436 = $435&65535;
       $437 = ($436*223)|0;
       $438 = $hex;
       $439 = ((($438)) + 4|0);
       $440 = HEAP16[$439>>1]|0;
       $441 = $440 << 16 >> 16;
       $442 = $pix;
       $443 = (($442) + ($441<<3)|0);
       $444 = ((($443)) + 2|0);
       $445 = HEAP16[$444>>1]|0;
       $446 = $445&65535;
       $447 = ($446*33)|0;
       $448 = (($437) + ($447))|0;
       $449 = $f;
       $450 = $pix;
       $451 = (($450) + ($449<<1)|0);
       $452 = HEAP16[$451>>1]|0;
       $453 = $452&65535;
       $454 = $f;
       $455 = $hex;
       $456 = ((($455)) + 4|0);
       $457 = HEAP16[$456>>1]|0;
       $458 = $457 << 16 >> 16;
       $459 = (0 - ($458))|0;
       $460 = $pix;
       $461 = (($460) + ($459<<3)|0);
       $462 = (($461) + ($454<<1)|0);
       $463 = HEAP16[$462>>1]|0;
       $464 = $463&65535;
       $465 = (($453) - ($464))|0;
       $466 = ($465*92)|0;
       $467 = (($448) + ($466))|0;
       $468 = ((($color)) + 32|0);
       $469 = ((($468)) + 4|0);
       HEAP32[$469>>2] = $467;
       $c = 0;
       while(1) {
        $470 = $c;
        $471 = ($470|0)<(2);
        if (!($471)) {
         break;
        }
        $472 = $c;
        $473 = (4 + ($472))|0;
        $474 = $hex;
        $475 = (($474) + ($473<<1)|0);
        $476 = HEAP16[$475>>1]|0;
        $477 = $476 << 16 >> 16;
        $478 = $pix;
        $479 = (($478) + ($477<<3)|0);
        $480 = ((($479)) + 2|0);
        $481 = HEAP16[$480>>1]|0;
        $482 = $481&65535;
        $483 = ($482*164)|0;
        $484 = $c;
        $485 = (4 + ($484))|0;
        $486 = $hex;
        $487 = (($486) + ($485<<1)|0);
        $488 = HEAP16[$487>>1]|0;
        $489 = $488 << 16 >> 16;
        $490 = Math_imul(-2, $489)|0;
        $491 = $pix;
        $492 = (($491) + ($490<<3)|0);
        $493 = ((($492)) + 2|0);
        $494 = HEAP16[$493>>1]|0;
        $495 = $494&65535;
        $496 = ($495*92)|0;
        $497 = (($483) + ($496))|0;
        $498 = $f;
        $499 = $pix;
        $500 = (($499) + ($498<<1)|0);
        $501 = HEAP16[$500>>1]|0;
        $502 = $501&65535;
        $503 = $502<<1;
        $504 = $f;
        $505 = $c;
        $506 = (4 + ($505))|0;
        $507 = $hex;
        $508 = (($507) + ($506<<1)|0);
        $509 = HEAP16[$508>>1]|0;
        $510 = $509 << 16 >> 16;
        $511 = ($510*3)|0;
        $512 = $pix;
        $513 = (($512) + ($511<<3)|0);
        $514 = (($513) + ($504<<1)|0);
        $515 = HEAP16[$514>>1]|0;
        $516 = $515&65535;
        $517 = (($503) - ($516))|0;
        $518 = $f;
        $519 = $c;
        $520 = (4 + ($519))|0;
        $521 = $hex;
        $522 = (($521) + ($520<<1)|0);
        $523 = HEAP16[$522>>1]|0;
        $524 = $523 << 16 >> 16;
        $525 = Math_imul(-3, $524)|0;
        $526 = $pix;
        $527 = (($526) + ($525<<3)|0);
        $528 = (($527) + ($518<<1)|0);
        $529 = HEAP16[$528>>1]|0;
        $530 = $529&65535;
        $531 = (($517) - ($530))|0;
        $532 = ($531*33)|0;
        $533 = (($497) + ($532))|0;
        $534 = $c;
        $535 = (2 + ($534))|0;
        $536 = ((($color)) + 32|0);
        $537 = (($536) + ($535<<2)|0);
        HEAP32[$537>>2] = $533;
        $538 = $c;
        $539 = (($538) + 1)|0;
        $c = $539;
       }
       $c = 0;
       while(1) {
        $540 = $c;
        $541 = ($540|0)<(4);
        if (!($541)) {
         break L90;
        }
        $542 = $pix;
        $543 = ((($542)) + 2|0);
        $544 = HEAP16[$543>>1]|0;
        $545 = $544&65535;
        $546 = $c;
        $547 = ((($color)) + 32|0);
        $548 = (($547) + ($546<<2)|0);
        $549 = HEAP32[$548>>2]|0;
        $550 = $549 >> 8;
        $551 = $pix;
        $552 = ((($551)) + 6|0);
        $553 = HEAP16[$552>>1]|0;
        $554 = $553&65535;
        $555 = ($550|0)<($554|0);
        if ($555) {
         $556 = $c;
         $557 = ((($color)) + 32|0);
         $558 = (($557) + ($556<<2)|0);
         $559 = HEAP32[$558>>2]|0;
         $560 = $559 >> 8;
         $566 = $560;
        } else {
         $561 = $pix;
         $562 = ((($561)) + 6|0);
         $563 = HEAP16[$562>>1]|0;
         $564 = $563&65535;
         $566 = $564;
        }
        $565 = ($545|0)>($566|0);
        do {
         if ($565) {
          $567 = $pix;
          $568 = ((($567)) + 2|0);
          $569 = HEAP16[$568>>1]|0;
          $570 = $569&65535;
          $591 = $570;
         } else {
          $571 = $c;
          $572 = ((($color)) + 32|0);
          $573 = (($572) + ($571<<2)|0);
          $574 = HEAP32[$573>>2]|0;
          $575 = $574 >> 8;
          $576 = $pix;
          $577 = ((($576)) + 6|0);
          $578 = HEAP16[$577>>1]|0;
          $579 = $578&65535;
          $580 = ($575|0)<($579|0);
          if ($580) {
           $581 = $c;
           $582 = ((($color)) + 32|0);
           $583 = (($582) + ($581<<2)|0);
           $584 = HEAP32[$583>>2]|0;
           $585 = $584 >> 8;
           $591 = $585;
           break;
          } else {
           $586 = $pix;
           $587 = ((($586)) + 6|0);
           $588 = HEAP16[$587>>1]|0;
           $589 = $588&65535;
           $591 = $589;
           break;
          }
         }
        } while(0);
        $590 = $591&65535;
        $592 = $col;
        $593 = $left;
        $594 = (($592) - ($593))|0;
        $595 = $row;
        $596 = $top;
        $597 = (($595) - ($596))|0;
        $598 = $c;
        $599 = $row;
        $600 = $sgrow;
        $601 = $600&65535;
        $602 = (($599) - ($601))|0;
        $603 = (($602|0) % 3)&-1;
        $604 = ($603|0)!=(0);
        $605 = $604 ^ 1;
        $606 = $605&1;
        $607 = $598 ^ $606;
        $608 = $rgb;
        $609 = (($608) + (Math_imul($607, 1572864)|0)|0);
        $610 = (($609) + (($597*3072)|0)|0);
        $611 = (($610) + (($594*6)|0)|0);
        $612 = ((($611)) + 2|0);
        HEAP16[$612>>1] = $590;
        $613 = $c;
        $614 = (($613) + 1)|0;
        $c = $614;
       }
      }
     } while(0);
     $615 = $col;
     $616 = (($615) + 1)|0;
     $col = $616;
    }
    $617 = $row;
    $618 = (($617) + 1)|0;
    $row = $618;
   }
   $pass = 0;
   while(1) {
    $619 = $pass;
    $620 = $0;
    $621 = ($619|0)<($620|0);
    if (!($621)) {
     break;
    }
    $622 = $pass;
    $623 = ($622|0)==(1);
    if ($623) {
     $624 = $rgb;
     $625 = ((($624)) + 6291456|0);
     $rgb = $625;
     $626 = $buffer;
     _memcpy(($625|0),($626|0),6291456)|0;
    }
    $627 = $pass;
    $628 = ($627|0)!=(0);
    L119: do {
     if ($628) {
      $629 = $top;
      $630 = (($629) + 2)|0;
      $row = $630;
      while(1) {
       $631 = $row;
       $632 = $mrow;
       $633 = (($632) - 2)|0;
       $634 = ($631|0)<($633|0);
       if (!($634)) {
        break L119;
       }
       $635 = $left;
       $636 = (($635) + 2)|0;
       $col = $636;
       while(1) {
        $637 = $col;
        $638 = $mcol;
        $639 = (($638) - 2)|0;
        $640 = ($637|0)<($639|0);
        if (!($640)) {
         break;
        }
        $641 = $col;
        $642 = (($641) + 6)|0;
        $643 = (($642|0) % 6)&-1;
        $644 = $row;
        $645 = (($644) + 6)|0;
        $646 = (($645|0) % 6)&-1;
        $647 = (593126 + (($646*6)|0)|0);
        $648 = (($647) + ($643)|0);
        $649 = HEAP8[$648>>0]|0;
        $650 = $649 << 24 >> 24;
        $f = $650;
        $651 = ($650|0)==(1);
        L127: do {
         if (!($651)) {
          $652 = HEAP32[972>>2]|0;
          $653 = $row;
          $654 = HEAP16[580076>>1]|0;
          $655 = $654&65535;
          $656 = Math_imul($653, $655)|0;
          $657 = (($652) + ($656<<3)|0);
          $658 = $col;
          $659 = (($657) + ($658<<3)|0);
          $pix = $659;
          $660 = $col;
          $661 = (($660|0) % 3)&-1;
          $662 = $row;
          $663 = (($662|0) % 3)&-1;
          $664 = (($allhex) + (($663*96)|0)|0);
          $665 = (($664) + ($661<<5)|0);
          $666 = ((($665)) + 16|0);
          $hex = $666;
          $d = 3;
          while(1) {
           $667 = $d;
           $668 = ($667|0)<(6);
           if (!($668)) {
            break L127;
           }
           $669 = $col;
           $670 = $left;
           $671 = (($669) - ($670))|0;
           $672 = $row;
           $673 = $top;
           $674 = (($672) - ($673))|0;
           $675 = $d;
           $676 = (($675) - 2)|0;
           $677 = $row;
           $678 = $sgrow;
           $679 = $678&65535;
           $680 = (($677) - ($679))|0;
           $681 = (($680|0) % 3)&-1;
           $682 = ($681|0)!=(0);
           $683 = $682 ^ 1;
           $684 = $683&1;
           $685 = $676 ^ $684;
           $686 = $rgb;
           $687 = (($686) + (Math_imul($685, 1572864)|0)|0);
           $688 = (($687) + (($674*3072)|0)|0);
           $689 = (($688) + (($671*6)|0)|0);
           $rix = $689;
           $690 = $d;
           $691 = $hex;
           $692 = (($691) + ($690<<1)|0);
           $693 = HEAP16[$692>>1]|0;
           $694 = $693 << 16 >> 16;
           $695 = Math_imul(-2, $694)|0;
           $696 = $rix;
           $697 = (($696) + (($695*6)|0)|0);
           $698 = ((($697)) + 2|0);
           $699 = HEAP16[$698>>1]|0;
           $700 = $699&65535;
           $701 = $d;
           $702 = $hex;
           $703 = (($702) + ($701<<1)|0);
           $704 = HEAP16[$703>>1]|0;
           $705 = $704 << 16 >> 16;
           $706 = $rix;
           $707 = (($706) + (($705*6)|0)|0);
           $708 = ((($707)) + 2|0);
           $709 = HEAP16[$708>>1]|0;
           $710 = $709&65535;
           $711 = $710<<1;
           $712 = (($700) + ($711))|0;
           $713 = $f;
           $714 = $d;
           $715 = $hex;
           $716 = (($715) + ($714<<1)|0);
           $717 = HEAP16[$716>>1]|0;
           $718 = $717 << 16 >> 16;
           $719 = Math_imul(-2, $718)|0;
           $720 = $rix;
           $721 = (($720) + (($719*6)|0)|0);
           $722 = (($721) + ($713<<1)|0);
           $723 = HEAP16[$722>>1]|0;
           $724 = $723&65535;
           $725 = (($712) - ($724))|0;
           $726 = $f;
           $727 = $d;
           $728 = $hex;
           $729 = (($728) + ($727<<1)|0);
           $730 = HEAP16[$729>>1]|0;
           $731 = $730 << 16 >> 16;
           $732 = $rix;
           $733 = (($732) + (($731*6)|0)|0);
           $734 = (($733) + ($726<<1)|0);
           $735 = HEAP16[$734>>1]|0;
           $736 = $735&65535;
           $737 = $736<<1;
           $738 = (($725) - ($737))|0;
           $739 = $f;
           $740 = $rix;
           $741 = (($740) + ($739<<1)|0);
           $742 = HEAP16[$741>>1]|0;
           $743 = $742&65535;
           $744 = ($743*3)|0;
           $745 = (($738) + ($744))|0;
           $val = $745;
           $746 = $pix;
           $747 = ((($746)) + 2|0);
           $748 = HEAP16[$747>>1]|0;
           $749 = $748&65535;
           $750 = $val;
           $751 = (($750|0) / 3)&-1;
           $752 = $pix;
           $753 = ((($752)) + 6|0);
           $754 = HEAP16[$753>>1]|0;
           $755 = $754&65535;
           $756 = ($751|0)<($755|0);
           if ($756) {
            $757 = $val;
            $758 = (($757|0) / 3)&-1;
            $764 = $758;
           } else {
            $759 = $pix;
            $760 = ((($759)) + 6|0);
            $761 = HEAP16[$760>>1]|0;
            $762 = $761&65535;
            $764 = $762;
           }
           $763 = ($749|0)>($764|0);
           do {
            if ($763) {
             $765 = $pix;
             $766 = ((($765)) + 2|0);
             $767 = HEAP16[$766>>1]|0;
             $768 = $767&65535;
             $783 = $768;
            } else {
             $769 = $val;
             $770 = (($769|0) / 3)&-1;
             $771 = $pix;
             $772 = ((($771)) + 6|0);
             $773 = HEAP16[$772>>1]|0;
             $774 = $773&65535;
             $775 = ($770|0)<($774|0);
             if ($775) {
              $776 = $val;
              $777 = (($776|0) / 3)&-1;
              $783 = $777;
              break;
             } else {
              $778 = $pix;
              $779 = ((($778)) + 6|0);
              $780 = HEAP16[$779>>1]|0;
              $781 = $780&65535;
              $783 = $781;
              break;
             }
            }
           } while(0);
           $782 = $783&65535;
           $784 = $rix;
           $785 = ((($784)) + 2|0);
           HEAP16[$785>>1] = $782;
           $786 = $d;
           $787 = (($786) + 1)|0;
           $d = $787;
          }
         }
        } while(0);
        $788 = $col;
        $789 = (($788) + 1)|0;
        $col = $789;
       }
       $790 = $row;
       $791 = (($790) + 1)|0;
       $row = $791;
      }
     }
    } while(0);
    $792 = $top;
    $793 = $sgrow;
    $794 = $793&65535;
    $795 = (($792) - ($794))|0;
    $796 = (($795) + 4)|0;
    $797 = (($796|0) / 3)&-1;
    $798 = ($797*3)|0;
    $799 = $sgrow;
    $800 = $799&65535;
    $801 = (($798) + ($800))|0;
    $row = $801;
    while(1) {
     $802 = $row;
     $803 = $mrow;
     $804 = (($803) - 2)|0;
     $805 = ($802|0)<($804|0);
     if (!($805)) {
      break;
     }
     $806 = $left;
     $807 = $sgcol;
     $808 = $807&65535;
     $809 = (($806) - ($808))|0;
     $810 = (($809) + 4)|0;
     $811 = (($810|0) / 3)&-1;
     $812 = ($811*3)|0;
     $813 = $sgcol;
     $814 = $813&65535;
     $815 = (($812) + ($814))|0;
     $col = $815;
     while(1) {
      $816 = $col;
      $817 = $mcol;
      $818 = (($817) - 2)|0;
      $819 = ($816|0)<($818|0);
      if (!($819)) {
       break;
      }
      $820 = $col;
      $821 = $left;
      $822 = (($820) - ($821))|0;
      $823 = $row;
      $824 = $top;
      $825 = (($823) - ($824))|0;
      $826 = $rgb;
      $827 = (($826) + (($825*3072)|0)|0);
      $828 = (($827) + (($822*6)|0)|0);
      $rix = $828;
      $829 = $col;
      $830 = (($829) + 1)|0;
      $831 = (($830) + 6)|0;
      $832 = (($831|0) % 6)&-1;
      $833 = $row;
      $834 = (($833) + 6)|0;
      $835 = (($834|0) % 6)&-1;
      $836 = (593126 + (($835*6)|0)|0);
      $837 = (($836) + ($832)|0);
      $838 = HEAP8[$837>>0]|0;
      $839 = $838 << 24 >> 24;
      $h = $839;
      ;HEAP32[$diff>>2]=0|0;HEAP32[$diff+4>>2]=0|0;HEAP32[$diff+8>>2]=0|0;HEAP32[$diff+12>>2]=0|0;HEAP32[$diff+16>>2]=0|0;HEAP32[$diff+20>>2]=0|0;
      $i = 1;
      $d = 0;
      while(1) {
       $840 = $d;
       $841 = ($840|0)<(6);
       if (!($841)) {
        break;
       }
       $c = 0;
       while(1) {
        $842 = $c;
        $843 = ($842|0)<(2);
        if (!($843)) {
         break;
        }
        $844 = $rix;
        $845 = ((($844)) + 2|0);
        $846 = HEAP16[$845>>1]|0;
        $847 = $846&65535;
        $848 = $847<<1;
        $849 = $i;
        $850 = $c;
        $851 = $849 << $850;
        $852 = $rix;
        $853 = (($852) + (($851*6)|0)|0);
        $854 = ((($853)) + 2|0);
        $855 = HEAP16[$854>>1]|0;
        $856 = $855&65535;
        $857 = (($848) - ($856))|0;
        $858 = $i;
        $859 = (0 - ($858))|0;
        $860 = $c;
        $861 = $859 << $860;
        $862 = $rix;
        $863 = (($862) + (($861*6)|0)|0);
        $864 = ((($863)) + 2|0);
        $865 = HEAP16[$864>>1]|0;
        $866 = $865&65535;
        $867 = (($857) - ($866))|0;
        $g = $867;
        $868 = $g;
        $869 = $h;
        $870 = $i;
        $871 = $c;
        $872 = $870 << $871;
        $873 = $rix;
        $874 = (($873) + (($872*6)|0)|0);
        $875 = (($874) + ($869<<1)|0);
        $876 = HEAP16[$875>>1]|0;
        $877 = $876&65535;
        $878 = (($868) + ($877))|0;
        $879 = $h;
        $880 = $i;
        $881 = (0 - ($880))|0;
        $882 = $c;
        $883 = $881 << $882;
        $884 = $rix;
        $885 = (($884) + (($883*6)|0)|0);
        $886 = (($885) + ($879<<1)|0);
        $887 = HEAP16[$886>>1]|0;
        $888 = $887&65535;
        $889 = (($878) + ($888))|0;
        $890 = $d;
        $891 = $h;
        $892 = (($color) + ($891<<5)|0);
        $893 = (($892) + ($890<<2)|0);
        HEAP32[$893>>2] = $889;
        $894 = $d;
        $895 = ($894|0)>(1);
        if ($895) {
         $896 = $i;
         $897 = $c;
         $898 = $896 << $897;
         $899 = $rix;
         $900 = (($899) + (($898*6)|0)|0);
         $901 = ((($900)) + 2|0);
         $902 = HEAP16[$901>>1]|0;
         $903 = $902&65535;
         $904 = $i;
         $905 = (0 - ($904))|0;
         $906 = $c;
         $907 = $905 << $906;
         $908 = $rix;
         $909 = (($908) + (($907*6)|0)|0);
         $910 = ((($909)) + 2|0);
         $911 = HEAP16[$910>>1]|0;
         $912 = $911&65535;
         $913 = (($903) - ($912))|0;
         $914 = $h;
         $915 = $i;
         $916 = $c;
         $917 = $915 << $916;
         $918 = $rix;
         $919 = (($918) + (($917*6)|0)|0);
         $920 = (($919) + ($914<<1)|0);
         $921 = HEAP16[$920>>1]|0;
         $922 = $921&65535;
         $923 = (($913) - ($922))|0;
         $924 = $h;
         $925 = $i;
         $926 = (0 - ($925))|0;
         $927 = $c;
         $928 = $926 << $927;
         $929 = $rix;
         $930 = (($929) + (($928*6)|0)|0);
         $931 = (($930) + ($924<<1)|0);
         $932 = HEAP16[$931>>1]|0;
         $933 = $932&65535;
         $934 = (($923) + ($933))|0;
         $935 = $i;
         $936 = $c;
         $937 = $935 << $936;
         $938 = $rix;
         $939 = (($938) + (($937*6)|0)|0);
         $940 = ((($939)) + 2|0);
         $941 = HEAP16[$940>>1]|0;
         $942 = $941&65535;
         $943 = $i;
         $944 = (0 - ($943))|0;
         $945 = $c;
         $946 = $944 << $945;
         $947 = $rix;
         $948 = (($947) + (($946*6)|0)|0);
         $949 = ((($948)) + 2|0);
         $950 = HEAP16[$949>>1]|0;
         $951 = $950&65535;
         $952 = (($942) - ($951))|0;
         $953 = $h;
         $954 = $i;
         $955 = $c;
         $956 = $954 << $955;
         $957 = $rix;
         $958 = (($957) + (($956*6)|0)|0);
         $959 = (($958) + ($953<<1)|0);
         $960 = HEAP16[$959>>1]|0;
         $961 = $960&65535;
         $962 = (($952) - ($961))|0;
         $963 = $h;
         $964 = $i;
         $965 = (0 - ($964))|0;
         $966 = $c;
         $967 = $965 << $966;
         $968 = $rix;
         $969 = (($968) + (($967*6)|0)|0);
         $970 = (($969) + ($963<<1)|0);
         $971 = HEAP16[$970>>1]|0;
         $972 = $971&65535;
         $973 = (($962) + ($972))|0;
         $974 = Math_imul($934, $973)|0;
         $975 = $g;
         $976 = $g;
         $977 = Math_imul($975, $976)|0;
         $978 = (($974) + ($977))|0;
         $979 = (+($978|0));
         $980 = $d;
         $981 = (($diff) + ($980<<2)|0);
         $982 = +HEAPF32[$981>>2];
         $983 = $982 + $979;
         HEAPF32[$981>>2] = $983;
        }
        $984 = $c;
        $985 = (($984) + 1)|0;
        $c = $985;
        $986 = $h;
        $987 = $986 ^ 2;
        $h = $987;
       }
       $988 = $d;
       $989 = ($988|0)>(1);
       L162: do {
        if ($989) {
         $990 = $d;
         $991 = $990 & 1;
         $992 = ($991|0)!=(0);
         if ($992) {
          $993 = $d;
          $994 = (($993) - 1)|0;
          $995 = (($diff) + ($994<<2)|0);
          $996 = +HEAPF32[$995>>2];
          $997 = $d;
          $998 = (($diff) + ($997<<2)|0);
          $999 = +HEAPF32[$998>>2];
          $1000 = $996 < $999;
          if (!($1000)) {
           break;
          }
          $c = 0;
          while(1) {
           $1001 = $c;
           $1002 = ($1001|0)<(2);
           if (!($1002)) {
            break L162;
           }
           $1003 = $d;
           $1004 = (($1003) - 1)|0;
           $1005 = $c;
           $1006 = $1005<<1;
           $1007 = (($color) + ($1006<<5)|0);
           $1008 = (($1007) + ($1004<<2)|0);
           $1009 = HEAP32[$1008>>2]|0;
           $1010 = $d;
           $1011 = $c;
           $1012 = $1011<<1;
           $1013 = (($color) + ($1012<<5)|0);
           $1014 = (($1013) + ($1010<<2)|0);
           HEAP32[$1014>>2] = $1009;
           $1015 = $c;
           $1016 = (($1015) + 1)|0;
           $c = $1016;
          }
         }
        }
       } while(0);
       $1017 = $d;
       $1018 = ($1017|0)<(2);
       if ($1018) {
        label = 124;
       } else {
        $1019 = $d;
        $1020 = $1019 & 1;
        $1021 = ($1020|0)!=(0);
        if ($1021) {
         label = 124;
        }
       }
       if ((label|0) == 124) {
        label = 0;
        $c = 0;
        while(1) {
         $1022 = $c;
         $1023 = ($1022|0)<(2);
         if (!($1023)) {
          break;
         }
         $1024 = $d;
         $1025 = $c;
         $1026 = $1025<<1;
         $1027 = (($color) + ($1026<<5)|0);
         $1028 = (($1027) + ($1024<<2)|0);
         $1029 = HEAP32[$1028>>2]|0;
         $1030 = (($1029|0) / 2)&-1;
         $1031 = ($1030|0)<(65535);
         if ($1031) {
          $1032 = $d;
          $1033 = $c;
          $1034 = $1033<<1;
          $1035 = (($color) + ($1034<<5)|0);
          $1036 = (($1035) + ($1032<<2)|0);
          $1037 = HEAP32[$1036>>2]|0;
          $1038 = (($1037|0) / 2)&-1;
          $1040 = $1038;
         } else {
          $1040 = 65535;
         }
         $1039 = (0)>($1040|0);
         do {
          if ($1039) {
           $1057 = 0;
          } else {
           $1041 = $d;
           $1042 = $c;
           $1043 = $1042<<1;
           $1044 = (($color) + ($1043<<5)|0);
           $1045 = (($1044) + ($1041<<2)|0);
           $1046 = HEAP32[$1045>>2]|0;
           $1047 = (($1046|0) / 2)&-1;
           $1048 = ($1047|0)<(65535);
           if (!($1048)) {
            $1057 = 65535;
            break;
           }
           $1049 = $d;
           $1050 = $c;
           $1051 = $1050<<1;
           $1052 = (($color) + ($1051<<5)|0);
           $1053 = (($1052) + ($1049<<2)|0);
           $1054 = HEAP32[$1053>>2]|0;
           $1055 = (($1054|0) / 2)&-1;
           $1057 = $1055;
          }
         } while(0);
         $1056 = $1057&65535;
         $1058 = $c;
         $1059 = $1058<<1;
         $1060 = $rix;
         $1061 = (($1060) + ($1059<<1)|0);
         HEAP16[$1061>>1] = $1056;
         $1062 = $c;
         $1063 = (($1062) + 1)|0;
         $c = $1063;
        }
        $1064 = $rix;
        $1065 = ((($1064)) + 1572864|0);
        $rix = $1065;
       }
       $1066 = $d;
       $1067 = (($1066) + 1)|0;
       $d = $1067;
       $1068 = $i;
       $1069 = $1068 ^ 513;
       $i = $1069;
       $1070 = $h;
       $1071 = $1070 ^ 2;
       $h = $1071;
      }
      $1072 = $col;
      $1073 = (($1072) + 3)|0;
      $col = $1073;
     }
     $1074 = $row;
     $1075 = (($1074) + 3)|0;
     $row = $1075;
    }
    $1076 = $top;
    $1077 = (($1076) + 3)|0;
    $row = $1077;
    while(1) {
     $1078 = $row;
     $1079 = $mrow;
     $1080 = (($1079) - 3)|0;
     $1081 = ($1078|0)<($1080|0);
     if (!($1081)) {
      break;
     }
     $1082 = $left;
     $1083 = (($1082) + 3)|0;
     $col = $1083;
     while(1) {
      $1084 = $col;
      $1085 = $mcol;
      $1086 = (($1085) - 3)|0;
      $1087 = ($1084|0)<($1086|0);
      if (!($1087)) {
       break;
      }
      $1088 = $col;
      $1089 = (($1088) + 6)|0;
      $1090 = (($1089|0) % 6)&-1;
      $1091 = $row;
      $1092 = (($1091) + 6)|0;
      $1093 = (($1092|0) % 6)&-1;
      $1094 = (593126 + (($1093*6)|0)|0);
      $1095 = (($1094) + ($1090)|0);
      $1096 = HEAP8[$1095>>0]|0;
      $1097 = $1096 << 24 >> 24;
      $1098 = (2 - ($1097))|0;
      $f = $1098;
      $1099 = ($1098|0)==(1);
      L195: do {
       if (!($1099)) {
        $1100 = $col;
        $1101 = $left;
        $1102 = (($1100) - ($1101))|0;
        $1103 = $row;
        $1104 = $top;
        $1105 = (($1103) - ($1104))|0;
        $1106 = $rgb;
        $1107 = (($1106) + (($1105*3072)|0)|0);
        $1108 = (($1107) + (($1102*6)|0)|0);
        $rix = $1108;
        $1109 = $row;
        $1110 = $sgrow;
        $1111 = $1110&65535;
        $1112 = (($1109) - ($1111))|0;
        $1113 = (($1112|0) % 3)&-1;
        $1114 = ($1113|0)!=(0);
        $1115 = $1114 ? 512 : 1;
        $c = $1115;
        $1116 = $c;
        $1117 = $1116 ^ 512;
        $1118 = $1117 ^ 1;
        $1119 = ($1118*3)|0;
        $h = $1119;
        $d = 0;
        while(1) {
         $1120 = $d;
         $1121 = ($1120|0)<(4);
         if (!($1121)) {
          break L195;
         }
         $1122 = $d;
         $1123 = ($1122|0)>(1);
         do {
          if ($1123) {
           label = 146;
          } else {
           $1124 = $d;
           $1125 = $c;
           $1126 = $1124 ^ $1125;
           $1127 = $1126 & 1;
           $1128 = ($1127|0)!=(0);
           if ($1128) {
            label = 146;
            break;
           }
           $1129 = $rix;
           $1130 = ((($1129)) + 2|0);
           $1131 = HEAP16[$1130>>1]|0;
           $1132 = $1131&65535;
           $1133 = $c;
           $1134 = $rix;
           $1135 = (($1134) + (($1133*6)|0)|0);
           $1136 = ((($1135)) + 2|0);
           $1137 = HEAP16[$1136>>1]|0;
           $1138 = $1137&65535;
           $1139 = (($1132) - ($1138))|0;
           $1140 = $rix;
           $1141 = ((($1140)) + 2|0);
           $1142 = HEAP16[$1141>>1]|0;
           $1143 = $1142&65535;
           $1144 = $c;
           $1145 = $rix;
           $1146 = (($1145) + (($1144*6)|0)|0);
           $1147 = ((($1146)) + 2|0);
           $1148 = HEAP16[$1147>>1]|0;
           $1149 = $1148&65535;
           $1150 = (($1143) - ($1149))|0;
           $1151 = $1150 >> 31;
           $1152 = $1139 ^ $1151;
           $1153 = $rix;
           $1154 = ((($1153)) + 2|0);
           $1155 = HEAP16[$1154>>1]|0;
           $1156 = $1155&65535;
           $1157 = $c;
           $1158 = $rix;
           $1159 = (($1158) + (($1157*6)|0)|0);
           $1160 = ((($1159)) + 2|0);
           $1161 = HEAP16[$1160>>1]|0;
           $1162 = $1161&65535;
           $1163 = (($1156) - ($1162))|0;
           $1164 = $1163 >> 31;
           $1165 = (($1152) - ($1164))|0;
           $1166 = $rix;
           $1167 = ((($1166)) + 2|0);
           $1168 = HEAP16[$1167>>1]|0;
           $1169 = $1168&65535;
           $1170 = $c;
           $1171 = (0 - ($1170))|0;
           $1172 = $rix;
           $1173 = (($1172) + (($1171*6)|0)|0);
           $1174 = ((($1173)) + 2|0);
           $1175 = HEAP16[$1174>>1]|0;
           $1176 = $1175&65535;
           $1177 = (($1169) - ($1176))|0;
           $1178 = $rix;
           $1179 = ((($1178)) + 2|0);
           $1180 = HEAP16[$1179>>1]|0;
           $1181 = $1180&65535;
           $1182 = $c;
           $1183 = (0 - ($1182))|0;
           $1184 = $rix;
           $1185 = (($1184) + (($1183*6)|0)|0);
           $1186 = ((($1185)) + 2|0);
           $1187 = HEAP16[$1186>>1]|0;
           $1188 = $1187&65535;
           $1189 = (($1181) - ($1188))|0;
           $1190 = $1189 >> 31;
           $1191 = $1177 ^ $1190;
           $1192 = $rix;
           $1193 = ((($1192)) + 2|0);
           $1194 = HEAP16[$1193>>1]|0;
           $1195 = $1194&65535;
           $1196 = $c;
           $1197 = (0 - ($1196))|0;
           $1198 = $rix;
           $1199 = (($1198) + (($1197*6)|0)|0);
           $1200 = ((($1199)) + 2|0);
           $1201 = HEAP16[$1200>>1]|0;
           $1202 = $1201&65535;
           $1203 = (($1195) - ($1202))|0;
           $1204 = $1203 >> 31;
           $1205 = (($1191) - ($1204))|0;
           $1206 = (($1165) + ($1205))|0;
           $1207 = $rix;
           $1208 = ((($1207)) + 2|0);
           $1209 = HEAP16[$1208>>1]|0;
           $1210 = $1209&65535;
           $1211 = $h;
           $1212 = $rix;
           $1213 = (($1212) + (($1211*6)|0)|0);
           $1214 = ((($1213)) + 2|0);
           $1215 = HEAP16[$1214>>1]|0;
           $1216 = $1215&65535;
           $1217 = (($1210) - ($1216))|0;
           $1218 = $rix;
           $1219 = ((($1218)) + 2|0);
           $1220 = HEAP16[$1219>>1]|0;
           $1221 = $1220&65535;
           $1222 = $h;
           $1223 = $rix;
           $1224 = (($1223) + (($1222*6)|0)|0);
           $1225 = ((($1224)) + 2|0);
           $1226 = HEAP16[$1225>>1]|0;
           $1227 = $1226&65535;
           $1228 = (($1221) - ($1227))|0;
           $1229 = $1228 >> 31;
           $1230 = $1217 ^ $1229;
           $1231 = $rix;
           $1232 = ((($1231)) + 2|0);
           $1233 = HEAP16[$1232>>1]|0;
           $1234 = $1233&65535;
           $1235 = $h;
           $1236 = $rix;
           $1237 = (($1236) + (($1235*6)|0)|0);
           $1238 = ((($1237)) + 2|0);
           $1239 = HEAP16[$1238>>1]|0;
           $1240 = $1239&65535;
           $1241 = (($1234) - ($1240))|0;
           $1242 = $1241 >> 31;
           $1243 = (($1230) - ($1242))|0;
           $1244 = $rix;
           $1245 = ((($1244)) + 2|0);
           $1246 = HEAP16[$1245>>1]|0;
           $1247 = $1246&65535;
           $1248 = $h;
           $1249 = (0 - ($1248))|0;
           $1250 = $rix;
           $1251 = (($1250) + (($1249*6)|0)|0);
           $1252 = ((($1251)) + 2|0);
           $1253 = HEAP16[$1252>>1]|0;
           $1254 = $1253&65535;
           $1255 = (($1247) - ($1254))|0;
           $1256 = $rix;
           $1257 = ((($1256)) + 2|0);
           $1258 = HEAP16[$1257>>1]|0;
           $1259 = $1258&65535;
           $1260 = $h;
           $1261 = (0 - ($1260))|0;
           $1262 = $rix;
           $1263 = (($1262) + (($1261*6)|0)|0);
           $1264 = ((($1263)) + 2|0);
           $1265 = HEAP16[$1264>>1]|0;
           $1266 = $1265&65535;
           $1267 = (($1259) - ($1266))|0;
           $1268 = $1267 >> 31;
           $1269 = $1255 ^ $1268;
           $1270 = $rix;
           $1271 = ((($1270)) + 2|0);
           $1272 = HEAP16[$1271>>1]|0;
           $1273 = $1272&65535;
           $1274 = $h;
           $1275 = (0 - ($1274))|0;
           $1276 = $rix;
           $1277 = (($1276) + (($1275*6)|0)|0);
           $1278 = ((($1277)) + 2|0);
           $1279 = HEAP16[$1278>>1]|0;
           $1280 = $1279&65535;
           $1281 = (($1273) - ($1280))|0;
           $1282 = $1281 >> 31;
           $1283 = (($1269) - ($1282))|0;
           $1284 = (($1243) + ($1283))|0;
           $1285 = $1284<<1;
           $1286 = ($1206|0)<($1285|0);
           if ($1286) {
            label = 146;
            break;
           }
           $1288 = $h;
           $1289 = $1288;
          }
         } while(0);
         if ((label|0) == 146) {
          label = 0;
          $1287 = $c;
          $1289 = $1287;
         }
         $i = $1289;
         $1290 = $f;
         $1291 = $i;
         $1292 = $rix;
         $1293 = (($1292) + (($1291*6)|0)|0);
         $1294 = (($1293) + ($1290<<1)|0);
         $1295 = HEAP16[$1294>>1]|0;
         $1296 = $1295&65535;
         $1297 = $f;
         $1298 = $i;
         $1299 = (0 - ($1298))|0;
         $1300 = $rix;
         $1301 = (($1300) + (($1299*6)|0)|0);
         $1302 = (($1301) + ($1297<<1)|0);
         $1303 = HEAP16[$1302>>1]|0;
         $1304 = $1303&65535;
         $1305 = (($1296) + ($1304))|0;
         $1306 = $rix;
         $1307 = ((($1306)) + 2|0);
         $1308 = HEAP16[$1307>>1]|0;
         $1309 = $1308&65535;
         $1310 = $1309<<1;
         $1311 = (($1305) + ($1310))|0;
         $1312 = $i;
         $1313 = $rix;
         $1314 = (($1313) + (($1312*6)|0)|0);
         $1315 = ((($1314)) + 2|0);
         $1316 = HEAP16[$1315>>1]|0;
         $1317 = $1316&65535;
         $1318 = (($1311) - ($1317))|0;
         $1319 = $i;
         $1320 = (0 - ($1319))|0;
         $1321 = $rix;
         $1322 = (($1321) + (($1320*6)|0)|0);
         $1323 = ((($1322)) + 2|0);
         $1324 = HEAP16[$1323>>1]|0;
         $1325 = $1324&65535;
         $1326 = (($1318) - ($1325))|0;
         $1327 = (($1326|0) / 2)&-1;
         $1328 = ($1327|0)<(65535);
         if ($1328) {
          $1329 = $f;
          $1330 = $i;
          $1331 = $rix;
          $1332 = (($1331) + (($1330*6)|0)|0);
          $1333 = (($1332) + ($1329<<1)|0);
          $1334 = HEAP16[$1333>>1]|0;
          $1335 = $1334&65535;
          $1336 = $f;
          $1337 = $i;
          $1338 = (0 - ($1337))|0;
          $1339 = $rix;
          $1340 = (($1339) + (($1338*6)|0)|0);
          $1341 = (($1340) + ($1336<<1)|0);
          $1342 = HEAP16[$1341>>1]|0;
          $1343 = $1342&65535;
          $1344 = (($1335) + ($1343))|0;
          $1345 = $rix;
          $1346 = ((($1345)) + 2|0);
          $1347 = HEAP16[$1346>>1]|0;
          $1348 = $1347&65535;
          $1349 = $1348<<1;
          $1350 = (($1344) + ($1349))|0;
          $1351 = $i;
          $1352 = $rix;
          $1353 = (($1352) + (($1351*6)|0)|0);
          $1354 = ((($1353)) + 2|0);
          $1355 = HEAP16[$1354>>1]|0;
          $1356 = $1355&65535;
          $1357 = (($1350) - ($1356))|0;
          $1358 = $i;
          $1359 = (0 - ($1358))|0;
          $1360 = $rix;
          $1361 = (($1360) + (($1359*6)|0)|0);
          $1362 = ((($1361)) + 2|0);
          $1363 = HEAP16[$1362>>1]|0;
          $1364 = $1363&65535;
          $1365 = (($1357) - ($1364))|0;
          $1366 = (($1365|0) / 2)&-1;
          $1368 = $1366;
         } else {
          $1368 = 65535;
         }
         $1367 = (0)>($1368|0);
         do {
          if ($1367) {
           $1447 = 0;
          } else {
           $1369 = $f;
           $1370 = $i;
           $1371 = $rix;
           $1372 = (($1371) + (($1370*6)|0)|0);
           $1373 = (($1372) + ($1369<<1)|0);
           $1374 = HEAP16[$1373>>1]|0;
           $1375 = $1374&65535;
           $1376 = $f;
           $1377 = $i;
           $1378 = (0 - ($1377))|0;
           $1379 = $rix;
           $1380 = (($1379) + (($1378*6)|0)|0);
           $1381 = (($1380) + ($1376<<1)|0);
           $1382 = HEAP16[$1381>>1]|0;
           $1383 = $1382&65535;
           $1384 = (($1375) + ($1383))|0;
           $1385 = $rix;
           $1386 = ((($1385)) + 2|0);
           $1387 = HEAP16[$1386>>1]|0;
           $1388 = $1387&65535;
           $1389 = $1388<<1;
           $1390 = (($1384) + ($1389))|0;
           $1391 = $i;
           $1392 = $rix;
           $1393 = (($1392) + (($1391*6)|0)|0);
           $1394 = ((($1393)) + 2|0);
           $1395 = HEAP16[$1394>>1]|0;
           $1396 = $1395&65535;
           $1397 = (($1390) - ($1396))|0;
           $1398 = $i;
           $1399 = (0 - ($1398))|0;
           $1400 = $rix;
           $1401 = (($1400) + (($1399*6)|0)|0);
           $1402 = ((($1401)) + 2|0);
           $1403 = HEAP16[$1402>>1]|0;
           $1404 = $1403&65535;
           $1405 = (($1397) - ($1404))|0;
           $1406 = (($1405|0) / 2)&-1;
           $1407 = ($1406|0)<(65535);
           if (!($1407)) {
            $1447 = 65535;
            break;
           }
           $1408 = $f;
           $1409 = $i;
           $1410 = $rix;
           $1411 = (($1410) + (($1409*6)|0)|0);
           $1412 = (($1411) + ($1408<<1)|0);
           $1413 = HEAP16[$1412>>1]|0;
           $1414 = $1413&65535;
           $1415 = $f;
           $1416 = $i;
           $1417 = (0 - ($1416))|0;
           $1418 = $rix;
           $1419 = (($1418) + (($1417*6)|0)|0);
           $1420 = (($1419) + ($1415<<1)|0);
           $1421 = HEAP16[$1420>>1]|0;
           $1422 = $1421&65535;
           $1423 = (($1414) + ($1422))|0;
           $1424 = $rix;
           $1425 = ((($1424)) + 2|0);
           $1426 = HEAP16[$1425>>1]|0;
           $1427 = $1426&65535;
           $1428 = $1427<<1;
           $1429 = (($1423) + ($1428))|0;
           $1430 = $i;
           $1431 = $rix;
           $1432 = (($1431) + (($1430*6)|0)|0);
           $1433 = ((($1432)) + 2|0);
           $1434 = HEAP16[$1433>>1]|0;
           $1435 = $1434&65535;
           $1436 = (($1429) - ($1435))|0;
           $1437 = $i;
           $1438 = (0 - ($1437))|0;
           $1439 = $rix;
           $1440 = (($1439) + (($1438*6)|0)|0);
           $1441 = ((($1440)) + 2|0);
           $1442 = HEAP16[$1441>>1]|0;
           $1443 = $1442&65535;
           $1444 = (($1436) - ($1443))|0;
           $1445 = (($1444|0) / 2)&-1;
           $1447 = $1445;
          }
         } while(0);
         $1446 = $1447&65535;
         $1448 = $f;
         $1449 = $rix;
         $1450 = (($1449) + ($1448<<1)|0);
         HEAP16[$1450>>1] = $1446;
         $1451 = $d;
         $1452 = (($1451) + 1)|0;
         $d = $1452;
         $1453 = $rix;
         $1454 = ((($1453)) + 1572864|0);
         $rix = $1454;
        }
       }
      } while(0);
      $1455 = $col;
      $1456 = (($1455) + 1)|0;
      $col = $1456;
     }
     $1457 = $row;
     $1458 = (($1457) + 1)|0;
     $row = $1458;
    }
    $1459 = $top;
    $1460 = (($1459) + 2)|0;
    $row = $1460;
    while(1) {
     $1461 = $row;
     $1462 = $mrow;
     $1463 = (($1462) - 2)|0;
     $1464 = ($1461|0)<($1463|0);
     if (!($1464)) {
      break;
     }
     $1465 = $row;
     $1466 = $sgrow;
     $1467 = $1466&65535;
     $1468 = (($1465) - ($1467))|0;
     $1469 = (($1468|0) % 3)&-1;
     $1470 = ($1469|0)!=(0);
     L220: do {
      if ($1470) {
       $1471 = $left;
       $1472 = (($1471) + 2)|0;
       $col = $1472;
       while(1) {
        $1473 = $col;
        $1474 = $mcol;
        $1475 = (($1474) - 2)|0;
        $1476 = ($1473|0)<($1475|0);
        if (!($1476)) {
         break L220;
        }
        $1477 = $col;
        $1478 = $sgcol;
        $1479 = $1478&65535;
        $1480 = (($1477) - ($1479))|0;
        $1481 = (($1480|0) % 3)&-1;
        $1482 = ($1481|0)!=(0);
        L225: do {
         if ($1482) {
          $1483 = $col;
          $1484 = $left;
          $1485 = (($1483) - ($1484))|0;
          $1486 = $row;
          $1487 = $top;
          $1488 = (($1486) - ($1487))|0;
          $1489 = $rgb;
          $1490 = (($1489) + (($1488*3072)|0)|0);
          $1491 = (($1490) + (($1485*6)|0)|0);
          $rix = $1491;
          $1492 = $col;
          $1493 = (($1492|0) % 3)&-1;
          $1494 = $row;
          $1495 = (($1494|0) % 3)&-1;
          $1496 = (($allhex) + (($1495*96)|0)|0);
          $1497 = (($1496) + ($1493<<5)|0);
          $1498 = ((($1497)) + 16|0);
          $hex = $1498;
          $d = 0;
          while(1) {
           $1499 = $d;
           $1500 = $ndir;
           $1501 = ($1499|0)<($1500|0);
           if (!($1501)) {
            break L225;
           }
           $1502 = $d;
           $1503 = $hex;
           $1504 = (($1503) + ($1502<<1)|0);
           $1505 = HEAP16[$1504>>1]|0;
           $1506 = $1505 << 16 >> 16;
           $1507 = $d;
           $1508 = (($1507) + 1)|0;
           $1509 = $hex;
           $1510 = (($1509) + ($1508<<1)|0);
           $1511 = HEAP16[$1510>>1]|0;
           $1512 = $1511 << 16 >> 16;
           $1513 = (($1506) + ($1512))|0;
           $1514 = ($1513|0)!=(0);
           $1515 = $rix;
           $1516 = ((($1515)) + 2|0);
           $1517 = HEAP16[$1516>>1]|0;
           $1518 = $1517&65535;
           L230: do {
            if ($1514) {
             $1519 = ($1518*3)|0;
             $1520 = $d;
             $1521 = $hex;
             $1522 = (($1521) + ($1520<<1)|0);
             $1523 = HEAP16[$1522>>1]|0;
             $1524 = $1523 << 16 >> 16;
             $1525 = $rix;
             $1526 = (($1525) + (($1524*6)|0)|0);
             $1527 = ((($1526)) + 2|0);
             $1528 = HEAP16[$1527>>1]|0;
             $1529 = $1528&65535;
             $1530 = $1529<<1;
             $1531 = (($1519) - ($1530))|0;
             $1532 = $d;
             $1533 = (($1532) + 1)|0;
             $1534 = $hex;
             $1535 = (($1534) + ($1533<<1)|0);
             $1536 = HEAP16[$1535>>1]|0;
             $1537 = $1536 << 16 >> 16;
             $1538 = $rix;
             $1539 = (($1538) + (($1537*6)|0)|0);
             $1540 = ((($1539)) + 2|0);
             $1541 = HEAP16[$1540>>1]|0;
             $1542 = $1541&65535;
             $1543 = (($1531) - ($1542))|0;
             $g = $1543;
             $c = 0;
             while(1) {
              $1544 = $c;
              $1545 = ($1544|0)<(4);
              if (!($1545)) {
               break L230;
              }
              $1546 = $g;
              $1547 = $c;
              $1548 = $d;
              $1549 = $hex;
              $1550 = (($1549) + ($1548<<1)|0);
              $1551 = HEAP16[$1550>>1]|0;
              $1552 = $1551 << 16 >> 16;
              $1553 = $rix;
              $1554 = (($1553) + (($1552*6)|0)|0);
              $1555 = (($1554) + ($1547<<1)|0);
              $1556 = HEAP16[$1555>>1]|0;
              $1557 = $1556&65535;
              $1558 = $1557<<1;
              $1559 = (($1546) + ($1558))|0;
              $1560 = $c;
              $1561 = $d;
              $1562 = (($1561) + 1)|0;
              $1563 = $hex;
              $1564 = (($1563) + ($1562<<1)|0);
              $1565 = HEAP16[$1564>>1]|0;
              $1566 = $1565 << 16 >> 16;
              $1567 = $rix;
              $1568 = (($1567) + (($1566*6)|0)|0);
              $1569 = (($1568) + ($1560<<1)|0);
              $1570 = HEAP16[$1569>>1]|0;
              $1571 = $1570&65535;
              $1572 = (($1559) + ($1571))|0;
              $1573 = (($1572|0) / 3)&-1;
              $1574 = ($1573|0)<(65535);
              if ($1574) {
               $1575 = $g;
               $1576 = $c;
               $1577 = $d;
               $1578 = $hex;
               $1579 = (($1578) + ($1577<<1)|0);
               $1580 = HEAP16[$1579>>1]|0;
               $1581 = $1580 << 16 >> 16;
               $1582 = $rix;
               $1583 = (($1582) + (($1581*6)|0)|0);
               $1584 = (($1583) + ($1576<<1)|0);
               $1585 = HEAP16[$1584>>1]|0;
               $1586 = $1585&65535;
               $1587 = $1586<<1;
               $1588 = (($1575) + ($1587))|0;
               $1589 = $c;
               $1590 = $d;
               $1591 = (($1590) + 1)|0;
               $1592 = $hex;
               $1593 = (($1592) + ($1591<<1)|0);
               $1594 = HEAP16[$1593>>1]|0;
               $1595 = $1594 << 16 >> 16;
               $1596 = $rix;
               $1597 = (($1596) + (($1595*6)|0)|0);
               $1598 = (($1597) + ($1589<<1)|0);
               $1599 = HEAP16[$1598>>1]|0;
               $1600 = $1599&65535;
               $1601 = (($1588) + ($1600))|0;
               $1602 = (($1601|0) / 3)&-1;
               $1604 = $1602;
              } else {
               $1604 = 65535;
              }
              $1603 = (0)>($1604|0);
              do {
               if ($1603) {
                $1663 = 0;
               } else {
                $1605 = $g;
                $1606 = $c;
                $1607 = $d;
                $1608 = $hex;
                $1609 = (($1608) + ($1607<<1)|0);
                $1610 = HEAP16[$1609>>1]|0;
                $1611 = $1610 << 16 >> 16;
                $1612 = $rix;
                $1613 = (($1612) + (($1611*6)|0)|0);
                $1614 = (($1613) + ($1606<<1)|0);
                $1615 = HEAP16[$1614>>1]|0;
                $1616 = $1615&65535;
                $1617 = $1616<<1;
                $1618 = (($1605) + ($1617))|0;
                $1619 = $c;
                $1620 = $d;
                $1621 = (($1620) + 1)|0;
                $1622 = $hex;
                $1623 = (($1622) + ($1621<<1)|0);
                $1624 = HEAP16[$1623>>1]|0;
                $1625 = $1624 << 16 >> 16;
                $1626 = $rix;
                $1627 = (($1626) + (($1625*6)|0)|0);
                $1628 = (($1627) + ($1619<<1)|0);
                $1629 = HEAP16[$1628>>1]|0;
                $1630 = $1629&65535;
                $1631 = (($1618) + ($1630))|0;
                $1632 = (($1631|0) / 3)&-1;
                $1633 = ($1632|0)<(65535);
                if (!($1633)) {
                 $1663 = 65535;
                 break;
                }
                $1634 = $g;
                $1635 = $c;
                $1636 = $d;
                $1637 = $hex;
                $1638 = (($1637) + ($1636<<1)|0);
                $1639 = HEAP16[$1638>>1]|0;
                $1640 = $1639 << 16 >> 16;
                $1641 = $rix;
                $1642 = (($1641) + (($1640*6)|0)|0);
                $1643 = (($1642) + ($1635<<1)|0);
                $1644 = HEAP16[$1643>>1]|0;
                $1645 = $1644&65535;
                $1646 = $1645<<1;
                $1647 = (($1634) + ($1646))|0;
                $1648 = $c;
                $1649 = $d;
                $1650 = (($1649) + 1)|0;
                $1651 = $hex;
                $1652 = (($1651) + ($1650<<1)|0);
                $1653 = HEAP16[$1652>>1]|0;
                $1654 = $1653 << 16 >> 16;
                $1655 = $rix;
                $1656 = (($1655) + (($1654*6)|0)|0);
                $1657 = (($1656) + ($1648<<1)|0);
                $1658 = HEAP16[$1657>>1]|0;
                $1659 = $1658&65535;
                $1660 = (($1647) + ($1659))|0;
                $1661 = (($1660|0) / 3)&-1;
                $1663 = $1661;
               }
              } while(0);
              $1662 = $1663&65535;
              $1664 = $c;
              $1665 = $rix;
              $1666 = (($1665) + ($1664<<1)|0);
              HEAP16[$1666>>1] = $1662;
              $1667 = $c;
              $1668 = (($1667) + 2)|0;
              $c = $1668;
             }
            } else {
             $1669 = $1518<<1;
             $1670 = $d;
             $1671 = $hex;
             $1672 = (($1671) + ($1670<<1)|0);
             $1673 = HEAP16[$1672>>1]|0;
             $1674 = $1673 << 16 >> 16;
             $1675 = $rix;
             $1676 = (($1675) + (($1674*6)|0)|0);
             $1677 = ((($1676)) + 2|0);
             $1678 = HEAP16[$1677>>1]|0;
             $1679 = $1678&65535;
             $1680 = (($1669) - ($1679))|0;
             $1681 = $d;
             $1682 = (($1681) + 1)|0;
             $1683 = $hex;
             $1684 = (($1683) + ($1682<<1)|0);
             $1685 = HEAP16[$1684>>1]|0;
             $1686 = $1685 << 16 >> 16;
             $1687 = $rix;
             $1688 = (($1687) + (($1686*6)|0)|0);
             $1689 = ((($1688)) + 2|0);
             $1690 = HEAP16[$1689>>1]|0;
             $1691 = $1690&65535;
             $1692 = (($1680) - ($1691))|0;
             $g = $1692;
             $c = 0;
             while(1) {
              $1693 = $c;
              $1694 = ($1693|0)<(4);
              if (!($1694)) {
               break L230;
              }
              $1695 = $g;
              $1696 = $c;
              $1697 = $d;
              $1698 = $hex;
              $1699 = (($1698) + ($1697<<1)|0);
              $1700 = HEAP16[$1699>>1]|0;
              $1701 = $1700 << 16 >> 16;
              $1702 = $rix;
              $1703 = (($1702) + (($1701*6)|0)|0);
              $1704 = (($1703) + ($1696<<1)|0);
              $1705 = HEAP16[$1704>>1]|0;
              $1706 = $1705&65535;
              $1707 = (($1695) + ($1706))|0;
              $1708 = $c;
              $1709 = $d;
              $1710 = (($1709) + 1)|0;
              $1711 = $hex;
              $1712 = (($1711) + ($1710<<1)|0);
              $1713 = HEAP16[$1712>>1]|0;
              $1714 = $1713 << 16 >> 16;
              $1715 = $rix;
              $1716 = (($1715) + (($1714*6)|0)|0);
              $1717 = (($1716) + ($1708<<1)|0);
              $1718 = HEAP16[$1717>>1]|0;
              $1719 = $1718&65535;
              $1720 = (($1707) + ($1719))|0;
              $1721 = (($1720|0) / 2)&-1;
              $1722 = ($1721|0)<(65535);
              if ($1722) {
               $1723 = $g;
               $1724 = $c;
               $1725 = $d;
               $1726 = $hex;
               $1727 = (($1726) + ($1725<<1)|0);
               $1728 = HEAP16[$1727>>1]|0;
               $1729 = $1728 << 16 >> 16;
               $1730 = $rix;
               $1731 = (($1730) + (($1729*6)|0)|0);
               $1732 = (($1731) + ($1724<<1)|0);
               $1733 = HEAP16[$1732>>1]|0;
               $1734 = $1733&65535;
               $1735 = (($1723) + ($1734))|0;
               $1736 = $c;
               $1737 = $d;
               $1738 = (($1737) + 1)|0;
               $1739 = $hex;
               $1740 = (($1739) + ($1738<<1)|0);
               $1741 = HEAP16[$1740>>1]|0;
               $1742 = $1741 << 16 >> 16;
               $1743 = $rix;
               $1744 = (($1743) + (($1742*6)|0)|0);
               $1745 = (($1744) + ($1736<<1)|0);
               $1746 = HEAP16[$1745>>1]|0;
               $1747 = $1746&65535;
               $1748 = (($1735) + ($1747))|0;
               $1749 = (($1748|0) / 2)&-1;
               $1751 = $1749;
              } else {
               $1751 = 65535;
              }
              $1750 = (0)>($1751|0);
              do {
               if ($1750) {
                $1808 = 0;
               } else {
                $1752 = $g;
                $1753 = $c;
                $1754 = $d;
                $1755 = $hex;
                $1756 = (($1755) + ($1754<<1)|0);
                $1757 = HEAP16[$1756>>1]|0;
                $1758 = $1757 << 16 >> 16;
                $1759 = $rix;
                $1760 = (($1759) + (($1758*6)|0)|0);
                $1761 = (($1760) + ($1753<<1)|0);
                $1762 = HEAP16[$1761>>1]|0;
                $1763 = $1762&65535;
                $1764 = (($1752) + ($1763))|0;
                $1765 = $c;
                $1766 = $d;
                $1767 = (($1766) + 1)|0;
                $1768 = $hex;
                $1769 = (($1768) + ($1767<<1)|0);
                $1770 = HEAP16[$1769>>1]|0;
                $1771 = $1770 << 16 >> 16;
                $1772 = $rix;
                $1773 = (($1772) + (($1771*6)|0)|0);
                $1774 = (($1773) + ($1765<<1)|0);
                $1775 = HEAP16[$1774>>1]|0;
                $1776 = $1775&65535;
                $1777 = (($1764) + ($1776))|0;
                $1778 = (($1777|0) / 2)&-1;
                $1779 = ($1778|0)<(65535);
                if (!($1779)) {
                 $1808 = 65535;
                 break;
                }
                $1780 = $g;
                $1781 = $c;
                $1782 = $d;
                $1783 = $hex;
                $1784 = (($1783) + ($1782<<1)|0);
                $1785 = HEAP16[$1784>>1]|0;
                $1786 = $1785 << 16 >> 16;
                $1787 = $rix;
                $1788 = (($1787) + (($1786*6)|0)|0);
                $1789 = (($1788) + ($1781<<1)|0);
                $1790 = HEAP16[$1789>>1]|0;
                $1791 = $1790&65535;
                $1792 = (($1780) + ($1791))|0;
                $1793 = $c;
                $1794 = $d;
                $1795 = (($1794) + 1)|0;
                $1796 = $hex;
                $1797 = (($1796) + ($1795<<1)|0);
                $1798 = HEAP16[$1797>>1]|0;
                $1799 = $1798 << 16 >> 16;
                $1800 = $rix;
                $1801 = (($1800) + (($1799*6)|0)|0);
                $1802 = (($1801) + ($1793<<1)|0);
                $1803 = HEAP16[$1802>>1]|0;
                $1804 = $1803&65535;
                $1805 = (($1792) + ($1804))|0;
                $1806 = (($1805|0) / 2)&-1;
                $1808 = $1806;
               }
              } while(0);
              $1807 = $1808&65535;
              $1809 = $c;
              $1810 = $rix;
              $1811 = (($1810) + ($1809<<1)|0);
              HEAP16[$1811>>1] = $1807;
              $1812 = $c;
              $1813 = (($1812) + 2)|0;
              $c = $1813;
             }
            }
           } while(0);
           $1814 = $d;
           $1815 = (($1814) + 2)|0;
           $d = $1815;
           $1816 = $rix;
           $1817 = ((($1816)) + 1572864|0);
           $rix = $1817;
          }
         }
        } while(0);
        $1818 = $col;
        $1819 = (($1818) + 1)|0;
        $col = $1819;
       }
      }
     } while(0);
     $1820 = $row;
     $1821 = (($1820) + 1)|0;
     $row = $1821;
    }
    $1822 = $pass;
    $1823 = (($1822) + 1)|0;
    $pass = $1823;
   }
   $1824 = $buffer;
   $rgb = $1824;
   $1825 = $top;
   $1826 = $mrow;
   $1827 = (($1826) - ($1825))|0;
   $mrow = $1827;
   $1828 = $left;
   $1829 = $mcol;
   $1830 = (($1829) - ($1828))|0;
   $mcol = $1830;
   $d = 0;
   while(1) {
    $1831 = $d;
    $1832 = $ndir;
    $1833 = ($1831|0)<($1832|0);
    if (!($1833)) {
     break;
    }
    $row = 2;
    while(1) {
     $1834 = $row;
     $1835 = $mrow;
     $1836 = (($1835) - 2)|0;
     $1837 = ($1834|0)<($1836|0);
     if (!($1837)) {
      break;
     }
     $col = 2;
     while(1) {
      $1838 = $col;
      $1839 = $mcol;
      $1840 = (($1839) - 2)|0;
      $1841 = ($1838|0)<($1840|0);
      if (!($1841)) {
       break;
      }
      $1842 = $col;
      $1843 = $row;
      $1844 = $d;
      $1845 = $rgb;
      $1846 = (($1845) + (Math_imul($1844, 1572864)|0)|0);
      $1847 = (($1846) + (($1843*3072)|0)|0);
      $1848 = (($1847) + (($1842*6)|0)|0);
      $1849 = $col;
      $1850 = $row;
      $1851 = $lab;
      $1852 = (($1851) + (($1850*3072)|0)|0);
      $1853 = (($1852) + (($1849*6)|0)|0);
      _cielab($1848,$1853);
      $1854 = $col;
      $1855 = (($1854) + 1)|0;
      $col = $1855;
     }
     $1856 = $row;
     $1857 = (($1856) + 1)|0;
     $row = $1857;
    }
    $1858 = $d;
    $1859 = $1858 & 3;
    $1860 = (589414 + ($1859<<1)|0);
    $1861 = HEAP16[$1860>>1]|0;
    $1862 = $1861 << 16 >> 16;
    $f = $1862;
    $row = 3;
    while(1) {
     $1863 = $row;
     $1864 = $mrow;
     $1865 = (($1864) - 3)|0;
     $1866 = ($1863|0)<($1865|0);
     if (!($1866)) {
      break;
     }
     $col = 3;
     while(1) {
      $1867 = $col;
      $1868 = $mcol;
      $1869 = (($1868) - 3)|0;
      $1870 = ($1867|0)<($1869|0);
      if (!($1870)) {
       break;
      }
      $1871 = $col;
      $1872 = $row;
      $1873 = $lab;
      $1874 = (($1873) + (($1872*3072)|0)|0);
      $1875 = (($1874) + (($1871*6)|0)|0);
      $lix = $1875;
      $1876 = $lix;
      $1877 = HEAP16[$1876>>1]|0;
      $1878 = $1877 << 16 >> 16;
      $1879 = $1878<<1;
      $1880 = $f;
      $1881 = $lix;
      $1882 = (($1881) + (($1880*6)|0)|0);
      $1883 = HEAP16[$1882>>1]|0;
      $1884 = $1883 << 16 >> 16;
      $1885 = (($1879) - ($1884))|0;
      $1886 = $f;
      $1887 = (0 - ($1886))|0;
      $1888 = $lix;
      $1889 = (($1888) + (($1887*6)|0)|0);
      $1890 = HEAP16[$1889>>1]|0;
      $1891 = $1890 << 16 >> 16;
      $1892 = (($1885) - ($1891))|0;
      $g = $1892;
      $1893 = $g;
      $1894 = $g;
      $1895 = Math_imul($1893, $1894)|0;
      $1896 = $lix;
      $1897 = ((($1896)) + 2|0);
      $1898 = HEAP16[$1897>>1]|0;
      $1899 = $1898 << 16 >> 16;
      $1900 = $1899<<1;
      $1901 = $f;
      $1902 = $lix;
      $1903 = (($1902) + (($1901*6)|0)|0);
      $1904 = ((($1903)) + 2|0);
      $1905 = HEAP16[$1904>>1]|0;
      $1906 = $1905 << 16 >> 16;
      $1907 = (($1900) - ($1906))|0;
      $1908 = $f;
      $1909 = (0 - ($1908))|0;
      $1910 = $lix;
      $1911 = (($1910) + (($1909*6)|0)|0);
      $1912 = ((($1911)) + 2|0);
      $1913 = HEAP16[$1912>>1]|0;
      $1914 = $1913 << 16 >> 16;
      $1915 = (($1907) - ($1914))|0;
      $1916 = $g;
      $1917 = ($1916*500)|0;
      $1918 = (($1917|0) / 232)&-1;
      $1919 = (($1915) + ($1918))|0;
      $1920 = $lix;
      $1921 = ((($1920)) + 2|0);
      $1922 = HEAP16[$1921>>1]|0;
      $1923 = $1922 << 16 >> 16;
      $1924 = $1923<<1;
      $1925 = $f;
      $1926 = $lix;
      $1927 = (($1926) + (($1925*6)|0)|0);
      $1928 = ((($1927)) + 2|0);
      $1929 = HEAP16[$1928>>1]|0;
      $1930 = $1929 << 16 >> 16;
      $1931 = (($1924) - ($1930))|0;
      $1932 = $f;
      $1933 = (0 - ($1932))|0;
      $1934 = $lix;
      $1935 = (($1934) + (($1933*6)|0)|0);
      $1936 = ((($1935)) + 2|0);
      $1937 = HEAP16[$1936>>1]|0;
      $1938 = $1937 << 16 >> 16;
      $1939 = (($1931) - ($1938))|0;
      $1940 = $g;
      $1941 = ($1940*500)|0;
      $1942 = (($1941|0) / 232)&-1;
      $1943 = (($1939) + ($1942))|0;
      $1944 = Math_imul($1919, $1943)|0;
      $1945 = (($1895) + ($1944))|0;
      $1946 = $lix;
      $1947 = ((($1946)) + 4|0);
      $1948 = HEAP16[$1947>>1]|0;
      $1949 = $1948 << 16 >> 16;
      $1950 = $1949<<1;
      $1951 = $f;
      $1952 = $lix;
      $1953 = (($1952) + (($1951*6)|0)|0);
      $1954 = ((($1953)) + 4|0);
      $1955 = HEAP16[$1954>>1]|0;
      $1956 = $1955 << 16 >> 16;
      $1957 = (($1950) - ($1956))|0;
      $1958 = $f;
      $1959 = (0 - ($1958))|0;
      $1960 = $lix;
      $1961 = (($1960) + (($1959*6)|0)|0);
      $1962 = ((($1961)) + 4|0);
      $1963 = HEAP16[$1962>>1]|0;
      $1964 = $1963 << 16 >> 16;
      $1965 = (($1957) - ($1964))|0;
      $1966 = $g;
      $1967 = ($1966*500)|0;
      $1968 = (($1967|0) / 580)&-1;
      $1969 = (($1965) - ($1968))|0;
      $1970 = $lix;
      $1971 = ((($1970)) + 4|0);
      $1972 = HEAP16[$1971>>1]|0;
      $1973 = $1972 << 16 >> 16;
      $1974 = $1973<<1;
      $1975 = $f;
      $1976 = $lix;
      $1977 = (($1976) + (($1975*6)|0)|0);
      $1978 = ((($1977)) + 4|0);
      $1979 = HEAP16[$1978>>1]|0;
      $1980 = $1979 << 16 >> 16;
      $1981 = (($1974) - ($1980))|0;
      $1982 = $f;
      $1983 = (0 - ($1982))|0;
      $1984 = $lix;
      $1985 = (($1984) + (($1983*6)|0)|0);
      $1986 = ((($1985)) + 4|0);
      $1987 = HEAP16[$1986>>1]|0;
      $1988 = $1987 << 16 >> 16;
      $1989 = (($1981) - ($1988))|0;
      $1990 = $g;
      $1991 = ($1990*500)|0;
      $1992 = (($1991|0) / 580)&-1;
      $1993 = (($1989) - ($1992))|0;
      $1994 = Math_imul($1969, $1993)|0;
      $1995 = (($1945) + ($1994))|0;
      $1996 = (+($1995|0));
      $1997 = $col;
      $1998 = $row;
      $1999 = $d;
      $2000 = $drv;
      $2001 = (($2000) + ($1999<<20)|0);
      $2002 = (($2001) + ($1998<<11)|0);
      $2003 = (($2002) + ($1997<<2)|0);
      HEAPF32[$2003>>2] = $1996;
      $2004 = $col;
      $2005 = (($2004) + 1)|0;
      $col = $2005;
     }
     $2006 = $row;
     $2007 = (($2006) + 1)|0;
     $row = $2007;
    }
    $2008 = $d;
    $2009 = (($2008) + 1)|0;
    $d = $2009;
   }
   $2010 = $homo;
   $2011 = $ndir;
   $2012 = $2011<<9;
   $2013 = $2012<<9;
   _memset(($2010|0),0,($2013|0))|0;
   $row = 4;
   while(1) {
    $2014 = $row;
    $2015 = $mrow;
    $2016 = (($2015) - 4)|0;
    $2017 = ($2014|0)<($2016|0);
    if (!($2017)) {
     break;
    }
    $col = 4;
    while(1) {
     $2018 = $col;
     $2019 = $mcol;
     $2020 = (($2019) - 4)|0;
     $2021 = ($2018|0)<($2020|0);
     if (!($2021)) {
      break;
     }
     $tr = 3.4028234663852886E+38;
     $d = 0;
     while(1) {
      $2022 = $d;
      $2023 = $ndir;
      $2024 = ($2022|0)<($2023|0);
      $2025 = $tr;
      if (!($2024)) {
       break;
      }
      $2026 = $col;
      $2027 = $row;
      $2028 = $d;
      $2029 = $drv;
      $2030 = (($2029) + ($2028<<20)|0);
      $2031 = (($2030) + ($2027<<11)|0);
      $2032 = (($2031) + ($2026<<2)|0);
      $2033 = +HEAPF32[$2032>>2];
      $2034 = $2025 > $2033;
      if ($2034) {
       $2035 = $col;
       $2036 = $row;
       $2037 = $d;
       $2038 = $drv;
       $2039 = (($2038) + ($2037<<20)|0);
       $2040 = (($2039) + ($2036<<11)|0);
       $2041 = (($2040) + ($2035<<2)|0);
       $2042 = +HEAPF32[$2041>>2];
       $tr = $2042;
      }
      $2043 = $d;
      $2044 = (($2043) + 1)|0;
      $d = $2044;
     }
     $2045 = $2025 * 8.0;
     $tr = $2045;
     $d = 0;
     while(1) {
      $2046 = $d;
      $2047 = $ndir;
      $2048 = ($2046|0)<($2047|0);
      if (!($2048)) {
       break;
      }
      $v = -1;
      while(1) {
       $2049 = $v;
       $2050 = ($2049|0)<=(1);
       if (!($2050)) {
        break;
       }
       $h = -1;
       while(1) {
        $2051 = $h;
        $2052 = ($2051|0)<=(1);
        if (!($2052)) {
         break;
        }
        $2053 = $col;
        $2054 = $h;
        $2055 = (($2053) + ($2054))|0;
        $2056 = $row;
        $2057 = $v;
        $2058 = (($2056) + ($2057))|0;
        $2059 = $d;
        $2060 = $drv;
        $2061 = (($2060) + ($2059<<20)|0);
        $2062 = (($2061) + ($2058<<11)|0);
        $2063 = (($2062) + ($2055<<2)|0);
        $2064 = +HEAPF32[$2063>>2];
        $2065 = $tr;
        $2066 = $2064 <= $2065;
        if ($2066) {
         $2067 = $col;
         $2068 = $row;
         $2069 = $d;
         $2070 = $homo;
         $2071 = (($2070) + ($2069<<18)|0);
         $2072 = (($2071) + ($2068<<9)|0);
         $2073 = (($2072) + ($2067)|0);
         $2074 = HEAP8[$2073>>0]|0;
         $2075 = (($2074) + 1)<<24>>24;
         HEAP8[$2073>>0] = $2075;
        }
        $2076 = $h;
        $2077 = (($2076) + 1)|0;
        $h = $2077;
       }
       $2078 = $v;
       $2079 = (($2078) + 1)|0;
       $v = $2079;
      }
      $2080 = $d;
      $2081 = (($2080) + 1)|0;
      $d = $2081;
     }
     $2082 = $col;
     $2083 = (($2082) + 1)|0;
     $col = $2083;
    }
    $2084 = $row;
    $2085 = (($2084) + 1)|0;
    $row = $2085;
   }
   $2086 = HEAP16[580074>>1]|0;
   $2087 = $2086&65535;
   $2088 = $top;
   $2089 = (($2087) - ($2088))|0;
   $2090 = ($2089|0)<(516);
   if ($2090) {
    $2091 = HEAP16[580074>>1]|0;
    $2092 = $2091&65535;
    $2093 = $top;
    $2094 = (($2092) - ($2093))|0;
    $2095 = (($2094) + 2)|0;
    $mrow = $2095;
   }
   $2096 = HEAP16[580076>>1]|0;
   $2097 = $2096&65535;
   $2098 = $left;
   $2099 = (($2097) - ($2098))|0;
   $2100 = ($2099|0)<(516);
   if ($2100) {
    $2101 = HEAP16[580076>>1]|0;
    $2102 = $2101&65535;
    $2103 = $left;
    $2104 = (($2102) - ($2103))|0;
    $2105 = (($2104) + 2)|0;
    $mcol = $2105;
   }
   $2106 = $top;
   $2107 = ($2106|0)<(8);
   $2108 = $top;
   $2109 = $2107 ? $2108 : 8;
   $row = $2109;
   while(1) {
    $2110 = $row;
    $2111 = $mrow;
    $2112 = (($2111) - 8)|0;
    $2113 = ($2110|0)<($2112|0);
    $2114 = $left;
    if (!($2113)) {
     break;
    }
    $2115 = ($2114|0)<(8);
    $2116 = $left;
    $2117 = $2115 ? $2116 : 8;
    $col = $2117;
    while(1) {
     $2118 = $col;
     $2119 = $mcol;
     $2120 = (($2119) - 8)|0;
     $2121 = ($2118|0)<($2120|0);
     if (!($2121)) {
      break;
     }
     $d = 0;
     while(1) {
      $2122 = $d;
      $2123 = $ndir;
      $2124 = ($2122|0)<($2123|0);
      if (!($2124)) {
       break;
      }
      $2125 = $d;
      $2126 = (($hm) + ($2125<<2)|0);
      HEAP32[$2126>>2] = 0;
      $v = -2;
      while(1) {
       $2127 = $v;
       $2128 = ($2127|0)<=(2);
       if (!($2128)) {
        break;
       }
       $h = -2;
       while(1) {
        $2129 = $h;
        $2130 = ($2129|0)<=(2);
        if (!($2130)) {
         break;
        }
        $2131 = $col;
        $2132 = $h;
        $2133 = (($2131) + ($2132))|0;
        $2134 = $row;
        $2135 = $v;
        $2136 = (($2134) + ($2135))|0;
        $2137 = $d;
        $2138 = $homo;
        $2139 = (($2138) + ($2137<<18)|0);
        $2140 = (($2139) + ($2136<<9)|0);
        $2141 = (($2140) + ($2133)|0);
        $2142 = HEAP8[$2141>>0]|0;
        $2143 = $2142 << 24 >> 24;
        $2144 = $d;
        $2145 = (($hm) + ($2144<<2)|0);
        $2146 = HEAP32[$2145>>2]|0;
        $2147 = (($2146) + ($2143))|0;
        HEAP32[$2145>>2] = $2147;
        $2148 = $h;
        $2149 = (($2148) + 1)|0;
        $h = $2149;
       }
       $2150 = $v;
       $2151 = (($2150) + 1)|0;
       $v = $2151;
      }
      $2152 = $d;
      $2153 = (($2152) + 1)|0;
      $d = $2153;
     }
     $d = 0;
     while(1) {
      $2154 = $d;
      $2155 = $ndir;
      $2156 = (($2155) - 4)|0;
      $2157 = ($2154|0)<($2156|0);
      if (!($2157)) {
       break;
      }
      $2158 = $d;
      $2159 = (($hm) + ($2158<<2)|0);
      $2160 = HEAP32[$2159>>2]|0;
      $2161 = $d;
      $2162 = (($2161) + 4)|0;
      $2163 = (($hm) + ($2162<<2)|0);
      $2164 = HEAP32[$2163>>2]|0;
      $2165 = ($2160|0)<($2164|0);
      $2166 = $d;
      $2167 = (($hm) + ($2166<<2)|0);
      if ($2165) {
       HEAP32[$2167>>2] = 0;
      } else {
       $2168 = HEAP32[$2167>>2]|0;
       $2169 = $d;
       $2170 = (($2169) + 4)|0;
       $2171 = (($hm) + ($2170<<2)|0);
       $2172 = HEAP32[$2171>>2]|0;
       $2173 = ($2168|0)>($2172|0);
       if ($2173) {
        $2174 = $d;
        $2175 = (($2174) + 4)|0;
        $2176 = (($hm) + ($2175<<2)|0);
        HEAP32[$2176>>2] = 0;
       }
      }
      $2177 = $d;
      $2178 = (($2177) + 1)|0;
      $d = $2178;
     }
     $2179 = HEAP32[$hm>>2]|0;
     $2180 = $2179&65535;
     $max = $2180;
     $d = 1;
     while(1) {
      $2181 = $d;
      $2182 = $ndir;
      $2183 = ($2181|0)<($2182|0);
      $2184 = $max;
      $2185 = $2184&65535;
      if (!($2183)) {
       break;
      }
      $2186 = $d;
      $2187 = (($hm) + ($2186<<2)|0);
      $2188 = HEAP32[$2187>>2]|0;
      $2189 = ($2185|0)<($2188|0);
      if ($2189) {
       $2190 = $d;
       $2191 = (($hm) + ($2190<<2)|0);
       $2192 = HEAP32[$2191>>2]|0;
       $2193 = $2192&65535;
       $max = $2193;
      }
      $2194 = $d;
      $2195 = (($2194) + 1)|0;
      $d = $2195;
     }
     $2196 = $2185 >> 3;
     $2197 = $max;
     $2198 = $2197&65535;
     $2199 = (($2198) - ($2196))|0;
     $2200 = $2199&65535;
     $max = $2200;
     ;HEAP32[$avg>>2]=0|0;HEAP32[$avg+4>>2]=0|0;HEAP32[$avg+8>>2]=0|0;HEAP32[$avg+12>>2]=0|0;
     $d = 0;
     while(1) {
      $2201 = $d;
      $2202 = $ndir;
      $2203 = ($2201|0)<($2202|0);
      if (!($2203)) {
       break;
      }
      $2204 = $d;
      $2205 = (($hm) + ($2204<<2)|0);
      $2206 = HEAP32[$2205>>2]|0;
      $2207 = $max;
      $2208 = $2207&65535;
      $2209 = ($2206|0)>=($2208|0);
      if ($2209) {
       $c = 0;
       while(1) {
        $2210 = $c;
        $2211 = ($2210|0)<(3);
        if (!($2211)) {
         break;
        }
        $2212 = $c;
        $2213 = $col;
        $2214 = $row;
        $2215 = $d;
        $2216 = $rgb;
        $2217 = (($2216) + (Math_imul($2215, 1572864)|0)|0);
        $2218 = (($2217) + (($2214*3072)|0)|0);
        $2219 = (($2218) + (($2213*6)|0)|0);
        $2220 = (($2219) + ($2212<<1)|0);
        $2221 = HEAP16[$2220>>1]|0;
        $2222 = $2221&65535;
        $2223 = $c;
        $2224 = (($avg) + ($2223<<2)|0);
        $2225 = HEAP32[$2224>>2]|0;
        $2226 = (($2225) + ($2222))|0;
        HEAP32[$2224>>2] = $2226;
        $2227 = $c;
        $2228 = (($2227) + 1)|0;
        $c = $2228;
       }
       $2229 = ((($avg)) + 12|0);
       $2230 = HEAP32[$2229>>2]|0;
       $2231 = (($2230) + 1)|0;
       HEAP32[$2229>>2] = $2231;
      }
      $2232 = $d;
      $2233 = (($2232) + 1)|0;
      $d = $2233;
     }
     $c = 0;
     while(1) {
      $2234 = $c;
      $2235 = ($2234|0)<(3);
      if (!($2235)) {
       break;
      }
      $2236 = $c;
      $2237 = (($avg) + ($2236<<2)|0);
      $2238 = HEAP32[$2237>>2]|0;
      $2239 = ((($avg)) + 12|0);
      $2240 = HEAP32[$2239>>2]|0;
      $2241 = (($2238|0) / ($2240|0))&-1;
      $2242 = $2241&65535;
      $2243 = $c;
      $2244 = $row;
      $2245 = $top;
      $2246 = (($2244) + ($2245))|0;
      $2247 = HEAP16[580076>>1]|0;
      $2248 = $2247&65535;
      $2249 = Math_imul($2246, $2248)|0;
      $2250 = $col;
      $2251 = (($2249) + ($2250))|0;
      $2252 = $left;
      $2253 = (($2251) + ($2252))|0;
      $2254 = HEAP32[972>>2]|0;
      $2255 = (($2254) + ($2253<<3)|0);
      $2256 = (($2255) + ($2243<<1)|0);
      HEAP16[$2256>>1] = $2242;
      $2257 = $c;
      $2258 = (($2257) + 1)|0;
      $c = $2258;
     }
     $2259 = $col;
     $2260 = (($2259) + 1)|0;
     $col = $2260;
    }
    $2261 = $row;
    $2262 = (($2261) + 1)|0;
    $row = $2262;
   }
   $2263 = (($2114) + 496)|0;
   $left = $2263;
  }
  $2264 = (($291) + 496)|0;
  $top = $2264;
 }
 $2265 = $buffer;
 _free($2265);
 _border_interpolate(8);
 STACKTOP = sp;return;
}
function _ahd_interpolate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $abdiff = 0, $abeps = 0, $buffer = 0, $c = 0, $col = 0, $d = 0, $hm = 0, $homo = 0, $i = 0, $j = 0, $lab = 0, $ldiff = 0, $left = 0, $leps = 0;
 var $lix = 0, $pix = 0, $rgb = 0, $rix = 0, $row = 0, $tc = 0, $top = 0, $tr = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hm = sp + 104|0;
 $ldiff = sp + 72|0;
 $abdiff = sp + 40|0;
 $0 = HEAP32[712>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[447952>>2]|0;
  (_fprintf($2,612955,$vararg_buffer)|0);
 }
 _cielab(0,0);
 _border_interpolate(5);
 $3 = (_malloc(6815744)|0);
 $buffer = $3;
 $4 = $buffer;
 _merror($4,612977);
 $5 = $buffer;
 $rgb = $5;
 $6 = $buffer;
 $7 = ((($6)) + 3145728|0);
 $lab = $7;
 $8 = $buffer;
 $9 = ((($8)) + 6291456|0);
 $homo = $9;
 $top = 2;
 while(1) {
  $10 = $top;
  $11 = HEAP16[580074>>1]|0;
  $12 = $11&65535;
  $13 = (($12) - 5)|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $left = 2;
  while(1) {
   $15 = $left;
   $16 = HEAP16[580076>>1]|0;
   $17 = $16&65535;
   $18 = (($17) - 5)|0;
   $19 = ($15|0)<($18|0);
   $20 = $top;
   if (!($19)) {
    break;
   }
   $row = $20;
   while(1) {
    $21 = $row;
    $22 = $top;
    $23 = (($22) + 512)|0;
    $24 = ($21|0)<($23|0);
    if (!($24)) {
     break;
    }
    $25 = $row;
    $26 = HEAP16[580074>>1]|0;
    $27 = $26&65535;
    $28 = (($27) - 2)|0;
    $29 = ($25|0)<($28|0);
    if (!($29)) {
     break;
    }
    $30 = $left;
    $31 = HEAP32[776>>2]|0;
    $32 = $row;
    $33 = $32 << 1;
    $34 = $33 & 14;
    $35 = $left;
    $36 = $35 & 1;
    $37 = (($34) + ($36))|0;
    $38 = $37 << 1;
    $39 = $31 >>> $38;
    $40 = $39 & 3;
    $41 = $40 & 1;
    $42 = (($30) + ($41))|0;
    $col = $42;
    $43 = HEAP32[776>>2]|0;
    $44 = $row;
    $45 = $44 << 1;
    $46 = $45 & 14;
    $47 = $col;
    $48 = $47 & 1;
    $49 = (($46) + ($48))|0;
    $50 = $49 << 1;
    $51 = $43 >>> $50;
    $52 = $51 & 3;
    $c = $52;
    while(1) {
     $53 = $col;
     $54 = $left;
     $55 = (($54) + 512)|0;
     $56 = ($53|0)<($55|0);
     if (!($56)) {
      break;
     }
     $57 = $col;
     $58 = HEAP16[580076>>1]|0;
     $59 = $58&65535;
     $60 = (($59) - 2)|0;
     $61 = ($57|0)<($60|0);
     if (!($61)) {
      break;
     }
     $62 = HEAP32[972>>2]|0;
     $63 = $row;
     $64 = HEAP16[580076>>1]|0;
     $65 = $64&65535;
     $66 = Math_imul($63, $65)|0;
     $67 = (($62) + ($66<<3)|0);
     $68 = $col;
     $69 = (($67) + ($68<<3)|0);
     $pix = $69;
     $70 = $pix;
     $71 = ((($70)) + -8|0);
     $72 = ((($71)) + 2|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73&65535;
     $75 = $c;
     $76 = $pix;
     $77 = (($76) + ($75<<1)|0);
     $78 = HEAP16[$77>>1]|0;
     $79 = $78&65535;
     $80 = (($74) + ($79))|0;
     $81 = $pix;
     $82 = ((($81)) + 8|0);
     $83 = ((($82)) + 2|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = $84&65535;
     $86 = (($80) + ($85))|0;
     $87 = $86<<1;
     $88 = $c;
     $89 = $pix;
     $90 = ((($89)) + -16|0);
     $91 = (($90) + ($88<<1)|0);
     $92 = HEAP16[$91>>1]|0;
     $93 = $92&65535;
     $94 = (($87) - ($93))|0;
     $95 = $c;
     $96 = $pix;
     $97 = ((($96)) + 16|0);
     $98 = (($97) + ($95<<1)|0);
     $99 = HEAP16[$98>>1]|0;
     $100 = $99&65535;
     $101 = (($94) - ($100))|0;
     $102 = $101 >> 2;
     $val = $102;
     $103 = $pix;
     $104 = ((($103)) + -8|0);
     $105 = ((($104)) + 2|0);
     $106 = HEAP16[$105>>1]|0;
     $107 = $106&65535;
     $108 = $pix;
     $109 = ((($108)) + 8|0);
     $110 = ((($109)) + 2|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $111&65535;
     $113 = ($107|0)<($112|0);
     $114 = $pix;
     do {
      if ($113) {
       $115 = ((($114)) + -8|0);
       $116 = ((($115)) + 2|0);
       $117 = HEAP16[$116>>1]|0;
       $118 = $117&65535;
       $119 = $val;
       $120 = $pix;
       $121 = ((($120)) + 8|0);
       $122 = ((($121)) + 2|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123&65535;
       $125 = ($119|0)<($124|0);
       if ($125) {
        $126 = $val;
        $133 = $126;
       } else {
        $127 = $pix;
        $128 = ((($127)) + 8|0);
        $129 = ((($128)) + 2|0);
        $130 = HEAP16[$129>>1]|0;
        $131 = $130&65535;
        $133 = $131;
       }
       $132 = ($118|0)>($133|0);
       if ($132) {
        $134 = $pix;
        $135 = ((($134)) + -8|0);
        $136 = ((($135)) + 2|0);
        $137 = HEAP16[$136>>1]|0;
        $138 = $137&65535;
        $190 = $138;
        break;
       }
       $139 = $val;
       $140 = $pix;
       $141 = ((($140)) + 8|0);
       $142 = ((($141)) + 2|0);
       $143 = HEAP16[$142>>1]|0;
       $144 = $143&65535;
       $145 = ($139|0)<($144|0);
       if ($145) {
        $146 = $val;
        $190 = $146;
        break;
       } else {
        $147 = $pix;
        $148 = ((($147)) + 8|0);
        $149 = ((($148)) + 2|0);
        $150 = HEAP16[$149>>1]|0;
        $151 = $150&65535;
        $190 = $151;
        break;
       }
      } else {
       $152 = ((($114)) + 8|0);
       $153 = ((($152)) + 2|0);
       $154 = HEAP16[$153>>1]|0;
       $155 = $154&65535;
       $156 = $val;
       $157 = $pix;
       $158 = ((($157)) + -8|0);
       $159 = ((($158)) + 2|0);
       $160 = HEAP16[$159>>1]|0;
       $161 = $160&65535;
       $162 = ($156|0)<($161|0);
       if ($162) {
        $163 = $val;
        $170 = $163;
       } else {
        $164 = $pix;
        $165 = ((($164)) + -8|0);
        $166 = ((($165)) + 2|0);
        $167 = HEAP16[$166>>1]|0;
        $168 = $167&65535;
        $170 = $168;
       }
       $169 = ($155|0)>($170|0);
       if ($169) {
        $171 = $pix;
        $172 = ((($171)) + 8|0);
        $173 = ((($172)) + 2|0);
        $174 = HEAP16[$173>>1]|0;
        $175 = $174&65535;
        $190 = $175;
        break;
       }
       $176 = $val;
       $177 = $pix;
       $178 = ((($177)) + -8|0);
       $179 = ((($178)) + 2|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180&65535;
       $182 = ($176|0)<($181|0);
       if ($182) {
        $183 = $val;
        $190 = $183;
        break;
       } else {
        $184 = $pix;
        $185 = ((($184)) + -8|0);
        $186 = ((($185)) + 2|0);
        $187 = HEAP16[$186>>1]|0;
        $188 = $187&65535;
        $190 = $188;
        break;
       }
      }
     } while(0);
     $189 = $190&65535;
     $191 = $col;
     $192 = $left;
     $193 = (($191) - ($192))|0;
     $194 = $row;
     $195 = $top;
     $196 = (($194) - ($195))|0;
     $197 = $rgb;
     $198 = (($197) + (($196*3072)|0)|0);
     $199 = (($198) + (($193*6)|0)|0);
     $200 = ((($199)) + 2|0);
     HEAP16[$200>>1] = $189;
     $201 = HEAP16[580076>>1]|0;
     $202 = $201&65535;
     $203 = (0 - ($202))|0;
     $204 = $pix;
     $205 = (($204) + ($203<<3)|0);
     $206 = ((($205)) + 2|0);
     $207 = HEAP16[$206>>1]|0;
     $208 = $207&65535;
     $209 = $c;
     $210 = $pix;
     $211 = (($210) + ($209<<1)|0);
     $212 = HEAP16[$211>>1]|0;
     $213 = $212&65535;
     $214 = (($208) + ($213))|0;
     $215 = HEAP16[580076>>1]|0;
     $216 = $215&65535;
     $217 = $pix;
     $218 = (($217) + ($216<<3)|0);
     $219 = ((($218)) + 2|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220&65535;
     $222 = (($214) + ($221))|0;
     $223 = $222<<1;
     $224 = $c;
     $225 = HEAP16[580076>>1]|0;
     $226 = $225&65535;
     $227 = Math_imul(-2, $226)|0;
     $228 = $pix;
     $229 = (($228) + ($227<<3)|0);
     $230 = (($229) + ($224<<1)|0);
     $231 = HEAP16[$230>>1]|0;
     $232 = $231&65535;
     $233 = (($223) - ($232))|0;
     $234 = $c;
     $235 = HEAP16[580076>>1]|0;
     $236 = $235&65535;
     $237 = $236<<1;
     $238 = $pix;
     $239 = (($238) + ($237<<3)|0);
     $240 = (($239) + ($234<<1)|0);
     $241 = HEAP16[$240>>1]|0;
     $242 = $241&65535;
     $243 = (($233) - ($242))|0;
     $244 = $243 >> 2;
     $val = $244;
     $245 = HEAP16[580076>>1]|0;
     $246 = $245&65535;
     $247 = (0 - ($246))|0;
     $248 = $pix;
     $249 = (($248) + ($247<<3)|0);
     $250 = ((($249)) + 2|0);
     $251 = HEAP16[$250>>1]|0;
     $252 = $251&65535;
     $253 = HEAP16[580076>>1]|0;
     $254 = $253&65535;
     $255 = $pix;
     $256 = (($255) + ($254<<3)|0);
     $257 = ((($256)) + 2|0);
     $258 = HEAP16[$257>>1]|0;
     $259 = $258&65535;
     $260 = ($252|0)<($259|0);
     $261 = HEAP16[580076>>1]|0;
     $262 = $261&65535;
     do {
      if ($260) {
       $263 = (0 - ($262))|0;
       $264 = $pix;
       $265 = (($264) + ($263<<3)|0);
       $266 = ((($265)) + 2|0);
       $267 = HEAP16[$266>>1]|0;
       $268 = $267&65535;
       $269 = $val;
       $270 = HEAP16[580076>>1]|0;
       $271 = $270&65535;
       $272 = $pix;
       $273 = (($272) + ($271<<3)|0);
       $274 = ((($273)) + 2|0);
       $275 = HEAP16[$274>>1]|0;
       $276 = $275&65535;
       $277 = ($269|0)<($276|0);
       if ($277) {
        $278 = $val;
        $287 = $278;
       } else {
        $279 = HEAP16[580076>>1]|0;
        $280 = $279&65535;
        $281 = $pix;
        $282 = (($281) + ($280<<3)|0);
        $283 = ((($282)) + 2|0);
        $284 = HEAP16[$283>>1]|0;
        $285 = $284&65535;
        $287 = $285;
       }
       $286 = ($268|0)>($287|0);
       if ($286) {
        $288 = HEAP16[580076>>1]|0;
        $289 = $288&65535;
        $290 = (0 - ($289))|0;
        $291 = $pix;
        $292 = (($291) + ($290<<3)|0);
        $293 = ((($292)) + 2|0);
        $294 = HEAP16[$293>>1]|0;
        $295 = $294&65535;
        $366 = $295;
        break;
       }
       $296 = $val;
       $297 = HEAP16[580076>>1]|0;
       $298 = $297&65535;
       $299 = $pix;
       $300 = (($299) + ($298<<3)|0);
       $301 = ((($300)) + 2|0);
       $302 = HEAP16[$301>>1]|0;
       $303 = $302&65535;
       $304 = ($296|0)<($303|0);
       if ($304) {
        $305 = $val;
        $366 = $305;
        break;
       } else {
        $306 = HEAP16[580076>>1]|0;
        $307 = $306&65535;
        $308 = $pix;
        $309 = (($308) + ($307<<3)|0);
        $310 = ((($309)) + 2|0);
        $311 = HEAP16[$310>>1]|0;
        $312 = $311&65535;
        $366 = $312;
        break;
       }
      } else {
       $313 = $pix;
       $314 = (($313) + ($262<<3)|0);
       $315 = ((($314)) + 2|0);
       $316 = HEAP16[$315>>1]|0;
       $317 = $316&65535;
       $318 = $val;
       $319 = HEAP16[580076>>1]|0;
       $320 = $319&65535;
       $321 = (0 - ($320))|0;
       $322 = $pix;
       $323 = (($322) + ($321<<3)|0);
       $324 = ((($323)) + 2|0);
       $325 = HEAP16[$324>>1]|0;
       $326 = $325&65535;
       $327 = ($318|0)<($326|0);
       if ($327) {
        $328 = $val;
        $338 = $328;
       } else {
        $329 = HEAP16[580076>>1]|0;
        $330 = $329&65535;
        $331 = (0 - ($330))|0;
        $332 = $pix;
        $333 = (($332) + ($331<<3)|0);
        $334 = ((($333)) + 2|0);
        $335 = HEAP16[$334>>1]|0;
        $336 = $335&65535;
        $338 = $336;
       }
       $337 = ($317|0)>($338|0);
       if ($337) {
        $339 = HEAP16[580076>>1]|0;
        $340 = $339&65535;
        $341 = $pix;
        $342 = (($341) + ($340<<3)|0);
        $343 = ((($342)) + 2|0);
        $344 = HEAP16[$343>>1]|0;
        $345 = $344&65535;
        $366 = $345;
        break;
       }
       $346 = $val;
       $347 = HEAP16[580076>>1]|0;
       $348 = $347&65535;
       $349 = (0 - ($348))|0;
       $350 = $pix;
       $351 = (($350) + ($349<<3)|0);
       $352 = ((($351)) + 2|0);
       $353 = HEAP16[$352>>1]|0;
       $354 = $353&65535;
       $355 = ($346|0)<($354|0);
       if ($355) {
        $356 = $val;
        $366 = $356;
        break;
       } else {
        $357 = HEAP16[580076>>1]|0;
        $358 = $357&65535;
        $359 = (0 - ($358))|0;
        $360 = $pix;
        $361 = (($360) + ($359<<3)|0);
        $362 = ((($361)) + 2|0);
        $363 = HEAP16[$362>>1]|0;
        $364 = $363&65535;
        $366 = $364;
        break;
       }
      }
     } while(0);
     $365 = $366&65535;
     $367 = $col;
     $368 = $left;
     $369 = (($367) - ($368))|0;
     $370 = $row;
     $371 = $top;
     $372 = (($370) - ($371))|0;
     $373 = $rgb;
     $374 = ((($373)) + 1572864|0);
     $375 = (($374) + (($372*3072)|0)|0);
     $376 = (($375) + (($369*6)|0)|0);
     $377 = ((($376)) + 2|0);
     HEAP16[$377>>1] = $365;
     $378 = $col;
     $379 = (($378) + 2)|0;
     $col = $379;
    }
    $380 = $row;
    $381 = (($380) + 1)|0;
    $row = $381;
   }
   $d = 0;
   while(1) {
    $382 = $d;
    $383 = ($382|0)<(2);
    if (!($383)) {
     break;
    }
    $384 = $top;
    $385 = (($384) + 1)|0;
    $row = $385;
    while(1) {
     $386 = $row;
     $387 = $top;
     $388 = (($387) + 512)|0;
     $389 = (($388) - 1)|0;
     $390 = ($386|0)<($389|0);
     if (!($390)) {
      break;
     }
     $391 = $row;
     $392 = HEAP16[580074>>1]|0;
     $393 = $392&65535;
     $394 = (($393) - 3)|0;
     $395 = ($391|0)<($394|0);
     if (!($395)) {
      break;
     }
     $396 = $left;
     $397 = (($396) + 1)|0;
     $col = $397;
     while(1) {
      $398 = $col;
      $399 = $left;
      $400 = (($399) + 512)|0;
      $401 = (($400) - 1)|0;
      $402 = ($398|0)<($401|0);
      if (!($402)) {
       break;
      }
      $403 = $col;
      $404 = HEAP16[580076>>1]|0;
      $405 = $404&65535;
      $406 = (($405) - 3)|0;
      $407 = ($403|0)<($406|0);
      if (!($407)) {
       break;
      }
      $408 = HEAP32[972>>2]|0;
      $409 = $row;
      $410 = HEAP16[580076>>1]|0;
      $411 = $410&65535;
      $412 = Math_imul($409, $411)|0;
      $413 = (($408) + ($412<<3)|0);
      $414 = $col;
      $415 = (($413) + ($414<<3)|0);
      $pix = $415;
      $416 = $col;
      $417 = $left;
      $418 = (($416) - ($417))|0;
      $419 = $row;
      $420 = $top;
      $421 = (($419) - ($420))|0;
      $422 = $d;
      $423 = $rgb;
      $424 = (($423) + (Math_imul($422, 1572864)|0)|0);
      $425 = (($424) + (($421*3072)|0)|0);
      $426 = (($425) + (($418*6)|0)|0);
      $rix = $426;
      $427 = $col;
      $428 = $left;
      $429 = (($427) - ($428))|0;
      $430 = $row;
      $431 = $top;
      $432 = (($430) - ($431))|0;
      $433 = $d;
      $434 = $lab;
      $435 = (($434) + (Math_imul($433, 1572864)|0)|0);
      $436 = (($435) + (($432*3072)|0)|0);
      $437 = (($436) + (($429*6)|0)|0);
      $lix = $437;
      $438 = HEAP32[776>>2]|0;
      $439 = $row;
      $440 = $439 << 1;
      $441 = $440 & 14;
      $442 = $col;
      $443 = $442 & 1;
      $444 = (($441) + ($443))|0;
      $445 = $444 << 1;
      $446 = $438 >>> $445;
      $447 = $446 & 3;
      $448 = (2 - ($447))|0;
      $c = $448;
      $449 = ($448|0)==(1);
      if ($449) {
       $450 = HEAP32[776>>2]|0;
       $451 = $row;
       $452 = (($451) + 1)|0;
       $453 = $452 << 1;
       $454 = $453 & 14;
       $455 = $col;
       $456 = $455 & 1;
       $457 = (($454) + ($456))|0;
       $458 = $457 << 1;
       $459 = $450 >>> $458;
       $460 = $459 & 3;
       $c = $460;
       $461 = $pix;
       $462 = ((($461)) + 2|0);
       $463 = HEAP16[$462>>1]|0;
       $464 = $463&65535;
       $465 = $c;
       $466 = (2 - ($465))|0;
       $467 = $pix;
       $468 = ((($467)) + -8|0);
       $469 = (($468) + ($466<<1)|0);
       $470 = HEAP16[$469>>1]|0;
       $471 = $470&65535;
       $472 = $c;
       $473 = (2 - ($472))|0;
       $474 = $pix;
       $475 = ((($474)) + 8|0);
       $476 = (($475) + ($473<<1)|0);
       $477 = HEAP16[$476>>1]|0;
       $478 = $477&65535;
       $479 = (($471) + ($478))|0;
       $480 = $rix;
       $481 = ((($480)) + -6|0);
       $482 = ((($481)) + 2|0);
       $483 = HEAP16[$482>>1]|0;
       $484 = $483&65535;
       $485 = (($479) - ($484))|0;
       $486 = $rix;
       $487 = ((($486)) + 6|0);
       $488 = ((($487)) + 2|0);
       $489 = HEAP16[$488>>1]|0;
       $490 = $489&65535;
       $491 = (($485) - ($490))|0;
       $492 = $491 >> 1;
       $493 = (($464) + ($492))|0;
       $val = $493;
       $494 = $val;
       $495 = ($494|0)<(65535);
       $496 = $val;
       $497 = $495 ? $496 : 65535;
       $498 = (0)>($497|0);
       if ($498) {
        $504 = 0;
       } else {
        $499 = $val;
        $500 = ($499|0)<(65535);
        $501 = $val;
        $502 = $500 ? $501 : 65535;
        $504 = $502;
       }
       $503 = $504&65535;
       $505 = $c;
       $506 = (2 - ($505))|0;
       $507 = $rix;
       $508 = (($507) + ($506<<1)|0);
       HEAP16[$508>>1] = $503;
       $509 = $pix;
       $510 = ((($509)) + 2|0);
       $511 = HEAP16[$510>>1]|0;
       $512 = $511&65535;
       $513 = $c;
       $514 = HEAP16[580076>>1]|0;
       $515 = $514&65535;
       $516 = (0 - ($515))|0;
       $517 = $pix;
       $518 = (($517) + ($516<<3)|0);
       $519 = (($518) + ($513<<1)|0);
       $520 = HEAP16[$519>>1]|0;
       $521 = $520&65535;
       $522 = $c;
       $523 = HEAP16[580076>>1]|0;
       $524 = $523&65535;
       $525 = $pix;
       $526 = (($525) + ($524<<3)|0);
       $527 = (($526) + ($522<<1)|0);
       $528 = HEAP16[$527>>1]|0;
       $529 = $528&65535;
       $530 = (($521) + ($529))|0;
       $531 = $rix;
       $532 = ((($531)) + -3072|0);
       $533 = ((($532)) + 2|0);
       $534 = HEAP16[$533>>1]|0;
       $535 = $534&65535;
       $536 = (($530) - ($535))|0;
       $537 = $rix;
       $538 = ((($537)) + 3072|0);
       $539 = ((($538)) + 2|0);
       $540 = HEAP16[$539>>1]|0;
       $541 = $540&65535;
       $542 = (($536) - ($541))|0;
       $543 = $542 >> 1;
       $544 = (($512) + ($543))|0;
       $val = $544;
      } else {
       $545 = $rix;
       $546 = ((($545)) + 2|0);
       $547 = HEAP16[$546>>1]|0;
       $548 = $547&65535;
       $549 = $c;
       $550 = HEAP16[580076>>1]|0;
       $551 = $550&65535;
       $552 = (0 - ($551))|0;
       $553 = (($552) - 1)|0;
       $554 = $pix;
       $555 = (($554) + ($553<<3)|0);
       $556 = (($555) + ($549<<1)|0);
       $557 = HEAP16[$556>>1]|0;
       $558 = $557&65535;
       $559 = $c;
       $560 = HEAP16[580076>>1]|0;
       $561 = $560&65535;
       $562 = (0 - ($561))|0;
       $563 = (($562) + 1)|0;
       $564 = $pix;
       $565 = (($564) + ($563<<3)|0);
       $566 = (($565) + ($559<<1)|0);
       $567 = HEAP16[$566>>1]|0;
       $568 = $567&65535;
       $569 = (($558) + ($568))|0;
       $570 = $c;
       $571 = HEAP16[580076>>1]|0;
       $572 = $571&65535;
       $573 = (($572) - 1)|0;
       $574 = $pix;
       $575 = (($574) + ($573<<3)|0);
       $576 = (($575) + ($570<<1)|0);
       $577 = HEAP16[$576>>1]|0;
       $578 = $577&65535;
       $579 = (($569) + ($578))|0;
       $580 = $c;
       $581 = HEAP16[580076>>1]|0;
       $582 = $581&65535;
       $583 = (($582) + 1)|0;
       $584 = $pix;
       $585 = (($584) + ($583<<3)|0);
       $586 = (($585) + ($580<<1)|0);
       $587 = HEAP16[$586>>1]|0;
       $588 = $587&65535;
       $589 = (($579) + ($588))|0;
       $590 = $rix;
       $591 = ((($590)) + -3078|0);
       $592 = ((($591)) + 2|0);
       $593 = HEAP16[$592>>1]|0;
       $594 = $593&65535;
       $595 = (($589) - ($594))|0;
       $596 = $rix;
       $597 = ((($596)) + -3066|0);
       $598 = ((($597)) + 2|0);
       $599 = HEAP16[$598>>1]|0;
       $600 = $599&65535;
       $601 = (($595) - ($600))|0;
       $602 = $rix;
       $603 = ((($602)) + 3066|0);
       $604 = ((($603)) + 2|0);
       $605 = HEAP16[$604>>1]|0;
       $606 = $605&65535;
       $607 = (($601) - ($606))|0;
       $608 = $rix;
       $609 = ((($608)) + 3078|0);
       $610 = ((($609)) + 2|0);
       $611 = HEAP16[$610>>1]|0;
       $612 = $611&65535;
       $613 = (($607) - ($612))|0;
       $614 = (($613) + 1)|0;
       $615 = $614 >> 2;
       $616 = (($548) + ($615))|0;
       $val = $616;
      }
      $617 = $val;
      $618 = ($617|0)<(65535);
      $619 = $val;
      $620 = $618 ? $619 : 65535;
      $621 = (0)>($620|0);
      if ($621) {
       $627 = 0;
      } else {
       $622 = $val;
       $623 = ($622|0)<(65535);
       $624 = $val;
       $625 = $623 ? $624 : 65535;
       $627 = $625;
      }
      $626 = $627&65535;
      $628 = $c;
      $629 = $rix;
      $630 = (($629) + ($628<<1)|0);
      HEAP16[$630>>1] = $626;
      $631 = HEAP32[776>>2]|0;
      $632 = $row;
      $633 = $632 << 1;
      $634 = $633 & 14;
      $635 = $col;
      $636 = $635 & 1;
      $637 = (($634) + ($636))|0;
      $638 = $637 << 1;
      $639 = $631 >>> $638;
      $640 = $639 & 3;
      $c = $640;
      $641 = $c;
      $642 = $pix;
      $643 = (($642) + ($641<<1)|0);
      $644 = HEAP16[$643>>1]|0;
      $645 = $c;
      $646 = $rix;
      $647 = (($646) + ($645<<1)|0);
      HEAP16[$647>>1] = $644;
      $648 = $rix;
      $649 = $lix;
      _cielab($648,$649);
      $650 = $col;
      $651 = (($650) + 1)|0;
      $col = $651;
     }
     $652 = $row;
     $653 = (($652) + 1)|0;
     $row = $653;
    }
    $654 = $d;
    $655 = (($654) + 1)|0;
    $d = $655;
   }
   $656 = $homo;
   _memset(($656|0),0,524288)|0;
   $657 = $top;
   $658 = (($657) + 2)|0;
   $row = $658;
   while(1) {
    $659 = $row;
    $660 = $top;
    $661 = (($660) + 512)|0;
    $662 = (($661) - 2)|0;
    $663 = ($659|0)<($662|0);
    if (!($663)) {
     break;
    }
    $664 = $row;
    $665 = HEAP16[580074>>1]|0;
    $666 = $665&65535;
    $667 = (($666) - 4)|0;
    $668 = ($664|0)<($667|0);
    if (!($668)) {
     break;
    }
    $669 = $row;
    $670 = $top;
    $671 = (($669) - ($670))|0;
    $tr = $671;
    $672 = $left;
    $673 = (($672) + 2)|0;
    $col = $673;
    while(1) {
     $674 = $col;
     $675 = $left;
     $676 = (($675) + 512)|0;
     $677 = (($676) - 2)|0;
     $678 = ($674|0)<($677|0);
     if (!($678)) {
      break;
     }
     $679 = $col;
     $680 = HEAP16[580076>>1]|0;
     $681 = $680&65535;
     $682 = (($681) - 4)|0;
     $683 = ($679|0)<($682|0);
     if (!($683)) {
      break;
     }
     $684 = $col;
     $685 = $left;
     $686 = (($684) - ($685))|0;
     $tc = $686;
     $d = 0;
     while(1) {
      $687 = $d;
      $688 = ($687|0)<(2);
      if (!($688)) {
       break;
      }
      $689 = $tc;
      $690 = $tr;
      $691 = $d;
      $692 = $lab;
      $693 = (($692) + (Math_imul($691, 1572864)|0)|0);
      $694 = (($693) + (($690*3072)|0)|0);
      $695 = (($694) + (($689*6)|0)|0);
      $lix = $695;
      $i = 0;
      while(1) {
       $696 = $i;
       $697 = ($696|0)<(4);
       if (!($697)) {
        break;
       }
       $698 = $lix;
       $699 = HEAP16[$698>>1]|0;
       $700 = $699 << 16 >> 16;
       $701 = $i;
       $702 = (293396 + ($701<<2)|0);
       $703 = HEAP32[$702>>2]|0;
       $704 = $lix;
       $705 = (($704) + (($703*6)|0)|0);
       $706 = HEAP16[$705>>1]|0;
       $707 = $706 << 16 >> 16;
       $708 = (($700) - ($707))|0;
       $709 = $lix;
       $710 = HEAP16[$709>>1]|0;
       $711 = $710 << 16 >> 16;
       $712 = $i;
       $713 = (293396 + ($712<<2)|0);
       $714 = HEAP32[$713>>2]|0;
       $715 = $lix;
       $716 = (($715) + (($714*6)|0)|0);
       $717 = HEAP16[$716>>1]|0;
       $718 = $717 << 16 >> 16;
       $719 = (($711) - ($718))|0;
       $720 = $719 >> 31;
       $721 = $708 ^ $720;
       $722 = $lix;
       $723 = HEAP16[$722>>1]|0;
       $724 = $723 << 16 >> 16;
       $725 = $i;
       $726 = (293396 + ($725<<2)|0);
       $727 = HEAP32[$726>>2]|0;
       $728 = $lix;
       $729 = (($728) + (($727*6)|0)|0);
       $730 = HEAP16[$729>>1]|0;
       $731 = $730 << 16 >> 16;
       $732 = (($724) - ($731))|0;
       $733 = $732 >> 31;
       $734 = (($721) - ($733))|0;
       $735 = $i;
       $736 = $d;
       $737 = (($ldiff) + ($736<<4)|0);
       $738 = (($737) + ($735<<2)|0);
       HEAP32[$738>>2] = $734;
       $739 = $lix;
       $740 = ((($739)) + 2|0);
       $741 = HEAP16[$740>>1]|0;
       $742 = $741 << 16 >> 16;
       $743 = $i;
       $744 = (293396 + ($743<<2)|0);
       $745 = HEAP32[$744>>2]|0;
       $746 = $lix;
       $747 = (($746) + (($745*6)|0)|0);
       $748 = ((($747)) + 2|0);
       $749 = HEAP16[$748>>1]|0;
       $750 = $749 << 16 >> 16;
       $751 = (($742) - ($750))|0;
       $752 = $lix;
       $753 = ((($752)) + 2|0);
       $754 = HEAP16[$753>>1]|0;
       $755 = $754 << 16 >> 16;
       $756 = $i;
       $757 = (293396 + ($756<<2)|0);
       $758 = HEAP32[$757>>2]|0;
       $759 = $lix;
       $760 = (($759) + (($758*6)|0)|0);
       $761 = ((($760)) + 2|0);
       $762 = HEAP16[$761>>1]|0;
       $763 = $762 << 16 >> 16;
       $764 = (($755) - ($763))|0;
       $765 = Math_imul($751, $764)|0;
       $766 = $lix;
       $767 = ((($766)) + 4|0);
       $768 = HEAP16[$767>>1]|0;
       $769 = $768 << 16 >> 16;
       $770 = $i;
       $771 = (293396 + ($770<<2)|0);
       $772 = HEAP32[$771>>2]|0;
       $773 = $lix;
       $774 = (($773) + (($772*6)|0)|0);
       $775 = ((($774)) + 4|0);
       $776 = HEAP16[$775>>1]|0;
       $777 = $776 << 16 >> 16;
       $778 = (($769) - ($777))|0;
       $779 = $lix;
       $780 = ((($779)) + 4|0);
       $781 = HEAP16[$780>>1]|0;
       $782 = $781 << 16 >> 16;
       $783 = $i;
       $784 = (293396 + ($783<<2)|0);
       $785 = HEAP32[$784>>2]|0;
       $786 = $lix;
       $787 = (($786) + (($785*6)|0)|0);
       $788 = ((($787)) + 4|0);
       $789 = HEAP16[$788>>1]|0;
       $790 = $789 << 16 >> 16;
       $791 = (($782) - ($790))|0;
       $792 = Math_imul($778, $791)|0;
       $793 = (($765) + ($792))|0;
       $794 = $i;
       $795 = $d;
       $796 = (($abdiff) + ($795<<4)|0);
       $797 = (($796) + ($794<<2)|0);
       HEAP32[$797>>2] = $793;
       $798 = $i;
       $799 = (($798) + 1)|0;
       $i = $799;
      }
      $800 = $d;
      $801 = (($800) + 1)|0;
      $d = $801;
     }
     $802 = HEAP32[$ldiff>>2]|0;
     $803 = ((($ldiff)) + 4|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = ($802>>>0)>($804>>>0);
     $806 = HEAP32[$ldiff>>2]|0;
     $807 = ((($ldiff)) + 4|0);
     $808 = HEAP32[$807>>2]|0;
     $809 = $805 ? $806 : $808;
     $810 = ((($ldiff)) + 16|0);
     $811 = ((($810)) + 8|0);
     $812 = HEAP32[$811>>2]|0;
     $813 = ((($ldiff)) + 16|0);
     $814 = ((($813)) + 12|0);
     $815 = HEAP32[$814>>2]|0;
     $816 = ($812>>>0)>($815>>>0);
     $817 = ((($ldiff)) + 16|0);
     $818 = ((($817)) + 8|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = ((($817)) + 12|0);
     $821 = HEAP32[$820>>2]|0;
     $822 = $816 ? $819 : $821;
     $823 = ($809>>>0)<($822>>>0);
     if ($823) {
      $824 = HEAP32[$ldiff>>2]|0;
      $825 = ((($ldiff)) + 4|0);
      $826 = HEAP32[$825>>2]|0;
      $827 = ($824>>>0)>($826>>>0);
      $828 = HEAP32[$ldiff>>2]|0;
      $829 = ((($ldiff)) + 4|0);
      $830 = HEAP32[$829>>2]|0;
      $831 = $827 ? $828 : $830;
      $845 = $831;
     } else {
      $832 = ((($ldiff)) + 16|0);
      $833 = ((($832)) + 8|0);
      $834 = HEAP32[$833>>2]|0;
      $835 = ((($ldiff)) + 16|0);
      $836 = ((($835)) + 12|0);
      $837 = HEAP32[$836>>2]|0;
      $838 = ($834>>>0)>($837>>>0);
      $839 = ((($ldiff)) + 16|0);
      $840 = ((($839)) + 8|0);
      $841 = HEAP32[$840>>2]|0;
      $842 = ((($839)) + 12|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = $838 ? $841 : $843;
      $845 = $844;
     }
     $leps = $845;
     $846 = HEAP32[$abdiff>>2]|0;
     $847 = ((($abdiff)) + 4|0);
     $848 = HEAP32[$847>>2]|0;
     $849 = ($846>>>0)>($848>>>0);
     $850 = HEAP32[$abdiff>>2]|0;
     $851 = ((($abdiff)) + 4|0);
     $852 = HEAP32[$851>>2]|0;
     $853 = $849 ? $850 : $852;
     $854 = ((($abdiff)) + 16|0);
     $855 = ((($854)) + 8|0);
     $856 = HEAP32[$855>>2]|0;
     $857 = ((($abdiff)) + 16|0);
     $858 = ((($857)) + 12|0);
     $859 = HEAP32[$858>>2]|0;
     $860 = ($856>>>0)>($859>>>0);
     $861 = ((($abdiff)) + 16|0);
     $862 = ((($861)) + 8|0);
     $863 = HEAP32[$862>>2]|0;
     $864 = ((($861)) + 12|0);
     $865 = HEAP32[$864>>2]|0;
     $866 = $860 ? $863 : $865;
     $867 = ($853>>>0)<($866>>>0);
     if ($867) {
      $868 = HEAP32[$abdiff>>2]|0;
      $869 = ((($abdiff)) + 4|0);
      $870 = HEAP32[$869>>2]|0;
      $871 = ($868>>>0)>($870>>>0);
      $872 = HEAP32[$abdiff>>2]|0;
      $873 = ((($abdiff)) + 4|0);
      $874 = HEAP32[$873>>2]|0;
      $875 = $871 ? $872 : $874;
      $889 = $875;
     } else {
      $876 = ((($abdiff)) + 16|0);
      $877 = ((($876)) + 8|0);
      $878 = HEAP32[$877>>2]|0;
      $879 = ((($abdiff)) + 16|0);
      $880 = ((($879)) + 12|0);
      $881 = HEAP32[$880>>2]|0;
      $882 = ($878>>>0)>($881>>>0);
      $883 = ((($abdiff)) + 16|0);
      $884 = ((($883)) + 8|0);
      $885 = HEAP32[$884>>2]|0;
      $886 = ((($883)) + 12|0);
      $887 = HEAP32[$886>>2]|0;
      $888 = $882 ? $885 : $887;
      $889 = $888;
     }
     $abeps = $889;
     $d = 0;
     while(1) {
      $890 = $d;
      $891 = ($890|0)<(2);
      if (!($891)) {
       break;
      }
      $i = 0;
      while(1) {
       $892 = $i;
       $893 = ($892|0)<(4);
       if (!($893)) {
        break;
       }
       $894 = $i;
       $895 = $d;
       $896 = (($ldiff) + ($895<<4)|0);
       $897 = (($896) + ($894<<2)|0);
       $898 = HEAP32[$897>>2]|0;
       $899 = $leps;
       $900 = ($898>>>0)<=($899>>>0);
       if ($900) {
        $901 = $i;
        $902 = $d;
        $903 = (($abdiff) + ($902<<4)|0);
        $904 = (($903) + ($901<<2)|0);
        $905 = HEAP32[$904>>2]|0;
        $906 = $abeps;
        $907 = ($905>>>0)<=($906>>>0);
        if ($907) {
         $908 = $tc;
         $909 = $tr;
         $910 = $d;
         $911 = $homo;
         $912 = (($911) + ($910<<18)|0);
         $913 = (($912) + ($909<<9)|0);
         $914 = (($913) + ($908)|0);
         $915 = HEAP8[$914>>0]|0;
         $916 = (($915) + 1)<<24>>24;
         HEAP8[$914>>0] = $916;
        }
       }
       $917 = $i;
       $918 = (($917) + 1)|0;
       $i = $918;
      }
      $919 = $d;
      $920 = (($919) + 1)|0;
      $d = $920;
     }
     $921 = $col;
     $922 = (($921) + 1)|0;
     $col = $922;
    }
    $923 = $row;
    $924 = (($923) + 1)|0;
    $row = $924;
   }
   $925 = $top;
   $926 = (($925) + 3)|0;
   $row = $926;
   while(1) {
    $927 = $row;
    $928 = $top;
    $929 = (($928) + 512)|0;
    $930 = (($929) - 3)|0;
    $931 = ($927|0)<($930|0);
    if (!($931)) {
     break;
    }
    $932 = $row;
    $933 = HEAP16[580074>>1]|0;
    $934 = $933&65535;
    $935 = (($934) - 5)|0;
    $936 = ($932|0)<($935|0);
    if (!($936)) {
     break;
    }
    $937 = $row;
    $938 = $top;
    $939 = (($937) - ($938))|0;
    $tr = $939;
    $940 = $left;
    $941 = (($940) + 3)|0;
    $col = $941;
    while(1) {
     $942 = $col;
     $943 = $left;
     $944 = (($943) + 512)|0;
     $945 = (($944) - 3)|0;
     $946 = ($942|0)<($945|0);
     if (!($946)) {
      break;
     }
     $947 = $col;
     $948 = HEAP16[580076>>1]|0;
     $949 = $948&65535;
     $950 = (($949) - 5)|0;
     $951 = ($947|0)<($950|0);
     if (!($951)) {
      break;
     }
     $952 = $col;
     $953 = $left;
     $954 = (($952) - ($953))|0;
     $tc = $954;
     $d = 0;
     while(1) {
      $955 = $d;
      $956 = ($955|0)<(2);
      if (!($956)) {
       break;
      }
      $957 = $d;
      $958 = (($hm) + ($957<<2)|0);
      HEAP32[$958>>2] = 0;
      $959 = $tr;
      $960 = (($959) - 1)|0;
      $i = $960;
      while(1) {
       $961 = $i;
       $962 = $tr;
       $963 = (($962) + 1)|0;
       $964 = ($961|0)<=($963|0);
       if (!($964)) {
        break;
       }
       $965 = $tc;
       $966 = (($965) - 1)|0;
       $j = $966;
       while(1) {
        $967 = $j;
        $968 = $tc;
        $969 = (($968) + 1)|0;
        $970 = ($967|0)<=($969|0);
        if (!($970)) {
         break;
        }
        $971 = $j;
        $972 = $i;
        $973 = $d;
        $974 = $homo;
        $975 = (($974) + ($973<<18)|0);
        $976 = (($975) + ($972<<9)|0);
        $977 = (($976) + ($971)|0);
        $978 = HEAP8[$977>>0]|0;
        $979 = $978 << 24 >> 24;
        $980 = $d;
        $981 = (($hm) + ($980<<2)|0);
        $982 = HEAP32[$981>>2]|0;
        $983 = (($982) + ($979))|0;
        HEAP32[$981>>2] = $983;
        $984 = $j;
        $985 = (($984) + 1)|0;
        $j = $985;
       }
       $986 = $i;
       $987 = (($986) + 1)|0;
       $i = $987;
      }
      $988 = $d;
      $989 = (($988) + 1)|0;
      $d = $989;
     }
     $990 = HEAP32[$hm>>2]|0;
     $991 = ((($hm)) + 4|0);
     $992 = HEAP32[$991>>2]|0;
     $993 = ($990|0)!=($992|0);
     $c = 0;
     L150: do {
      if ($993) {
       while(1) {
        $994 = $c;
        $995 = ($994|0)<(3);
        if (!($995)) {
         break L150;
        }
        $996 = $c;
        $997 = $tc;
        $998 = $tr;
        $999 = ((($hm)) + 4|0);
        $1000 = HEAP32[$999>>2]|0;
        $1001 = HEAP32[$hm>>2]|0;
        $1002 = ($1000|0)>($1001|0);
        $1003 = $1002&1;
        $1004 = $rgb;
        $1005 = (($1004) + (Math_imul($1003, 1572864)|0)|0);
        $1006 = (($1005) + (($998*3072)|0)|0);
        $1007 = (($1006) + (($997*6)|0)|0);
        $1008 = (($1007) + ($996<<1)|0);
        $1009 = HEAP16[$1008>>1]|0;
        $1010 = $c;
        $1011 = $row;
        $1012 = HEAP16[580076>>1]|0;
        $1013 = $1012&65535;
        $1014 = Math_imul($1011, $1013)|0;
        $1015 = $col;
        $1016 = (($1014) + ($1015))|0;
        $1017 = HEAP32[972>>2]|0;
        $1018 = (($1017) + ($1016<<3)|0);
        $1019 = (($1018) + ($1010<<1)|0);
        HEAP16[$1019>>1] = $1009;
        $1020 = $c;
        $1021 = (($1020) + 1)|0;
        $c = $1021;
       }
      } else {
       while(1) {
        $1022 = $c;
        $1023 = ($1022|0)<(3);
        if (!($1023)) {
         break L150;
        }
        $1024 = $c;
        $1025 = $tc;
        $1026 = $tr;
        $1027 = $rgb;
        $1028 = (($1027) + (($1026*3072)|0)|0);
        $1029 = (($1028) + (($1025*6)|0)|0);
        $1030 = (($1029) + ($1024<<1)|0);
        $1031 = HEAP16[$1030>>1]|0;
        $1032 = $1031&65535;
        $1033 = $c;
        $1034 = $tc;
        $1035 = $tr;
        $1036 = $rgb;
        $1037 = ((($1036)) + 1572864|0);
        $1038 = (($1037) + (($1035*3072)|0)|0);
        $1039 = (($1038) + (($1034*6)|0)|0);
        $1040 = (($1039) + ($1033<<1)|0);
        $1041 = HEAP16[$1040>>1]|0;
        $1042 = $1041&65535;
        $1043 = (($1032) + ($1042))|0;
        $1044 = $1043 >> 1;
        $1045 = $1044&65535;
        $1046 = $c;
        $1047 = $row;
        $1048 = HEAP16[580076>>1]|0;
        $1049 = $1048&65535;
        $1050 = Math_imul($1047, $1049)|0;
        $1051 = $col;
        $1052 = (($1050) + ($1051))|0;
        $1053 = HEAP32[972>>2]|0;
        $1054 = (($1053) + ($1052<<3)|0);
        $1055 = (($1054) + ($1046<<1)|0);
        HEAP16[$1055>>1] = $1045;
        $1056 = $c;
        $1057 = (($1056) + 1)|0;
        $c = $1057;
       }
      }
     } while(0);
     $1058 = $col;
     $1059 = (($1058) + 1)|0;
     $col = $1059;
    }
    $1060 = $row;
    $1061 = (($1060) + 1)|0;
    $row = $1061;
   }
   $1062 = $left;
   $1063 = (($1062) + 506)|0;
   $left = $1063;
  }
  $1064 = (($20) + 506)|0;
  $top = $1064;
 }
 $1065 = $buffer;
 _free($1065);
 STACKTOP = sp;return;
}
function _median_filter() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $i = 0, $j = 0, $k = 0, $med = 0, $pass = 0, $pix = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $med = sp + 4|0;
 $pass = 1;
 while(1) {
  $0 = $pass;
  $1 = HEAP32[740>>2]|0;
  $2 = ($0|0)<=($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[712>>2]|0;
  $4 = ($3|0)!=(0);
  if ($4) {
   $5 = HEAP32[447952>>2]|0;
   $6 = $pass;
   HEAP32[$vararg_buffer>>2] = $6;
   (_fprintf($5,613033,$vararg_buffer)|0);
  }
  $c = 0;
  while(1) {
   $7 = $c;
   $8 = ($7|0)<(3);
   if (!($8)) {
    break;
   }
   $9 = HEAP32[972>>2]|0;
   $pix = $9;
   while(1) {
    $10 = $pix;
    $11 = HEAP32[972>>2]|0;
    $12 = HEAP16[580076>>1]|0;
    $13 = $12&65535;
    $14 = HEAP16[580074>>1]|0;
    $15 = $14&65535;
    $16 = Math_imul($13, $15)|0;
    $17 = (($11) + ($16<<3)|0);
    $18 = ($10>>>0)<($17>>>0);
    if (!($18)) {
     break;
    }
    $19 = $c;
    $20 = $pix;
    $21 = (($20) + ($19<<1)|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $pix;
    $24 = ((($23)) + 6|0);
    HEAP16[$24>>1] = $22;
    $25 = $pix;
    $26 = ((($25)) + 8|0);
    $pix = $26;
   }
   $27 = HEAP32[972>>2]|0;
   $28 = HEAP16[580076>>1]|0;
   $29 = $28&65535;
   $30 = (($27) + ($29<<3)|0);
   $pix = $30;
   while(1) {
    $31 = $pix;
    $32 = HEAP32[972>>2]|0;
    $33 = HEAP16[580076>>1]|0;
    $34 = $33&65535;
    $35 = HEAP16[580074>>1]|0;
    $36 = $35&65535;
    $37 = (($36) - 1)|0;
    $38 = Math_imul($34, $37)|0;
    $39 = (($32) + ($38<<3)|0);
    $40 = ($31>>>0)<($39>>>0);
    if (!($40)) {
     break;
    }
    $41 = $pix;
    $42 = HEAP32[972>>2]|0;
    $43 = $41;
    $44 = $42;
    $45 = (($43) - ($44))|0;
    $46 = (($45|0) / 8)&-1;
    $47 = (($46) + 1)|0;
    $48 = HEAP16[580076>>1]|0;
    $49 = $48&65535;
    $50 = (($47|0) % ($49|0))&-1;
    $51 = ($50|0)<(2);
    if (!($51)) {
     $k = 0;
     $52 = HEAP16[580076>>1]|0;
     $53 = $52&65535;
     $54 = (0 - ($53))|0;
     $i = $54;
     while(1) {
      $55 = $i;
      $56 = HEAP16[580076>>1]|0;
      $57 = $56&65535;
      $58 = ($55|0)<=($57|0);
      if (!($58)) {
       break;
      }
      $59 = $i;
      $60 = (($59) - 1)|0;
      $j = $60;
      while(1) {
       $61 = $j;
       $62 = $i;
       $63 = (($62) + 1)|0;
       $64 = ($61|0)<=($63|0);
       if (!($64)) {
        break;
       }
       $65 = $j;
       $66 = $pix;
       $67 = (($66) + ($65<<3)|0);
       $68 = ((($67)) + 6|0);
       $69 = HEAP16[$68>>1]|0;
       $70 = $69&65535;
       $71 = $j;
       $72 = $pix;
       $73 = (($72) + ($71<<3)|0);
       $74 = ((($73)) + 2|0);
       $75 = HEAP16[$74>>1]|0;
       $76 = $75&65535;
       $77 = (($70) - ($76))|0;
       $78 = $k;
       $79 = (($78) + 1)|0;
       $k = $79;
       $80 = (($med) + ($78<<2)|0);
       HEAP32[$80>>2] = $77;
       $81 = $j;
       $82 = (($81) + 1)|0;
       $j = $82;
      }
      $83 = HEAP16[580076>>1]|0;
      $84 = $83&65535;
      $85 = $i;
      $86 = (($85) + ($84))|0;
      $i = $86;
     }
     $i = 0;
     while(1) {
      $87 = $i;
      $88 = ($87>>>0)<(38);
      if (!($88)) {
       break;
      }
      $89 = $i;
      $90 = (612995 + ($89)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91&255;
      $93 = (($med) + ($92<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = $i;
      $96 = (($95) + 1)|0;
      $97 = (612995 + ($96)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = $98&255;
      $100 = (($med) + ($99<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($94|0)>($101|0);
      if ($102) {
       $103 = $i;
       $104 = (612995 + ($103)|0);
       $105 = HEAP8[$104>>0]|0;
       $106 = $105&255;
       $107 = (($med) + ($106<<2)|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = $i;
       $110 = (($109) + 1)|0;
       $111 = (612995 + ($110)|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $114 = (($med) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($108) + ($115))|0;
       $117 = $i;
       $118 = (612995 + ($117)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = $119&255;
       $121 = (($med) + ($120<<2)|0);
       HEAP32[$121>>2] = $116;
       $122 = $i;
       $123 = (612995 + ($122)|0);
       $124 = HEAP8[$123>>0]|0;
       $125 = $124&255;
       $126 = (($med) + ($125<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $i;
       $129 = (($128) + 1)|0;
       $130 = (612995 + ($129)|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = $131&255;
       $133 = (($med) + ($132<<2)|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = (($127) - ($134))|0;
       $136 = $i;
       $137 = (($136) + 1)|0;
       $138 = (612995 + ($137)|0);
       $139 = HEAP8[$138>>0]|0;
       $140 = $139&255;
       $141 = (($med) + ($140<<2)|0);
       HEAP32[$141>>2] = $135;
       $142 = $i;
       $143 = (612995 + ($142)|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144&255;
       $146 = (($med) + ($145<<2)|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $i;
       $149 = (($148) + 1)|0;
       $150 = (612995 + ($149)|0);
       $151 = HEAP8[$150>>0]|0;
       $152 = $151&255;
       $153 = (($med) + ($152<<2)|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($147) - ($154))|0;
       $156 = $i;
       $157 = (612995 + ($156)|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = $158&255;
       $160 = (($med) + ($159<<2)|0);
       HEAP32[$160>>2] = $155;
      }
      $161 = $i;
      $162 = (($161) + 2)|0;
      $i = $162;
     }
     $163 = ((($med)) + 16|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $pix;
     $166 = ((($165)) + 2|0);
     $167 = HEAP16[$166>>1]|0;
     $168 = $167&65535;
     $169 = (($164) + ($168))|0;
     $170 = ($169|0)<(65535);
     if ($170) {
      $171 = ((($med)) + 16|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $pix;
      $174 = ((($173)) + 2|0);
      $175 = HEAP16[$174>>1]|0;
      $176 = $175&65535;
      $177 = (($172) + ($176))|0;
      $179 = $177;
     } else {
      $179 = 65535;
     }
     $178 = (0)>($179|0);
     if ($178) {
      $196 = 0;
     } else {
      $180 = ((($med)) + 16|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $pix;
      $183 = ((($182)) + 2|0);
      $184 = HEAP16[$183>>1]|0;
      $185 = $184&65535;
      $186 = (($181) + ($185))|0;
      $187 = ($186|0)<(65535);
      if ($187) {
       $188 = ((($med)) + 16|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = $pix;
       $191 = ((($190)) + 2|0);
       $192 = HEAP16[$191>>1]|0;
       $193 = $192&65535;
       $194 = (($189) + ($193))|0;
       $196 = $194;
      } else {
       $196 = 65535;
      }
     }
     $195 = $196&65535;
     $197 = $c;
     $198 = $pix;
     $199 = (($198) + ($197<<1)|0);
     HEAP16[$199>>1] = $195;
    }
    $200 = $pix;
    $201 = ((($200)) + 8|0);
    $pix = $201;
   }
   $202 = $c;
   $203 = (($202) + 2)|0;
   $c = $203;
  }
  $204 = $pass;
  $205 = (($204) + 1)|0;
  $pass = $205;
 }
 STACKTOP = sp;return;
}
function _blend_highlights() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $cam = 0, $chratio = 0.0, $clip = 0, $col = 0, $i = 0;
 var $j = 0, $lab = 0, $row = 0, $sum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cam = sp + 48|0;
 $lab = sp + 16|0;
 $sum = sp + 8|0;
 $clip = 2147483647;
 $0 = HEAP32[980>>2]|0;
 $1 = (($0) - 3)|0;
 $2 = ($1>>>0)>(1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[712>>2]|0;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[447952>>2]|0;
  (_fprintf($5,613059,$vararg_buffer)|0);
 }
 $c = 0;
 while(1) {
  $6 = $c;
  $7 = HEAP32[980>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = $clip;
  $10 = $c;
  $11 = (948 + ($10<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = 65535.0 * $12;
  $14 = (~~(($13)));
  $i = $14;
  $15 = ($9|0)>($14|0);
  if ($15) {
   $16 = $i;
   $clip = $16;
  }
  $17 = $c;
  $18 = (($17) + 1)|0;
  $c = $18;
 }
 $row = 0;
 while(1) {
  $19 = $row;
  $20 = HEAP16[580074>>1]|0;
  $21 = $20&65535;
  $22 = ($19|0)<($21|0);
  if (!($22)) {
   break;
  }
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = HEAP16[580076>>1]|0;
   $25 = $24&65535;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    break;
   }
   $c = 0;
   while(1) {
    $27 = $c;
    $28 = HEAP32[980>>2]|0;
    $29 = ($27>>>0)<($28>>>0);
    if (!($29)) {
     break;
    }
    $30 = $c;
    $31 = $row;
    $32 = HEAP16[580076>>1]|0;
    $33 = $32&65535;
    $34 = Math_imul($31, $33)|0;
    $35 = $col;
    $36 = (($34) + ($35))|0;
    $37 = HEAP32[972>>2]|0;
    $38 = (($37) + ($36<<3)|0);
    $39 = (($38) + ($30<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $42 = $clip;
    $43 = ($41|0)>($42|0);
    if ($43) {
     break;
    }
    $44 = $c;
    $45 = (($44) + 1)|0;
    $c = $45;
   }
   $46 = $c;
   $47 = HEAP32[980>>2]|0;
   $48 = ($46|0)==($47|0);
   L25: do {
    if (!($48)) {
     $c = 0;
     while(1) {
      $49 = $c;
      $50 = HEAP32[980>>2]|0;
      $51 = ($49>>>0)<($50>>>0);
      if (!($51)) {
       break;
      }
      $52 = $c;
      $53 = $row;
      $54 = HEAP16[580076>>1]|0;
      $55 = $54&65535;
      $56 = Math_imul($53, $55)|0;
      $57 = $col;
      $58 = (($56) + ($57))|0;
      $59 = HEAP32[972>>2]|0;
      $60 = (($59) + ($58<<3)|0);
      $61 = (($60) + ($52<<1)|0);
      $62 = HEAP16[$61>>1]|0;
      $63 = (+($62&65535));
      $64 = $c;
      $65 = (($cam) + ($64<<2)|0);
      HEAPF32[$65>>2] = $63;
      $66 = $c;
      $67 = (($cam) + ($66<<2)|0);
      $68 = +HEAPF32[$67>>2];
      $69 = $clip;
      $70 = (+($69|0));
      $71 = $68 < $70;
      if ($71) {
       $72 = $c;
       $73 = (($cam) + ($72<<2)|0);
       $74 = +HEAPF32[$73>>2];
       $80 = $74;
      } else {
       $75 = $clip;
       $76 = (+($75|0));
       $80 = $76;
      }
      $77 = $c;
      $78 = ((($cam)) + 16|0);
      $79 = (($78) + ($77<<2)|0);
      HEAPF32[$79>>2] = $80;
      $81 = $c;
      $82 = (($81) + 1)|0;
      $c = $82;
     }
     $i = 0;
     while(1) {
      $83 = $i;
      $84 = ($83|0)<(2);
      if (!($84)) {
       break;
      }
      $c = 0;
      while(1) {
       $85 = $c;
       $86 = HEAP32[980>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if (!($87)) {
        break;
       }
       $j = 0;
       $88 = $c;
       $89 = $i;
       $90 = (($lab) + ($89<<4)|0);
       $91 = (($90) + ($88<<2)|0);
       HEAPF32[$91>>2] = 0.0;
       while(1) {
        $92 = $j;
        $93 = HEAP32[980>>2]|0;
        $94 = ($92>>>0)<($93>>>0);
        if (!($94)) {
         break;
        }
        $95 = $j;
        $96 = $c;
        $97 = HEAP32[980>>2]|0;
        $98 = (($97) - 3)|0;
        $99 = (293412 + ($98<<6)|0);
        $100 = (($99) + ($96<<4)|0);
        $101 = (($100) + ($95<<2)|0);
        $102 = +HEAPF32[$101>>2];
        $103 = $j;
        $104 = $i;
        $105 = (($cam) + ($104<<4)|0);
        $106 = (($105) + ($103<<2)|0);
        $107 = +HEAPF32[$106>>2];
        $108 = $102 * $107;
        $109 = $c;
        $110 = $i;
        $111 = (($lab) + ($110<<4)|0);
        $112 = (($111) + ($109<<2)|0);
        $113 = +HEAPF32[$112>>2];
        $114 = $113 + $108;
        HEAPF32[$112>>2] = $114;
        $115 = $j;
        $116 = (($115) + 1)|0;
        $j = $116;
       }
       $117 = $c;
       $118 = (($117) + 1)|0;
       $c = $118;
      }
      $119 = $i;
      $120 = (($sum) + ($119<<2)|0);
      HEAPF32[$120>>2] = 0.0;
      $c = 1;
      while(1) {
       $121 = $c;
       $122 = HEAP32[980>>2]|0;
       $123 = ($121>>>0)<($122>>>0);
       if (!($123)) {
        break;
       }
       $124 = $c;
       $125 = $i;
       $126 = (($lab) + ($125<<4)|0);
       $127 = (($126) + ($124<<2)|0);
       $128 = +HEAPF32[$127>>2];
       $129 = $c;
       $130 = $i;
       $131 = (($lab) + ($130<<4)|0);
       $132 = (($131) + ($129<<2)|0);
       $133 = +HEAPF32[$132>>2];
       $134 = $128 * $133;
       $135 = $i;
       $136 = (($sum) + ($135<<2)|0);
       $137 = +HEAPF32[$136>>2];
       $138 = $137 + $134;
       HEAPF32[$136>>2] = $138;
       $139 = $c;
       $140 = (($139) + 1)|0;
       $c = $140;
      }
      $141 = $i;
      $142 = (($141) + 1)|0;
      $i = $142;
     }
     $143 = ((($sum)) + 4|0);
     $144 = +HEAPF32[$143>>2];
     $145 = +HEAPF32[$sum>>2];
     $146 = $144 / $145;
     $147 = $146;
     $148 = (+Math_sqrt((+$147)));
     $149 = $148;
     $chratio = $149;
     $c = 1;
     while(1) {
      $150 = $c;
      $151 = HEAP32[980>>2]|0;
      $152 = ($150>>>0)<($151>>>0);
      if (!($152)) {
       break;
      }
      $153 = $chratio;
      $154 = $c;
      $155 = (($lab) + ($154<<2)|0);
      $156 = +HEAPF32[$155>>2];
      $157 = $156 * $153;
      HEAPF32[$155>>2] = $157;
      $158 = $c;
      $159 = (($158) + 1)|0;
      $c = $159;
     }
     $c = 0;
     while(1) {
      $160 = $c;
      $161 = HEAP32[980>>2]|0;
      $162 = ($160>>>0)<($161>>>0);
      if (!($162)) {
       break;
      }
      $j = 0;
      $163 = $c;
      $164 = (($cam) + ($163<<2)|0);
      HEAPF32[$164>>2] = 0.0;
      while(1) {
       $165 = $j;
       $166 = HEAP32[980>>2]|0;
       $167 = ($165>>>0)<($166>>>0);
       if (!($167)) {
        break;
       }
       $168 = $j;
       $169 = $c;
       $170 = HEAP32[980>>2]|0;
       $171 = (($170) - 3)|0;
       $172 = (293540 + ($171<<6)|0);
       $173 = (($172) + ($169<<4)|0);
       $174 = (($173) + ($168<<2)|0);
       $175 = +HEAPF32[$174>>2];
       $176 = $j;
       $177 = (($lab) + ($176<<2)|0);
       $178 = +HEAPF32[$177>>2];
       $179 = $175 * $178;
       $180 = $c;
       $181 = (($cam) + ($180<<2)|0);
       $182 = +HEAPF32[$181>>2];
       $183 = $182 + $179;
       HEAPF32[$181>>2] = $183;
       $184 = $j;
       $185 = (($184) + 1)|0;
       $j = $185;
      }
      $186 = $c;
      $187 = (($186) + 1)|0;
      $c = $187;
     }
     $c = 0;
     while(1) {
      $188 = $c;
      $189 = HEAP32[980>>2]|0;
      $190 = ($188>>>0)<($189>>>0);
      if (!($190)) {
       break L25;
      }
      $191 = $c;
      $192 = (($cam) + ($191<<2)|0);
      $193 = +HEAPF32[$192>>2];
      $194 = HEAP32[980>>2]|0;
      $195 = (+($194>>>0));
      $196 = $193 / $195;
      $197 = (~~(($196))&65535);
      $198 = $c;
      $199 = $row;
      $200 = HEAP16[580076>>1]|0;
      $201 = $200&65535;
      $202 = Math_imul($199, $201)|0;
      $203 = $col;
      $204 = (($202) + ($203))|0;
      $205 = HEAP32[972>>2]|0;
      $206 = (($205) + ($204<<3)|0);
      $207 = (($206) + ($198<<1)|0);
      HEAP16[$207>>1] = $197;
      $208 = $c;
      $209 = (($208) + 1)|0;
      $c = $209;
     }
    }
   } while(0);
   $210 = $col;
   $211 = (($210) + 1)|0;
   $col = $211;
  }
  $212 = $row;
  $213 = (($212) + 1)|0;
  $row = $213;
 }
 STACKTOP = sp;return;
}
function _recover_highlights() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $change = 0, $col = 0, $count = 0, $d = 0, $grow = 0.0, $high = 0, $hsat = 0, $i = 0, $kc = 0, $map = 0, $mcol = 0, $mrow = 0;
 var $pixel = 0, $row = 0, $spread = 0, $sum = 0.0, $val = 0, $vararg_buffer = 0, $wgt = 0.0, $wide = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $hsat = sp + 72|0;
 $0 = HEAP32[712>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[447952>>2]|0;
  (_fprintf($2,613099,$vararg_buffer)|0);
 }
 $3 = HEAP32[708>>2]|0;
 $4 = (4 - ($3))|0;
 $5 = (+($4|0));
 $6 = (+Math_pow(2.0,(+$5)));
 $7 = $6;
 $grow = $7;
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = HEAP32[980>>2]|0;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $c;
  $12 = (948 + ($11<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = 32000.0 * $13;
  $15 = (~~(($14)));
  $16 = $c;
  $17 = (($hsat) + ($16<<2)|0);
  HEAP32[$17>>2] = $15;
  $18 = $c;
  $19 = (($18) + 1)|0;
  $c = $19;
 }
 $kc = 0;
 $c = 1;
 while(1) {
  $20 = $c;
  $21 = HEAP32[980>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $kc;
  $24 = (948 + ($23<<2)|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $c;
  $27 = (948 + ($26<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 < $28;
  if ($29) {
   $30 = $c;
   $kc = $30;
  }
  $31 = $c;
  $32 = (($31) + 1)|0;
  $c = $32;
 }
 $33 = HEAP16[580074>>1]|0;
 $34 = $33&65535;
 $35 = HEAP16[580078>>1]|0;
 $36 = $35&65535;
 $37 = 4 >> $36;
 $38 = (($34|0) / ($37|0))&-1;
 $high = $38;
 $39 = HEAP16[580076>>1]|0;
 $40 = $39&65535;
 $41 = HEAP16[580078>>1]|0;
 $42 = $41&65535;
 $43 = 4 >> $42;
 $44 = (($40|0) / ($43|0))&-1;
 $wide = $44;
 $45 = $high;
 $46 = $wide;
 $47 = $46<<2;
 $48 = (_calloc($45,$47)|0);
 $map = $48;
 $49 = $map;
 _merror($49,613125);
 $c = 0;
 while(1) {
  $50 = $c;
  $51 = HEAP32[980>>2]|0;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $c;
  $54 = $kc;
  $55 = ($53|0)!=($54|0);
  L18: do {
   if ($55) {
    $56 = $map;
    $57 = $high;
    $58 = $wide;
    $59 = Math_imul($57, $58)|0;
    $60 = $59<<2;
    _memset(($56|0),0,($60|0))|0;
    $mrow = 0;
    while(1) {
     $61 = $mrow;
     $62 = $high;
     $63 = ($61>>>0)<($62>>>0);
     if (!($63)) {
      break;
     }
     $mcol = 0;
     while(1) {
      $64 = $mcol;
      $65 = $wide;
      $66 = ($64>>>0)<($65>>>0);
      if (!($66)) {
       break;
      }
      $count = 0;
      $wgt = 0.0;
      $sum = 0.0;
      $67 = $mrow;
      $68 = HEAP16[580078>>1]|0;
      $69 = $68&65535;
      $70 = 4 >> $69;
      $71 = Math_imul($67, $70)|0;
      $row = $71;
      while(1) {
       $72 = $row;
       $73 = $mrow;
       $74 = (($73) + 1)|0;
       $75 = HEAP16[580078>>1]|0;
       $76 = $75&65535;
       $77 = 4 >> $76;
       $78 = Math_imul($74, $77)|0;
       $79 = ($72>>>0)<($78>>>0);
       if (!($79)) {
        break;
       }
       $80 = $mcol;
       $81 = HEAP16[580078>>1]|0;
       $82 = $81&65535;
       $83 = 4 >> $82;
       $84 = Math_imul($80, $83)|0;
       $col = $84;
       while(1) {
        $85 = $col;
        $86 = $mcol;
        $87 = (($86) + 1)|0;
        $88 = HEAP16[580078>>1]|0;
        $89 = $88&65535;
        $90 = 4 >> $89;
        $91 = Math_imul($87, $90)|0;
        $92 = ($85>>>0)<($91>>>0);
        $93 = $row;
        if (!($92)) {
         break;
        }
        $94 = HEAP16[580076>>1]|0;
        $95 = $94&65535;
        $96 = Math_imul($93, $95)|0;
        $97 = $col;
        $98 = (($96) + ($97))|0;
        $99 = HEAP32[972>>2]|0;
        $100 = (($99) + ($98<<3)|0);
        $pixel = $100;
        $101 = $c;
        $102 = $pixel;
        $103 = (($102) + ($101<<1)|0);
        $104 = HEAP16[$103>>1]|0;
        $105 = $104&65535;
        $106 = $c;
        $107 = (($hsat) + ($106<<2)|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (($105|0) / ($108|0))&-1;
        $110 = ($109|0)==(1);
        if ($110) {
         $111 = $kc;
         $112 = $pixel;
         $113 = (($112) + ($111<<1)|0);
         $114 = HEAP16[$113>>1]|0;
         $115 = $114&65535;
         $116 = ($115|0)>(24000);
         if ($116) {
          $117 = $c;
          $118 = $pixel;
          $119 = (($118) + ($117<<1)|0);
          $120 = HEAP16[$119>>1]|0;
          $121 = $120&65535;
          $122 = (+($121|0));
          $123 = $sum;
          $124 = $123 + $122;
          $sum = $124;
          $125 = $kc;
          $126 = $pixel;
          $127 = (($126) + ($125<<1)|0);
          $128 = HEAP16[$127>>1]|0;
          $129 = $128&65535;
          $130 = (+($129|0));
          $131 = $wgt;
          $132 = $131 + $130;
          $wgt = $132;
          $133 = $count;
          $134 = (($133) + 1)|0;
          $count = $134;
         }
        }
        $135 = $col;
        $136 = (($135) + 1)|0;
        $col = $136;
       }
       $137 = (($93) + 1)|0;
       $row = $137;
      }
      $138 = $count;
      $139 = HEAP16[580078>>1]|0;
      $140 = $139&65535;
      $141 = 4 >> $140;
      $142 = HEAP16[580078>>1]|0;
      $143 = $142&65535;
      $144 = 4 >> $143;
      $145 = Math_imul($141, $144)|0;
      $146 = ($138|0)==($145|0);
      if ($146) {
       $147 = $sum;
       $148 = $wgt;
       $149 = $147 / $148;
       $150 = $mrow;
       $151 = $wide;
       $152 = Math_imul($150, $151)|0;
       $153 = $mcol;
       $154 = (($152) + ($153))|0;
       $155 = $map;
       $156 = (($155) + ($154<<2)|0);
       HEAPF32[$156>>2] = $149;
      }
      $157 = $mcol;
      $158 = (($157) + 1)|0;
      $mcol = $158;
     }
     $159 = $mrow;
     $160 = (($159) + 1)|0;
     $mrow = $160;
    }
    $161 = $grow;
    $162 = 32.0 / $161;
    $163 = (~~(($162)));
    $spread = $163;
    while(1) {
     $164 = $spread;
     $165 = (($164) + -1)|0;
     $spread = $165;
     $166 = ($164|0)!=(0);
     if (!($166)) {
      break;
     }
     $mrow = 0;
     while(1) {
      $167 = $mrow;
      $168 = $high;
      $169 = ($167>>>0)<($168>>>0);
      if (!($169)) {
       break;
      }
      $mcol = 0;
      while(1) {
       $170 = $mcol;
       $171 = $wide;
       $172 = ($170>>>0)<($171>>>0);
       $173 = $mrow;
       if (!($172)) {
        break;
       }
       $174 = $wide;
       $175 = Math_imul($173, $174)|0;
       $176 = $mcol;
       $177 = (($175) + ($176))|0;
       $178 = $map;
       $179 = (($178) + ($177<<2)|0);
       $180 = +HEAPF32[$179>>2];
       $181 = $180 != 0.0;
       if (!($181)) {
        $count = 0;
        $sum = 0.0;
        $d = 0;
        while(1) {
         $182 = $d;
         $183 = ($182>>>0)<(8);
         if (!($183)) {
          break;
         }
         $184 = $mrow;
         $185 = $d;
         $186 = (613083 + ($185<<1)|0);
         $187 = HEAP8[$186>>0]|0;
         $188 = $187 << 24 >> 24;
         $189 = (($184) + ($188))|0;
         $y = $189;
         $190 = $mcol;
         $191 = $d;
         $192 = (613083 + ($191<<1)|0);
         $193 = ((($192)) + 1|0);
         $194 = HEAP8[$193>>0]|0;
         $195 = $194 << 24 >> 24;
         $196 = (($190) + ($195))|0;
         $x = $196;
         $197 = $y;
         $198 = $high;
         $199 = ($197>>>0)<($198>>>0);
         if ($199) {
          $200 = $x;
          $201 = $wide;
          $202 = ($200>>>0)<($201>>>0);
          if ($202) {
           $203 = $y;
           $204 = $wide;
           $205 = Math_imul($203, $204)|0;
           $206 = $x;
           $207 = (($205) + ($206))|0;
           $208 = $map;
           $209 = (($208) + ($207<<2)|0);
           $210 = +HEAPF32[$209>>2];
           $211 = $210 > 0.0;
           if ($211) {
            $212 = $d;
            $213 = $212 & 1;
            $214 = (1 + ($213))|0;
            $215 = (+($214>>>0));
            $216 = $y;
            $217 = $wide;
            $218 = Math_imul($216, $217)|0;
            $219 = $x;
            $220 = (($218) + ($219))|0;
            $221 = $map;
            $222 = (($221) + ($220<<2)|0);
            $223 = +HEAPF32[$222>>2];
            $224 = $215 * $223;
            $225 = $sum;
            $226 = $225 + $224;
            $sum = $226;
            $227 = $d;
            $228 = $227 & 1;
            $229 = (1 + ($228))|0;
            $230 = $count;
            $231 = (($230) + ($229))|0;
            $count = $231;
           }
          }
         }
         $232 = $d;
         $233 = (($232) + 1)|0;
         $d = $233;
        }
        $234 = $count;
        $235 = ($234|0)>(3);
        if ($235) {
         $236 = $sum;
         $237 = $grow;
         $238 = $236 + $237;
         $239 = -$238;
         $240 = $count;
         $241 = (+($240|0));
         $242 = $grow;
         $243 = $241 + $242;
         $244 = $239 / $243;
         $245 = $mrow;
         $246 = $wide;
         $247 = Math_imul($245, $246)|0;
         $248 = $mcol;
         $249 = (($247) + ($248))|0;
         $250 = $map;
         $251 = (($250) + ($249<<2)|0);
         HEAPF32[$251>>2] = $244;
        }
       }
       $252 = $mcol;
       $253 = (($252) + 1)|0;
       $mcol = $253;
      }
      $254 = (($173) + 1)|0;
      $mrow = $254;
     }
     $i = 0;
     $change = 0;
     while(1) {
      $255 = $i;
      $256 = $high;
      $257 = $wide;
      $258 = Math_imul($256, $257)|0;
      $259 = ($255>>>0)<($258>>>0);
      if (!($259)) {
       break;
      }
      $260 = $i;
      $261 = $map;
      $262 = (($261) + ($260<<2)|0);
      $263 = +HEAPF32[$262>>2];
      $264 = $263 < 0.0;
      if ($264) {
       $265 = $i;
       $266 = $map;
       $267 = (($266) + ($265<<2)|0);
       $268 = +HEAPF32[$267>>2];
       $269 = -$268;
       $270 = $i;
       $271 = $map;
       $272 = (($271) + ($270<<2)|0);
       HEAPF32[$272>>2] = $269;
       $change = 1;
      }
      $273 = $i;
      $274 = (($273) + 1)|0;
      $i = $274;
     }
     $275 = $change;
     $276 = ($275|0)!=(0);
     if (!($276)) {
      break;
     }
    }
    $i = 0;
    while(1) {
     $277 = $i;
     $278 = $high;
     $279 = $wide;
     $280 = Math_imul($278, $279)|0;
     $281 = ($277>>>0)<($280>>>0);
     if (!($281)) {
      break;
     }
     $282 = $i;
     $283 = $map;
     $284 = (($283) + ($282<<2)|0);
     $285 = +HEAPF32[$284>>2];
     $286 = $285 == 0.0;
     if ($286) {
      $287 = $i;
      $288 = $map;
      $289 = (($288) + ($287<<2)|0);
      HEAPF32[$289>>2] = 1.0;
     }
     $290 = $i;
     $291 = (($290) + 1)|0;
     $i = $291;
    }
    $mrow = 0;
    while(1) {
     $292 = $mrow;
     $293 = $high;
     $294 = ($292>>>0)<($293>>>0);
     if (!($294)) {
      break L18;
     }
     $mcol = 0;
     while(1) {
      $295 = $mcol;
      $296 = $wide;
      $297 = ($295>>>0)<($296>>>0);
      $298 = $mrow;
      if (!($297)) {
       break;
      }
      $299 = HEAP16[580078>>1]|0;
      $300 = $299&65535;
      $301 = 4 >> $300;
      $302 = Math_imul($298, $301)|0;
      $row = $302;
      while(1) {
       $303 = $row;
       $304 = $mrow;
       $305 = (($304) + 1)|0;
       $306 = HEAP16[580078>>1]|0;
       $307 = $306&65535;
       $308 = 4 >> $307;
       $309 = Math_imul($305, $308)|0;
       $310 = ($303>>>0)<($309>>>0);
       $311 = $mcol;
       if (!($310)) {
        break;
       }
       $312 = HEAP16[580078>>1]|0;
       $313 = $312&65535;
       $314 = 4 >> $313;
       $315 = Math_imul($311, $314)|0;
       $col = $315;
       while(1) {
        $316 = $col;
        $317 = $mcol;
        $318 = (($317) + 1)|0;
        $319 = HEAP16[580078>>1]|0;
        $320 = $319&65535;
        $321 = 4 >> $320;
        $322 = Math_imul($318, $321)|0;
        $323 = ($316>>>0)<($322>>>0);
        $324 = $row;
        if (!($323)) {
         break;
        }
        $325 = HEAP16[580076>>1]|0;
        $326 = $325&65535;
        $327 = Math_imul($324, $326)|0;
        $328 = $col;
        $329 = (($327) + ($328))|0;
        $330 = HEAP32[972>>2]|0;
        $331 = (($330) + ($329<<3)|0);
        $pixel = $331;
        $332 = $c;
        $333 = $pixel;
        $334 = (($333) + ($332<<1)|0);
        $335 = HEAP16[$334>>1]|0;
        $336 = $335&65535;
        $337 = $c;
        $338 = (($hsat) + ($337<<2)|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = (($336|0) / ($339|0))&-1;
        $341 = ($340|0)>(1);
        if ($341) {
         $342 = $kc;
         $343 = $pixel;
         $344 = (($343) + ($342<<1)|0);
         $345 = HEAP16[$344>>1]|0;
         $346 = $345&65535;
         $347 = (+($346|0));
         $348 = $mrow;
         $349 = $wide;
         $350 = Math_imul($348, $349)|0;
         $351 = $mcol;
         $352 = (($350) + ($351))|0;
         $353 = $map;
         $354 = (($353) + ($352<<2)|0);
         $355 = +HEAPF32[$354>>2];
         $356 = $347 * $355;
         $357 = (~~(($356)));
         $val = $357;
         $358 = $c;
         $359 = $pixel;
         $360 = (($359) + ($358<<1)|0);
         $361 = HEAP16[$360>>1]|0;
         $362 = $361&65535;
         $363 = $val;
         $364 = ($362|0)<($363|0);
         if ($364) {
          $365 = $val;
          $366 = ($365|0)<(65535);
          $367 = $val;
          $368 = $366 ? $367 : 65535;
          $369 = (0)>($368|0);
          if ($369) {
           $375 = 0;
          } else {
           $370 = $val;
           $371 = ($370|0)<(65535);
           $372 = $val;
           $373 = $371 ? $372 : 65535;
           $375 = $373;
          }
          $374 = $375&65535;
          $376 = $c;
          $377 = $pixel;
          $378 = (($377) + ($376<<1)|0);
          HEAP16[$378>>1] = $374;
         }
        }
        $379 = $col;
        $380 = (($379) + 1)|0;
        $col = $380;
       }
       $381 = (($324) + 1)|0;
       $row = $381;
      }
      $382 = (($311) + 1)|0;
      $mcol = $382;
     }
     $383 = (($298) + 1)|0;
     $mrow = $383;
    }
   }
  } while(0);
  $384 = $c;
  $385 = (($384) + 1)|0;
  $c = $385;
 }
 $386 = $map;
 _free($386);
 STACKTOP = sp;return;
}
function _tiff_get($base,$tag,$type,$len,$save) {
 $base = $base|0;
 $tag = $tag|0;
 $type = $type|0;
 $len = $len|0;
 $save = $save|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $base;
 $1 = $tag;
 $2 = $type;
 $3 = $len;
 $4 = $save;
 $5 = (_get2()|0);
 $6 = $5&65535;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = (_get2()|0);
 $9 = $8&65535;
 $10 = $2;
 HEAP32[$10>>2] = $9;
 $11 = (_get4()|0);
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[944>>2]|0;
 $14 = (_ftell($13)|0);
 $15 = (($14) + 4)|0;
 $16 = $4;
 HEAP32[$16>>2] = $15;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)<(14);
 if ($21) {
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $25 = $23;
 } else {
  $25 = 0;
 }
 $24 = (613146 + ($25)|0);
 $26 = HEAP8[$24>>0]|0;
 $27 = $26 << 24 >> 24;
 $28 = (($27) - 48)|0;
 $29 = Math_imul($18, $28)|0;
 $30 = ($29>>>0)>(4);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = HEAP32[944>>2]|0;
 $32 = (_get4()|0);
 $33 = $0;
 $34 = (($32) + ($33))|0;
 (_fseek($31,$34,0)|0);
 STACKTOP = sp;return;
}
function _parse_thumb_note($base,$toff,$tlen) {
 $base = $base|0;
 $toff = $toff|0;
 $tlen = $tlen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $entries = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 12|0;
 $type = sp + 8|0;
 $len = sp + 4|0;
 $save = sp;
 $0 = $base;
 $1 = $toff;
 $2 = $tlen;
 $3 = (_get2()|0);
 $4 = $3&65535;
 $entries = $4;
 while(1) {
  $5 = $entries;
  $6 = (($5) + -1)|0;
  $entries = $6;
  $7 = ($5|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  _tiff_get($8,$tag,$type,$len,$save);
  $9 = HEAP32[$tag>>2]|0;
  $10 = $1;
  $11 = ($9|0)==($10|0);
  if ($11) {
   $12 = (_get4()|0);
   $13 = $0;
   $14 = (($12) + ($13))|0;
   HEAP32[293668>>2] = $14;
  }
  $15 = HEAP32[$tag>>2]|0;
  $16 = $2;
  $17 = ($15|0)==($16|0);
  if ($17) {
   $18 = (_get4()|0);
   HEAP32[1672>>2] = $18;
  }
  $19 = HEAP32[944>>2]|0;
  $20 = HEAP32[$save>>2]|0;
  (_fseek($19,$20,0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_makernote($base,$uptag) {
 $base = $base|0;
 $uptag = $uptag|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0.0, $674 = 0.0;
 var $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0;
 var $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0.0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0.0;
 var $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0.0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0.0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0.0, $875 = 0.0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf97 = 0, $c = 0, $ci = 0, $cj = 0, $ck = 0, $entries = 0, $i = 0, $len = 0, $morder = 0, $offset = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond5 = 0, $or$cond51 = 0;
 var $or$cond53 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond59 = 0, $or$cond61 = 0, $or$cond63 = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond71 = 0, $or$cond73 = 0, $or$cond75 = 0, $or$cond77 = 0, $or$cond79 = 0, $or$cond81 = 0, $or$cond83 = 0, $or$cond85 = 0, $or$cond87 = 0, $or$cond89 = 0;
 var $or$cond9 = 0, $or$cond91 = 0, $or$cond93 = 0, $or$cond95 = 0, $save = 0, $serial = 0, $sorder = 0, $tag = 0, $type = 0, $ver97 = 0, $wb = 0, $wbi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 48|0;
 $type = sp + 44|0;
 $len = sp + 40|0;
 $save = sp + 36|0;
 $wb = sp;
 $buf97 = sp + 88|0;
 $buf = sp + 72|0;
 $0 = $base;
 $1 = $uptag;
 $offset = 0;
 $ver97 = 0;
 $serial = 0;
 $wbi = 0;
 ;HEAP32[$wb>>2]=0|0;HEAP32[$wb+4>>2]=0|0;HEAP32[$wb+8>>2]=0|0;HEAP32[$wb+12>>2]=0|0;
 $2 = HEAP16[448960>>1]|0;
 $sorder = $2;
 $3 = (_strcmp(594275,613673)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[944>>2]|0;
 (_fread($buf,1,10,$5)|0);
 $6 = (_strncmp($buf,613679,3)|0);
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (_strncmp($buf,613683,3)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (_strncmp($buf,613687,4)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (_strncmp($buf,613692,4)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (_strncmp($buf,613697,2)|0);
 $15 = ($14|0)!=(0);
 L16: do {
  if ($15) {
   $16 = (_strncmp($buf,613700,3)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $62 = (_strcmp($buf,613704)|0);
    $63 = ($62|0)!=(0);
    L19: do {
     if ($63) {
      $74 = (_strcmp($buf,613710)|0);
      $75 = ($74|0)!=(0);
      if ($75) {
       $76 = (_strcmp($buf,613718)|0);
       $77 = ($76|0)!=(0);
       if ($77) {
        $86 = (_strncmp($buf,613726,4)|0);
        $87 = ($86|0)!=(0);
        do {
         if ($87) {
          $88 = (_strcmp($buf,613731)|0);
          $89 = ($88|0)!=(0);
          if ($89) {
           $90 = (_strncmp($buf,613741,8)|0);
           $91 = ($90|0)!=(0);
           if (!($91)) {
            $92 = HEAP32[944>>2]|0;
            $93 = (_ftell($92)|0);
            $94 = (($93) - 10)|0;
            $0 = $94;
            break;
           }
           $96 = (_strcmp($buf,613750)|0);
           $97 = ($96|0)!=(0);
           do {
            if ($97) {
             $98 = (_strcmp($buf,613756)|0);
             $99 = ($98|0)!=(0);
             if ($99) {
              $100 = (_strcmp($buf,613762)|0);
              $101 = ($100|0)!=(0);
              if (!($101)) {
               break;
              }
              $102 = (_strcmp($buf,613768)|0);
              $103 = ($102|0)!=(0);
              if (!($103)) {
               break;
              }
              $105 = (_strcmp($buf,613774)|0);
              $106 = ($105|0)!=(0);
              do {
               if ($106) {
                $107 = (_strcmp($buf,613778)|0);
                $108 = ($107|0)!=(0);
                if (!($108)) {
                 break;
                }
                $110 = HEAP32[944>>2]|0;
                (_fseek($110,-10,1)|0);
                $111 = (_strncmp(594275,613782,7)|0);
                $112 = ($111|0)!=(0);
                if ($112) {
                 break L19;
                }
                $113 = HEAP32[944>>2]|0;
                $114 = (_ftell($113)|0);
                $0 = $114;
                break L19;
               }
              } while(0);
              $109 = HEAP32[944>>2]|0;
              (_fseek($109,-4,1)|0);
              break L19;
             }
            }
           } while(0);
           $104 = HEAP32[944>>2]|0;
           (_fseek($104,-2,1)|0);
           break L19;
          }
         }
        } while(0);
        HEAP16[448960>>1] = 18761;
        $95 = HEAP32[944>>2]|0;
        (_fseek($95,2,1)|0);
        break;
       }
      }
      $78 = HEAP32[944>>2]|0;
      $79 = (_ftell($78)|0);
      $80 = (($79) - 10)|0;
      $0 = $80;
      $81 = HEAP32[944>>2]|0;
      (_fseek($81,-2,1)|0);
      $82 = (_get2()|0);
      HEAP16[448960>>1] = $82;
      $83 = HEAP8[$buf>>0]|0;
      $84 = $83 << 24 >> 24;
      $85 = ($84|0)==(79);
      if ($85) {
       (_get2()|0);
      }
     } else {
      $64 = HEAP32[944>>2]|0;
      $65 = (_ftell($64)|0);
      $0 = $65;
      $66 = (_get2()|0);
      HEAP16[448960>>1] = $66;
      $67 = (_get2()|0);
      $68 = $67&65535;
      $69 = ($68|0)!=(42);
      if ($69) {
       break L16;
      }
      $70 = (_get4()|0);
      $offset = $70;
      $71 = HEAP32[944>>2]|0;
      $72 = $offset;
      $73 = (($72) - 8)|0;
      (_fseek($71,$73,1)|0);
     }
    } while(0);
    $115 = (_get2()|0);
    $116 = $115&65535;
    $entries = $116;
    $117 = $entries;
    $118 = ($117>>>0)>(1000);
    if ($118) {
     STACKTOP = sp;return;
    }
    $119 = HEAP16[448960>>1]|0;
    $morder = $119;
    while(1) {
     $120 = $entries;
     $121 = (($120) + -1)|0;
     $entries = $121;
     $122 = ($120|0)!=(0);
     if (!($122)) {
      break L16;
     }
     $123 = $morder;
     HEAP16[448960>>1] = $123;
     $124 = $0;
     _tiff_get($124,$tag,$type,$len,$save);
     $125 = $1;
     $126 = $125 << 16;
     $127 = HEAP32[$tag>>2]|0;
     $128 = $127 | $126;
     HEAP32[$tag>>2] = $128;
     $129 = HEAP32[$tag>>2]|0;
     $130 = ($129|0)==(2);
     if ($130) {
      $131 = (_strstr(594275,613790)|0);
      $132 = ($131|0)==(0|0);
      $133 = +HEAPF32[293672>>2];
      $134 = $133 != 0.0;
      $or$cond = $132 | $134;
      if (!($or$cond)) {
       (_get2()|0);
       $135 = (_get2()|0);
       $136 = (+($135&65535));
       HEAPF32[293672>>2] = $136;
      }
     }
     $137 = HEAP32[$tag>>2]|0;
     $138 = ($137|0)==(4);
     $139 = HEAP32[$len>>2]|0;
     $140 = ($139>>>0)>(26);
     $or$cond3 = $138 & $140;
     $141 = HEAP32[$len>>2]|0;
     $142 = ($141>>>0)<(35);
     $or$cond5 = $or$cond3 & $142;
     if ($or$cond5) {
      (_get4()|0);
      $143 = (_get2()|0);
      $144 = $143&65535;
      $i = $144;
      $145 = ($144|0)==(32767);
      $146 = +HEAPF32[293672>>2];
      $147 = $146 != 0.0;
      $or$cond7 = $145 | $147;
      if (!($or$cond7)) {
       $148 = $i;
       $149 = (+($148>>>0));
       $150 = $149 / 32.0;
       $151 = $150 - 4.0;
       $152 = (+Math_pow(2.0,(+$151)));
       $153 = 50.0 * $152;
       $154 = $153;
       HEAPF32[293672>>2] = $154;
      }
      (_get2()|0);
      $155 = (_get2()|0);
      $156 = $155&65535;
      $i = $156;
      $157 = ($156|0)==(32767);
      $158 = +HEAPF32[293676>>2];
      $159 = $158 != 0.0;
      $or$cond9 = $157 | $159;
      if (!($or$cond9)) {
       $160 = $i;
       $161 = (+($160>>>0));
       $162 = $161 / 64.0;
       $163 = (+Math_pow(2.0,(+$162)));
       $164 = $163;
       HEAPF32[293676>>2] = $164;
      }
      $165 = (_get2()|0);
      $166 = $165&65535;
      $i = $166;
      $167 = ($166|0)==(65535);
      $168 = +HEAPF32[293680>>2];
      $169 = $168 != 0.0;
      $or$cond11 = $167 | $169;
      if (!($or$cond11)) {
       $170 = $i;
       $171 = $170&65535;
       $172 = $171 << 16 >> 16;
       $173 = (+($172|0));
       $174 = $173 / -32.0;
       $175 = (+Math_pow(2.0,(+$174)));
       $176 = $175;
       HEAPF32[293680>>2] = $176;
      }
      (_get2()|0);
      $177 = (_get2()|0);
      $178 = $177&65535;
      $wbi = $178;
      (_get2()|0);
      $179 = (_get2()|0);
      $180 = $179&65535;
      HEAP32[293684>>2] = $180;
     }
     $181 = HEAP32[$tag>>2]|0;
     $182 = ($181|0)==(4);
     $183 = HEAP32[$tag>>2]|0;
     $184 = ($183|0)==(276);
     $or$cond13 = $182 | $184;
     L69: do {
      if ($or$cond13) {
       $185 = (_strncmp(594275,613796,6)|0);
       $186 = ($185|0)!=(0);
       if (!($186)) {
        $187 = HEAP32[944>>2]|0;
        $188 = HEAP32[$tag>>2]|0;
        $189 = ($188|0)==(4);
        $190 = $189 ? 140 : 160;
        (_fseek($187,$190,1)|0);
        $191 = (_get2()|0);
        $192 = $191&65535;
        switch ($192|0) {
        case 72:  {
         HEAP32[293688>>2] = 0;
         break L69;
         break;
        }
        case 76:  {
         HEAP32[293688>>2] = 6;
         break L69;
         break;
        }
        case 82:  {
         HEAP32[293688>>2] = 5;
         break L69;
         break;
        }
        default: {
         break L69;
        }
        }
       }
      }
     } while(0);
     $193 = HEAP32[$tag>>2]|0;
     $194 = ($193|0)==(7);
     $195 = HEAP32[$type>>2]|0;
     $196 = ($195|0)==(2);
     $or$cond15 = $194 & $196;
     $197 = HEAP32[$len>>2]|0;
     $198 = ($197>>>0)>(20);
     $or$cond17 = $or$cond15 & $198;
     if ($or$cond17) {
      $199 = HEAP32[944>>2]|0;
      (_fgets(593904,64,$199)|0);
     }
     $200 = HEAP32[$tag>>2]|0;
     $201 = ($200|0)==(8);
     $202 = HEAP32[$type>>2]|0;
     $203 = ($202|0)==(4);
     $or$cond19 = $201 & $203;
     if ($or$cond19) {
      $204 = (_get4()|0);
      HEAP32[293684>>2] = $204;
     }
     $205 = HEAP32[$tag>>2]|0;
     $206 = ($205|0)==(9);
     if ($206) {
      $207 = (_strcmp(594275,613803)|0);
      $208 = ($207|0)!=(0);
      if (!($208)) {
       $209 = HEAP32[944>>2]|0;
       (_fread(613809,64,1,$209)|0);
      }
     }
     $210 = HEAP32[$tag>>2]|0;
     $211 = ($210|0)==(12);
     $212 = HEAP32[$len>>2]|0;
     $213 = ($212|0)==(4);
     $or$cond21 = $211 & $213;
     L87: do {
      if ($or$cond21) {
       $c = 0;
       while(1) {
        $214 = $c;
        $215 = ($214>>>0)<(3);
        if (!($215)) {
         break L87;
        }
        $216 = HEAP32[$type>>2]|0;
        $217 = (+_getreal($216));
        $218 = $217;
        $219 = $c;
        $220 = $219 << 1;
        $221 = $c;
        $222 = $221 >>> 1;
        $223 = $220 | $222;
        $224 = $223 & 3;
        $225 = (1528 + ($224<<2)|0);
        HEAPF32[$225>>2] = $218;
        $226 = $c;
        $227 = (($226) + 1)|0;
        $c = $227;
       }
      }
     } while(0);
     $228 = HEAP32[$tag>>2]|0;
     $229 = ($228|0)==(13);
     $230 = HEAP32[$type>>2]|0;
     $231 = ($230|0)==(7);
     $or$cond23 = $229 & $231;
     L93: do {
      if ($or$cond23) {
       $232 = (_get2()|0);
       $233 = $232&65535;
       $234 = ($233|0)==(43690);
       if (!($234)) {
        break;
       }
       $i = 2;
       $c = 2;
       while(1) {
        $235 = $c;
        $236 = $235&65535;
        $237 = $236&65535;
        $238 = ($237|0)!=(48059);
        if (!($238)) {
         break;
        }
        $239 = $i;
        $240 = HEAP32[$len>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if (!($241)) {
         break;
        }
        $242 = $c;
        $243 = $242 << 8;
        $244 = HEAP32[944>>2]|0;
        $245 = (_getc_unlocked($244)|0);
        $246 = $243 | $245;
        $c = $246;
        $247 = $i;
        $248 = (($247) + 1)|0;
        $i = $248;
       }
       while(1) {
        $249 = $i;
        $250 = (($249) + 4)|0;
        $i = $250;
        $251 = HEAP32[$len>>2]|0;
        $252 = (($251) - 5)|0;
        $253 = ($250>>>0)<($252>>>0);
        if (!($253)) {
         break L93;
        }
        $254 = (_get4()|0);
        $255 = ($254|0)==(257);
        if (!($255)) {
         continue;
        }
        $256 = HEAP32[$len>>2]|0;
        $i = $256;
        $257 = ($256|0)!=(0);
        if (!($257)) {
         continue;
        }
        (_get4()|0);
        $258 = HEAP32[944>>2]|0;
        $259 = (_getc_unlocked($258)|0);
        $c = $259;
        $260 = ($259>>>0)<(3);
        if (!($260)) {
         continue;
        }
        $261 = $c;
        $262 = (613873 + ($261)|0);
        $263 = HEAP8[$262>>0]|0;
        $264 = $263 << 24 >> 24;
        $265 = (($264) - 48)|0;
        HEAP32[293688>>2] = $265;
       }
      }
     } while(0);
     $266 = HEAP32[$tag>>2]|0;
     $267 = ($266|0)==(16);
     $268 = HEAP32[$type>>2]|0;
     $269 = ($268|0)==(4);
     $or$cond25 = $267 & $269;
     if ($or$cond25) {
      $270 = (_get4()|0);
      HEAP32[1072>>2] = $270;
     }
     $271 = HEAP32[$tag>>2]|0;
     $272 = ($271|0)==(17);
     $273 = HEAP32[1508>>2]|0;
     $274 = ($273|0)!=(0);
     $or$cond27 = $272 & $274;
     do {
      if ($or$cond27) {
       $275 = (_strncmp(594275,613790,5)|0);
       $276 = ($275|0)!=(0);
       if ($276) {
        break;
       }
       $277 = HEAP32[944>>2]|0;
       $278 = (_get4()|0);
       $279 = $0;
       $280 = (($278) + ($279))|0;
       (_fseek($277,$280,0)|0);
       $281 = $0;
       (_parse_tiff_ifd($281)|0);
      }
     } while(0);
     $282 = HEAP32[$tag>>2]|0;
     $283 = ($282|0)==(20);
     $284 = HEAP32[$type>>2]|0;
     $285 = ($284|0)==(7);
     $or$cond29 = $283 & $285;
     do {
      if ($or$cond29) {
       $286 = HEAP32[$len>>2]|0;
       $287 = ($286|0)==(2560);
       if ($287) {
        $288 = HEAP32[944>>2]|0;
        (_fseek($288,1248,1)|0);
        label = 206;
        break;
       }
       $289 = HEAP32[944>>2]|0;
       (_fread($buf,1,10,$289)|0);
       $290 = (_strncmp($buf,613877,4)|0);
       $291 = ($290|0)!=(0);
       if ($291) {
        label = 93;
        break;
       }
       $292 = HEAP32[944>>2]|0;
       $293 = ((($buf)) + 4|0);
       $294 = (_strcmp($293,613882)|0);
       $295 = ($294|0)!=(0);
       $296 = $295 ? 46 : 1546;
       (_fseek($292,$296,1)|0);
       $297 = (_get4()|0);
       $298 = $297 << 2;
       $299 = (+($298>>>0));
       HEAPF32[1528>>2] = $299;
       $300 = (_get4()|0);
       $301 = (_get4()|0);
       $302 = (($300) + ($301))|0;
       $303 = (+($302>>>0));
       HEAPF32[(1532)>>2] = $303;
       $304 = (_get4()|0);
       $305 = $304 << 2;
       $306 = (+($305>>>0));
       HEAPF32[(1536)>>2] = $306;
       label = 93;
      } else {
       label = 93;
      }
     } while(0);
     do {
      if ((label|0) == 93) {
       label = 0;
       $307 = HEAP32[$tag>>2]|0;
       $308 = ($307|0)==(21);
       $309 = HEAP32[$type>>2]|0;
       $310 = ($309|0)==(2);
       $or$cond31 = $308 & $310;
       $311 = HEAP32[1508>>2]|0;
       $312 = ($311|0)!=(0);
       $or$cond33 = $or$cond31 & $312;
       if ($or$cond33) {
        $313 = HEAP32[944>>2]|0;
        (_fread(594339,64,1,$313)|0);
       }
       $314 = (_strstr(594275,613887)|0);
       $315 = ($314|0)!=(0|0);
       do {
        if ($315) {
         $316 = HEAP32[$tag>>2]|0;
         $317 = ($316|0)==(27);
         if ($317) {
          HEAP32[$tag>>2] = 4120;
         }
         $318 = HEAP32[$tag>>2]|0;
         $319 = ($318|0)==(28);
         if (!($319)) {
          break;
         }
         HEAP32[$tag>>2] = 4119;
        }
       } while(0);
       $320 = HEAP32[$tag>>2]|0;
       $321 = ($320|0)==(29);
       L132: do {
        if ($321) {
         while(1) {
          $322 = HEAP32[944>>2]|0;
          $323 = (_getc_unlocked($322)|0);
          $c = $323;
          $324 = ($323|0)!=(0);
          $325 = $c;
          $326 = ($325|0)!=(-1);
          $327 = $324 ? $326 : 0;
          if (!($327)) {
           break L132;
          }
          $328 = $serial;
          $329 = ($328*10)|0;
          $330 = $c;
          $331 = (_isdigit($330)|0);
          $332 = ($331|0)!=(0);
          $333 = $c;
          $334 = (($333) - 48)|0;
          $335 = (($333>>>0) % 10)&-1;
          $336 = $332 ? $334 : $335;
          $337 = (($329) + ($336))|0;
          $serial = $337;
         }
        }
       } while(0);
       $338 = HEAP32[$tag>>2]|0;
       $339 = ($338|0)==(41);
       $340 = HEAP32[$type>>2]|0;
       $341 = ($340|0)==(1);
       $or$cond35 = $339 & $341;
       L137: do {
        if ($or$cond35) {
         $342 = $wbi;
         $343 = ($342>>>0)<(18);
         if ($343) {
          $344 = $wbi;
          $345 = (613894 + ($344)|0);
          $346 = HEAP8[$345>>0]|0;
          $347 = $346 << 24 >> 24;
          $348 = (($347) - 48)|0;
          $349 = $348;
         } else {
          $349 = 0;
         }
         $c = $349;
         $350 = HEAP32[944>>2]|0;
         $351 = $c;
         $352 = $351<<5;
         $353 = (8 + ($352))|0;
         (_fseek($350,$353,1)|0);
         $c = 0;
         while(1) {
          $354 = $c;
          $355 = ($354>>>0)<(4);
          if (!($355)) {
           break L137;
          }
          $356 = (_get4()|0);
          $357 = (+($356>>>0));
          $358 = $c;
          $359 = $c;
          $360 = $359 >>> 1;
          $361 = $358 ^ $360;
          $362 = $361 ^ 1;
          $363 = (1528 + ($362<<2)|0);
          HEAPF32[$363>>2] = $357;
          $364 = $c;
          $365 = (($364) + 1)|0;
          $c = $365;
         }
        }
       } while(0);
       $366 = HEAP32[$tag>>2]|0;
       $367 = ($366|0)==(61);
       $368 = HEAP32[$type>>2]|0;
       $369 = ($368|0)==(3);
       $or$cond37 = $367 & $369;
       $370 = HEAP32[$len>>2]|0;
       $371 = ($370|0)==(4);
       $or$cond39 = $or$cond37 & $371;
       L146: do {
        if ($or$cond39) {
         $c = 0;
         while(1) {
          $372 = $c;
          $373 = ($372>>>0)<(4);
          if (!($373)) {
           break L146;
          }
          $374 = (_get2()|0);
          $375 = $374&65535;
          $376 = HEAP32[1516>>2]|0;
          $377 = (14 - ($376))|0;
          $378 = $375 >> $377;
          $379 = $378&65535;
          $380 = $c;
          $381 = $c;
          $382 = $381 >>> 1;
          $383 = $380 ^ $382;
          $384 = (580264 + ($383<<1)|0);
          HEAP16[$384>>1] = $379;
          $385 = $c;
          $386 = (($385) + 1)|0;
          $c = $386;
         }
        }
       } while(0);
       $387 = HEAP32[$tag>>2]|0;
       $388 = ($387|0)==(129);
       $389 = HEAP32[$type>>2]|0;
       $390 = ($389|0)==(4);
       $or$cond41 = $388 & $390;
       if ($or$cond41) {
        $391 = (_get4()|0);
        HEAP32[1524>>2] = $391;
        $392 = HEAP32[944>>2]|0;
        $393 = HEAP32[1524>>2]|0;
        $394 = (($393) + 41)|0;
        (_fseek($392,$394,0)|0);
        $395 = (_get2()|0);
        $396 = $395&65535;
        $397 = $396<<1;
        $398 = $397&65535;
        HEAP16[580244>>1] = $398;
        $399 = (_get2()|0);
        HEAP16[580226>>1] = $399;
        HEAP32[776>>2] = 1633771873;
       }
       $400 = HEAP32[$tag>>2]|0;
       $401 = ($400|0)==(129);
       $402 = HEAP32[$type>>2]|0;
       $403 = ($402|0)==(7);
       $or$cond43 = $401 & $403;
       do {
        if ($or$cond43) {
         label = 118;
        } else {
         $404 = HEAP32[$tag>>2]|0;
         $405 = ($404|0)==(256);
         $406 = HEAP32[$type>>2]|0;
         $407 = ($406|0)==(7);
         $or$cond45 = $405 & $407;
         if ($or$cond45) {
          label = 118;
          break;
         }
         $408 = HEAP32[$tag>>2]|0;
         $409 = ($408|0)==(640);
         $410 = HEAP32[$type>>2]|0;
         $411 = ($410|0)==(1);
         $or$cond47 = $409 & $411;
         if ($or$cond47) {
          label = 118;
         }
        }
       } while(0);
       if ((label|0) == 118) {
        label = 0;
        $412 = HEAP32[944>>2]|0;
        $413 = (_ftell($412)|0);
        HEAP32[293668>>2] = $413;
        $414 = HEAP32[$len>>2]|0;
        HEAP32[1672>>2] = $414;
       }
       $415 = HEAP32[$tag>>2]|0;
       $416 = ($415|0)==(136);
       $417 = HEAP32[$type>>2]|0;
       $418 = ($417|0)==(4);
       $or$cond49 = $416 & $418;
       do {
        if ($or$cond49) {
         $419 = (_get4()|0);
         HEAP32[293668>>2] = $419;
         $420 = ($419|0)!=(0);
         if (!($420)) {
          break;
         }
         $421 = $0;
         $422 = HEAP32[293668>>2]|0;
         $423 = (($422) + ($421))|0;
         HEAP32[293668>>2] = $423;
        }
       } while(0);
       $424 = HEAP32[$tag>>2]|0;
       $425 = ($424|0)==(137);
       $426 = HEAP32[$type>>2]|0;
       $427 = ($426|0)==(4);
       $or$cond51 = $425 & $427;
       if ($or$cond51) {
        $428 = (_get4()|0);
        HEAP32[1672>>2] = $428;
       }
       $429 = HEAP32[$tag>>2]|0;
       $430 = ($429|0)==(140);
       $431 = HEAP32[$tag>>2]|0;
       $432 = ($431|0)==(150);
       $or$cond53 = $430 | $432;
       if ($or$cond53) {
        $433 = HEAP32[944>>2]|0;
        $434 = (_ftell($433)|0);
        HEAP32[1520>>2] = $434;
       }
       $435 = HEAP32[$tag>>2]|0;
       $436 = ($435|0)==(151);
       do {
        if ($436) {
         $i = 0;
         while(1) {
          $437 = $i;
          $438 = ($437>>>0)<(4);
          $439 = $ver97;
          if (!($438)) {
           break;
          }
          $440 = ($439*10)|0;
          $441 = HEAP32[944>>2]|0;
          $442 = (_getc_unlocked($441)|0);
          $443 = (($440) + ($442))|0;
          $444 = (($443) - 48)|0;
          $ver97 = $444;
          $445 = $i;
          $446 = (($445) + 1)|0;
          $i = $446;
         }
         L177: do {
          switch ($439|0) {
          case 100:  {
           $447 = HEAP32[944>>2]|0;
           (_fseek($447,68,1)|0);
           $c = 0;
           while(1) {
            $448 = $c;
            $449 = ($448>>>0)<(4);
            if (!($449)) {
             break L177;
            }
            $450 = (_get2()|0);
            $451 = (+($450&65535));
            $452 = $c;
            $453 = $452 >>> 1;
            $454 = $c;
            $455 = $454 & 1;
            $456 = $455 << 1;
            $457 = $453 | $456;
            $458 = (1528 + ($457<<2)|0);
            HEAPF32[$458>>2] = $451;
            $459 = $c;
            $460 = (($459) + 1)|0;
            $c = $460;
           }
           break;
          }
          case 102:  {
           $461 = HEAP32[944>>2]|0;
           (_fseek($461,6,1)|0);
           $c = 0;
           while(1) {
            $462 = $c;
            $463 = ($462>>>0)<(4);
            if (!($463)) {
             break L177;
            }
            $464 = (_get2()|0);
            $465 = (+($464&65535));
            $466 = $c;
            $467 = $c;
            $468 = $467 >>> 1;
            $469 = $466 ^ $468;
            $470 = (1528 + ($469<<2)|0);
            HEAPF32[$470>>2] = $465;
            $471 = $c;
            $472 = (($471) + 1)|0;
            $c = $472;
           }
           break;
          }
          case 103:  {
           $473 = HEAP32[944>>2]|0;
           (_fseek($473,16,1)|0);
           $c = 0;
           while(1) {
            $474 = $c;
            $475 = ($474>>>0)<(4);
            if (!($475)) {
             break L177;
            }
            $476 = (_get2()|0);
            $477 = (+($476&65535));
            $478 = $c;
            $479 = (1528 + ($478<<2)|0);
            HEAPF32[$479>>2] = $477;
            $480 = $c;
            $481 = (($480) + 1)|0;
            $c = $481;
           }
           break;
          }
          default: {
          }
          }
         } while(0);
         $482 = $ver97;
         $483 = ($482>>>0)>=(200);
         if (!($483)) {
          break;
         }
         $484 = $ver97;
         $485 = ($484|0)!=(205);
         if ($485) {
          $486 = HEAP32[944>>2]|0;
          (_fseek($486,280,1)|0);
         }
         $487 = HEAP32[944>>2]|0;
         (_fread($buf97,324,1,$487)|0);
        }
       } while(0);
       $488 = HEAP32[$tag>>2]|0;
       $489 = ($488|0)==(161);
       $490 = HEAP32[$type>>2]|0;
       $491 = ($490|0)==(7);
       $or$cond55 = $489 & $491;
       L196: do {
        if ($or$cond55) {
         HEAP16[448960>>1] = 18761;
         $492 = HEAP32[944>>2]|0;
         (_fseek($492,140,1)|0);
         $c = 0;
         while(1) {
          $493 = $c;
          $494 = ($493>>>0)<(3);
          if (!($494)) {
           break L196;
          }
          $495 = (_get4()|0);
          $496 = (+($495>>>0));
          $497 = $c;
          $498 = (1528 + ($497<<2)|0);
          HEAPF32[$498>>2] = $496;
          $499 = $c;
          $500 = (($499) + 1)|0;
          $c = $500;
         }
        }
       } while(0);
       $501 = HEAP32[$tag>>2]|0;
       $502 = ($501|0)==(164);
       $503 = HEAP32[$type>>2]|0;
       $504 = ($503|0)==(3);
       $or$cond57 = $502 & $504;
       L202: do {
        if ($or$cond57) {
         $505 = HEAP32[944>>2]|0;
         $506 = $wbi;
         $507 = ($506*48)|0;
         (_fseek($505,$507,1)|0);
         $c = 0;
         while(1) {
          $508 = $c;
          $509 = ($508>>>0)<(3);
          if (!($509)) {
           break L202;
          }
          $510 = (_get2()|0);
          $511 = (+($510&65535));
          $512 = $c;
          $513 = (1528 + ($512<<2)|0);
          HEAPF32[$513>>2] = $511;
          $514 = $c;
          $515 = (($514) + 1)|0;
          $c = $515;
         }
        }
       } while(0);
       $516 = HEAP32[$tag>>2]|0;
       $517 = ($516|0)==(167);
       L208: do {
        if ($517) {
         $518 = $ver97;
         $519 = (($518) - 200)|0;
         $520 = ($519>>>0)<(17);
         if (!($520)) {
          break;
         }
         $521 = $serial;
         $522 = $521 & 255;
         $523 = (613161 + ($522)|0);
         $524 = HEAP8[$523>>0]|0;
         $ci = $524;
         $525 = HEAP32[944>>2]|0;
         $526 = (_getc_unlocked($525)|0);
         $527 = HEAP32[944>>2]|0;
         $528 = (_getc_unlocked($527)|0);
         $529 = $526 ^ $528;
         $530 = HEAP32[944>>2]|0;
         $531 = (_getc_unlocked($530)|0);
         $532 = $529 ^ $531;
         $533 = HEAP32[944>>2]|0;
         $534 = (_getc_unlocked($533)|0);
         $535 = $532 ^ $534;
         $536 = ((613417) + ($535)|0);
         $537 = HEAP8[$536>>0]|0;
         $cj = $537;
         $ck = 96;
         $i = 0;
         while(1) {
          $538 = $i;
          $539 = ($538>>>0)<(324);
          if (!($539)) {
           break;
          }
          $540 = $ci;
          $541 = $540&255;
          $542 = $ck;
          $543 = (($542) + 1)<<24>>24;
          $ck = $543;
          $544 = $542&255;
          $545 = Math_imul($541, $544)|0;
          $546 = $cj;
          $547 = $546&255;
          $548 = (($547) + ($545))|0;
          $549 = $548&255;
          $cj = $549;
          $550 = $549&255;
          $551 = $i;
          $552 = (($buf97) + ($551)|0);
          $553 = HEAP8[$552>>0]|0;
          $554 = $553&255;
          $555 = $554 ^ $550;
          $556 = $555&255;
          HEAP8[$552>>0] = $556;
          $557 = $i;
          $558 = (($557) + 1)|0;
          $i = $558;
         }
         $559 = $ver97;
         $560 = (($559) - 200)|0;
         $561 = (613913 + ($560)|0);
         $562 = HEAP8[$561>>0]|0;
         $563 = $562 << 24 >> 24;
         $564 = (($563) - 48)|0;
         $i = $564;
         $c = 0;
         while(1) {
          $565 = $c;
          $566 = ($565>>>0)<(4);
          if (!($566)) {
           break L208;
          }
          $567 = $i;
          $568 = $567 & -2;
          $569 = (($buf97) + ($568)|0);
          $570 = $c;
          $571 = $570<<1;
          $572 = (($569) + ($571)|0);
          $573 = (_sget2($572)|0);
          $574 = (+($573&65535));
          $575 = $c;
          $576 = $c;
          $577 = $576 >>> 1;
          $578 = $575 ^ $577;
          $579 = $i;
          $580 = $579 & 1;
          $581 = $578 ^ $580;
          $582 = (1528 + ($581<<2)|0);
          HEAPF32[$582>>2] = $574;
          $583 = $c;
          $584 = (($583) + 1)|0;
          $c = $584;
         }
        }
       } while(0);
       $585 = HEAP32[$tag>>2]|0;
       $586 = ($585|0)==(512);
       $587 = HEAP32[$len>>2]|0;
       $588 = ($587|0)==(3);
       $or$cond59 = $586 & $588;
       if ($or$cond59) {
        (_get4()|0);
        $589 = (_get4()|0);
        HEAP32[293684>>2] = $589;
       }
       $590 = HEAP32[$tag>>2]|0;
       $591 = ($590|0)==(512);
       $592 = HEAP32[$len>>2]|0;
       $593 = ($592|0)==(4);
       $or$cond61 = $591 & $593;
       L222: do {
        if ($or$cond61) {
         $c = 0;
         while(1) {
          $594 = $c;
          $595 = ($594>>>0)<(4);
          if (!($595)) {
           break L222;
          }
          $596 = (_get2()|0);
          $597 = $c;
          $598 = $c;
          $599 = $598 >>> 1;
          $600 = $597 ^ $599;
          $601 = (580264 + ($600<<1)|0);
          HEAP16[$601>>1] = $596;
          $602 = $c;
          $603 = (($602) + 1)|0;
          $c = $603;
         }
        }
       } while(0);
       $604 = HEAP32[$tag>>2]|0;
       $605 = ($604|0)==(513);
       $606 = HEAP32[$len>>2]|0;
       $607 = ($606|0)==(4);
       $or$cond63 = $605 & $607;
       L228: do {
        if ($or$cond63) {
         $c = 0;
         while(1) {
          $608 = $c;
          $609 = ($608>>>0)<(4);
          if (!($609)) {
           break L228;
          }
          $610 = (_get2()|0);
          $611 = (+($610&65535));
          $612 = $c;
          $613 = $c;
          $614 = $613 >>> 1;
          $615 = $612 ^ $614;
          $616 = (1528 + ($615<<2)|0);
          HEAPF32[$616>>2] = $611;
          $617 = $c;
          $618 = (($617) + 1)|0;
          $c = $618;
         }
        }
       } while(0);
       $619 = HEAP32[$tag>>2]|0;
       $620 = ($619|0)==(544);
       $621 = HEAP32[$type>>2]|0;
       $622 = ($621|0)==(7);
       $or$cond65 = $620 & $622;
       if ($or$cond65) {
        $623 = HEAP32[944>>2]|0;
        $624 = (_ftell($623)|0);
        HEAP32[1520>>2] = $624;
       }
       $625 = HEAP32[$tag>>2]|0;
       $626 = ($625|0)==(1025);
       $627 = HEAP32[$type>>2]|0;
       $628 = ($627|0)==(4);
       $or$cond67 = $626 & $628;
       $629 = HEAP32[$len>>2]|0;
       $630 = ($629|0)==(4);
       $or$cond69 = $or$cond67 & $630;
       L237: do {
        if ($or$cond69) {
         $c = 0;
         while(1) {
          $631 = $c;
          $632 = ($631>>>0)<(4);
          if (!($632)) {
           break L237;
          }
          $633 = (_get4()|0);
          $634 = $633&65535;
          $635 = $c;
          $636 = $c;
          $637 = $636 >>> 1;
          $638 = $635 ^ $637;
          $639 = (580264 + ($638<<1)|0);
          HEAP16[$639>>1] = $634;
          $640 = $c;
          $641 = (($640) + 1)|0;
          $c = $641;
         }
        }
       } while(0);
       $642 = HEAP32[$tag>>2]|0;
       $643 = ($642|0)==(3585);
       L243: do {
        if ($643) {
         HEAP16[448960>>1] = 18761;
         $644 = HEAP32[944>>2]|0;
         (_fseek($644,22,1)|0);
         $offset = 22;
         while(1) {
          $645 = $offset;
          $646 = (($645) + 22)|0;
          $647 = HEAP32[$len>>2]|0;
          $648 = ($646>>>0)<($647>>>0);
          if (!($648)) {
           break L243;
          }
          $649 = (_get4()|0);
          HEAP32[$tag>>2] = $649;
          $650 = HEAP32[944>>2]|0;
          (_fseek($650,14,1)|0);
          $651 = (_get4()|0);
          $652 = (($651) - 4)|0;
          $i = $652;
          $653 = HEAP32[$tag>>2]|0;
          $654 = ($653|0)==(1990472199);
          if ($654) {
           $655 = (_get2()|0);
           $656 = $655&65535;
           HEAP32[293688>>2] = $656;
          } else {
           $657 = HEAP32[944>>2]|0;
           $658 = $i;
           (_fseek($657,$658,1)|0);
          }
          $659 = $i;
          $660 = (22 + ($659))|0;
          $661 = $offset;
          $662 = (($661) + ($660))|0;
          $offset = $662;
         }
        }
       } while(0);
       $663 = HEAP32[$tag>>2]|0;
       $664 = ($663|0)==(3712);
       $665 = HEAP32[$len>>2]|0;
       $666 = ($665|0)==(256);
       $or$cond71 = $664 & $666;
       $667 = HEAP32[$type>>2]|0;
       $668 = ($667|0)==(7);
       $or$cond73 = $or$cond71 & $668;
       if ($or$cond73) {
        $669 = HEAP32[944>>2]|0;
        (_fseek($669,48,1)|0);
        $670 = (_get2()|0);
        $671 = $670&65535;
        $672 = ($671*508)|0;
        $673 = (+($672|0));
        $674 = $673 * 1.0780000000000001;
        $675 = $674 / 65536.0;
        $676 = $675;
        HEAPF32[1528>>2] = $676;
        $677 = (_get2()|0);
        $678 = $677&65535;
        $679 = ($678*382)|0;
        $680 = (+($679|0));
        $681 = $680 * 1.173;
        $682 = $681 / 65536.0;
        $683 = $682;
        HEAPF32[(1536)>>2] = $683;
       }
       $684 = HEAP32[$tag>>2]|0;
       $685 = ($684|0)==(3840);
       $686 = HEAP32[$type>>2]|0;
       $687 = ($686|0)==(7);
       $or$cond75 = $685 & $687;
       if ($or$cond75) {
        $688 = HEAP32[$len>>2]|0;
        $689 = ($688|0)==(614);
        if ($689) {
         $690 = HEAP32[944>>2]|0;
         (_fseek($690,176,1)|0);
         label = 206;
         break;
        }
        $691 = HEAP32[$len>>2]|0;
        $692 = ($691|0)==(734);
        $693 = HEAP32[$len>>2]|0;
        $694 = ($693|0)==(1502);
        $or$cond77 = $692 | $694;
        if (!($or$cond77)) {
         break;
        }
        $695 = HEAP32[944>>2]|0;
        (_fseek($695,148,1)|0);
        label = 206;
        break;
       }
       $696 = HEAP32[$tag>>2]|0;
       $697 = ($696|0)==(4113);
       $698 = HEAP32[$len>>2]|0;
       $699 = ($698|0)==(9);
       $or$cond79 = $697 & $699;
       $700 = HEAP32[$tag>>2]|0;
       $701 = ($700|0)==(541065728);
       $or$cond81 = $or$cond79 | $701;
       L263: do {
        if ($or$cond81) {
         $i = 0;
         while(1) {
          $702 = $i;
          $703 = ($702>>>0)<(3);
          if (!($703)) {
           break L263;
          }
          $c = 0;
          while(1) {
           $704 = $c;
           $705 = ($704>>>0)<(3);
           if (!($705)) {
            break;
           }
           $706 = (_get2()|0);
           $707 = $706 << 16 >> 16;
           $708 = (+($707|0));
           $709 = $708 / 256.0;
           $710 = $709;
           $711 = $c;
           $712 = $i;
           $713 = (293692 + ($712<<4)|0);
           $714 = (($713) + ($711<<2)|0);
           HEAPF32[$714>>2] = $710;
           $715 = $c;
           $716 = (($715) + 1)|0;
           $c = $716;
          }
          $717 = $i;
          $718 = (($717) + 1)|0;
          $i = $718;
         }
        }
       } while(0);
       $719 = HEAP32[$tag>>2]|0;
       $720 = ($719|0)==(4114);
       $721 = HEAP32[$tag>>2]|0;
       $722 = ($721|0)==(541066752);
       $or$cond83 = $720 | $722;
       $723 = HEAP32[$len>>2]|0;
       $724 = ($723|0)==(4);
       $or$cond85 = $or$cond83 & $724;
       L273: do {
        if ($or$cond85) {
         $c = 0;
         while(1) {
          $725 = $c;
          $726 = ($725>>>0)<(4);
          if (!($726)) {
           break L273;
          }
          $727 = (_get2()|0);
          $728 = $c;
          $729 = $c;
          $730 = $729 >>> 1;
          $731 = $728 ^ $730;
          $732 = (580264 + ($731<<1)|0);
          HEAP16[$732>>1] = $727;
          $733 = $c;
          $734 = (($733) + 1)|0;
          $c = $734;
         }
        }
       } while(0);
       $735 = HEAP32[$tag>>2]|0;
       $736 = ($735|0)==(4119);
       $737 = HEAP32[$tag>>2]|0;
       $738 = ($737|0)==(541065472);
       $or$cond87 = $736 | $738;
       if ($or$cond87) {
        $739 = (_get2()|0);
        $740 = $739&65535;
        $741 = (+($740|0));
        $742 = $741 / 256.0;
        $743 = $742;
        HEAPF32[1528>>2] = $743;
       }
       $744 = HEAP32[$tag>>2]|0;
       $745 = ($744|0)==(4120);
       $746 = HEAP32[$tag>>2]|0;
       $747 = ($746|0)==(541065472);
       $or$cond89 = $745 | $747;
       if ($or$cond89) {
        $748 = (_get2()|0);
        $749 = $748&65535;
        $750 = (+($749|0));
        $751 = $750 / 256.0;
        $752 = $751;
        HEAPF32[(1536)>>2] = $752;
       }
       $753 = HEAP32[$tag>>2]|0;
       $754 = ($753|0)==(8209);
       $755 = HEAP32[$len>>2]|0;
       $756 = ($755|0)==(2);
       $or$cond91 = $754 & $756;
       if ($or$cond91) {
        label = 206;
       } else {
        label = 207;
       }
      }
     } while(0);
     if ((label|0) == 206) {
      label = 0;
      HEAP16[448960>>1] = 19789;
      $757 = (_get2()|0);
      $758 = $757&65535;
      $759 = (+($758|0));
      $760 = $759 / 256.0;
      $761 = $760;
      HEAPF32[1528>>2] = $761;
      $762 = (_get2()|0);
      $763 = $762&65535;
      $764 = (+($763|0));
      $765 = $764 / 256.0;
      $766 = $765;
      HEAPF32[(1536)>>2] = $766;
      label = 207;
     }
     do {
      if ((label|0) == 207) {
       label = 0;
       $767 = HEAP32[$tag>>2]|0;
       $768 = $767 | 112;
       $769 = ($768|0)==(8304);
       do {
        if ($769) {
         $770 = HEAP32[$type>>2]|0;
         $771 = ($770|0)==(4);
         $772 = HEAP32[$type>>2]|0;
         $773 = ($772|0)==(13);
         $or$cond93 = $771 | $773;
         if (!($or$cond93)) {
          break;
         }
         $774 = HEAP32[944>>2]|0;
         $775 = (_get4()|0);
         $776 = $0;
         $777 = (($775) + ($776))|0;
         (_fseek($774,$777,0)|0);
        }
       } while(0);
       $778 = HEAP32[$tag>>2]|0;
       $779 = ($778|0)==(8224);
       do {
        if ($779) {
         $780 = (_strncmp($buf,613750,5)|0);
         $781 = ($780|0)!=(0);
         if ($781) {
          break;
         }
         $782 = $0;
         _parse_thumb_note($782,257,258);
        }
       } while(0);
       $783 = HEAP32[$tag>>2]|0;
       $784 = ($783|0)==(8256);
       if ($784) {
        $785 = $0;
        _parse_makernote($785,8256);
       }
       $786 = HEAP32[$tag>>2]|0;
       $787 = ($786|0)==(45096);
       if ($787) {
        $788 = HEAP32[944>>2]|0;
        $789 = (_get4()|0);
        $790 = $0;
        $791 = (($789) + ($790))|0;
        (_fseek($788,$791,0)|0);
        $792 = $0;
        _parse_thumb_note($792,136,137);
       }
       $793 = HEAP32[$tag>>2]|0;
       $794 = ($793|0)==(16385);
       $795 = HEAP32[$len>>2]|0;
       $796 = ($795>>>0)>(500);
       $or$cond95 = $794 & $796;
       L303: do {
        if ($or$cond95) {
         $797 = HEAP32[$len>>2]|0;
         $798 = ($797|0)==(582);
         do {
          if ($798) {
           $804 = 50;
          } else {
           $799 = HEAP32[$len>>2]|0;
           $800 = ($799|0)==(653);
           if ($800) {
            $804 = 68;
            break;
           }
           $801 = HEAP32[$len>>2]|0;
           $802 = ($801|0)==(5120);
           $803 = $802 ? 142 : 126;
           $804 = $803;
          }
         } while(0);
         $i = $804;
         $805 = HEAP32[944>>2]|0;
         $806 = $i;
         (_fseek($805,$806,1)|0);
         $c = 0;
         while(1) {
          $807 = $c;
          $808 = ($807>>>0)<(4);
          if (!($808)) {
           break;
          }
          $809 = (_get2()|0);
          $810 = (+($809&65535));
          $811 = $c;
          $812 = $c;
          $813 = $812 >>> 1;
          $814 = $811 ^ $813;
          $815 = (1528 + ($814<<2)|0);
          HEAPF32[$815>>2] = $810;
          $816 = $c;
          $817 = (($816) + 1)|0;
          $c = $817;
         }
         $818 = $i;
         $819 = (($818) + 18)|0;
         $i = $819;
         while(1) {
          $820 = $i;
          $821 = HEAP32[$len>>2]|0;
          $822 = ($820>>>0)<=($821>>>0);
          if (!($822)) {
           break L303;
          }
          (_get2()|0);
          $c = 0;
          while(1) {
           $823 = $c;
           $824 = ($823>>>0)<(4);
           if (!($824)) {
            break;
           }
           $825 = (_get2()|0);
           $826 = $c;
           $827 = $c;
           $828 = $827 >>> 1;
           $829 = $826 ^ $828;
           $830 = (580252 + ($829<<1)|0);
           HEAP16[$830>>1] = $825;
           $831 = $c;
           $832 = (($831) + 1)|0;
           $c = $832;
          }
          $833 = HEAP16[(580254)>>1]|0;
          $834 = $833&65535;
          $835 = ($834|0)==(1170);
          if ($835) {
           break L303;
          }
          $836 = $i;
          $837 = (($836) + 10)|0;
          $i = $837;
         }
        }
       } while(0);
       $838 = HEAP32[$tag>>2]|0;
       $839 = ($838|0)==(16417);
       L322: do {
        if ($839) {
         $840 = (_get4()|0);
         $841 = ($840|0)!=(0);
         if (!($841)) {
          break;
         }
         $842 = (_get4()|0);
         $843 = ($842|0)!=(0);
         if (!($843)) {
          break;
         }
         $c = 0;
         while(1) {
          $844 = $c;
          $845 = ($844>>>0)<(4);
          if (!($845)) {
           break L322;
          }
          $846 = $c;
          $847 = (1528 + ($846<<2)|0);
          HEAPF32[$847>>2] = 1024.0;
          $848 = $c;
          $849 = (($848) + 1)|0;
          $c = $849;
         }
        }
       } while(0);
       $850 = HEAP32[$tag>>2]|0;
       $851 = ($850|0)==(40993);
       L330: do {
        if ($851) {
         $c = 0;
         while(1) {
          $852 = $c;
          $853 = ($852>>>0)<(4);
          if (!($853)) {
           break L330;
          }
          $854 = (_get4()|0);
          $855 = (+($854>>>0));
          $856 = $c;
          $857 = $c;
          $858 = $857 >>> 1;
          $859 = $856 ^ $858;
          $860 = (1528 + ($859<<2)|0);
          HEAPF32[$860>>2] = $855;
          $861 = $c;
          $862 = (($861) + 1)|0;
          $c = $862;
         }
        }
       } while(0);
       $863 = HEAP32[$tag>>2]|0;
       $864 = ($863|0)==(41000);
       L336: do {
        if ($864) {
         $c = 0;
         while(1) {
          $865 = $c;
          $866 = ($865>>>0)<(4);
          if (!($866)) {
           break L336;
          }
          $867 = (_get4()|0);
          $868 = (+($867>>>0));
          $869 = $c;
          $870 = $c;
          $871 = $870 >>> 1;
          $872 = $869 ^ $871;
          $873 = (1528 + ($872<<2)|0);
          $874 = +HEAPF32[$873>>2];
          $875 = $874 - $868;
          HEAPF32[$873>>2] = $875;
          $876 = $c;
          $877 = (($876) + 1)|0;
          $c = $877;
         }
        }
       } while(0);
       $878 = HEAP32[$tag>>2]|0;
       $879 = ($878|0)==(45057);
       if (!($879)) {
        break;
       }
       $880 = (_get2()|0);
       $881 = $880&65535;
       HEAP32[1072>>2] = $881;
      }
     } while(0);
     $882 = HEAP32[944>>2]|0;
     $883 = HEAP32[$save>>2]|0;
     (_fseek($882,$883,0)|0);
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } while(0);
 L344: do {
  if ((label|0) == 8) {
   HEAP16[448960>>1] = 19789;
   L346: while(1) {
    $18 = HEAP32[944>>2]|0;
    $19 = (_ftell($18)|0);
    $i = $19;
    $20 = HEAP32[1524>>2]|0;
    $21 = ($19>>>0)<($20>>>0);
    $22 = $i;
    $23 = ($22>>>0)<(16384);
    $24 = $21 ? $23 : 0;
    if (!($24)) {
     break L344;
    }
    $25 = ((($wb)) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$wb>>2] = $26;
    $27 = ((($wb)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($wb)) + 8|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($wb)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($wb)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (_get2()|0);
    $34 = $33&65535;
    $35 = ((($wb)) + 12|0);
    HEAP32[$35>>2] = $34;
    $36 = ((($wb)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(256);
    if (!($38)) {
     continue;
    }
    $39 = ((($wb)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(256);
    if (!($41)) {
     continue;
    }
    $42 = HEAP32[$wb>>2]|0;
    $43 = ($42>>>0)>(256);
    if (!($43)) {
     continue;
    }
    $44 = HEAP32[$wb>>2]|0;
    $45 = ($44>>>0)<(640);
    if (!($45)) {
     continue;
    }
    $46 = ((($wb)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47>>>0)>(256);
    if (!($48)) {
     continue;
    }
    $49 = ((($wb)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50>>>0)<(640);
    if (!($51)) {
     continue;
    }
    $c = 0;
    while(1) {
     $52 = $c;
     $53 = ($52>>>0)<(4);
     if (!($53)) {
      continue L346;
     }
     $54 = $c;
     $55 = (($wb) + ($54<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (+($56>>>0));
     $58 = $c;
     $59 = (1528 + ($58<<2)|0);
     HEAPF32[$59>>2] = $57;
     $60 = $c;
     $61 = (($60) + 1)|0;
     $c = $61;
    }
   }
  }
 } while(0);
 $884 = $sorder;
 HEAP16[448960>>1] = $884;
 STACKTOP = sp;return;
}
function _parse_tiff_ifd($base) {
 $base = $base|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0.0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0.0, $1038 = 0.0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0.0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0.0, $1066 = 0.0, $1067 = 0, $1068 = 0;
 var $1069 = 0.0, $107 = 0, $1070 = 0.0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0.0, $1076 = 0.0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0.0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0.0, $1091 = 0.0, $1092 = 0.0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0.0, $1107 = 0, $1108 = 0, $1109 = 0.0, $111 = 0, $1110 = 0.0, $1111 = 0.0, $1112 = 0.0, $1113 = 0, $1114 = 0, $1115 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0.0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0.0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0.0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0.0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0.0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0.0, $822 = 0.0, $823 = 0, $824 = 0.0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0.0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0.0, $852 = 0.0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0;
 var $858 = 0.0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0, $862 = 0.0, $863 = 0.0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0.0, $872 = 0.0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0.0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0.0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0.0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0.0, $924 = 0, $925 = 0.0, $926 = 0, $927 = 0.0, $928 = 0.0, $929 = 0;
 var $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0.0, $938 = 0.0, $939 = 0, $94 = 0, $940 = 0, $941 = 0.0, $942 = 0.0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $ab = 0, $asn = 0, $buf = 0;
 var $c = 0, $cam_xyz = 0, $cbuf = 0, $cc = 0, $cfa = 0, $cfa_pat = 0, $cfa_pc = 0, $cm = 0, $cp = 0, $entries = 0, $i = 0, $ifd = 0, $ima_len = 0, $j = 0, $jh = 0, $len = 0, $num = 0.0, $or$cond = 0, $or$cond3 = 0, $plen = 0;
 var $save = 0, $sfp = 0, $software = 0, $sony_curve = 0, $sony_key = 0, $sony_length = 0, $sony_offset = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0;
 var $switch$split42D = 0, $switch$split432D = 0, $switch$split72D = 0, $tab = 0, $tag = 0, $type = 0, $use_cm = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $xyz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 432|0;
 $vararg_buffer4 = sp + 424|0;
 $vararg_buffer = sp + 416|0;
 $tag = sp + 1020|0;
 $type = sp + 1016|0;
 $len = sp + 1012|0;
 $save = sp + 1004|0;
 $software = sp + 1320|0;
 $cfa_pat = sp + 1304|0;
 $cfa_pc = sp + 1296|0;
 $tab = sp + 1040|0;
 $cc = sp + 288|0;
 $cm = sp + 192|0;
 $cam_xyz = sp + 96|0;
 $ab = sp + 56|0;
 $asn = sp + 24|0;
 $xyz = sp;
 $sony_curve = sp + 944|0;
 $jh = sp + 448|0;
 $1 = $base;
 $plen = 16;
 $use_cm = 0;
 $ima_len = 0;
 ;HEAP8[$cfa_pc>>0]=HEAP8[614455>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[614455+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[614455+2>>0]|0;HEAP8[$cfa_pc+3>>0]=HEAP8[614455+3>>0]|0;
 ;HEAP32[$ab>>2]=HEAP32[168>>2]|0;HEAP32[$ab+4>>2]=HEAP32[168+4>>2]|0;HEAP32[$ab+8>>2]=HEAP32[168+8>>2]|0;HEAP32[$ab+12>>2]=HEAP32[168+12>>2]|0;HEAP32[$ab+16>>2]=HEAP32[168+16>>2]|0;HEAP32[$ab+20>>2]=HEAP32[168+20>>2]|0;HEAP32[$ab+24>>2]=HEAP32[168+24>>2]|0;HEAP32[$ab+28>>2]=HEAP32[168+28>>2]|0;
 ;HEAP32[$asn>>2]=0|0;HEAP32[$asn+4>>2]=0|0;HEAP32[$asn+8>>2]=0|0;HEAP32[$asn+12>>2]=0|0;HEAP32[$asn+16>>2]=0|0;HEAP32[$asn+20>>2]=0|0;HEAP32[$asn+24>>2]=0|0;HEAP32[$asn+28>>2]=0|0;
 ;HEAP32[$xyz>>2]=HEAP32[200>>2]|0;HEAP32[$xyz+4>>2]=HEAP32[200+4>>2]|0;HEAP32[$xyz+8>>2]=HEAP32[200+8>>2]|0;HEAP32[$xyz+12>>2]=HEAP32[200+12>>2]|0;HEAP32[$xyz+16>>2]=HEAP32[200+16>>2]|0;HEAP32[$xyz+20>>2]=HEAP32[200+20>>2]|0;
 ;HEAP32[$sony_curve>>2]=HEAP32[294600>>2]|0;HEAP32[$sony_curve+4>>2]=HEAP32[294600+4>>2]|0;HEAP32[$sony_curve+8>>2]=HEAP32[294600+8>>2]|0;HEAP32[$sony_curve+12>>2]=HEAP32[294600+12>>2]|0;HEAP32[$sony_curve+16>>2]=HEAP32[294600+16>>2]|0;HEAP32[$sony_curve+20>>2]=HEAP32[294600+20>>2]|0;
 $sony_offset = 0;
 $sony_length = 0;
 $sony_key = 0;
 $2 = HEAP32[293740>>2]|0;
 $3 = ($2>>>0)>=(10);
 if ($3) {
  $0 = 1;
  $1115 = $0;
  STACKTOP = sp;return ($1115|0);
 }
 $4 = HEAP32[293740>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[293740>>2] = $5;
 $ifd = $4;
 $j = 0;
 while(1) {
  $6 = $j;
  $7 = ($6|0)<(4);
  if (!($7)) {
   break;
  }
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(4);
   if (!($9)) {
    break;
   }
   $10 = $i;
   $11 = $j;
   $12 = ($10|0)==($11|0);
   $13 = $12&1;
   $14 = (+($13|0));
   $15 = $i;
   $16 = $j;
   $17 = (($cc) + ($16<<5)|0);
   $18 = (($17) + ($15<<3)|0);
   HEAPF64[$18>>3] = $14;
   $19 = $i;
   $20 = (($19) + 1)|0;
   $i = $20;
  }
  $21 = $j;
  $22 = (($21) + 1)|0;
  $j = $22;
 }
 $23 = (_get2()|0);
 $24 = $23&65535;
 $entries = $24;
 $25 = $entries;
 $26 = ($25>>>0)>(512);
 if ($26) {
  $0 = 1;
  $1115 = $0;
  STACKTOP = sp;return ($1115|0);
 }
 while(1) {
  $27 = $entries;
  $28 = (($27) + -1)|0;
  $entries = $28;
  $29 = ($27|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $1;
  _tiff_get($30,$tag,$type,$len,$save);
  $31 = HEAP32[$tag>>2]|0;
  $switch$split2D = ($31|0)<(34303);
  L19: do {
   if ($switch$split2D) {
    $switch$split12D = ($31|0)<(274);
    L21: do {
     if ($switch$split12D) {
      do {
       switch ($31|0) {
       case 256: case 2:  {
        label = 33;
        break L19;
        break;
       }
       case 257: case 3:  {
        label = 34;
        break L19;
        break;
       }
       case 258:  {
        label = 35;
        break L19;
        break;
       }
       case 273:  {
        label = 46;
        break L19;
        break;
       }
       case 11:  {
        break L21;
        break;
       }
       case 5:  {
        $32 = (_get2()|0);
        HEAP16[580076>>1] = $32;
        break L19;
        break;
       }
       case 6:  {
        $33 = (_get2()|0);
        HEAP16[580074>>1] = $33;
        break L19;
        break;
       }
       case 7:  {
        $34 = (_get2()|0);
        $35 = $34&65535;
        $36 = HEAP16[580076>>1]|0;
        $37 = $36&65535;
        $38 = (($37) + ($35))|0;
        $39 = $38&65535;
        HEAP16[580076>>1] = $39;
        break L19;
        break;
       }
       case 9:  {
        $40 = (_get2()|0);
        $41 = $40&65535;
        $i = $41;
        $42 = ($41|0)!=(0);
        if (!($42)) {
         break L19;
        }
        $43 = $i;
        HEAP32[776>>2] = $43;
        break L19;
        break;
       }
       case 18: case 17:  {
        $44 = HEAP32[$type>>2]|0;
        $45 = ($44|0)==(3);
        $46 = HEAP32[$len>>2]|0;
        $47 = ($46|0)==(1);
        $or$cond = $45 & $47;
        if (!($or$cond)) {
         break L19;
        }
        $48 = (_get2()|0);
        $49 = $48&65535;
        $50 = (+($49|0));
        $51 = $50 / 256.0;
        $52 = $51;
        $53 = HEAP32[$tag>>2]|0;
        $54 = (($53) - 17)|0;
        $55 = $54<<1;
        $56 = (1528 + ($55<<2)|0);
        HEAPF32[$56>>2] = $52;
        break L19;
        break;
       }
       case 23:  {
        $57 = HEAP32[$type>>2]|0;
        $58 = ($57|0)==(3);
        if (!($58)) {
         break L19;
        }
        $59 = (_get2()|0);
        $60 = (+($59&65535));
        HEAPF32[293672>>2] = $60;
        break L19;
        break;
       }
       case 30: case 29: case 28:  {
        $61 = (_get2()|0);
        $62 = HEAP32[$tag>>2]|0;
        $63 = (($62) - 28)|0;
        $64 = (580264 + ($63<<1)|0);
        HEAP16[$64>>1] = $61;
        $65 = HEAP16[(580266)>>1]|0;
        HEAP16[(580270)>>1] = $65;
        break L19;
        break;
       }
       case 38: case 37: case 36:  {
        $66 = (_get2()|0);
        $67 = (+($66&65535));
        $68 = HEAP32[$tag>>2]|0;
        $69 = (($68) - 36)|0;
        $70 = (1528 + ($69<<2)|0);
        HEAPF32[$70>>2] = $67;
        break L19;
        break;
       }
       case 39:  {
        $71 = HEAP32[$len>>2]|0;
        $72 = ($71>>>0)<(50);
        $73 = +HEAPF32[1528>>2];
        $74 = $73 != 0.0;
        $or$cond3 = $72 | $74;
        if ($or$cond3) {
         break L19;
        }
        $75 = HEAP32[944>>2]|0;
        (_fseek($75,12,1)|0);
        $c = 0;
        while(1) {
         $76 = $c;
         $77 = ($76|0)<(3);
         if (!($77)) {
          break L19;
         }
         $78 = (_get2()|0);
         $79 = (+($78&65535));
         $80 = $c;
         $81 = (1528 + ($80<<2)|0);
         HEAPF32[$81>>2] = $79;
         $82 = $c;
         $83 = (($82) + 1)|0;
         $c = $83;
        }
        break;
       }
       case 46:  {
        $84 = HEAP32[$type>>2]|0;
        $85 = ($84|0)!=(7);
        if ($85) {
         break L19;
        }
        $86 = HEAP32[944>>2]|0;
        $87 = (_getc_unlocked($86)|0);
        $88 = ($87|0)!=(255);
        if ($88) {
         break L19;
        }
        $89 = HEAP32[944>>2]|0;
        $90 = (_getc_unlocked($89)|0);
        $91 = ($90|0)!=(216);
        if ($91) {
         break L19;
        }
        $92 = HEAP32[944>>2]|0;
        $93 = (_ftell($92)|0);
        $94 = (($93) - 2)|0;
        HEAP32[293668>>2] = $94;
        $95 = HEAP32[$len>>2]|0;
        HEAP32[1672>>2] = $95;
        break L19;
        break;
       }
       case 259:  {
        $138 = HEAP32[$type>>2]|0;
        $139 = (_getint($138)|0);
        $140 = $ifd;
        $141 = (293744 + (($140*48)|0)|0);
        $142 = ((($141)) + 12|0);
        HEAP32[$142>>2] = $139;
        break L19;
        break;
       }
       case 262:  {
        $143 = (_get2()|0);
        $144 = $143&65535;
        $145 = $ifd;
        $146 = (293744 + (($145*48)|0)|0);
        $147 = ((($146)) + 16|0);
        HEAP32[$147>>2] = $144;
        break L19;
        break;
       }
       case 270:  {
        $148 = HEAP32[944>>2]|0;
        (_fread(614459,512,1,$148)|0);
        break L19;
        break;
       }
       case 271:  {
        $149 = HEAP32[944>>2]|0;
        (_fgets(594275,64,$149)|0);
        break L19;
        break;
       }
       case 272:  {
        $150 = HEAP32[944>>2]|0;
        (_fgets(594339,64,$150)|0);
        break L19;
        break;
       }
       default: {
        break L19;
       }
       }
      } while(0);
     } else {
      $switch$split72D = ($31|0)<(514);
      if ($switch$split72D) {
       do {
        switch ($31|0) {
        case 513:  {
         label = 46;
         break L19;
         break;
        }
        case 279:  {
         label = 57;
         break L19;
         break;
        }
        case 291:  {
         label = 209;
         break L19;
         break;
        }
        case 305:  {
         break L21;
         break;
        }
        case 280:  {
         $151 = HEAP32[$type>>2]|0;
         $152 = ($151|0)!=(4);
         if ($152) {
          break L19;
         }
         HEAP32[31028>>2] = 17;
         HEAP32[1068>>2] = 8200;
         label = 46;
         break L19;
         break;
        }
        case 274:  {
         $244 = (_get2()|0);
         $245 = $244&65535;
         $246 = $245 & 7;
         $247 = (614971 + ($246)|0);
         $248 = HEAP8[$247>>0]|0;
         $249 = $248 << 24 >> 24;
         $250 = (($249) - 48)|0;
         $251 = $ifd;
         $252 = (293744 + (($251*48)|0)|0);
         $253 = ((($252)) + 24|0);
         HEAP32[$253>>2] = $250;
         break L19;
         break;
        }
        case 277:  {
         $254 = HEAP32[$type>>2]|0;
         $255 = (_getint($254)|0);
         $256 = $255 & 7;
         $257 = $ifd;
         $258 = (293744 + (($257*48)|0)|0);
         $259 = ((($258)) + 28|0);
         HEAP32[$259>>2] = $256;
         break L19;
         break;
        }
        case 306:  {
         _get_timestamp(0);
         break L19;
         break;
        }
        case 315:  {
         $288 = HEAP32[944>>2]|0;
         (_fread(613809,64,1,$288)|0);
         break L19;
         break;
        }
        case 322:  {
         $289 = HEAP32[$type>>2]|0;
         $290 = (_getint($289)|0);
         $291 = $ifd;
         $292 = (293744 + (($291*48)|0)|0);
         $293 = ((($292)) + 36|0);
         HEAP32[$293>>2] = $290;
         break L19;
         break;
        }
        case 323:  {
         $294 = HEAP32[$type>>2]|0;
         $295 = (_getint($294)|0);
         $296 = $ifd;
         $297 = (293744 + (($296*48)|0)|0);
         $298 = ((($297)) + 40|0);
         HEAP32[$298>>2] = $295;
         break L19;
         break;
        }
        case 324:  {
         $299 = HEAP32[$len>>2]|0;
         $300 = ($299>>>0)>(1);
         if ($300) {
          $301 = HEAP32[944>>2]|0;
          $302 = (_ftell($301)|0);
          $307 = $302;
         } else {
          $303 = (_get4()|0);
          $307 = $303;
         }
         $304 = $ifd;
         $305 = (293744 + (($304*48)|0)|0);
         $306 = ((($305)) + 20|0);
         HEAP32[$306>>2] = $307;
         $308 = HEAP32[$len>>2]|0;
         $309 = ($308|0)==(1);
         if ($309) {
          $310 = $ifd;
          $311 = (293744 + (($310*48)|0)|0);
          $312 = ((($311)) + 40|0);
          HEAP32[$312>>2] = 0;
          $313 = $ifd;
          $314 = (293744 + (($313*48)|0)|0);
          $315 = ((($314)) + 36|0);
          HEAP32[$315>>2] = 0;
         }
         $316 = HEAP32[$len>>2]|0;
         $317 = ($316|0)==(4);
         if (!($317)) {
          break L19;
         }
         HEAP32[31028>>2] = 18;
         HEAP32[1508>>2] = 5;
         break L19;
         break;
        }
        case 330:  {
         $318 = (_strcmp(594339,615043)|0);
         $319 = ($318|0)!=(0);
         if (!($319)) {
          $320 = $ifd;
          $321 = (293744 + (($320*48)|0)|0);
          $322 = HEAP32[$321>>2]|0;
          $323 = ($322|0)==(3872);
          if ($323) {
           HEAP32[31028>>2] = 19;
           $324 = (_get4()|0);
           $325 = $1;
           $326 = (($324) + ($325))|0;
           HEAP32[1524>>2] = $326;
           $327 = $ifd;
           $328 = (($327) + 1)|0;
           $ifd = $328;
           break L19;
          }
         }
         while(1) {
          $329 = HEAP32[$len>>2]|0;
          $330 = (($329) + -1)|0;
          HEAP32[$len>>2] = $330;
          $331 = ($329|0)!=(0);
          if (!($331)) {
           break L19;
          }
          $332 = HEAP32[944>>2]|0;
          $333 = (_ftell($332)|0);
          $i = $333;
          $334 = HEAP32[944>>2]|0;
          $335 = (_get4()|0);
          $336 = $1;
          $337 = (($335) + ($336))|0;
          (_fseek($334,$337,0)|0);
          $338 = $1;
          $339 = (_parse_tiff_ifd($338)|0);
          $340 = ($339|0)!=(0);
          if ($340) {
           break L19;
          }
          $341 = HEAP32[944>>2]|0;
          $342 = $i;
          $343 = (($342) + 4)|0;
          (_fseek($341,$343,0)|0);
         }
         break;
        }
        case 400:  {
         (_strcpy(594275,615053)|0);
         HEAP32[1040>>2] = 4095;
         break L19;
         break;
        }
        default: {
         break L19;
        }
        }
       } while(0);
      }
      $switch$split162D = ($31|0)<(29459);
      if (!($switch$split162D)) {
       switch ($31|0) {
       case 33424:  {
        label = 121;
        break L19;
        break;
       }
       case 29459:  {
        $c = 0;
        while(1) {
         $399 = $c;
         $400 = ($399|0)<(4);
         if (!($400)) {
          break;
         }
         $401 = (_get2()|0);
         $402 = (+($401&65535));
         $403 = $c;
         $404 = (1528 + ($403<<2)|0);
         HEAPF32[$404>>2] = $402;
         $405 = $c;
         $406 = (($405) + 1)|0;
         $c = $406;
        }
        $407 = +HEAPF32[(1532)>>2];
        $408 = $407 == 1024.0;
        $409 = +HEAPF32[(1536)>>2];
        $410 = $409 == 1024.0;
        $411 = $408 ? $410 : 0;
        $412 = $411&1;
        $413 = $412 << 1;
        $i = $413;
        $414 = $i;
        $415 = (1528 + ($414<<2)|0);
        $416 = +HEAPF32[$415>>2];
        $417 = $i;
        $418 = (($417) + 1)|0;
        $419 = (1528 + ($418<<2)|0);
        $420 = +HEAPF32[$419>>2];
        $421 = $416 + $420;
        $422 = $i;
        $423 = (1528 + ($422<<2)|0);
        HEAPF32[$423>>2] = $421;
        $424 = $i;
        $425 = (1528 + ($424<<2)|0);
        $426 = +HEAPF32[$425>>2];
        $427 = $i;
        $428 = (($427) + 1)|0;
        $429 = (1528 + ($428<<2)|0);
        $430 = +HEAPF32[$429>>2];
        $431 = $426 - $430;
        $432 = $i;
        $433 = (($432) + 1)|0;
        $434 = (1528 + ($433<<2)|0);
        HEAPF32[$434>>2] = $431;
        $435 = $i;
        $436 = (1528 + ($435<<2)|0);
        $437 = +HEAPF32[$436>>2];
        $438 = $i;
        $439 = (($438) + 1)|0;
        $440 = (1528 + ($439<<2)|0);
        $441 = +HEAPF32[$440>>2];
        $442 = $437 - $441;
        $443 = $i;
        $444 = (1528 + ($443<<2)|0);
        HEAPF32[$444>>2] = $442;
        break L19;
        break;
       }
       case 33405:  {
        $445 = HEAP32[944>>2]|0;
        (_fgets(593904,64,$445)|0);
        break L19;
        break;
       }
       case 33421:  {
        $446 = (_get2()|0);
        $447 = $446&65535;
        $448 = ($447|0)==(6);
        if (!($448)) {
         break L19;
        }
        $449 = (_get2()|0);
        $450 = $449&65535;
        $451 = ($450|0)==(6);
        if (!($451)) {
         break L19;
        }
        HEAP32[776>>2] = 9;
        break L19;
        break;
       }
       case 33422:  {
        $452 = HEAP32[776>>2]|0;
        $453 = ($452|0)==(9);
        if (!($453)) {
         label = 114;
         break L19;
        }
        $c = 0;
        while(1) {
         $454 = $c;
         $455 = ($454|0)<(36);
         if (!($455)) {
          break L19;
         }
         $456 = HEAP32[944>>2]|0;
         $457 = (_getc_unlocked($456)|0);
         $458 = $457 & 3;
         $459 = $458&255;
         $460 = $c;
         $461 = (593126 + ($460)|0);
         HEAP8[$461>>0] = $459;
         $462 = $c;
         $463 = (($462) + 1)|0;
         $c = $463;
        }
        break;
       }
       case 33434:  {
        $503 = HEAP32[$type>>2]|0;
        $504 = (+_getreal($503));
        $505 = $504;
        HEAPF32[293680>>2] = $505;
        $506 = $ifd;
        $507 = (293744 + (($506*48)|0)|0);
        $508 = ((($507)) + 44|0);
        HEAPF32[$508>>2] = $505;
        break L19;
        break;
       }
       case 33437:  {
        $509 = HEAP32[$type>>2]|0;
        $510 = (+_getreal($509));
        $511 = $510;
        HEAPF32[293676>>2] = $511;
        break L19;
        break;
       }
       default: {
        break L19;
       }
       }
      }
      $switch$split252D = ($31|0)<(29185);
      if (!($switch$split252D)) {
       switch ($31|0) {
       case 29185:  {
        $383 = (_get4()|0);
        $sony_length = $383;
        break L19;
        break;
       }
       case 29217:  {
        $384 = (_get4()|0);
        $sony_key = $384;
        break L19;
        break;
       }
       case 29264:  {
        $385 = HEAP32[944>>2]|0;
        $386 = (_ftell($385)|0);
        _parse_minolta($386);
        HEAP16[580226>>1] = 0;
        break L19;
        break;
       }
       case 29443:  {
        $c = 0;
        while(1) {
         $387 = $c;
         $388 = ($387|0)<(4);
         if (!($388)) {
          break L19;
         }
         $389 = (_get2()|0);
         $390 = (+($389&65535));
         $391 = $c;
         $392 = $c;
         $393 = ($392|0)<(2);
         $394 = $393&1;
         $395 = $391 ^ $394;
         $396 = (1528 + ($395<<2)|0);
         HEAPF32[$396>>2] = $390;
         $397 = $c;
         $398 = (($397) + 1)|0;
         $c = $398;
        }
        break;
       }
       default: {
        break L19;
       }
       }
      }
      $switch$split342D = ($31|0)<(28688);
      if ($switch$split342D) {
       switch ($31|0) {
       case 514:  {
        label = 57;
        break L19;
        break;
       }
       default: {
        break L19;
       }
       }
      }
      switch ($31|0) {
      case 28688:  {
       break;
      }
      case 29184:  {
       $382 = (_get4()|0);
       $sony_offset = $382;
       break L19;
       break;
      }
      default: {
       break L19;
      }
      }
      $c = 0;
      while(1) {
       $344 = $c;
       $345 = ($344|0)<(4);
       if (!($345)) {
        break;
       }
       $346 = (_get2()|0);
       $347 = $346&65535;
       $348 = $347 >> 2;
       $349 = $348 & 4095;
       $350 = $c;
       $351 = (($350) + 1)|0;
       $352 = (($sony_curve) + ($351<<2)|0);
       HEAP32[$352>>2] = $349;
       $353 = $c;
       $354 = (($353) + 1)|0;
       $c = $354;
      }
      $i = 0;
      while(1) {
       $355 = $i;
       $356 = ($355|0)<(5);
       if (!($356)) {
        break L19;
       }
       $357 = $i;
       $358 = (($sony_curve) + ($357<<2)|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = (($359) + 1)|0;
       $j = $360;
       while(1) {
        $361 = $j;
        $362 = $i;
        $363 = (($362) + 1)|0;
        $364 = (($sony_curve) + ($363<<2)|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ($361>>>0)<=($365>>>0);
        if (!($366)) {
         break;
        }
        $367 = $j;
        $368 = (($367) - 1)|0;
        $369 = (448962 + ($368<<1)|0);
        $370 = HEAP16[$369>>1]|0;
        $371 = $370&65535;
        $372 = $i;
        $373 = 1 << $372;
        $374 = (($371) + ($373))|0;
        $375 = $374&65535;
        $376 = $j;
        $377 = (448962 + ($376<<1)|0);
        HEAP16[$377>>1] = $375;
        $378 = $j;
        $379 = (($378) + 1)|0;
        $j = $379;
       }
       $380 = $i;
       $381 = (($380) + 1)|0;
       $i = $381;
      }
     }
    } while(0);
    $275 = HEAP32[944>>2]|0;
    (_fgets($software,64,$275)|0);
    $276 = (_strncmp($software,614980,5)|0);
    $277 = ($276|0)!=(0);
    if ($277) {
     $278 = (_strncmp($software,614986,5)|0);
     $279 = ($278|0)!=(0);
     if ($279) {
      $280 = (_strncmp($software,614992,5)|0);
      $281 = ($280|0)!=(0);
      if ($281) {
       $282 = (_strncmp($software,614998,6)|0);
       $283 = ($282|0)!=(0);
       if ($283) {
        $284 = (_strncmp($software,615005,10)|0);
        $285 = ($284|0)!=(0);
        if ($285) {
         $286 = (_strcmp($software,615016)|0);
         $287 = ($286|0)!=(0);
         if ($287) {
          break;
         }
        }
       }
      }
     }
    }
    HEAP32[1508>>2] = 0;
   } else {
    $switch$split42D = ($31|0)<(50717);
    L137: do {
     if ($switch$split42D) {
      $switch$split102D = ($31|0)<(46279);
      L139: do {
       if ($switch$split102D) {
        $switch$split192D = ($31|0)<(37122);
        if (!($switch$split192D)) {
         $switch$split282D = ($31|0)<(37400);
         if ($switch$split282D) {
          switch ($31|0) {
          case 37122:  {
           $583 = (_get4()|0);
           HEAP32[1796>>2] = $583;
           break L19;
           break;
          }
          case 37386:  {
           $584 = HEAP32[$type>>2]|0;
           $585 = (+_getreal($584));
           $586 = $585;
           HEAPF32[294224>>2] = $586;
           break L19;
           break;
          }
          case 37393:  {
           $587 = HEAP32[$type>>2]|0;
           $588 = (_getint($587)|0);
           HEAP32[293684>>2] = $588;
           break L19;
           break;
          }
          default: {
           break L19;
          }
          }
         }
         $switch$split372D = ($31|0)<(46274);
         if (!($switch$split372D)) {
          switch ($31|0) {
          case 46274:  {
           break L139;
           break;
          }
          case 46275:  {
           break;
          }
          default: {
           break L19;
          }
          }
          (_strcpy(594275,615082)|0);
          $610 = HEAP32[944>>2]|0;
          $611 = (_ftell($610)|0);
          HEAP32[1524>>2] = $611;
          $612 = HEAP32[$len>>2]|0;
          $ima_len = $612;
          break L19;
         }
         $switch$split432D = ($31|0)<(40976);
         if (!($switch$split432D)) {
          switch ($31|0) {
          case 40976:  {
           break;
          }
          default: {
           break L19;
          }
          }
          $605 = (_get4()|0);
          HEAP32[1784>>2] = $605;
          $606 = $ifd;
          $607 = (293744 + (($606*48)|0)|0);
          $608 = ((($607)) + 12|0);
          $609 = HEAP32[$608>>2]|0;
          switch ($609|0) {
          case 32770:  {
           HEAP32[31028>>2] = 20;
           break L19;
           break;
          }
          case 32772:  {
           HEAP32[31028>>2] = 21;
           break L19;
           break;
          }
          case 32773:  {
           HEAP32[31028>>2] = 22;
           break L19;
           break;
          }
          default: {
           break L19;
          }
          }
         }
         switch ($31|0) {
         case 37400:  {
          break;
         }
         default: {
          break L19;
         }
         }
         $i = 0;
         HEAP32[976>>2] = 0;
         while(1) {
          $589 = $i;
          $590 = ($589|0)<(3);
          if (!($590)) {
           break L19;
          }
          $591 = HEAP32[$type>>2]|0;
          (+_getreal($591));
          $c = 0;
          while(1) {
           $592 = $c;
           $593 = ($592|0)<(3);
           if (!($593)) {
            break;
           }
           $594 = HEAP32[$type>>2]|0;
           $595 = (+_getreal($594));
           $596 = $595;
           $597 = $c;
           $598 = $i;
           $599 = (984 + ($598<<4)|0);
           $600 = (($599) + ($597<<2)|0);
           HEAPF32[$600>>2] = $596;
           $601 = $c;
           $602 = (($601) + 1)|0;
           $c = $602;
          }
          $603 = $i;
          $604 = (($603) + 1)|0;
          $i = $604;
         }
        }
        switch ($31|0) {
        case 34675:  {
         label = 145;
         break L137;
         break;
        }
        case 34306:  {
         $c = 0;
         while(1) {
          $512 = $c;
          $513 = ($512|0)<(4);
          if (!($513)) {
           break L19;
          }
          $514 = (_get2()|0);
          $515 = $514&65535;
          $516 = (+($515|0));
          $517 = 4096.0 / $516;
          $518 = $517;
          $519 = $c;
          $520 = $519 ^ 1;
          $521 = (1528 + ($520<<2)|0);
          HEAPF32[$521>>2] = $518;
          $522 = $c;
          $523 = (($522) + 1)|0;
          $c = $523;
         }
         break;
        }
        case 34307:  {
         $524 = HEAP32[944>>2]|0;
         (_fread($software,1,7,$524)|0);
         $525 = (_strncmp($software,615070,6)|0);
         $526 = ($525|0)!=(0);
         if ($526) {
          break L19;
         }
         HEAP32[980>>2] = 4;
         $i = 0;
         HEAP32[976>>2] = 0;
         while(1) {
          $527 = $i;
          $528 = ($527|0)<(3);
          if (!($528)) {
           break L19;
          }
          $c = 0;
          while(1) {
           $529 = $c;
           $530 = ($529|0)<(4);
           if (!($530)) {
            break;
           }
           $531 = HEAP32[944>>2]|0;
           $532 = $c;
           $533 = $532 ^ 1;
           $534 = $i;
           $535 = (984 + ($534<<4)|0);
           $536 = (($535) + ($533<<2)|0);
           HEAP32[$vararg_buffer>>2] = $536;
           (_fscanf($531,614320,$vararg_buffer)|0);
           $537 = $c;
           $538 = (($537) + 1)|0;
           $c = $538;
          }
          $539 = HEAP32[720>>2]|0;
          $540 = ($539|0)!=(0);
          L185: do {
           if ($540) {
            $num = 0.0;
            $c = 0;
            while(1) {
             $541 = $c;
             $542 = ($541|0)<(4);
             if (!($542)) {
              break;
             }
             $543 = $c;
             $544 = $i;
             $545 = (984 + ($544<<4)|0);
             $546 = (($545) + ($543<<2)|0);
             $547 = +HEAPF32[$546>>2];
             $548 = $547;
             $549 = $num;
             $550 = $549 + $548;
             $num = $550;
             $551 = $c;
             $552 = (($551) + 1)|0;
             $c = $552;
            }
            $c = 0;
            while(1) {
             $553 = $c;
             $554 = ($553|0)<(4);
             if (!($554)) {
              break L185;
             }
             $555 = $num;
             $556 = $c;
             $557 = $i;
             $558 = (984 + ($557<<4)|0);
             $559 = (($558) + ($556<<2)|0);
             $560 = +HEAPF32[$559>>2];
             $561 = $560;
             $562 = $561 / $555;
             $563 = $562;
             HEAPF32[$559>>2] = $563;
             $564 = $c;
             $565 = (($564) + 1)|0;
             $c = $565;
            }
           }
          } while(0);
          $566 = $i;
          $567 = (($566) + 1)|0;
          $i = $567;
         }
         break;
        }
        case 34310:  {
         $568 = HEAP32[944>>2]|0;
         $569 = (_ftell($568)|0);
         _parse_mos($569);
         break;
        }
        case 34303:  {
         break;
        }
        case 34665:  {
         $570 = HEAP32[944>>2]|0;
         $571 = (_get4()|0);
         $572 = $1;
         $573 = (($571) + ($572))|0;
         (_fseek($570,$573,0)|0);
         $574 = $1;
         _parse_exif($574);
         break L19;
         break;
        }
        case 34853:  {
         $575 = HEAP32[944>>2]|0;
         $576 = (_get4()|0);
         $577 = $1;
         $578 = (($576) + ($577))|0;
         (_fseek($575,$578,0)|0);
         $579 = $1;
         _parse_gps($579);
         break L19;
         break;
        }
        default: {
         break L19;
        }
        }
        (_strcpy(594275,615077)|0);
        break L19;
       } else {
        do {
         switch ($31|0) {
         case 50712:  {
          label = 209;
          break L19;
          break;
         }
         case 50714:  {
          break L137;
          break;
         }
         case 46279:  {
          $613 = $ima_len;
          $614 = ($613|0)!=(0);
          if (!($614)) {
           break L19;
          }
          $615 = HEAP32[944>>2]|0;
          (_fseek($615,38,1)|0);
          break L139;
          break;
         }
         case 50455: case 50454:  {
          $705 = HEAP32[$len>>2]|0;
          $706 = (_malloc($705)|0);
          $cbuf = $706;
          $707 = ($706|0)!=(0|0);
          if (!($707)) {
           break L19;
          }
          $708 = $cbuf;
          $709 = HEAP32[$len>>2]|0;
          $710 = HEAP32[944>>2]|0;
          (_fread($708,1,$709,$710)|0);
          $711 = $cbuf;
          $712 = ((($711)) + -1|0);
          $cp = $712;
          while(1) {
           $713 = $cp;
           $714 = ($713|0)!=(0|0);
           if (!($714)) {
            break;
           }
           $715 = $cp;
           $716 = $cbuf;
           $717 = HEAP32[$len>>2]|0;
           $718 = (($716) + ($717)|0);
           $719 = ($715>>>0)<($718>>>0);
           if (!($719)) {
            break;
           }
           $720 = $cp;
           $721 = ((($720)) + 1|0);
           $cp = $721;
           $722 = (_strncmp($721,615103,8)|0);
           $723 = ($722|0)!=(0);
           if (!($723)) {
            $724 = $cp;
            $725 = ((($724)) + 8|0);
            HEAP32[$vararg_buffer7>>2] = 1528;
            $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
            HEAP32[$vararg_ptr10>>2] = (1532);
            $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
            HEAP32[$vararg_ptr11>>2] = (1536);
            (_sscanf($725,615112,$vararg_buffer7)|0);
           }
           $726 = $cp;
           $727 = (_strchr($726,10)|0);
           $cp = $727;
          }
          $728 = $cbuf;
          _free($728);
          break L19;
          break;
         }
         case 50458:  {
          $729 = HEAP8[594275>>0]|0;
          $730 = ($729<<24>>24)!=(0);
          if ($730) {
           break L19;
          }
          (_strcpy(594275,615121)|0);
          break L19;
          break;
         }
         case 50459:  {
          $731 = HEAP16[448960>>1]|0;
          $732 = $731 << 16 >> 16;
          $i = $732;
          $733 = HEAP32[944>>2]|0;
          $734 = (_ftell($733)|0);
          $j = $734;
          $735 = HEAP32[293740>>2]|0;
          $c = $735;
          $736 = (_get2()|0);
          HEAP16[448960>>1] = $736;
          $737 = HEAP32[944>>2]|0;
          $738 = $j;
          (_get2()|0);
          $739 = (_get4()|0);
          $740 = (($738) + ($739))|0;
          (_fseek($737,$740,0)|0);
          $741 = $j;
          (_parse_tiff_ifd($741)|0);
          HEAP32[1040>>2] = 65535;
          $742 = $c;
          HEAP32[293740>>2] = $742;
          $743 = $i;
          $744 = $743&65535;
          HEAP16[448960>>1] = $744;
          break L19;
          break;
         }
         case 50706:  {
          $c = 0;
          while(1) {
           $745 = $c;
           $746 = ($745|0)<(4);
           if (!($746)) {
            break;
           }
           $747 = HEAP32[1064>>2]|0;
           $748 = $747 << 8;
           $749 = HEAP32[944>>2]|0;
           $750 = (_getc_unlocked($749)|0);
           $751 = (($748) + ($750))|0;
           HEAP32[1064>>2] = $751;
           $752 = $c;
           $753 = (($752) + 1)|0;
           $c = $753;
          }
          $754 = HEAP8[594275>>0]|0;
          $755 = ($754<<24>>24)!=(0);
          if (!($755)) {
           (_strcpy(594275,615132)|0);
          }
          HEAP32[1508>>2] = 1;
          break L19;
          break;
         }
         case 50708:  {
          $756 = HEAP8[594339>>0]|0;
          $757 = ($756<<24>>24)!=(0);
          if ($757) {
           break L19;
          }
          $758 = HEAP32[944>>2]|0;
          (_fgets(594275,64,$758)|0);
          $759 = (_strchr(594275,32)|0);
          $cp = $759;
          $760 = ($759|0)!=(0|0);
          if (!($760)) {
           break L19;
          }
          $761 = $cp;
          $762 = ((($761)) + 1|0);
          (_strcpy(594339,$762)|0);
          $763 = $cp;
          HEAP8[$763>>0] = 0;
          break L19;
          break;
         }
         case 50710:  {
          $764 = HEAP32[776>>2]|0;
          $765 = ($764|0)==(9);
          if ($765) {
           break L19;
          }
          $766 = HEAP32[$len>>2]|0;
          $767 = ($766>>>0)>(4);
          if ($767) {
           HEAP32[$len>>2] = 4;
          }
          $768 = HEAP32[$len>>2]|0;
          HEAP32[980>>2] = $768;
          $769 = HEAP32[980>>2]|0;
          $770 = HEAP32[944>>2]|0;
          (_fread($cfa_pc,1,$769,$770)|0);
          label = 200;
          break L19;
          break;
         }
         case 50711:  {
          $804 = (_get2()|0);
          $805 = $804&65535;
          $806 = ($805|0)==(2);
          if (!($806)) {
           break L19;
          }
          HEAP16[589194>>1] = 1;
          break L19;
          break;
         }
         case 50713:  {
          $808 = (_get2()|0);
          HEAP16[(580272)>>1] = $808;
          $809 = (_get2()|0);
          HEAP16[(580274)>>1] = $809;
          $810 = HEAP16[(580272)>>1]|0;
          $811 = $810&65535;
          $812 = HEAP16[(580274)>>1]|0;
          $813 = $812&65535;
          $814 = Math_imul($811, $813)|0;
          $815 = ($814>>>0)>(4096);
          if (!($815)) {
           break L19;
          }
          HEAP16[(580274)>>1] = 1;
          HEAP16[(580272)>>1] = 1;
          break L19;
          break;
         }
         case 50716: case 50715:  {
          $i = 0;
          $num = 0.0;
          while(1) {
           $846 = $i;
           $847 = HEAP32[$len>>2]|0;
           $848 = $847 & 65535;
           $849 = ($846>>>0)<($848>>>0);
           if (!($849)) {
            break;
           }
           $850 = HEAP32[$type>>2]|0;
           $851 = (+_getreal($850));
           $852 = $num;
           $853 = $852 + $851;
           $num = $853;
           $854 = $i;
           $855 = (($854) + 1)|0;
           $i = $855;
          }
          $856 = $num;
          $857 = HEAP32[$len>>2]|0;
          $858 = (+($857>>>0));
          $859 = $856 / $858;
          $860 = $859 + 0.5;
          $861 = HEAP32[1036>>2]|0;
          $862 = (+($861>>>0));
          $863 = $862 + $860;
          $864 = (~~(($863))>>>0);
          HEAP32[1036>>2] = $864;
          break L19;
          break;
         }
         default: {
          break L19;
         }
         }
        } while(0);
       }
      } while(0);
      $616 = HEAP32[944>>2]|0;
      (_fseek($616,40,1)|0);
      $617 = (_get4()|0);
      $618 = $617&65535;
      HEAP16[580226>>1] = $618;
      $619 = (_get4()|0);
      $620 = $619&65535;
      HEAP16[580244>>1] = $620;
      $621 = (_get4()|0);
      $622 = $621 & 7;
      $623 = $622&65535;
      HEAP16[448956>>1] = $623;
      $624 = HEAP16[580226>>1]|0;
      $625 = $624&65535;
      $626 = HEAP16[448956>>1]|0;
      $627 = $626&65535;
      $628 = (($625) - ($627))|0;
      $629 = (_get4()|0);
      $630 = $629 & 7;
      $631 = (($628) - ($630))|0;
      $632 = $631&65535;
      HEAP16[580076>>1] = $632;
      $633 = (_get4()|0);
      $634 = $633 & 7;
      $635 = $634&65535;
      HEAP16[448958>>1] = $635;
      $636 = HEAP16[580244>>1]|0;
      $637 = $636&65535;
      $638 = HEAP16[448958>>1]|0;
      $639 = $638&65535;
      $640 = (($637) - ($639))|0;
      $641 = (_get4()|0);
      $642 = $641 & 7;
      $643 = (($640) - ($642))|0;
      $644 = $643&65535;
      HEAP16[580074>>1] = $644;
      $645 = HEAP16[580226>>1]|0;
      $646 = $645&65535;
      $647 = ($646|0)==(7262);
      if ($647) {
       HEAP16[580074>>1] = 5444;
       HEAP16[580076>>1] = 7244;
       HEAP16[448956>>1] = 7;
      }
      $648 = HEAP32[944>>2]|0;
      (_fseek($648,52,1)|0);
      $c = 0;
      while(1) {
       $649 = $c;
       $650 = ($649|0)<(3);
       if (!($650)) {
        break;
       }
       $651 = (+_getreal(11));
       $652 = $651;
       $653 = $c;
       $654 = (1528 + ($653<<2)|0);
       HEAPF32[$654>>2] = $652;
       $655 = $c;
       $656 = (($655) + 1)|0;
       $c = $656;
      }
      $657 = HEAP32[944>>2]|0;
      (_fseek($657,114,1)|0);
      $658 = (_get2()|0);
      $659 = $658&65535;
      $660 = $659 >> 7;
      $661 = ($660*90)|0;
      HEAP32[293688>>2] = $661;
      $662 = HEAP16[580076>>1]|0;
      $663 = $662&65535;
      $664 = HEAP16[580074>>1]|0;
      $665 = $664&65535;
      $666 = Math_imul($663, $665)|0;
      $667 = ($666*6)|0;
      $668 = $ima_len;
      $669 = ($667|0)==($668|0);
      if ($669) {
       $670 = HEAP32[293688>>2]|0;
       $671 = (($670>>>0) % 180)&-1;
       $672 = ($671|0)==(90);
       if ($672) {
        $673 = HEAP16[580076>>1]|0;
        $674 = $673&65535;
        $675 = HEAP16[580074>>1]|0;
        $676 = $675&65535;
        $677 = (($674) + ($676))|0;
        $678 = $677&65535;
        HEAP16[580076>>1] = $678;
        $679 = HEAP16[580076>>1]|0;
        $680 = $679&65535;
        $681 = HEAP16[580074>>1]|0;
        $682 = $681&65535;
        $683 = (($680) - ($682))|0;
        $684 = $683&65535;
        HEAP16[580074>>1] = $684;
        $685 = HEAP16[580076>>1]|0;
        $686 = $685&65535;
        $687 = HEAP16[580074>>1]|0;
        $688 = $687&65535;
        $689 = (($686) - ($688))|0;
        $690 = $689&65535;
        HEAP16[580076>>1] = $690;
       }
       $691 = HEAP16[580076>>1]|0;
       HEAP16[580226>>1] = $691;
       $692 = HEAP16[580074>>1]|0;
       HEAP16[580244>>1] = $692;
       HEAP32[293688>>2] = 0;
       HEAP32[776>>2] = 0;
       HEAP16[448958>>1] = 0;
       HEAP16[448956>>1] = 0;
      }
      $693 = HEAP16[580074>>1]|0;
      $694 = $693&65535;
      $695 = HEAP16[580076>>1]|0;
      $696 = $695&65535;
      $697 = Math_imul($694, $696)|0;
      $698 = (($697|0) / 1000000)&-1;
      HEAP32[$vararg_buffer4>>2] = $698;
      (_sprintf(594339,615089,$vararg_buffer4)|0);
      HEAP32[31028>>2] = 23;
      $699 = HEAP32[776>>2]|0;
      $700 = ($699|0)!=(0);
      if ($700) {
       $701 = HEAP16[448956>>1]|0;
       $702 = $701&65535;
       $703 = $702 & 1;
       $704 = ($703|0)!=(0);
       if ($704) {
        HEAP32[776>>2] = 1633771873;
       }
       HEAP32[31028>>2] = 24;
      }
      HEAP32[1040>>2] = 65535;
      break L19;
     } else {
      $switch$split132D = ($31|0)<(51009);
      if (!($switch$split132D)) {
       $switch$split222D = ($31|0)<(61448);
       if ($switch$split222D) {
        $switch$split312D = ($31|0)<(61442);
        if (!($switch$split312D)) {
         switch ($31|0) {
         case 61442:  {
          label = 34;
          break L19;
          break;
         }
         case 61443:  {
          label = 35;
          break L19;
          break;
         }
         case 61447:  {
          label = 46;
          break L19;
          break;
         }
         case 61446:  {
          break;
         }
         default: {
          break L19;
         }
         }
         HEAP16[580244>>1] = 0;
         $130 = $ifd;
         $131 = (293744 + (($130*48)|0)|0);
         $132 = ((($131)) + 8|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = ($133|0)>(12);
         if ($134) {
          break L19;
         }
         HEAP32[31028>>2] = 15;
         $135 = (_get4()|0);
         $136 = ($135|0)!=(0);
         $137 = $136 ? 24 : 80;
         HEAP32[1068>>2] = $137;
         break L19;
        }
        $switch$split402D = ($31|0)<(61440);
        if ($switch$split402D) {
         switch ($31|0) {
         case 51009:  {
          break;
         }
         default: {
          break L19;
         }
         }
         $983 = HEAP32[944>>2]|0;
         $984 = (_ftell($983)|0);
         HEAP32[1520>>2] = $984;
         break L19;
        } else {
         switch ($31|0) {
         case 61441:  {
          label = 33;
          break L19;
          break;
         }
         case 61440:  {
          break;
         }
         default: {
          break L19;
         }
         }
         $96 = HEAP32[944>>2]|0;
         $97 = (_get4()|0);
         $98 = $1;
         $99 = (($97) + ($98))|0;
         (_fseek($96,$99,0)|0);
         $100 = $1;
         (_parse_tiff_ifd($100)|0);
         break L19;
        }
       }
       switch ($31|0) {
       case 61448:  {
        label = 57;
        break L19;
        break;
       }
       case 64777:  {
        label = 114;
        break L19;
        break;
       }
       case 65024:  {
        label = 121;
        break L19;
        break;
       }
       case 61454:  {
        $c = 0;
        while(1) {
         $264 = $c;
         $265 = ($264|0)<(3);
         if (!($265)) {
          break L19;
         }
         $266 = HEAP32[$type>>2]|0;
         $267 = (_getint($266)|0);
         $268 = (+($267>>>0));
         $269 = $c;
         $270 = (4 - ($269))|0;
         $271 = (($270|0) % 3)&-1;
         $272 = (1528 + ($271<<2)|0);
         HEAPF32[$272>>2] = $268;
         $273 = $c;
         $274 = (($273) + 1)|0;
         $c = $274;
        }
        break;
       }
       case 61450:  {
        $816 = HEAP32[$len>>2]|0;
        $817 = (+($816>>>0));
        $818 = (+Math_sqrt((+$817)));
        $819 = $818 < 64.0;
        if ($819) {
         $820 = HEAP32[$len>>2]|0;
         $821 = (+($820>>>0));
         $822 = (+Math_sqrt((+$821)));
         $824 = $822;
        } else {
         $824 = 64.0;
        }
        $823 = (~~(($824))&65535);
        HEAP16[(580274)>>1] = $823;
        HEAP16[(580272)>>1] = $823;
        break L137;
        break;
       }
       case 64772:  {
        $985 = HEAP32[$len>>2]|0;
        $986 = ($985>>>0)<(13);
        if ($986) {
         break L19;
        }
        $987 = HEAP32[944>>2]|0;
        (_fseek($987,16,1)|0);
        $988 = (_get4()|0);
        HEAP32[1524>>2] = $988;
        $989 = HEAP32[944>>2]|0;
        (_fseek($989,28,1)|0);
        $990 = (_get4()|0);
        $991 = HEAP32[1524>>2]|0;
        $992 = (($991) + ($990))|0;
        HEAP32[1524>>2] = $992;
        HEAP32[31028>>2] = 15;
        break L19;
        break;
       }
       case 65026:  {
        $993 = HEAP32[$type>>2]|0;
        $994 = ($993|0)==(2);
        if (!($994)) {
         break L19;
        }
        $995 = HEAP32[944>>2]|0;
        (_fgets(593904,64,$995)|0);
        break L19;
        break;
       }
       default: {
        break L19;
       }
       }
      }
      do {
       switch ($31|0) {
       case 50831:  {
        label = 145;
        break L137;
        break;
       }
       case 50717:  {
        $865 = HEAP32[$type>>2]|0;
        $866 = (_getint($865)|0);
        HEAP32[1040>>2] = $866;
        break L19;
        break;
       }
       case 50718:  {
        $867 = HEAP32[$type>>2]|0;
        $868 = (+_getreal($867));
        HEAPF64[224>>3] = $868;
        $869 = HEAP32[$type>>2]|0;
        $870 = (+_getreal($869));
        $871 = +HEAPF64[224>>3];
        $872 = $871 / $870;
        HEAPF64[224>>3] = $872;
        break L19;
        break;
       }
       case 50722: case 50721:  {
        $c = 0;
        while(1) {
         $873 = $c;
         $874 = HEAP32[980>>2]|0;
         $875 = ($873>>>0)<($874>>>0);
         if (!($875)) {
          break;
         }
         $j = 0;
         while(1) {
          $876 = $j;
          $877 = ($876|0)<(3);
          if (!($877)) {
           break;
          }
          $878 = HEAP32[$type>>2]|0;
          $879 = (+_getreal($878));
          $880 = $j;
          $881 = $c;
          $882 = (($cm) + (($881*24)|0)|0);
          $883 = (($882) + ($880<<3)|0);
          HEAPF64[$883>>3] = $879;
          $884 = $j;
          $885 = (($884) + 1)|0;
          $j = $885;
         }
         $886 = $c;
         $887 = (($886) + 1)|0;
         $c = $887;
        }
        $use_cm = 1;
        break L19;
        break;
       }
       case 50724: case 50723:  {
        $i = 0;
        while(1) {
         $888 = $i;
         $889 = HEAP32[980>>2]|0;
         $890 = ($888>>>0)<($889>>>0);
         if (!($890)) {
          break L19;
         }
         $c = 0;
         while(1) {
          $891 = $c;
          $892 = HEAP32[980>>2]|0;
          $893 = ($891>>>0)<($892>>>0);
          if (!($893)) {
           break;
          }
          $894 = HEAP32[$type>>2]|0;
          $895 = (+_getreal($894));
          $896 = $c;
          $897 = $i;
          $898 = (($cc) + ($897<<5)|0);
          $899 = (($898) + ($896<<3)|0);
          HEAPF64[$899>>3] = $895;
          $900 = $c;
          $901 = (($900) + 1)|0;
          $c = $901;
         }
         $902 = $i;
         $903 = (($902) + 1)|0;
         $i = $903;
        }
        break;
       }
       case 50727:  {
        $c = 0;
        while(1) {
         $904 = $c;
         $905 = HEAP32[980>>2]|0;
         $906 = ($904>>>0)<($905>>>0);
         if (!($906)) {
          break L19;
         }
         $907 = HEAP32[$type>>2]|0;
         $908 = (+_getreal($907));
         $909 = $c;
         $910 = (($ab) + ($909<<3)|0);
         HEAPF64[$910>>3] = $908;
         $911 = $c;
         $912 = (($911) + 1)|0;
         $c = $912;
        }
        break;
       }
       case 50728:  {
        $c = 0;
        while(1) {
         $913 = $c;
         $914 = HEAP32[980>>2]|0;
         $915 = ($913>>>0)<($914>>>0);
         if (!($915)) {
          break L19;
         }
         $916 = HEAP32[$type>>2]|0;
         $917 = (+_getreal($916));
         $918 = $c;
         $919 = (($asn) + ($918<<3)|0);
         HEAPF64[$919>>3] = $917;
         $920 = $c;
         $921 = (($920) + 1)|0;
         $c = $921;
        }
        break;
       }
       case 50729:  {
        $922 = HEAP32[$type>>2]|0;
        $923 = (+_getreal($922));
        HEAPF64[$xyz>>3] = $923;
        $924 = HEAP32[$type>>2]|0;
        $925 = (+_getreal($924));
        $926 = ((($xyz)) + 8|0);
        HEAPF64[$926>>3] = $925;
        $927 = +HEAPF64[$xyz>>3];
        $928 = 1.0 - $927;
        $929 = ((($xyz)) + 8|0);
        $930 = +HEAPF64[$929>>3];
        $931 = $928 - $930;
        $932 = ((($xyz)) + 16|0);
        HEAPF64[$932>>3] = $931;
        $c = 0;
        while(1) {
         $933 = $c;
         $934 = ($933|0)<(3);
         if (!($934)) {
          break L19;
         }
         $935 = $c;
         $936 = (764 + ($935<<2)|0);
         $937 = +HEAPF32[$936>>2];
         $938 = $937;
         $939 = $c;
         $940 = (($xyz) + ($939<<3)|0);
         $941 = +HEAPF64[$940>>3];
         $942 = $941 / $938;
         HEAPF64[$940>>3] = $942;
         $943 = $c;
         $944 = (($943) + 1)|0;
         $c = $944;
        }
        break;
       }
       case 50740:  {
        $945 = HEAP32[1064>>2]|0;
        $946 = ($945|0)!=(0);
        if ($946) {
         break L19;
        }
        $947 = (_get4()|0);
        $948 = $1;
        $949 = (($947) + ($948))|0;
        $j = $949;
        _parse_minolta($949);
        $950 = HEAP32[944>>2]|0;
        $951 = $j;
        (_fseek($950,$951,0)|0);
        $952 = $1;
        (_parse_tiff_ifd($952)|0);
        break L19;
        break;
       }
       case 50752:  {
        _read_shorts(580246,3);
        break L19;
        break;
       }
       case 50829:  {
        $953 = HEAP32[$type>>2]|0;
        $954 = (_getint($953)|0);
        $955 = $954&65535;
        HEAP16[448958>>1] = $955;
        $956 = HEAP32[$type>>2]|0;
        $957 = (_getint($956)|0);
        $958 = $957&65535;
        HEAP16[448956>>1] = $958;
        $959 = HEAP32[$type>>2]|0;
        $960 = (_getint($959)|0);
        $961 = HEAP16[448958>>1]|0;
        $962 = $961&65535;
        $963 = (($960) - ($962))|0;
        $964 = $963&65535;
        HEAP16[580074>>1] = $964;
        $965 = HEAP32[$type>>2]|0;
        $966 = (_getint($965)|0);
        $967 = HEAP16[448956>>1]|0;
        $968 = $967&65535;
        $969 = (($966) - ($968))|0;
        $970 = $969&65535;
        HEAP16[580076>>1] = $970;
        break L19;
        break;
       }
       case 50830:  {
        $i = 0;
        while(1) {
         $971 = $i;
         $972 = HEAP32[$len>>2]|0;
         $973 = ($971>>>0)<($972>>>0);
         $974 = $i;
         $975 = ($974|0)<(32);
         $976 = $973 ? $975 : 0;
         if (!($976)) {
          break;
         }
         $977 = HEAP32[$type>>2]|0;
         $978 = (_getint($977)|0);
         $979 = $i;
         $980 = (31036 + ($979<<2)|0);
         HEAP32[$980>>2] = $978;
         $981 = $i;
         $982 = (($981) + 1)|0;
         $i = $982;
        }
        HEAP32[1036>>2] = 0;
        break L19;
        break;
       }
       default: {
        break L19;
       }
       }
      } while(0);
     }
    } while(0);
    if ((label|0) == 145) {
     label = 0;
     $580 = HEAP32[944>>2]|0;
     $581 = (_ftell($580)|0);
     HEAP32[294552>>2] = $581;
     $582 = HEAP32[$len>>2]|0;
     HEAP32[294556>>2] = $582;
     break;
    }
    $825 = HEAP16[(580272)>>1]|0;
    $826 = $825&65535;
    $827 = HEAP16[(580274)>>1]|0;
    $828 = $827&65535;
    $829 = Math_imul($826, $828)|0;
    $830 = ($829|0)!=(0);
    if (!($830)) {
     HEAP16[(580274)>>1] = 1;
     HEAP16[(580272)>>1] = 1;
    }
    $c = 0;
    while(1) {
     $831 = $c;
     $832 = HEAP16[(580272)>>1]|0;
     $833 = $832&65535;
     $834 = HEAP16[(580274)>>1]|0;
     $835 = $834&65535;
     $836 = Math_imul($833, $835)|0;
     $837 = ($831|0)<($836|0);
     if (!($837)) {
      break;
     }
     $838 = HEAP32[$type>>2]|0;
     $839 = (+_getreal($838));
     $840 = (~~(($839))&65535);
     $841 = $c;
     $842 = (6 + ($841))|0;
     $843 = (580264 + ($842<<1)|0);
     HEAP16[$843>>1] = $840;
     $844 = $c;
     $845 = (($844) + 1)|0;
     $c = $845;
    }
    HEAP32[1036>>2] = 0;
   }
  } while(0);
  if ((label|0) == 33) {
   label = 0;
   $101 = HEAP32[$type>>2]|0;
   $102 = (_getint($101)|0);
   $103 = $ifd;
   $104 = (293744 + (($103*48)|0)|0);
   HEAP32[$104>>2] = $102;
  }
  else if ((label|0) == 34) {
   label = 0;
   $105 = HEAP32[$type>>2]|0;
   $106 = (_getint($105)|0);
   $107 = $ifd;
   $108 = (293744 + (($107*48)|0)|0);
   $109 = ((($108)) + 4|0);
   HEAP32[$109>>2] = $106;
  }
  else if ((label|0) == 35) {
   label = 0;
   $110 = HEAP32[$len>>2]|0;
   $111 = $110 & 7;
   $112 = $ifd;
   $113 = (293744 + (($112*48)|0)|0);
   $114 = ((($113)) + 28|0);
   HEAP32[$114>>2] = $111;
   $115 = HEAP32[$type>>2]|0;
   $116 = (_getint($115)|0);
   $117 = $ifd;
   $118 = (293744 + (($117*48)|0)|0);
   $119 = ((($118)) + 8|0);
   HEAP32[$119>>2] = $116;
   $120 = HEAP32[1516>>2]|0;
   $121 = $ifd;
   $122 = (293744 + (($121*48)|0)|0);
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($120>>>0)<($124>>>0);
   if ($125) {
    $126 = $ifd;
    $127 = (293744 + (($126*48)|0)|0);
    $128 = ((($127)) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    HEAP32[1516>>2] = $129;
   }
  }
  else if ((label|0) == 46) {
   label = 0;
   $153 = (_get4()|0);
   $154 = $1;
   $155 = (($153) + ($154))|0;
   $156 = $ifd;
   $157 = (293744 + (($156*48)|0)|0);
   $158 = ((($157)) + 20|0);
   HEAP32[$158>>2] = $155;
   $159 = $ifd;
   $160 = (293744 + (($159*48)|0)|0);
   $161 = ((($160)) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($162|0)!=(0);
   if (!($163)) {
    $164 = $ifd;
    $165 = (293744 + (($164*48)|0)|0);
    $166 = ((($165)) + 20|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)>(0);
    if ($168) {
     $169 = HEAP32[944>>2]|0;
     $170 = $ifd;
     $171 = (293744 + (($170*48)|0)|0);
     $172 = ((($171)) + 20|0);
     $173 = HEAP32[$172>>2]|0;
     (_fseek($169,$173,0)|0);
     $174 = (_ljpeg_start($jh,1)|0);
     $175 = ($174|0)!=(0);
     if ($175) {
      $176 = $ifd;
      $177 = (293744 + (($176*48)|0)|0);
      $178 = ((($177)) + 12|0);
      HEAP32[$178>>2] = 6;
      $179 = ((($jh)) + 12|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $ifd;
      $182 = (293744 + (($181*48)|0)|0);
      HEAP32[$182>>2] = $180;
      $183 = ((($jh)) + 8|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $ifd;
      $186 = (293744 + (($185*48)|0)|0);
      $187 = ((($186)) + 4|0);
      HEAP32[$187>>2] = $184;
      $188 = ((($jh)) + 4|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = $ifd;
      $191 = (293744 + (($190*48)|0)|0);
      $192 = ((($191)) + 8|0);
      HEAP32[$192>>2] = $189;
      $193 = ((($jh)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = $ifd;
      $196 = (293744 + (($195*48)|0)|0);
      $197 = ((($196)) + 28|0);
      HEAP32[$197>>2] = $194;
      $198 = ((($jh)) + 20|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($199|0)!=(0);
      if (!($200)) {
       $201 = ((($jh)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = $202 & 1;
       $204 = ($203|0)!=(0);
       if (!($204)) {
        $205 = ((($jh)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = $ifd;
        $208 = (293744 + (($207*48)|0)|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = Math_imul($209, $206)|0;
        HEAP32[$208>>2] = $210;
       }
      }
      $211 = $ifd;
      $212 = (293744 + (($211*48)|0)|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = $ifd;
      $215 = (293744 + (($214*48)|0)|0);
      $216 = ((($215)) + 4|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = $217<<2;
      $219 = ($213|0)>($218|0);
      $220 = $219&1;
      $221 = ((($jh)) + 16|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = $222 ^ -1;
      $224 = $220 & $223;
      $225 = ($224|0)!=(0);
      if ($225) {
       $226 = $ifd;
       $227 = (293744 + (($226*48)|0)|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($228|0) / 2)&-1;
       HEAP32[$227>>2] = $229;
       $230 = $ifd;
       $231 = (293744 + (($230*48)|0)|0);
       $232 = ((($231)) + 4|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = $233<<1;
       HEAP32[$232>>2] = $234;
      }
      $235 = HEAP16[448960>>1]|0;
      $236 = $235 << 16 >> 16;
      $i = $236;
      $237 = $ifd;
      $238 = (293744 + (($237*48)|0)|0);
      $239 = ((($238)) + 20|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = (($240) + 12)|0;
      (_parse_tiff($241)|0);
      $242 = $i;
      $243 = $242&65535;
      HEAP16[448960>>1] = $243;
     }
    }
   }
  }
  else if ((label|0) == 57) {
   label = 0;
   $260 = (_get4()|0);
   $261 = $ifd;
   $262 = (293744 + (($261*48)|0)|0);
   $263 = ((($262)) + 32|0);
   HEAP32[$263>>2] = $260;
  }
  else if ((label|0) == 114) {
   label = 0;
   $464 = HEAP32[$len>>2]|0;
   $plen = $464;
   $465 = ($464>>>0)>(16);
   $$ = $465 ? 16 : $464;
   $plen = $$;
   $466 = $plen;
   $467 = HEAP32[944>>2]|0;
   (_fread($cfa_pat,1,$466,$467)|0);
   $i = 0;
   $cfa = 0;
   HEAP32[980>>2] = 0;
   while(1) {
    $468 = $i;
    $469 = $plen;
    $470 = ($468>>>0)<($469>>>0);
    $471 = HEAP32[980>>2]|0;
    $472 = ($471>>>0)<(4);
    $473 = $470 ? $472 : 0;
    $474 = $cfa;
    if (!($473)) {
     break;
    }
    $475 = $i;
    $476 = (($cfa_pat) + ($475)|0);
    $477 = HEAP8[$476>>0]|0;
    $478 = $477&255;
    $479 = 1 << $478;
    $480 = $474 & $479;
    $481 = ($480|0)!=(0);
    $482 = $481 ^ 1;
    $483 = $482&1;
    $484 = HEAP32[980>>2]|0;
    $485 = (($484) + ($483))|0;
    HEAP32[980>>2] = $485;
    $486 = $i;
    $487 = (($cfa_pat) + ($486)|0);
    $488 = HEAP8[$487>>0]|0;
    $489 = $488&255;
    $490 = 1 << $489;
    $491 = $cfa;
    $492 = $491 | $490;
    $cfa = $492;
    $493 = $i;
    $494 = (($493) + 1)|0;
    $i = $494;
   }
   $495 = ($474|0)==(56);
   if ($495) {
    ;HEAP8[$cfa_pc>>0]=HEAP8[615061>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[615061+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[615061+2>>0]|0;
   }
   $496 = $cfa;
   $497 = ($496|0)==(58);
   if ($497) {
    ;HEAP8[$cfa_pc>>0]=HEAP8[615065>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[615065+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[615065+2>>0]|0;HEAP8[$cfa_pc+3>>0]=HEAP8[615065+3>>0]|0;
    label = 200;
   } else {
    label = 200;
   }
  }
  else if ((label|0) == 121) {
   label = 0;
   $498 = HEAP32[944>>2]|0;
   $499 = (_get4()|0);
   $500 = $1;
   $501 = (($499) + ($500))|0;
   (_fseek($498,$501,0)|0);
   $502 = $1;
   _parse_kodak_ifd($502);
  }
  else if ((label|0) == 209) {
   label = 0;
   $807 = HEAP32[$len>>2]|0;
   _linear_table($807);
  }
  if ((label|0) == 200) {
   label = 0;
   $c = 0;
   while(1) {
    $771 = $c;
    $772 = HEAP32[980>>2]|0;
    $773 = ($771>>>0)<($772>>>0);
    $774 = $c;
    if (!($773)) {
     break;
    }
    $775 = $774&255;
    $776 = $c;
    $777 = (($cfa_pc) + ($776)|0);
    $778 = HEAP8[$777>>0]|0;
    $779 = $778&255;
    $780 = (($tab) + ($779)|0);
    HEAP8[$780>>0] = $775;
    $781 = $c;
    $782 = (($781) + 1)|0;
    $c = $782;
   }
   $783 = (615136 + ($774)|0);
   HEAP8[$783>>0] = 0;
   $i = 16;
   while(1) {
    $784 = $i;
    $785 = (($784) + -1)|0;
    $i = $785;
    $786 = ($784|0)!=(0);
    $787 = HEAP32[776>>2]|0;
    if (!($786)) {
     break;
    }
    $788 = $787 << 2;
    $789 = $i;
    $790 = $plen;
    $791 = (($789>>>0) % ($790>>>0))&-1;
    $792 = (($cfa_pat) + ($791)|0);
    $793 = HEAP8[$792>>0]|0;
    $794 = $793&255;
    $795 = (($tab) + ($794)|0);
    $796 = HEAP8[$795>>0]|0;
    $797 = $796&255;
    $798 = $788 | $797;
    HEAP32[776>>2] = $798;
   }
   $799 = ($787|0)!=(0);
   $800 = $799 ^ 1;
   $801 = $800&1;
   $802 = HEAP32[776>>2]|0;
   $803 = (($802) - ($801))|0;
   HEAP32[776>>2] = $803;
  }
  $996 = HEAP32[944>>2]|0;
  $997 = HEAP32[$save>>2]|0;
  (_fseek($996,$997,0)|0);
 }
 $998 = $sony_length;
 $999 = ($998|0)!=(0);
 if ($999) {
  $1000 = $sony_length;
  $1001 = (_malloc($1000)|0);
  $buf = $1001;
  $1002 = ($1001|0)!=(0|0);
  if ($1002) {
   $1003 = HEAP32[944>>2]|0;
   $1004 = $sony_offset;
   (_fseek($1003,$1004,0)|0);
   $1005 = $buf;
   $1006 = $sony_length;
   $1007 = HEAP32[944>>2]|0;
   (_fread($1005,$1006,1,$1007)|0);
   $1008 = $buf;
   $1009 = $sony_length;
   $1010 = (($1009>>>0) / 4)&-1;
   $1011 = $sony_key;
   _sony_decrypt($1008,$1010,1,$1011);
   $1012 = HEAP32[944>>2]|0;
   $sfp = $1012;
   $1013 = (_tmpfile()|0);
   HEAP32[944>>2] = $1013;
   $1014 = ($1013|0)!=(0|0);
   if ($1014) {
    $1015 = $buf;
    $1016 = $sony_length;
    $1017 = HEAP32[944>>2]|0;
    (_fwrite($1015,$1016,1,$1017)|0);
    $1018 = HEAP32[944>>2]|0;
    (_fseek($1018,0,0)|0);
    $1019 = $sony_offset;
    $1020 = (0 - ($1019))|0;
    (_parse_tiff_ifd($1020)|0);
    $1021 = HEAP32[944>>2]|0;
    (_fclose($1021)|0);
   }
   $1022 = $sfp;
   HEAP32[944>>2] = $1022;
   $1023 = $buf;
   _free($1023);
  }
 }
 $i = 0;
 while(1) {
  $1024 = $i;
  $1025 = HEAP32[980>>2]|0;
  $1026 = ($1024>>>0)<($1025>>>0);
  if (!($1026)) {
   break;
  }
  $c = 0;
  while(1) {
   $1027 = $c;
   $1028 = HEAP32[980>>2]|0;
   $1029 = ($1027>>>0)<($1028>>>0);
   $1030 = $i;
   if (!($1029)) {
    break;
   }
   $1031 = (($ab) + ($1030<<3)|0);
   $1032 = +HEAPF64[$1031>>3];
   $1033 = $c;
   $1034 = $i;
   $1035 = (($cc) + ($1034<<5)|0);
   $1036 = (($1035) + ($1033<<3)|0);
   $1037 = +HEAPF64[$1036>>3];
   $1038 = $1037 * $1032;
   HEAPF64[$1036>>3] = $1038;
   $1039 = $c;
   $1040 = (($1039) + 1)|0;
   $c = $1040;
  }
  $1041 = (($1030) + 1)|0;
  $i = $1041;
 }
 $1042 = $use_cm;
 $1043 = ($1042|0)!=(0);
 if ($1043) {
  $c = 0;
  while(1) {
   $1044 = $c;
   $1045 = HEAP32[980>>2]|0;
   $1046 = ($1044>>>0)<($1045>>>0);
   if (!($1046)) {
    break;
   }
   $i = 0;
   while(1) {
    $1047 = $i;
    $1048 = ($1047|0)<(3);
    if (!($1048)) {
     break;
    }
    $j = 0;
    $1049 = $i;
    $1050 = $c;
    $1051 = (($cam_xyz) + (($1050*24)|0)|0);
    $1052 = (($1051) + ($1049<<3)|0);
    HEAPF64[$1052>>3] = 0.0;
    while(1) {
     $1053 = $j;
     $1054 = HEAP32[980>>2]|0;
     $1055 = ($1053>>>0)<($1054>>>0);
     if (!($1055)) {
      break;
     }
     $1056 = $j;
     $1057 = $c;
     $1058 = (($cc) + ($1057<<5)|0);
     $1059 = (($1058) + ($1056<<3)|0);
     $1060 = +HEAPF64[$1059>>3];
     $1061 = $i;
     $1062 = $j;
     $1063 = (($cm) + (($1062*24)|0)|0);
     $1064 = (($1063) + ($1061<<3)|0);
     $1065 = +HEAPF64[$1064>>3];
     $1066 = $1060 * $1065;
     $1067 = $i;
     $1068 = (($xyz) + ($1067<<3)|0);
     $1069 = +HEAPF64[$1068>>3];
     $1070 = $1066 * $1069;
     $1071 = $i;
     $1072 = $c;
     $1073 = (($cam_xyz) + (($1072*24)|0)|0);
     $1074 = (($1073) + ($1071<<3)|0);
     $1075 = +HEAPF64[$1074>>3];
     $1076 = $1075 + $1070;
     HEAPF64[$1074>>3] = $1076;
     $1077 = $j;
     $1078 = (($1077) + 1)|0;
     $j = $1078;
    }
    $1079 = $i;
    $1080 = (($1079) + 1)|0;
    $i = $1080;
   }
   $1081 = $c;
   $1082 = (($1081) + 1)|0;
   $c = $1082;
  }
  _cam_xyz_coeff(293692,$cam_xyz);
 }
 $1083 = +HEAPF64[$asn>>3];
 $1084 = $1083 != 0.0;
 L412: do {
  if ($1084) {
   HEAPF32[(1540)>>2] = 0.0;
   $c = 0;
   while(1) {
    $1085 = $c;
    $1086 = HEAP32[980>>2]|0;
    $1087 = ($1085>>>0)<($1086>>>0);
    if (!($1087)) {
     break L412;
    }
    $1088 = $c;
    $1089 = (($asn) + ($1088<<3)|0);
    $1090 = +HEAPF64[$1089>>3];
    $1091 = 1.0 / $1090;
    $1092 = $1091;
    $1093 = $c;
    $1094 = (1528 + ($1093<<2)|0);
    HEAPF32[$1094>>2] = $1092;
    $1095 = $c;
    $1096 = (($1095) + 1)|0;
    $c = $1096;
   }
  }
 } while(0);
 $1097 = $use_cm;
 $1098 = ($1097|0)!=(0);
 L418: do {
  if (!($1098)) {
   $c = 0;
   while(1) {
    $1099 = $c;
    $1100 = HEAP32[980>>2]|0;
    $1101 = ($1099>>>0)<($1100>>>0);
    if (!($1101)) {
     break L418;
    }
    $1102 = $c;
    $1103 = $c;
    $1104 = (($cc) + ($1103<<5)|0);
    $1105 = (($1104) + ($1102<<3)|0);
    $1106 = +HEAPF64[$1105>>3];
    $1107 = $c;
    $1108 = (948 + ($1107<<2)|0);
    $1109 = +HEAPF32[$1108>>2];
    $1110 = $1109;
    $1111 = $1110 / $1106;
    $1112 = $1111;
    HEAPF32[$1108>>2] = $1112;
    $1113 = $c;
    $1114 = (($1113) + 1)|0;
    $c = $1114;
   }
  }
 } while(0);
 $0 = 0;
 $1115 = $0;
 STACKTOP = sp;return ($1115|0);
}
function _get_timestamp($reversed) {
 $reversed = $reversed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $str = 0, $t = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $t = sp + 28|0;
 $str = sp + 76|0;
 $0 = $reversed;
 $1 = ((($str)) + 19|0);
 HEAP8[$1>>0] = 0;
 $2 = $0;
 $3 = ($2|0)!=(0);
 L1: do {
  if ($3) {
   $i = 19;
   while(1) {
    $4 = $i;
    $5 = (($4) + -1)|0;
    $i = $5;
    $6 = ($4|0)!=(0);
    if (!($6)) {
     break L1;
    }
    $7 = HEAP32[944>>2]|0;
    $8 = (_getc_unlocked($7)|0);
    $9 = $8&255;
    $10 = $i;
    $11 = (($str) + ($10)|0);
    HEAP8[$11>>0] = $9;
   }
  } else {
   $12 = HEAP32[944>>2]|0;
   (_fread($str,19,1,$12)|0);
  }
 } while(0);
 dest=$t; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = ((($t)) + 20|0);
 $14 = ((($t)) + 16|0);
 $15 = ((($t)) + 12|0);
 $16 = ((($t)) + 8|0);
 $17 = ((($t)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $15;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $16;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $17;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $t;
 $18 = (_sscanf($str,613931,$vararg_buffer)|0);
 $19 = ($18|0)!=(6);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = ((($t)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) - 1900)|0;
 HEAP32[$20>>2] = $22;
 $23 = ((($t)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) - 1)|0;
 HEAP32[$23>>2] = $25;
 $26 = ((($t)) + 32|0);
 HEAP32[$26>>2] = -1;
 $27 = (_mktime(($t|0))|0);
 $28 = ($27|0)>(0);
 if (!($28)) {
  STACKTOP = sp;return;
 }
 $29 = (_mktime(($t|0))|0);
 HEAP32[31164>>2] = $29;
 STACKTOP = sp;return;
}
function _parse_exif($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $entries = 0, $expo = 0.0, $kodak = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 24|0;
 $type = sp + 20|0;
 $len = sp + 16|0;
 $save = sp + 12|0;
 $0 = $base;
 $1 = (_strncmp(594275,613949,7)|0);
 $2 = ($1|0)!=(0);
 $3 = HEAP32[293740>>2]|0;
 $4 = ($3>>>0)<(3);
 $5 = $2 ? 0 : $4;
 $6 = $5&1;
 $kodak = $6;
 $7 = (_get2()|0);
 $8 = $7&65535;
 $entries = $8;
 while(1) {
  $9 = $entries;
  $10 = (($9) + -1)|0;
  $entries = $10;
  $11 = ($9|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $0;
  _tiff_get($12,$tag,$type,$len,$save);
  $13 = HEAP32[$tag>>2]|0;
  L4: do {
   switch ($13|0) {
   case 33434:  {
    $14 = HEAP32[$type>>2]|0;
    $15 = (+_getreal($14));
    $16 = $15;
    HEAPF32[293680>>2] = $16;
    $17 = HEAP32[293740>>2]|0;
    $18 = (($17) - 1)|0;
    $19 = (293744 + (($18*48)|0)|0);
    $20 = ((($19)) + 44|0);
    HEAPF32[$20>>2] = $16;
    break;
   }
   case 33437:  {
    $21 = HEAP32[$type>>2]|0;
    $22 = (+_getreal($21));
    $23 = $22;
    HEAPF32[293676>>2] = $23;
    break;
   }
   case 34855:  {
    $24 = (_get2()|0);
    $25 = (+($24&65535));
    HEAPF32[293672>>2] = $25;
    break;
   }
   case 36868: case 36867:  {
    _get_timestamp(0);
    break;
   }
   case 37377:  {
    $26 = HEAP32[$type>>2]|0;
    $27 = (+_getreal($26));
    $28 = -$27;
    $expo = $28;
    $29 = $28 < 128.0;
    if ($29) {
     $30 = $expo;
     $31 = (+Math_pow(2.0,(+$30)));
     $32 = $31;
     HEAPF32[293680>>2] = $32;
     $33 = HEAP32[293740>>2]|0;
     $34 = (($33) - 1)|0;
     $35 = (293744 + (($34*48)|0)|0);
     $36 = ((($35)) + 44|0);
     HEAPF32[$36>>2] = $32;
    }
    break;
   }
   case 37378:  {
    $37 = HEAP32[$type>>2]|0;
    $38 = (+_getreal($37));
    $39 = $38 / 2.0;
    $40 = (+Math_pow(2.0,(+$39)));
    $41 = $40;
    HEAPF32[293676>>2] = $41;
    break;
   }
   case 37386:  {
    $42 = HEAP32[$type>>2]|0;
    $43 = (+_getreal($42));
    $44 = $43;
    HEAPF32[294224>>2] = $44;
    break;
   }
   case 37500:  {
    $45 = $0;
    _parse_makernote($45,0);
    break;
   }
   case 40962:  {
    $46 = $kodak;
    $47 = ($46|0)!=(0);
    if ($47) {
     $48 = (_get4()|0);
     $49 = $48&65535;
     HEAP16[580226>>1] = $49;
    }
    break;
   }
   case 40963:  {
    $50 = $kodak;
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = (_get4()|0);
     $53 = $52&65535;
     HEAP16[580244>>1] = $53;
    }
    break;
   }
   case 41730:  {
    $54 = (_get4()|0);
    $55 = ($54|0)==(131074);
    if ($55) {
     $c = 0;
     HEAP32[294228>>2] = 0;
     while(1) {
      $56 = $c;
      $57 = ($56>>>0)<(8);
      if (!($57)) {
       break L4;
      }
      $58 = HEAP32[944>>2]|0;
      $59 = (_getc_unlocked($58)|0);
      $60 = Math_imul($59, 16843009)|0;
      $61 = $c;
      $62 = $60 << $61;
      $63 = HEAP32[294228>>2]|0;
      $64 = $63 | $62;
      HEAP32[294228>>2] = $64;
      $65 = $c;
      $66 = (($65) + 2)|0;
      $c = $66;
     }
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $67 = HEAP32[944>>2]|0;
  $68 = HEAP32[$save>>2]|0;
  (_fseek($67,$68,0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_gps($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c = 0, $entries = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 16|0;
 $type = sp + 12|0;
 $len = sp + 8|0;
 $save = sp + 4|0;
 $0 = $base;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $entries = $2;
 while(1) {
  $3 = $entries;
  $4 = (($3) + -1)|0;
  $entries = $4;
  $5 = ($3|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = $0;
  _tiff_get($6,$tag,$type,$len,$save);
  $7 = HEAP32[$tag>>2]|0;
  L4: do {
   switch ($7|0) {
   case 5: case 3: case 1:  {
    $8 = HEAP32[944>>2]|0;
    $9 = (_getc($8)|0);
    $10 = HEAP32[$tag>>2]|0;
    $11 = (($10>>>0) / 2)&-1;
    $12 = (29 + ($11))|0;
    $13 = (294232 + ($12<<2)|0);
    HEAP32[$13>>2] = $9;
    break;
   }
   case 7: case 4: case 2:  {
    $c = 0;
    while(1) {
     $14 = $c;
     $15 = ($14>>>0)<(6);
     if (!($15)) {
      break L4;
     }
     $16 = (_get4()|0);
     $17 = HEAP32[$tag>>2]|0;
     $18 = (($17>>>0) / 3)&-1;
     $19 = ($18*6)|0;
     $20 = $c;
     $21 = (($19) + ($20))|0;
     $22 = (294232 + ($21<<2)|0);
     HEAP32[$22>>2] = $16;
     $23 = $c;
     $24 = (($23) + 1)|0;
     $c = $24;
    }
    break;
   }
   case 6:  {
    $c = 0;
    while(1) {
     $25 = $c;
     $26 = ($25>>>0)<(2);
     if (!($26)) {
      break L4;
     }
     $27 = (_get4()|0);
     $28 = $c;
     $29 = (18 + ($28))|0;
     $30 = (294232 + ($29<<2)|0);
     HEAP32[$30>>2] = $27;
     $31 = $c;
     $32 = (($31) + 1)|0;
     $c = $32;
    }
    break;
   }
   case 29: case 18:  {
    $33 = HEAP32[$tag>>2]|0;
    $34 = (($33>>>0) / 3)&-1;
    $35 = ((294288) + ($34<<2)|0);
    $36 = HEAP32[$len>>2]|0;
    $37 = ($36>>>0)<(12);
    $38 = HEAP32[$len>>2]|0;
    $39 = $37 ? $38 : 12;
    $40 = HEAP32[944>>2]|0;
    (_fgets($35,$39,$40)|0);
    break;
   }
   default: {
   }
   }
  } while(0);
  $41 = HEAP32[944>>2]|0;
  $42 = HEAP32[$save>>2]|0;
  (_fseek($41,$42,0)|0);
 }
 STACKTOP = sp;return;
}
function _romm_coeff($romm_cam) {
 $romm_cam = $romm_cam|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $romm_cam;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(3);
  if (!($2)) {
   break;
  }
  $j = 0;
  while(1) {
   $3 = $j;
   $4 = ($3|0)<(3);
   if (!($4)) {
    break;
   }
   $k = 0;
   $5 = $j;
   $6 = $i;
   $7 = (293692 + ($6<<4)|0);
   $8 = (($7) + ($5<<2)|0);
   HEAPF32[$8>>2] = 0.0;
   while(1) {
    $9 = $k;
    $10 = ($9|0)<(3);
    if (!($10)) {
     break;
    }
    $11 = $k;
    $12 = $i;
    $13 = (294360 + (($12*12)|0)|0);
    $14 = (($13) + ($11<<2)|0);
    $15 = +HEAPF32[$14>>2];
    $16 = $j;
    $17 = $k;
    $18 = $0;
    $19 = (($18) + (($17*12)|0)|0);
    $20 = (($19) + ($16<<2)|0);
    $21 = +HEAPF32[$20>>2];
    $22 = $15 * $21;
    $23 = $j;
    $24 = $i;
    $25 = (293692 + ($24<<4)|0);
    $26 = (($25) + ($23<<2)|0);
    $27 = +HEAPF32[$26>>2];
    $28 = $27 + $22;
    HEAPF32[$26>>2] = $28;
    $29 = $k;
    $30 = (($29) + 1)|0;
    $k = $30;
   }
   $31 = $j;
   $32 = (($31) + 1)|0;
   $j = $32;
  }
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function _parse_mos($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $data = 0, $from = 0;
 var $frot = 0, $i = 0, $neut = 0, $or$cond = 0, $planes = 0, $romm_cam = 0, $skip = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $data = sp + 136|0;
 $i = sp + 116|0;
 $neut = sp + 96|0;
 $planes = sp + 92|0;
 $romm_cam = sp + 52|0;
 $0 = $offset;
 HEAP32[$planes>>2] = 0;
 $frot = 0;
 $1 = HEAP32[944>>2]|0;
 $2 = $0;
 (_fseek($1,$2,0)|0);
 while(1) {
  $3 = (_get4()|0);
  $4 = ($3|0)!=(1347114067);
  if ($4) {
   break;
  }
  (_get4()|0);
  $5 = HEAP32[944>>2]|0;
  (_fread($data,1,40,$5)|0);
  $6 = (_get4()|0);
  $skip = $6;
  $7 = HEAP32[944>>2]|0;
  $8 = (_ftell($7)|0);
  $from = $8;
  $9 = (_strcmp($data,614213)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $from;
   HEAP32[293668>>2] = $11;
   $12 = $skip;
   HEAP32[1672>>2] = $12;
  }
  $13 = (_strcmp($data,614231)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $15 = $from;
   HEAP32[294552>>2] = $15;
   $16 = $skip;
   HEAP32[294556>>2] = $16;
  }
  $17 = (_strcmp($data,614250)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = HEAP32[944>>2]|0;
   HEAP32[$vararg_buffer>>2] = $i;
   (_fscanf($19,614269,$vararg_buffer)|0);
   $20 = HEAP32[$i>>2]|0;
   $21 = ($20>>>0)<(39);
   if ($21) {
    $22 = HEAP32[$i>>2]|0;
    $23 = (294396 + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    (_strcpy(594339,$24)|0);
   }
  }
  $25 = (_strcmp($data,614272)|0);
  $26 = ($25|0)!=(0);
  if (!($26)) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $27 = HEAP32[$i>>2]|0;
    $28 = ($27|0)<(9);
    if (!($28)) {
     break;
    }
    $29 = (_get4()|0);
    $30 = (+_int_to_float($29));
    $31 = HEAP32[$i>>2]|0;
    $32 = (($romm_cam) + ($31<<2)|0);
    HEAPF32[$32>>2] = $30;
    $33 = HEAP32[$i>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$i>>2] = $34;
   }
   _romm_coeff($romm_cam);
  }
  $35 = (_strcmp($data,614298)|0);
  $36 = ($35|0)!=(0);
  if (!($36)) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $37 = HEAP32[$i>>2]|0;
    $38 = ($37|0)<(9);
    if (!($38)) {
     break;
    }
    $39 = HEAP32[944>>2]|0;
    $40 = HEAP32[$i>>2]|0;
    $41 = (($romm_cam) + ($40<<2)|0);
    HEAP32[$vararg_buffer2>>2] = $41;
    (_fscanf($39,614320,$vararg_buffer2)|0);
    $42 = HEAP32[$i>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[$i>>2] = $43;
   }
   _romm_coeff($romm_cam);
  }
  $44 = (_strcmp($data,614323)|0);
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $46 = HEAP32[944>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $planes;
   (_fscanf($46,614269,$vararg_buffer5)|0);
  }
  $47 = (_strcmp($data,614349)|0);
  $48 = ($47|0)!=(0);
  if (!($48)) {
   $49 = HEAP32[944>>2]|0;
   HEAP32[$vararg_buffer8>>2] = 293688;
   (_fscanf($49,614269,$vararg_buffer8)|0);
  }
  $50 = (_strcmp($data,614376)|0);
  $51 = ($50|0)!=(0);
  L34: do {
   if (!($51)) {
    $c = 0;
    while(1) {
     $52 = $c;
     $53 = ($52|0)<(4);
     if (!($53)) {
      break L34;
     }
     $54 = HEAP32[944>>2]|0;
     HEAP32[$vararg_buffer11>>2] = $i;
     (_fscanf($54,614269,$vararg_buffer11)|0);
     $55 = HEAP32[$i>>2]|0;
     $56 = ($55|0)==(1);
     if ($56) {
      $57 = $c;
      $58 = $c;
      $59 = $58 >> 1;
      $60 = $57 ^ $59;
      $frot = $60;
     }
     $61 = $c;
     $62 = (($61) + 1)|0;
     $c = $62;
    }
   }
  } while(0);
  $63 = (_strcmp($data,614400)|0);
  $64 = ($63|0)!=(0);
  if (!($64)) {
   $65 = HEAP32[944>>2]|0;
   HEAP32[$vararg_buffer14>>2] = $i;
   (_fscanf($65,614269,$vararg_buffer14)|0);
   $66 = HEAP32[$i>>2]|0;
   $67 = HEAP32[293688>>2]|0;
   $68 = (($66) - ($67))|0;
   HEAP32[293688>>2] = $68;
  }
  $69 = (_strcmp($data,614423)|0);
  $70 = ($69|0)!=(0);
  $71 = +HEAPF32[1528>>2];
  $72 = $71 != 0.0;
  $or$cond = $70 | $72;
  L46: do {
   if (!($or$cond)) {
    $c = 0;
    while(1) {
     $73 = $c;
     $74 = ($73|0)<(4);
     if (!($74)) {
      break;
     }
     $75 = HEAP32[944>>2]|0;
     $76 = $c;
     $77 = (($neut) + ($76<<2)|0);
     HEAP32[$vararg_buffer17>>2] = $77;
     (_fscanf($75,614269,$vararg_buffer17)|0);
     $78 = $c;
     $79 = (($78) + 1)|0;
     $c = $79;
    }
    $c = 0;
    while(1) {
     $80 = $c;
     $81 = ($80|0)<(3);
     if (!($81)) {
      break L46;
     }
     $82 = HEAP32[$neut>>2]|0;
     $83 = (+($82|0));
     $84 = $c;
     $85 = (($84) + 1)|0;
     $86 = (($neut) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (+($87|0));
     $89 = $83 / $88;
     $90 = $c;
     $91 = (1528 + ($90<<2)|0);
     HEAPF32[$91>>2] = $89;
     $92 = $c;
     $93 = (($92) + 1)|0;
     $c = $93;
    }
   }
  } while(0);
  $94 = (_strcmp($data,614440)|0);
  $95 = ($94|0)!=(0);
  if (!($95)) {
   $96 = (_get4()|0);
   HEAP32[1068>>2] = $96;
  }
  $97 = $from;
  _parse_mos($97);
  $98 = HEAP32[944>>2]|0;
  $99 = $skip;
  $100 = $from;
  $101 = (($99) + ($100))|0;
  (_fseek($98,$101,0)|0);
 }
 $102 = HEAP32[$planes>>2]|0;
 $103 = ($102|0)!=(0);
 if (!($103)) {
  STACKTOP = sp;return;
 }
 $104 = HEAP32[$planes>>2]|0;
 $105 = ($104|0)==(1);
 $106 = $105&1;
 $107 = Math_imul($106, 16843009)|0;
 $108 = HEAP32[293688>>2]|0;
 $109 = (($108>>>0) / 90)&-1;
 $110 = $frot;
 $111 = (($109) + ($110))|0;
 $112 = $111 & 3;
 $113 = (614450 + ($112)|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = $114&255;
 $116 = Math_imul($107, $115)|0;
 HEAP32[776>>2] = $116;
 STACKTOP = sp;return;
}
function _linear_table($len) {
 $len = $len|0;
 var $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $len;
 $1 = $0;
 $2 = ($1>>>0)>(4096);
 $$len = $2 ? 4096 : $len;
 $0 = $$len;
 $3 = $0;
 _read_shorts(448962,$3);
 $4 = $0;
 $i = $4;
 while(1) {
  $5 = $i;
  $6 = ($5|0)<(4096);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = (($7) - 1)|0;
  $9 = (448962 + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $i;
  $12 = (448962 + ($11<<1)|0);
  HEAP16[$12>>1] = $10;
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $15 = HEAP16[(457152)>>1]|0;
 $16 = $15&65535;
 HEAP32[1040>>2] = $16;
 STACKTOP = sp;return;
}
function _parse_kodak_ifd($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $entries = 0;
 var $i = 0, $len = 0, $mul = 0, $num = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $save = 0, $tag = 0, $type = 0, $wbi = 0, $wbtemp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 44|0;
 $type = sp + 40|0;
 $len = sp + 36|0;
 $save = sp + 32|0;
 $mul = sp + 4|0;
 $0 = $base;
 $wbi = -2;
 $wbtemp = 6500;
 ;HEAP32[$mul>>2]=HEAP32[294560>>2]|0;HEAP32[$mul+4>>2]=HEAP32[294560+4>>2]|0;HEAP32[$mul+8>>2]=HEAP32[294560+8>>2]|0;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $entries = $2;
 $3 = $entries;
 $4 = ($3>>>0)>(1024);
 if ($4) {
  STACKTOP = sp;return;
 }
 while(1) {
  $5 = $entries;
  $6 = (($5) + -1)|0;
  $entries = $6;
  $7 = ($5|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  _tiff_get($8,$tag,$type,$len,$save);
  $9 = HEAP32[$tag>>2]|0;
  $10 = ($9|0)==(1020);
  if ($10) {
   $11 = HEAP32[$type>>2]|0;
   $12 = (_getint($11)|0);
   $wbi = $12;
  }
  $13 = HEAP32[$tag>>2]|0;
  $14 = ($13|0)==(1021);
  $15 = HEAP32[$len>>2]|0;
  $16 = ($15|0)==(72);
  $or$cond = $14 & $16;
  if ($or$cond) {
   $17 = HEAP32[944>>2]|0;
   (_fseek($17,40,1)|0);
   $c = 0;
   while(1) {
    $18 = $c;
    $19 = ($18|0)<(3);
    if (!($19)) {
     break;
    }
    $20 = (_get2()|0);
    $21 = $20&65535;
    $22 = (+($21|0));
    $23 = 2048.0 / $22;
    $24 = $23;
    $25 = $c;
    $26 = (1528 + ($25<<2)|0);
    HEAPF32[$26>>2] = $24;
    $27 = $c;
    $28 = (($27) + 1)|0;
    $c = $28;
   }
   $wbi = -2;
  }
  $29 = HEAP32[$tag>>2]|0;
  $30 = ($29|0)==(2118);
  if ($30) {
   $31 = HEAP32[$type>>2]|0;
   $32 = (_getint($31)|0);
   $wbtemp = $32;
  }
  $33 = HEAP32[$tag>>2]|0;
  $34 = $wbi;
  $35 = (2120 + ($34))|0;
  $36 = ($33|0)==($35|0);
  $37 = $wbi;
  $38 = ($37|0)>=(0);
  $or$cond3 = $36 & $38;
  L19: do {
   if ($or$cond3) {
    $c = 0;
    while(1) {
     $39 = $c;
     $40 = ($39|0)<(3);
     if (!($40)) {
      break L19;
     }
     $41 = HEAP32[$type>>2]|0;
     $42 = (+_getreal($41));
     $43 = 2048.0 / $42;
     $44 = $43;
     $45 = $c;
     $46 = (1528 + ($45<<2)|0);
     HEAPF32[$46>>2] = $44;
     $47 = $c;
     $48 = (($47) + 1)|0;
     $c = $48;
    }
   }
  } while(0);
  $49 = HEAP32[$tag>>2]|0;
  $50 = $wbi;
  $51 = (2130 + ($50))|0;
  $52 = ($49|0)==($51|0);
  L25: do {
   if ($52) {
    $c = 0;
    while(1) {
     $53 = $c;
     $54 = ($53|0)<(3);
     if (!($54)) {
      break L25;
     }
     $55 = HEAP32[$type>>2]|0;
     $56 = (+_getreal($55));
     $57 = $56;
     $58 = $c;
     $59 = (($mul) + ($58<<2)|0);
     HEAPF32[$59>>2] = $57;
     $60 = $c;
     $61 = (($60) + 1)|0;
     $c = $61;
    }
   }
  } while(0);
  $62 = HEAP32[$tag>>2]|0;
  $63 = $wbi;
  $64 = (2140 + ($63))|0;
  $65 = ($62|0)==($64|0);
  $66 = $wbi;
  $67 = ($66|0)>=(0);
  $or$cond5 = $65 & $67;
  L31: do {
   if ($or$cond5) {
    $c = 0;
    while(1) {
     $68 = $c;
     $69 = ($68|0)<(3);
     if (!($69)) {
      break L31;
     }
     $i = 0;
     $num = 0.0;
     while(1) {
      $70 = $i;
      $71 = ($70|0)<(4);
      if (!($71)) {
       break;
      }
      $72 = HEAP32[$type>>2]|0;
      $73 = (+_getreal($72));
      $74 = $wbtemp;
      $75 = (+($74|0));
      $76 = $75 / 100.0;
      $77 = $i;
      $78 = (+($77|0));
      $79 = (+Math_pow((+$76),(+$78)));
      $80 = $73 * $79;
      $81 = $num;
      $82 = $81;
      $83 = $82 + $80;
      $84 = $83;
      $num = $84;
      $85 = $i;
      $86 = (($85) + 1)|0;
      $i = $86;
     }
     $87 = $num;
     $88 = $c;
     $89 = (($mul) + ($88<<2)|0);
     $90 = +HEAPF32[$89>>2];
     $91 = $87 * $90;
     $92 = 2048.0 / $91;
     $93 = $c;
     $94 = (1528 + ($93<<2)|0);
     HEAPF32[$94>>2] = $92;
     $95 = $c;
     $96 = (($95) + 1)|0;
     $c = $96;
    }
   }
  } while(0);
  $97 = HEAP32[$tag>>2]|0;
  $98 = ($97|0)==(2317);
  if ($98) {
   $99 = HEAP32[$len>>2]|0;
   _linear_table($99);
  }
  $100 = HEAP32[$tag>>2]|0;
  $101 = ($100|0)==(6020);
  if ($101) {
   $102 = HEAP32[$type>>2]|0;
   $103 = (_getint($102)|0);
   $104 = (+($103>>>0));
   HEAPF32[293672>>2] = $104;
  }
  $105 = HEAP32[$tag>>2]|0;
  $106 = ($105|0)==(64013);
  if ($106) {
   $107 = HEAP32[944>>2]|0;
   $108 = (_getc_unlocked($107)|0);
   $wbi = $108;
  }
  $109 = $wbi;
  $110 = ($109>>>0)<(7);
  L50: do {
   if ($110) {
    $111 = HEAP32[$tag>>2]|0;
    $112 = $wbi;
    $113 = (294572 + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($111|0)==($114|0);
    if ($115) {
     $c = 0;
     while(1) {
      $116 = $c;
      $117 = ($116|0)<(3);
      if (!($117)) {
       break L50;
      }
      $118 = (_get4()|0);
      $119 = (+($118>>>0));
      $120 = $c;
      $121 = (1528 + ($120<<2)|0);
      HEAPF32[$121>>2] = $119;
      $122 = $c;
      $123 = (($122) + 1)|0;
      $c = $123;
     }
    }
   }
  } while(0);
  $124 = HEAP32[$tag>>2]|0;
  $125 = ($124|0)==(64019);
  if ($125) {
   $126 = HEAP32[$type>>2]|0;
   $127 = (_getint($126)|0);
   $128 = $127&65535;
   HEAP16[580076>>1] = $128;
  }
  $129 = HEAP32[$tag>>2]|0;
  $130 = ($129|0)==(64020);
  if ($130) {
   $131 = HEAP32[$type>>2]|0;
   $132 = (_getint($131)|0);
   $133 = (($132) + 1)|0;
   $134 = $133 & -2;
   $135 = $134&65535;
   HEAP16[580074>>1] = $135;
  }
  $136 = HEAP32[944>>2]|0;
  $137 = HEAP32[$save>>2]|0;
  (_fseek($136,$137,0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_tiff($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $doff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $base;
 $2 = HEAP32[944>>2]|0;
 $3 = $1;
 (_fseek($2,$3,0)|0);
 $4 = (_get2()|0);
 HEAP16[448960>>1] = $4;
 $5 = HEAP16[448960>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = ($6|0)!=(18761);
 if ($7) {
  $8 = HEAP16[448960>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ($9|0)!=(19789);
  if ($10) {
   $0 = 0;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 (_get2()|0);
 while(1) {
  $11 = (_get4()|0);
  $doff = $11;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[944>>2]|0;
  $14 = $doff;
  $15 = $1;
  $16 = (($14) + ($15))|0;
  (_fseek($13,$16,0)|0);
  $17 = $1;
  $18 = (_parse_tiff_ifd($17)|0);
  $19 = ($18|0)!=(0);
  if ($19) {
   break;
  }
 }
 $0 = 1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _parse_minolta($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $high = 0, $i = 0, $len = 0, $offset = 0, $save = 0, $sorder = 0, $switch$split12D = 0;
 var $switch$split2D = 0, $tag = 0, $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $base;
 $high = 0;
 $wide = 0;
 $1 = HEAP16[448960>>1]|0;
 $sorder = $1;
 $2 = HEAP32[944>>2]|0;
 $3 = $0;
 (_fseek($2,$3,0)|0);
 $4 = HEAP32[944>>2]|0;
 $5 = (_getc_unlocked($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[944>>2]|0;
 $8 = (_getc_unlocked($7)|0);
 $9 = (($8) - 77)|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[944>>2]|0;
 $12 = (_getc_unlocked($11)|0);
 $13 = (($12) - 82)|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[944>>2]|0;
 $16 = (_getc_unlocked($15)|0);
 $17 = ($16*257)|0;
 $18 = $17&65535;
 HEAP16[448960>>1] = $18;
 $19 = $0;
 $20 = (_get4()|0);
 $21 = (($19) + ($20))|0;
 $22 = (($21) + 8)|0;
 $offset = $22;
 while(1) {
  $23 = HEAP32[944>>2]|0;
  $24 = (_ftell($23)|0);
  $save = $24;
  $25 = $offset;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $i = 0;
  $tag = 0;
  while(1) {
   $27 = $i;
   $28 = ($27|0)<(4);
   if (!($28)) {
    break;
   }
   $29 = $tag;
   $30 = $29 << 8;
   $31 = HEAP32[944>>2]|0;
   $32 = (_getc_unlocked($31)|0);
   $33 = $30 | $32;
   $tag = $33;
   $34 = $i;
   $35 = (($34) + 1)|0;
   $i = $35;
  }
  $36 = (_get4()|0);
  $len = $36;
  $37 = $tag;
  $switch$split2D = ($37|0)<(5526615);
  L17: do {
   if ($switch$split2D) {
    switch ($37|0) {
    case 5263940:  {
     break;
    }
    default: {
     break L17;
    }
    }
    $38 = HEAP32[944>>2]|0;
    (_fseek($38,8,1)|0);
    $39 = (_get2()|0);
    $40 = $39&65535;
    $high = $40;
    $41 = (_get2()|0);
    $42 = $41&65535;
    $wide = $42;
   } else {
    $switch$split12D = ($37|0)<(5718599);
    if ($switch$split12D) {
     switch ($37|0) {
     case 5526615:  {
      break;
     }
     default: {
      break L17;
     }
     }
     $59 = HEAP32[944>>2]|0;
     $60 = (_ftell($59)|0);
     (_parse_tiff($60)|0);
     $61 = $offset;
     HEAP32[1524>>2] = $61;
     break;
    }
    switch ($37|0) {
    case 5718599:  {
     break;
    }
    default: {
     break L17;
    }
    }
    (_get4()|0);
    $43 = (_strcmp(594339,615163)|0);
    $44 = ($43|0)!=(0);
    $45 = $44 ? 0 : 3;
    $i = $45;
    $c = 0;
    while(1) {
     $46 = $c;
     $47 = ($46|0)<(4);
     if (!($47)) {
      break L17;
     }
     $48 = (_get2()|0);
     $49 = (+($48&65535));
     $50 = $c;
     $51 = $c;
     $52 = $51 >> 1;
     $53 = $50 ^ $52;
     $54 = $i;
     $55 = $53 ^ $54;
     $56 = (1528 + ($55<<2)|0);
     HEAPF32[$56>>2] = $49;
     $57 = $c;
     $58 = (($57) + 1)|0;
     $c = $58;
    }
   }
  } while(0);
  $62 = HEAP32[944>>2]|0;
  $63 = $save;
  $64 = $len;
  $65 = (($63) + ($64))|0;
  $66 = (($65) + 8)|0;
  (_fseek($62,$66,0)|0);
 }
 $67 = $high;
 $68 = $67&65535;
 HEAP16[580244>>1] = $68;
 $69 = $wide;
 $70 = $69&65535;
 HEAP16[580226>>1] = $70;
 $71 = $sorder;
 HEAP16[448960>>1] = $71;
 STACKTOP = sp;return;
}
function _apply_tiff() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0;
 var $jh = 0, $max_samp = 0, $ns = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $os = 0, $raw = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, $thm = 0;
 var $ties = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $jh = sp;
 $max_samp = 0;
 $ties = 0;
 $raw = -1;
 $thm = -1;
 HEAP32[1680>>2] = 16;
 $0 = HEAP32[293668>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = HEAP32[944>>2]|0;
  $3 = HEAP32[293668>>2]|0;
  (_fseek($2,$3,0)|0);
  $4 = (_ljpeg_start($jh,1)|0);
  $5 = ($4|0)!=(0);
  if ($5) {
   $6 = ((($jh)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[1680>>2] = $7;
   $8 = ((($jh)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&65535;
   HEAP16[580260>>1] = $10;
   $11 = ((($jh)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12&65535;
   HEAP16[580262>>1] = $13;
  }
 }
 $14 = HEAP32[293740>>2]|0;
 $i = $14;
 while(1) {
  $15 = $i;
  $16 = (($15) + -1)|0;
  $i = $16;
  $17 = ($15|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (293744 + (($18*48)|0)|0);
  $20 = ((($19)) + 44|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $21 != 0.0;
  if ($22) {
   $23 = $i;
   $24 = (293744 + (($23*48)|0)|0);
   $25 = ((($24)) + 44|0);
   $26 = +HEAPF32[$25>>2];
   HEAPF32[293680>>2] = $26;
  }
  $27 = +HEAPF32[293680>>2];
  $28 = $i;
  $29 = (293744 + (($28*48)|0)|0);
  $30 = ((($29)) + 44|0);
  HEAPF32[$30>>2] = $27;
 }
 $i = 0;
 while(1) {
  $31 = $i;
  $32 = HEAP32[293740>>2]|0;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $max_samp;
  $35 = $i;
  $36 = (293744 + (($35*48)|0)|0);
  $37 = ((($36)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($34|0)<($38|0);
  if ($39) {
   $40 = $i;
   $41 = (293744 + (($40*48)|0)|0);
   $42 = ((($41)) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $max_samp = $43;
  }
  $44 = $max_samp;
  $45 = ($44|0)>(3);
  if ($45) {
   $max_samp = 3;
  }
  $46 = HEAP16[580226>>1]|0;
  $47 = $46&65535;
  $48 = HEAP16[580244>>1]|0;
  $49 = $48&65535;
  $50 = Math_imul($47, $49)|0;
  $os = $50;
  $51 = $i;
  $52 = (293744 + (($51*48)|0)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $i;
  $55 = (293744 + (($54*48)|0)|0);
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = Math_imul($53, $57)|0;
  $ns = $58;
  $59 = HEAP32[1516>>2]|0;
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = HEAP32[1516>>2]|0;
   $62 = $os;
   $63 = Math_imul($62, $61)|0;
   $os = $63;
   $64 = $i;
   $65 = (293744 + (($64*48)|0)|0);
   $66 = ((($65)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $ns;
   $69 = Math_imul($68, $67)|0;
   $ns = $69;
  }
  $70 = $i;
  $71 = (293744 + (($70*48)|0)|0);
  $72 = ((($71)) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(6);
  if ($74) {
   label = 19;
  } else {
   $75 = $i;
   $76 = (293744 + (($75*48)|0)|0);
   $77 = ((($76)) + 28|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)!=(3);
   if ($79) {
    label = 19;
   }
  }
  do {
   if ((label|0) == 19) {
    label = 0;
    $80 = $i;
    $81 = (293744 + (($80*48)|0)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $i;
    $84 = (293744 + (($83*48)|0)|0);
    $85 = ((($84)) + 4|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $82 | $86;
    $88 = ($87|0)<(65536);
    $89 = $ns;
    $90 = ($89|0)!=(0);
    $or$cond = $88 & $90;
    if ($or$cond) {
     $91 = $ns;
     $92 = $os;
     $93 = ($91|0)>($92|0);
     if ($93) {
      $ties = 1;
     } else {
      $94 = $ns;
      $95 = $os;
      $96 = ($94|0)==($95|0);
      if (!($96)) {
       break;
      }
      $97 = HEAP32[664>>2]|0;
      $98 = $ties;
      $99 = (($98) + 1)|0;
      $ties = $99;
      $100 = ($97|0)==($98|0);
      if (!($100)) {
       break;
      }
     }
     $101 = $i;
     $102 = (293744 + (($101*48)|0)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $103&65535;
     HEAP16[580226>>1] = $104;
     $105 = $i;
     $106 = (293744 + (($105*48)|0)|0);
     $107 = ((($106)) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $108&65535;
     HEAP16[580244>>1] = $109;
     $110 = $i;
     $111 = (293744 + (($110*48)|0)|0);
     $112 = ((($111)) + 8|0);
     $113 = HEAP32[$112>>2]|0;
     HEAP32[1516>>2] = $113;
     $114 = $i;
     $115 = (293744 + (($114*48)|0)|0);
     $116 = ((($115)) + 12|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[1060>>2] = $117;
     $118 = $i;
     $119 = (293744 + (($118*48)|0)|0);
     $120 = ((($119)) + 20|0);
     $121 = HEAP32[$120>>2]|0;
     HEAP32[1524>>2] = $121;
     $122 = $i;
     $123 = (293744 + (($122*48)|0)|0);
     $124 = ((($123)) + 24|0);
     $125 = HEAP32[$124>>2]|0;
     HEAP32[294624>>2] = $125;
     $126 = $i;
     $127 = (293744 + (($126*48)|0)|0);
     $128 = ((($127)) + 28|0);
     $129 = HEAP32[$128>>2]|0;
     HEAP32[1076>>2] = $129;
     $130 = $i;
     $131 = (293744 + (($130*48)|0)|0);
     $132 = ((($131)) + 36|0);
     $133 = HEAP32[$132>>2]|0;
     HEAP32[1512>>2] = $133;
     $134 = $i;
     $135 = (293744 + (($134*48)|0)|0);
     $136 = ((($135)) + 40|0);
     $137 = HEAP32[$136>>2]|0;
     HEAP32[1504>>2] = $137;
     $138 = $i;
     $139 = (293744 + (($138*48)|0)|0);
     $140 = ((($139)) + 44|0);
     $141 = +HEAPF32[$140>>2];
     HEAPF32[293680>>2] = $141;
     $142 = $i;
     $raw = $142;
    }
   }
  } while(0);
  $143 = $i;
  $144 = (($143) + 1)|0;
  $i = $144;
 }
 $145 = HEAP32[1508>>2]|0;
 $146 = ($145|0)==(1);
 $147 = $ties;
 $148 = ($147|0)!=(0);
 $or$cond3 = $146 & $148;
 if ($or$cond3) {
  $149 = $ties;
  HEAP32[1508>>2] = $149;
 }
 $150 = HEAP32[1512>>2]|0;
 $151 = ($150|0)!=(0);
 if (!($151)) {
  HEAP32[1512>>2] = 2147483647;
 }
 $152 = HEAP32[1504>>2]|0;
 $153 = ($152|0)!=(0);
 if (!($153)) {
  HEAP32[1504>>2] = 2147483647;
 }
 $154 = HEAP32[293740>>2]|0;
 $i = $154;
 while(1) {
  $155 = $i;
  $156 = (($155) + -1)|0;
  $i = $156;
  $157 = ($155|0)!=(0);
  if (!($157)) {
   break;
  }
  $158 = $i;
  $159 = (293744 + (($158*48)|0)|0);
  $160 = ((($159)) + 24|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)!=(0);
  if (!($162)) {
   continue;
  }
  $163 = $i;
  $164 = (293744 + (($163*48)|0)|0);
  $165 = ((($164)) + 24|0);
  $166 = HEAP32[$165>>2]|0;
  HEAP32[294624>>2] = $166;
 }
 $167 = $raw;
 $168 = ($167|0)<(0);
 $169 = HEAP32[31028>>2]|0;
 $170 = ($169|0)!=(0|0);
 $or$cond5 = $168 | $170;
 L50: do {
  if (!($or$cond5)) {
   $171 = HEAP32[1060>>2]|0;
   $switch$split2D = ($171|0)<(32769);
   L52: do {
    if ($switch$split2D) {
     $switch$split72D = ($171|0)<(7);
     L54: do {
      if ($switch$split72D) {
       switch ($171|0) {
       case 6:  {
        break L54;
        break;
       }
       case 1: case 0:  {
        break;
       }
       default: {
        label = 75;
        break L52;
       }
       }
       $201 = (_strncmp(594275,613710,7)|0);
       $202 = ($201|0)!=(0);
       if (!($202)) {
        $203 = $raw;
        $204 = (293744 + (($203*48)|0)|0);
        $205 = ((($204)) + 32|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = $206<<1;
        $208 = HEAP16[580226>>1]|0;
        $209 = $208&65535;
        $210 = HEAP16[580244>>1]|0;
        $211 = $210&65535;
        $212 = Math_imul($209, $211)|0;
        $213 = ($212*3)|0;
        $214 = ($207|0)==($213|0);
        if ($214) {
         HEAP32[1068>>2] = 24;
        }
       }
       $215 = $raw;
       $216 = (293744 + (($215*48)|0)|0);
       $217 = ((($216)) + 32|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ($218*5)|0;
       $220 = HEAP16[580226>>1]|0;
       $221 = $220&65535;
       $222 = HEAP16[580244>>1]|0;
       $223 = $222&65535;
       $224 = Math_imul($221, $223)|0;
       $225 = $224<<3;
       $226 = ($219|0)==($225|0);
       if (!($226)) {
        break L52;
       }
       HEAP32[1068>>2] = 81;
       HEAP32[1516>>2] = 12;
       break L52;
      } else {
       $switch$split192D = ($171|0)<(262);
       if ($switch$split192D) {
        switch ($171|0) {
        case 99: case 7:  {
         break L54;
         break;
        }
        default: {
         label = 75;
         break L52;
        }
        }
       }
       $switch$split252D = ($171|0)<(32767);
       if ($switch$split252D) {
        switch ($171|0) {
        case 262:  {
         break;
        }
        default: {
         label = 75;
         break L52;
        }
        }
        HEAP32[31028>>2] = 14;
        break L50;
       }
       switch ($171|0) {
       case 32767:  {
        break;
       }
       default: {
        label = 75;
        break L52;
       }
       }
       $172 = $raw;
       $173 = (293744 + (($172*48)|0)|0);
       $174 = ((($173)) + 32|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = HEAP16[580226>>1]|0;
       $177 = $176&65535;
       $178 = HEAP16[580244>>1]|0;
       $179 = $178&65535;
       $180 = Math_imul($177, $179)|0;
       $181 = ($175|0)==($180|0);
       if ($181) {
        HEAP32[1516>>2] = 12;
        HEAP32[31028>>2] = 25;
        break L50;
       }
       $182 = $raw;
       $183 = (293744 + (($182*48)|0)|0);
       $184 = ((($183)) + 32|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = $185<<3;
       $187 = HEAP16[580226>>1]|0;
       $188 = $187&65535;
       $189 = HEAP16[580244>>1]|0;
       $190 = $189&65535;
       $191 = Math_imul($188, $190)|0;
       $192 = HEAP32[1516>>2]|0;
       $193 = Math_imul($191, $192)|0;
       $194 = ($186|0)!=($193|0);
       if ($194) {
        $195 = HEAP16[580244>>1]|0;
        $196 = $195&65535;
        $197 = (($196) + 8)|0;
        $198 = $197&65535;
        HEAP16[580244>>1] = $198;
        HEAP32[31028>>2] = 19;
        break L50;
       } else {
        HEAP32[1068>>2] = 79;
        label = 43;
        break L52;
       }
      }
     } while(0);
     HEAP32[31028>>2] = 10;
     break L50;
    } else {
     $switch$split102D = ($171|0)<(34713);
     if ($switch$split102D) {
      switch ($171|0) {
      case 32867:  {
       break L50;
       break;
      }
      case 32769:  {
       label = 43;
       break L52;
       break;
      }
      case 32773: case 32770:  {
       break L52;
       break;
      }
      default: {
       label = 75;
       break L52;
      }
      }
     }
     $switch$split222D = ($171|0)<(65000);
     if (!($switch$split222D)) {
      switch ($171|0) {
      case 65535:  {
       HEAP32[31028>>2] = 29;
       break L50;
       break;
      }
      case 65000:  {
       break;
      }
      default: {
       label = 75;
       break L52;
      }
      }
      $296 = $raw;
      $297 = (293744 + (($296*48)|0)|0);
      $298 = ((($297)) + 16|0);
      $299 = HEAP32[$298>>2]|0;
      $switch$split12D = ($299|0)<(6);
      if ($switch$split12D) {
       switch ($299|0) {
       case 2:  {
        break;
       }
       default: {
        break L50;
       }
       }
       HEAP32[31028>>2] = 30;
       HEAP32[776>>2] = 0;
       break L50;
      }
      $switch$split132D = ($299|0)<(32803);
      if ($switch$split132D) {
       switch ($299|0) {
       case 6:  {
        break;
       }
       default: {
        break L50;
       }
       }
       HEAP32[31028>>2] = 31;
       HEAP32[776>>2] = 0;
       break L50;
      } else {
       switch ($299|0) {
       case 32803:  {
        break;
       }
       default: {
        break L50;
       }
       }
       HEAP32[31028>>2] = 32;
       break L50;
      }
     }
     switch ($171|0) {
     case 34892:  {
      break L50;
      break;
     }
     case 34713:  {
      break;
     }
     default: {
      label = 75;
      break L52;
     }
     }
     $246 = HEAP16[580226>>1]|0;
     $247 = $246&65535;
     $248 = (($247) + 9)|0;
     $249 = (($248|0) / 10)&-1;
     $250 = $249<<4;
     $251 = HEAP16[580244>>1]|0;
     $252 = $251&65535;
     $253 = Math_imul($250, $252)|0;
     $254 = $raw;
     $255 = (293744 + (($254*48)|0)|0);
     $256 = ((($255)) + 32|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ($253|0)==($257|0);
     if ($258) {
      HEAP32[31028>>2] = 15;
      HEAP32[1068>>2] = 1;
      break L50;
     }
     $259 = HEAP16[580226>>1]|0;
     $260 = $259&65535;
     $261 = HEAP16[580244>>1]|0;
     $262 = $261&65535;
     $263 = Math_imul($260, $262)|0;
     $264 = ($263*3)|0;
     $265 = $raw;
     $266 = (293744 + (($265*48)|0)|0);
     $267 = ((($266)) + 32|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = $268<<1;
     $270 = ($264|0)==($269|0);
     if ($270) {
      HEAP32[31028>>2] = 15;
      $271 = HEAP8[594339>>0]|0;
      $272 = $271 << 24 >> 24;
      $273 = ($272|0)==(78);
      if (!($273)) {
       break L50;
      }
      HEAP32[1068>>2] = 80;
      break L50;
     }
     $274 = HEAP16[580226>>1]|0;
     $275 = $274&65535;
     $276 = HEAP16[580244>>1]|0;
     $277 = $276&65535;
     $278 = Math_imul($275, $277)|0;
     $279 = ($278*3)|0;
     $280 = $raw;
     $281 = (293744 + (($280*48)|0)|0);
     $282 = ((($281)) + 32|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($279|0)==($283|0);
     if ($284) {
      HEAP32[31028>>2] = 27;
      _gamma_curve(0.41666666666666669,12.92,1,4095);
      _memset((580264|0),0,8204)|0;
      HEAP32[776>>2] = 0;
      break L50;
     }
     $285 = HEAP16[580226>>1]|0;
     $286 = $285&65535;
     $287 = HEAP16[580244>>1]|0;
     $288 = $287&65535;
     $289 = Math_imul($286, $288)|0;
     $290 = $289<<1;
     $291 = $raw;
     $292 = (293744 + (($291*48)|0)|0);
     $293 = ((($292)) + 32|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = ($290|0)==($294|0);
     if ($295) {
      HEAP32[31028>>2] = 24;
      HEAP32[1068>>2] = 4;
      HEAP16[448960>>1] = 19789;
      break L50;
     } else {
      HEAP32[31028>>2] = 28;
      break L50;
     }
    }
   } while(0);
   if ((label|0) == 43) {
    $199 = HEAP32[1068>>2]|0;
    $200 = (($199) + 1)|0;
    HEAP32[1068>>2] = $200;
   }
   else if ((label|0) == 75) {
    HEAP32[1508>>2] = 0;
    break;
   }
   $227 = HEAP32[1516>>2]|0;
   switch ($227|0) {
   case 8:  {
    HEAP32[31028>>2] = 13;
    break L50;
    break;
   }
   case 12:  {
    $228 = $raw;
    $229 = (293744 + (($228*48)|0)|0);
    $230 = ((($229)) + 16|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = ($231|0)==(2);
    if ($232) {
     HEAP32[1068>>2] = 6;
    }
    HEAP32[31028>>2] = 15;
    break L50;
    break;
   }
   case 14:  {
    HEAP32[1068>>2] = 0;
    break;
   }
   case 16:  {
    break;
   }
   default: {
    break L50;
   }
   }
   HEAP32[31028>>2] = 24;
   $233 = (_strncmp(594275,613710,7)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    $235 = $raw;
    $236 = (293744 + (($235*48)|0)|0);
    $237 = ((($236)) + 32|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($238*7)|0;
    $240 = HEAP16[580226>>1]|0;
    $241 = $240&65535;
    $242 = HEAP16[580244>>1]|0;
    $243 = $242&65535;
    $244 = Math_imul($241, $243)|0;
    $245 = ($239|0)>($244|0);
    if ($245) {
     HEAP32[31028>>2] = 26;
    }
   }
  }
 } while(0);
 $300 = HEAP32[1064>>2]|0;
 $301 = ($300|0)!=(0);
 do {
  if (!($301)) {
   $302 = HEAP32[1076>>2]|0;
   $303 = ($302|0)==(3);
   if ($303) {
    $304 = $raw;
    $305 = (293744 + (($304*48)|0)|0);
    $306 = ((($305)) + 32|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = ($307|0)!=(0);
    $309 = HEAP32[1516>>2]|0;
    $310 = ($309|0)!=(14);
    $or$cond7 = $308 & $310;
    if ($or$cond7) {
     $311 = HEAP32[1060>>2]|0;
     $312 = $311 & -16;
     $313 = ($312|0)!=(32768);
     if (!($313)) {
      label = 80;
     }
    } else {
     label = 80;
    }
   } else {
    label = 80;
   }
   if ((label|0) == 80) {
    $314 = HEAP32[1516>>2]|0;
    $315 = ($314|0)==(8);
    if (!($315)) {
     break;
    }
    $316 = (_strncmp(594275,615141,5)|0);
    $317 = ($316|0)!=(0);
    if (!($317)) {
     break;
    }
    $318 = (_my_strcasestr(594275,615147)|0);
    $319 = ($318|0)!=(0|0);
    if ($319) {
     break;
    }
    $320 = (_strstr(593904,615153)|0);
    $321 = ($320|0)!=(0|0);
    if ($321) {
     break;
    }
   }
   HEAP32[1508>>2] = 0;
  }
 } while(0);
 $i = 0;
 while(1) {
  $322 = $i;
  $323 = HEAP32[293740>>2]|0;
  $324 = ($322>>>0)<($323>>>0);
  if (!($324)) {
   break;
  }
  $325 = $i;
  $326 = $raw;
  $327 = ($325|0)!=($326|0);
  if ($327) {
   $328 = $i;
   $329 = (293744 + (($328*48)|0)|0);
   $330 = ((($329)) + 28|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = $max_samp;
   $333 = ($331|0)==($332|0);
   if ($333) {
    $334 = $i;
    $335 = (293744 + (($334*48)|0)|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $i;
    $338 = (293744 + (($337*48)|0)|0);
    $339 = ((($338)) + 4|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = Math_imul($336, $340)|0;
    $342 = $i;
    $343 = (293744 + (($342*48)|0)|0);
    $344 = ((($343)) + 8|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = $i;
    $347 = (293744 + (($346*48)|0)|0);
    $348 = ((($347)) + 8|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = Math_imul($345, $349)|0;
    $351 = (($350) + 1)|0;
    $352 = (($341|0) / ($351|0))&-1;
    $353 = HEAP16[580260>>1]|0;
    $354 = $353&65535;
    $355 = HEAP16[580262>>1]|0;
    $356 = $355&65535;
    $357 = Math_imul($354, $356)|0;
    $358 = HEAP32[1680>>2]|0;
    $359 = HEAP32[1680>>2]|0;
    $360 = Math_imul($358, $359)|0;
    $361 = (($360) + 1)|0;
    $362 = (($357>>>0) / ($361>>>0))&-1;
    $363 = ($352>>>0)>($362>>>0);
    if ($363) {
     $364 = $i;
     $365 = (293744 + (($364*48)|0)|0);
     $366 = ((($365)) + 12|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = ($367|0)!=(34892);
     if ($368) {
      $369 = $i;
      $370 = (293744 + (($369*48)|0)|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = $371&65535;
      HEAP16[580260>>1] = $372;
      $373 = $i;
      $374 = (293744 + (($373*48)|0)|0);
      $375 = ((($374)) + 4|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = $376&65535;
      HEAP16[580262>>1] = $377;
      $378 = $i;
      $379 = (293744 + (($378*48)|0)|0);
      $380 = ((($379)) + 20|0);
      $381 = HEAP32[$380>>2]|0;
      HEAP32[293668>>2] = $381;
      $382 = $i;
      $383 = (293744 + (($382*48)|0)|0);
      $384 = ((($383)) + 32|0);
      $385 = HEAP32[$384>>2]|0;
      HEAP32[1672>>2] = $385;
      $386 = $i;
      $387 = (293744 + (($386*48)|0)|0);
      $388 = ((($387)) + 8|0);
      $389 = HEAP32[$388>>2]|0;
      HEAP32[1680>>2] = $389;
      $390 = $i;
      $thm = $390;
     }
    }
   }
  }
  $391 = $i;
  $392 = (($391) + 1)|0;
  $i = $392;
 }
 $393 = $thm;
 $394 = ($393|0)>=(0);
 if (!($394)) {
  STACKTOP = sp;return;
 }
 $395 = $thm;
 $396 = (293744 + (($395*48)|0)|0);
 $397 = ((($396)) + 28|0);
 $398 = HEAP32[$397>>2]|0;
 $399 = $398 << 5;
 $400 = HEAP32[1680>>2]|0;
 $401 = $400 | $399;
 HEAP32[1680>>2] = $401;
 $402 = $thm;
 $403 = (293744 + (($402*48)|0)|0);
 $404 = ((($403)) + 12|0);
 $405 = HEAP32[$404>>2]|0;
 $switch$split42D = ($405|0)<(1);
 if ($switch$split42D) {
  switch ($405|0) {
  case 0:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  HEAP32[294628>>2] = 33;
  STACKTOP = sp;return;
 }
 $switch$split162D = ($405|0)<(65000);
 if (!($switch$split162D)) {
  switch ($405|0) {
  case 65000:  {
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  $413 = $thm;
  $414 = (293744 + (($413*48)|0)|0);
  $415 = ((($414)) + 16|0);
  $416 = HEAP32[$415>>2]|0;
  $417 = ($416|0)==(6);
  $418 = $417 ? 31 : 30;
  HEAP32[294632>>2] = $418;
  STACKTOP = sp;return;
 }
 switch ($405|0) {
 case 1:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $406 = $thm;
 $407 = (293744 + (($406*48)|0)|0);
 $408 = ((($407)) + 8|0);
 $409 = HEAP32[$408>>2]|0;
 $410 = ($409|0)<=(8);
 if ($410) {
  HEAP32[294628>>2] = 34;
  STACKTOP = sp;return;
 }
 $411 = (_strcmp(594275,615082)|0);
 $412 = ($411|0)!=(0);
 if ($412) {
  HEAP32[294632>>2] = 36;
  STACKTOP = sp;return;
 } else {
  HEAP32[294628>>2] = 35;
  STACKTOP = sp;return;
 }
}
function _parse_external_jpeg() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ext = 0, $file = 0, $jext = 0, $jfile = 0, $jname = 0, $save = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[944>>2]|0;
 $save = $0;
 $1 = HEAP32[780>>2]|0;
 $2 = (_strrchr($1,46)|0);
 $ext = $2;
 $3 = HEAP32[780>>2]|0;
 $4 = (_strrchr($3,47)|0);
 $file = $4;
 $5 = $file;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = HEAP32[780>>2]|0;
  $8 = (_strrchr($7,92)|0);
  $file = $8;
 }
 $9 = $file;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $11 = HEAP32[780>>2]|0;
  $12 = ((($11)) + -1|0);
  $file = $12;
 }
 $13 = $file;
 $14 = ((($13)) + 1|0);
 $file = $14;
 $15 = $ext;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $ext;
 $18 = (_strlen($17)|0);
 $19 = ($18|0)!=(4);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $ext;
 $21 = $file;
 $22 = $20;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = ($24|0)!=(8);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[780>>2]|0;
 $27 = (_strlen($26)|0);
 $28 = (($27) + 1)|0;
 $29 = (_malloc($28)|0);
 $jname = $29;
 $30 = $jname;
 _merror($30,615175);
 $31 = $jname;
 $32 = HEAP32[780>>2]|0;
 (_strcpy($31,$32)|0);
 $33 = $file;
 $34 = HEAP32[780>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = $jname;
 $39 = (($38) + ($37)|0);
 $jfile = $39;
 $40 = $ext;
 $41 = HEAP32[780>>2]|0;
 $42 = $40;
 $43 = $41;
 $44 = (($42) - ($43))|0;
 $45 = $jname;
 $46 = (($45) + ($44)|0);
 $jext = $46;
 $47 = $ext;
 $48 = (_strcasecmp($47,615197)|0);
 $49 = ($48|0)!=(0);
 L16: do {
  if ($49) {
   $50 = $jext;
   $51 = $ext;
   $52 = ((($51)) + 1|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = (_isupper($54)|0);
   $56 = ($55|0)!=(0);
   $57 = $56 ? 615202 : 615197;
   (_strcpy($50,$57)|0);
   $58 = $file;
   $59 = HEAP8[$58>>0]|0;
   $60 = $59 << 24 >> 24;
   $61 = (_isdigit($60)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $jfile;
    $64 = $file;
    $65 = ((($64)) + 4|0);
    ;HEAP8[$63>>0]=HEAP8[$65>>0]|0;HEAP8[$63+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$65+3>>0]|0;
    $66 = $jfile;
    $67 = ((($66)) + 4|0);
    $68 = $file;
    ;HEAP8[$67>>0]=HEAP8[$68>>0]|0;HEAP8[$67+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$67+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$67+3>>0]=HEAP8[$68+3>>0]|0;
   }
  } else {
   while(1) {
    $69 = $jext;
    $70 = ((($69)) + -1|0);
    $jext = $70;
    $71 = HEAP8[$70>>0]|0;
    $72 = $71 << 24 >> 24;
    $73 = (_isdigit($72)|0);
    $74 = ($73|0)!=(0);
    if (!($74)) {
     break L16;
    }
    $75 = $jext;
    $76 = HEAP8[$75>>0]|0;
    $77 = $76 << 24 >> 24;
    $78 = ($77|0)!=(57);
    $79 = $jext;
    if ($78) {
     break;
    }
    HEAP8[$79>>0] = 48;
   }
   $80 = HEAP8[$79>>0]|0;
   $81 = (($80) + 1)<<24>>24;
   HEAP8[$79>>0] = $81;
  }
 } while(0);
 $82 = $jname;
 $83 = HEAP32[780>>2]|0;
 $84 = (_strcmp($82,$83)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = $jname;
  $87 = (_fopen($86,612130)|0);
  HEAP32[944>>2] = $87;
  $88 = ($87|0)!=(0|0);
  if ($88) {
   $89 = HEAP32[712>>2]|0;
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = HEAP32[447952>>2]|0;
    $92 = $jname;
    HEAP32[$vararg_buffer>>2] = $92;
    (_fprintf($91,615207,$vararg_buffer)|0);
   }
   (_parse_tiff(12)|0);
   HEAP32[293668>>2] = 0;
   HEAP32[1508>>2] = 1;
   $93 = HEAP32[944>>2]|0;
   (_fclose($93)|0);
  }
 }
 $94 = HEAP32[31164>>2]|0;
 $95 = ($94|0)!=(0);
 if (!($95)) {
  $96 = HEAP32[447952>>2]|0;
  $97 = $jname;
  HEAP32[$vararg_buffer1>>2] = $97;
  (_fprintf($96,615237,$vararg_buffer1)|0);
 }
 $98 = $jname;
 _free($98);
 $99 = $save;
 HEAP32[944>>2] = $99;
 STACKTOP = sp;return;
}
function _ciff_block_1030() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitbuf = 0, $bpp = 0, $col = 0, $i = 0, $or$cond = 0, $row = 0, $vbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vbits = 0;
 $bitbuf = 0;
 (_get2()|0);
 $0 = (_get4()|0);
 $1 = ($0|0)!=(524296);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (_get4()|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (_get2()|0);
 $5 = $4&65535;
 $bpp = $5;
 $6 = $bpp;
 $7 = ($6|0)!=(10);
 $8 = $bpp;
 $9 = ($8|0)!=(12);
 $or$cond = $7 & $9;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $row = 0;
 $i = 0;
 while(1) {
  $10 = $row;
  $11 = ($10|0)<(8);
  if (!($11)) {
   break;
  }
  $col = 0;
  while(1) {
   $12 = $col;
   $13 = ($12|0)<(8);
   if (!($13)) {
    break;
   }
   $14 = $vbits;
   $15 = $bpp;
   $16 = ($14|0)<($15|0);
   if ($16) {
    $17 = $bitbuf;
    $18 = $17 << 16;
    $19 = (_get2()|0);
    $20 = $19&65535;
    $21 = $i;
    $22 = (($21) + 1)|0;
    $i = $22;
    $23 = $21 & 1;
    $24 = (589422 + ($23<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25&65535;
    $27 = $20 ^ $26;
    $28 = $18 | $27;
    $bitbuf = $28;
    $29 = $vbits;
    $30 = (($29) + 16)|0;
    $vbits = $30;
   }
   $31 = $bitbuf;
   $32 = $bpp;
   $33 = $vbits;
   $34 = (($33) - ($32))|0;
   $vbits = $34;
   $35 = $31 >>> $34;
   $36 = $bpp;
   $37 = -1 << $36;
   $38 = $37 ^ -1;
   $39 = $35 & $38;
   $40 = $39&65535;
   $41 = $col;
   $42 = $row;
   $43 = (589198 + ($42<<4)|0);
   $44 = (($43) + ($41<<1)|0);
   HEAP16[$44>>1] = $40;
   $45 = $col;
   $46 = (($45) + 1)|0;
   $col = $46;
  }
  $47 = $row;
  $48 = (($47) + 1)|0;
  $row = $48;
 }
 STACKTOP = sp;return;
}
function _parse_ciff($offset,$length,$depth) {
 $offset = $offset|0;
 $length = $length|0;
 $depth = $depth|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $c = 0, $key = 0, $len = 0, $nrecs = 0, $save = 0, $tboff = 0, $type = 0, $wbi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp + 40|0;
 $0 = $offset;
 $1 = $length;
 $2 = $depth;
 $wbi = -1;
 ;HEAP16[$key>>1]=HEAP16[589422>>1]|0;HEAP16[$key+2>>1]=HEAP16[589422+2>>1]|0;
 $3 = HEAP32[944>>2]|0;
 $4 = $0;
 $5 = $1;
 $6 = (($4) + ($5))|0;
 $7 = (($6) - 4)|0;
 (_fseek($3,$7,0)|0);
 $8 = (_get4()|0);
 $9 = $0;
 $10 = (($8) + ($9))|0;
 $tboff = $10;
 $11 = HEAP32[944>>2]|0;
 $12 = $tboff;
 (_fseek($11,$12,0)|0);
 $13 = (_get2()|0);
 $14 = $13&65535;
 $nrecs = $14;
 $15 = $nrecs;
 $16 = $2;
 $17 = $15 | $16;
 $18 = ($17|0)>(127);
 if ($18) {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = $nrecs;
  $20 = (($19) + -1)|0;
  $nrecs = $20;
  $21 = ($19|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = (_get2()|0);
  $23 = $22&65535;
  $type = $23;
  $24 = (_get4()|0);
  $len = $24;
  $25 = HEAP32[944>>2]|0;
  $26 = (_ftell($25)|0);
  $27 = (($26) + 4)|0;
  $save = $27;
  $28 = HEAP32[944>>2]|0;
  $29 = $0;
  $30 = (_get4()|0);
  $31 = (($29) + ($30))|0;
  (_fseek($28,$31,0)|0);
  $32 = $type;
  $33 = $32 >> 8;
  $34 = (($33) + 8)|0;
  $35 = $34 | 8;
  $36 = ($35|0)==(56);
  if ($36) {
   $37 = HEAP32[944>>2]|0;
   $38 = (_ftell($37)|0);
   $39 = $len;
   $40 = $2;
   $41 = (($40) + 1)|0;
   _parse_ciff($38,$39,$41);
  }
  $42 = $type;
  $43 = ($42|0)==(2064);
  if ($43) {
   $44 = HEAP32[944>>2]|0;
   (_fread(613809,64,1,$44)|0);
  }
  $45 = $type;
  $46 = ($45|0)==(2058);
  if ($46) {
   $47 = HEAP32[944>>2]|0;
   (_fread(594275,64,1,$47)|0);
   $48 = HEAP32[944>>2]|0;
   $49 = (_strlen(594275)|0);
   $50 = (($49) - 63)|0;
   (_fseek($48,$50,1)|0);
   $51 = HEAP32[944>>2]|0;
   (_fread(594339,64,1,$51)|0);
  }
  $52 = $type;
  $53 = ($52|0)==(6160);
  if ($53) {
   $54 = (_get4()|0);
   $55 = $54&65535;
   HEAP16[580076>>1] = $55;
   $56 = (_get4()|0);
   $57 = $56&65535;
   HEAP16[580074>>1] = $57;
   $58 = (_get4()|0);
   $59 = (+_int_to_float($58));
   $60 = $59;
   HEAPF64[224>>3] = $60;
   $61 = (_get4()|0);
   HEAP32[293688>>2] = $61;
  }
  $62 = $type;
  $63 = ($62|0)==(6197);
  if ($63) {
   $64 = (_get4()|0);
   HEAP32[1060>>2] = $64;
  }
  $65 = $type;
  $66 = ($65|0)==(8199);
  if ($66) {
   $67 = HEAP32[944>>2]|0;
   $68 = (_ftell($67)|0);
   HEAP32[293668>>2] = $68;
   $69 = $len;
   HEAP32[1672>>2] = $69;
  }
  $70 = $type;
  $71 = ($70|0)==(6168);
  if ($71) {
   (_get4()|0);
   $72 = (_get4()|0);
   $73 = (+_int_to_float($72));
   $74 = -$73;
   $75 = $74;
   $76 = (+Math_pow(2.0,(+$75)));
   $77 = $76;
   HEAPF32[293680>>2] = $77;
   $78 = (_get4()|0);
   $79 = (+_int_to_float($78));
   $80 = $79 / 2.0;
   $81 = $80;
   $82 = (+Math_pow(2.0,(+$81)));
   $83 = $82;
   HEAPF32[293676>>2] = $83;
  }
  $84 = $type;
  $85 = ($84|0)==(4138);
  if ($85) {
   (_get4()|0);
   $86 = (_get2()|0);
   $87 = $86&65535;
   $88 = (+($87|0));
   $89 = $88 / 32.0;
   $90 = $89 - 4.0;
   $91 = (+Math_pow(2.0,(+$90)));
   $92 = $91 * 50.0;
   $93 = $92;
   HEAPF32[293672>>2] = $93;
   (_get2()|0);
   $94 = (_get2()|0);
   $95 = $94 << 16 >> 16;
   $96 = (+($95|0));
   $97 = $96 / 64.0;
   $98 = (+Math_pow(2.0,(+$97)));
   $99 = $98;
   HEAPF32[293676>>2] = $99;
   $100 = (_get2()|0);
   $101 = $100 << 16 >> 16;
   $102 = (0 - ($101))|0;
   $103 = (+($102|0));
   $104 = $103 / 32.0;
   $105 = (+Math_pow(2.0,(+$104)));
   $106 = $105;
   HEAPF32[293680>>2] = $106;
   (_get2()|0);
   $107 = (_get2()|0);
   $108 = $107&65535;
   $wbi = $108;
   $109 = $wbi;
   $110 = ($109|0)>(17);
   $$ = $110 ? 0 : $108;
   $wbi = $$;
   $111 = HEAP32[944>>2]|0;
   (_fseek($111,32,1)|0);
   $112 = +HEAPF32[293680>>2];
   $113 = $112;
   $114 = $113 > 1.0E+6;
   if ($114) {
    $115 = (_get2()|0);
    $116 = $115&65535;
    $117 = (+($116|0));
    $118 = $117 / 10.0;
    $119 = $118;
    HEAPF32[293680>>2] = $119;
   }
  }
  $120 = $type;
  $121 = ($120|0)==(4140);
  L31: do {
   if ($121) {
    $122 = (_get2()|0);
    $123 = $122&65535;
    $124 = ($123|0)>(512);
    $125 = HEAP32[944>>2]|0;
    if ($124) {
     (_fseek($125,118,1)|0);
     $c = 0;
     while(1) {
      $126 = $c;
      $127 = ($126|0)<(4);
      if (!($127)) {
       break L31;
      }
      $128 = (_get2()|0);
      $129 = (+($128&65535));
      $130 = $c;
      $131 = $130 ^ 2;
      $132 = (1528 + ($131<<2)|0);
      HEAPF32[$132>>2] = $129;
      $133 = $c;
      $134 = (($133) + 1)|0;
      $c = $134;
     }
    } else {
     (_fseek($125,98,1)|0);
     $c = 0;
     while(1) {
      $135 = $c;
      $136 = ($135|0)<(4);
      if (!($136)) {
       break L31;
      }
      $137 = (_get2()|0);
      $138 = (+($137&65535));
      $139 = $c;
      $140 = $c;
      $141 = $140 >> 1;
      $142 = $139 ^ $141;
      $143 = $142 ^ 1;
      $144 = (1528 + ($143<<2)|0);
      HEAPF32[$144>>2] = $138;
      $145 = $c;
      $146 = (($145) + 1)|0;
      $c = $146;
     }
    }
   }
  } while(0);
  $147 = $type;
  $148 = ($147|0)==(50);
  do {
   if ($148) {
    $149 = $len;
    $150 = ($149|0)==(768);
    if ($150) {
     $151 = HEAP32[944>>2]|0;
     (_fseek($151,72,1)|0);
     $c = 0;
     while(1) {
      $152 = $c;
      $153 = ($152|0)<(4);
      if (!($153)) {
       break;
      }
      $154 = (_get2()|0);
      $155 = $154&65535;
      $156 = (+($155|0));
      $157 = 1024.0 / $156;
      $158 = $157;
      $159 = $c;
      $160 = $c;
      $161 = $160 >> 1;
      $162 = $159 ^ $161;
      $163 = (1528 + ($162<<2)|0);
      HEAPF32[$163>>2] = $158;
      $164 = $c;
      $165 = (($164) + 1)|0;
      $c = $165;
     }
     $166 = $wbi;
     $167 = ($166|0)!=(0);
     if ($167) {
      break;
     }
     HEAPF32[1528>>2] = -1.0;
     break;
    }
    $168 = +HEAPF32[1528>>2];
    $169 = $168 != 0.0;
    if (!($169)) {
     $170 = (_get2()|0);
     $171 = $170&65535;
     $172 = HEAP16[$key>>1]|0;
     $173 = $172&65535;
     $174 = ($171|0)==($173|0);
     $175 = $wbi;
     if ($174) {
      $176 = (_strstr(594339,615270)|0);
      $177 = ($176|0)!=(0|0);
      $178 = $177 ? 615275 : 615294;
      $179 = (($178) + ($175)|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180 << 24 >> 24;
      $182 = (($181) - 48)|0;
      $183 = (($182) + 2)|0;
      $c = $183;
     } else {
      $184 = (615313 + ($175)|0);
      $185 = HEAP8[$184>>0]|0;
      $186 = $185 << 24 >> 24;
      $187 = (($186) - 48)|0;
      $c = $187;
      $188 = ((($key)) + 2|0);
      HEAP16[$188>>1] = 0;
      HEAP16[$key>>1] = 0;
     }
     $189 = HEAP32[944>>2]|0;
     $190 = $c;
     $191 = $190<<3;
     $192 = (78 + ($191))|0;
     (_fseek($189,$192,1)|0);
     $c = 0;
     while(1) {
      $193 = $c;
      $194 = ($193|0)<(4);
      if (!($194)) {
       break;
      }
      $195 = (_get2()|0);
      $196 = $195&65535;
      $197 = $c;
      $198 = $197 & 1;
      $199 = (($key) + ($198<<1)|0);
      $200 = HEAP16[$199>>1]|0;
      $201 = $200&65535;
      $202 = $196 ^ $201;
      $203 = (+($202|0));
      $204 = $c;
      $205 = $c;
      $206 = $205 >> 1;
      $207 = $204 ^ $206;
      $208 = $207 ^ 1;
      $209 = (1528 + ($208<<2)|0);
      HEAPF32[$209>>2] = $203;
      $210 = $c;
      $211 = (($210) + 1)|0;
      $c = $211;
     }
     $212 = $wbi;
     $213 = ($212|0)!=(0);
     if (!($213)) {
      HEAPF32[1528>>2] = -1.0;
     }
    }
   }
  } while(0);
  $214 = $type;
  $215 = ($214|0)==(4265);
  L64: do {
   if ($215) {
    $216 = $len;
    $217 = ($216|0)>(66);
    if ($217) {
     $218 = $wbi;
     $219 = (615332 + ($218)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = $220 << 24 >> 24;
     $222 = (($221) - 48)|0;
     $wbi = $222;
    }
    $223 = HEAP32[944>>2]|0;
    $224 = $wbi;
    $225 = $224<<3;
    $226 = (2 + ($225))|0;
    (_fseek($223,$226,1)|0);
    $c = 0;
    while(1) {
     $227 = $c;
     $228 = ($227|0)<(4);
     if (!($228)) {
      break L64;
     }
     $229 = (_get2()|0);
     $230 = (+($229&65535));
     $231 = $c;
     $232 = $c;
     $233 = $232 >> 1;
     $234 = $231 ^ $233;
     $235 = (1528 + ($234<<2)|0);
     HEAPF32[$235>>2] = $230;
     $236 = $c;
     $237 = (($236) + 1)|0;
     $c = $237;
    }
   }
  } while(0);
  $238 = $type;
  $239 = ($238|0)==(4144);
  if ($239) {
   $240 = $wbi;
   $241 = 98368 >> $240;
   $242 = $241 & 1;
   $243 = ($242|0)!=(0);
   if ($243) {
    _ciff_block_1030();
   }
  }
  $244 = $type;
  $245 = ($244|0)==(4145);
  if ($245) {
   (_get2()|0);
   $246 = (_get2()|0);
   HEAP16[580226>>1] = $246;
   $247 = (_get2()|0);
   HEAP16[580244>>1] = $247;
  }
  $248 = $type;
  $249 = ($248|0)==(20521);
  if ($249) {
   $250 = $len;
   $251 = $250 >> 16;
   $252 = (+($251|0));
   HEAPF32[294224>>2] = $252;
   $253 = $len;
   $254 = $253 & 65535;
   $255 = ($254|0)==(2);
   if ($255) {
    $256 = +HEAPF32[294224>>2];
    $257 = $256 / 32.0;
    HEAPF32[294224>>2] = $257;
   }
  }
  $258 = $type;
  $259 = ($258|0)==(22547);
  if ($259) {
   $260 = $len;
   $261 = (+_int_to_float($260));
   HEAPF32[964>>2] = $261;
  }
  $262 = $type;
  $263 = ($262|0)==(22548);
  if ($263) {
   $264 = $len;
   $265 = (+_int_to_float($264));
   HEAPF32[968>>2] = $265;
  }
  $266 = $type;
  $267 = ($266|0)==(22551);
  if ($267) {
   $268 = $len;
   HEAP32[293684>>2] = $268;
  }
  $269 = $type;
  $270 = ($269|0)==(22580);
  if ($270) {
   $271 = $len;
   HEAP32[1072>>2] = $271;
  }
  $272 = $type;
  $273 = ($272|0)==(22542);
  if ($273) {
   $274 = $len;
   HEAP32[31164>>2] = $274;
  }
  $275 = $type;
  $276 = ($275|0)==(6158);
  if ($276) {
   $277 = (_get4()|0);
   HEAP32[31164>>2] = $277;
  }
  $278 = HEAP32[944>>2]|0;
  $279 = $save;
  (_fseek($278,$279,0)|0);
 }
 STACKTOP = sp;return;
}
function _parse_rollei() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $line = 0, $t = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $line = sp + 80|0;
 $t = sp + 28|0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,0,0)|0);
 dest=$t; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 while(1) {
  $1 = HEAP32[944>>2]|0;
  (_fgets($line,128,$1)|0);
  $2 = (_strchr($line,61)|0);
  $val = $2;
  $3 = ($2|0)!=(0|0);
  if ($3) {
   $4 = $val;
   $5 = ((($4)) + 1|0);
   $val = $5;
   HEAP8[$4>>0] = 0;
  } else {
   $6 = (_strlen($line)|0);
   $7 = (($line) + ($6)|0);
   $val = $7;
  }
  $8 = (_strcmp($line,615343)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $10 = $val;
   $11 = ((($t)) + 12|0);
   $12 = ((($t)) + 16|0);
   $13 = ((($t)) + 20|0);
   HEAP32[$vararg_buffer>>2] = $11;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $12;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $13;
   (_sscanf($10,593968,$vararg_buffer)|0);
  }
  $14 = (_strcmp($line,615347)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   $16 = $val;
   $17 = ((($t)) + 8|0);
   $18 = ((($t)) + 4|0);
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $18;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $t;
   (_sscanf($16,615351,$vararg_buffer3)|0);
  }
  $19 = (_strcmp($line,615360)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $21 = $val;
   $22 = (_atoi($21)|0);
   HEAP32[293668>>2] = $22;
  }
  $23 = (_strcmp($line,615364)|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   $25 = $val;
   $26 = (_atoi($25)|0);
   $27 = $26&65535;
   HEAP16[580226>>1] = $27;
  }
  $28 = (_strcmp($line,615368)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = $val;
   $31 = (_atoi($30)|0);
   $32 = $31&65535;
   HEAP16[580244>>1] = $32;
  }
  $33 = (_strcmp($line,615372)|0);
  $34 = ($33|0)!=(0);
  if (!($34)) {
   $35 = $val;
   $36 = (_atoi($35)|0);
   $37 = $36&65535;
   HEAP16[580260>>1] = $37;
  }
  $38 = (_strcmp($line,615376)|0);
  $39 = ($38|0)!=(0);
  if (!($39)) {
   $40 = $val;
   $41 = (_atoi($40)|0);
   $42 = $41&65535;
   HEAP16[580262>>1] = $42;
  }
  $43 = (_strncmp($line,615380,4)|0);
  $44 = ($43|0)!=(0);
  if (!($44)) {
   break;
  }
 }
 $45 = HEAP32[293668>>2]|0;
 $46 = HEAP16[580260>>1]|0;
 $47 = $46&65535;
 $48 = HEAP16[580262>>1]|0;
 $49 = $48&65535;
 $50 = Math_imul($47, $49)|0;
 $51 = $50<<1;
 $52 = (($45) + ($51))|0;
 HEAP32[1524>>2] = $52;
 $53 = ((($t)) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) - 1900)|0;
 HEAP32[$53>>2] = $55;
 $56 = ((($t)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) - 1)|0;
 HEAP32[$56>>2] = $58;
 $59 = (_mktime(($t|0))|0);
 $60 = ($59|0)>(0);
 if (!($60)) {
  (_strcpy(594275,615385)|0);
  (_strcpy(594339,615392)|0);
  HEAP32[294628>>2] = 37;
  STACKTOP = sp;return;
 }
 $61 = (_mktime(($t|0))|0);
 HEAP32[31164>>2] = $61;
 (_strcpy(594275,615385)|0);
 (_strcpy(594339,615392)|0);
 HEAP32[294628>>2] = 37;
 STACKTOP = sp;return;
}
function _parse_sinar_ia() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp = 0, $entries = 0, $off = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 16|0;
 HEAP16[448960>>1] = 18761;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,4,0)|0);
 $1 = (_get4()|0);
 $entries = $1;
 $2 = HEAP32[944>>2]|0;
 $3 = (_get4()|0);
 (_fseek($2,$3,0)|0);
 while(1) {
  $4 = $entries;
  $5 = (($4) + -1)|0;
  $entries = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = (_get4()|0);
  $off = $7;
  (_get4()|0);
  $8 = HEAP32[944>>2]|0;
  (_fread($str,8,1,$8)|0);
  $9 = (_strcmp($str,615401)|0);
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $off;
   HEAP32[1520>>2] = $11;
  }
  $12 = (_strcmp($str,615406)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $14 = $off;
   HEAP32[293668>>2] = $14;
  }
  $15 = (_strcmp($str,615412)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   continue;
  }
  $17 = $off;
  HEAP32[1524>>2] = $17;
 }
 $18 = HEAP32[944>>2]|0;
 $19 = HEAP32[1520>>2]|0;
 $20 = (($19) + 20)|0;
 (_fseek($18,$20,0)|0);
 $21 = HEAP32[944>>2]|0;
 (_fread(594275,64,1,$21)|0);
 HEAP8[(594338)>>0] = 0;
 $22 = (_strchr(594275,32)|0);
 $cp = $22;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $cp;
  $25 = ((($24)) + 1|0);
  (_strcpy(594339,$25)|0);
  $26 = $cp;
  HEAP8[$26>>0] = 0;
 }
 $27 = (_get2()|0);
 HEAP16[580226>>1] = $27;
 $28 = (_get2()|0);
 HEAP16[580244>>1] = $28;
 HEAP32[31028>>2] = 24;
 (_get4()|0);
 $29 = (_get2()|0);
 HEAP16[580260>>1] = $29;
 $30 = (_get2()|0);
 HEAP16[580262>>1] = $30;
 HEAP32[294628>>2] = 34;
 HEAP32[1040>>2] = 16383;
 STACKTOP = sp;return;
}
function _parse_phase_one($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $cp = 0, $data = 0, $entries = 0, $i = 0, $len = 0, $romm_cam = 0, $save = 0, $tag = 0, $type = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $romm_cam = sp + 4|0;
 $0 = $base;
 dest=1688; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = HEAP32[944>>2]|0;
 $2 = $0;
 (_fseek($1,$2,0)|0);
 $3 = (_get4()|0);
 $4 = $3 & 65535;
 $5 = $4&65535;
 HEAP16[448960>>1] = $5;
 $6 = (_get4()|0);
 $7 = $6 >>> 8;
 $8 = ($7|0)!=(5398903);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[944>>2]|0;
 $10 = (_get4()|0);
 $11 = $0;
 $12 = (($10) + ($11))|0;
 (_fseek($9,$12,0)|0);
 $13 = (_get4()|0);
 $entries = $13;
 (_get4()|0);
 while(1) {
  $14 = $entries;
  $15 = (($14) + -1)|0;
  $entries = $15;
  $16 = ($14|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = (_get4()|0);
  $tag = $17;
  $18 = (_get4()|0);
  $type = $18;
  $19 = (_get4()|0);
  $len = $19;
  $20 = (_get4()|0);
  $data = $20;
  $21 = HEAP32[944>>2]|0;
  $22 = (_ftell($21)|0);
  $save = $22;
  $23 = HEAP32[944>>2]|0;
  $24 = $0;
  $25 = $data;
  $26 = (($24) + ($25))|0;
  (_fseek($23,$26,0)|0);
  $27 = $tag;
  L7: do {
   switch ($27|0) {
   case 256:  {
    $28 = $data;
    $29 = $28 & 3;
    $30 = (615417 + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = (($32) - 48)|0;
    HEAP32[293688>>2] = $33;
    break;
   }
   case 262:  {
    $i = 0;
    while(1) {
     $34 = $i;
     $35 = ($34>>>0)<(9);
     if (!($35)) {
      break;
     }
     $36 = (+_getreal(11));
     $37 = $36;
     $38 = $i;
     $39 = (($romm_cam) + ($38<<2)|0);
     HEAPF32[$39>>2] = $37;
     $40 = $i;
     $41 = (($40) + 1)|0;
     $i = $41;
    }
    _romm_coeff($romm_cam);
    break;
   }
   case 263:  {
    $c = 0;
    while(1) {
     $42 = $c;
     $43 = ($42>>>0)<(3);
     if (!($43)) {
      break L7;
     }
     $44 = (+_getreal(11));
     $45 = $44;
     $46 = $c;
     $47 = (1528 + ($46<<2)|0);
     HEAPF32[$47>>2] = $45;
     $48 = $c;
     $49 = (($48) + 1)|0;
     $c = $49;
    }
    break;
   }
   case 264:  {
    $50 = $data;
    $51 = $50&65535;
    HEAP16[580226>>1] = $51;
    break;
   }
   case 265:  {
    $52 = $data;
    $53 = $52&65535;
    HEAP16[580244>>1] = $53;
    break;
   }
   case 266:  {
    $54 = $data;
    $55 = $54&65535;
    HEAP16[448956>>1] = $55;
    break;
   }
   case 267:  {
    $56 = $data;
    $57 = $56&65535;
    HEAP16[448958>>1] = $57;
    break;
   }
   case 268:  {
    $58 = $data;
    $59 = $58&65535;
    HEAP16[580076>>1] = $59;
    break;
   }
   case 269:  {
    $60 = $data;
    $61 = $60&65535;
    HEAP16[580074>>1] = $61;
    break;
   }
   case 270:  {
    $62 = $data;
    HEAP32[1688>>2] = $62;
    break;
   }
   case 271:  {
    $63 = $data;
    $64 = $0;
    $65 = (($63) + ($64))|0;
    HEAP32[1524>>2] = $65;
    break;
   }
   case 272:  {
    $66 = $data;
    $67 = $0;
    $68 = (($66) + ($67))|0;
    HEAP32[1520>>2] = $68;
    $69 = $len;
    HEAP32[1684>>2] = $69;
    break;
   }
   case 274:  {
    $70 = $save;
    $71 = (($70) - 4)|0;
    HEAP32[(1692)>>2] = $71;
    break;
   }
   case 528:  {
    $72 = $data;
    $73 = (+_int_to_float($72));
    HEAPF32[(1720)>>2] = $73;
    break;
   }
   case 538:  {
    $74 = $data;
    HEAP32[(1696)>>2] = $74;
    break;
   }
   case 540:  {
    $75 = $data;
    $76 = $0;
    $77 = (($75) + ($76))|0;
    HEAP32[1784>>2] = $77;
    break;
   }
   case 541:  {
    $78 = $data;
    HEAP32[(1700)>>2] = $78;
    break;
   }
   case 546:  {
    $79 = $data;
    HEAP32[(1704)>>2] = $79;
    break;
   }
   case 547:  {
    $80 = $data;
    $81 = $0;
    $82 = (($80) + ($81))|0;
    HEAP32[(1708)>>2] = $82;
    break;
   }
   case 548:  {
    $83 = $data;
    HEAP32[(1712)>>2] = $83;
    break;
   }
   case 549:  {
    $84 = $data;
    $85 = $0;
    $86 = (($84) + ($85))|0;
    HEAP32[(1716)>>2] = $86;
    break;
   }
   case 769:  {
    HEAP8[(594402)>>0] = 0;
    $87 = HEAP32[944>>2]|0;
    (_fread(594339,1,63,$87)|0);
    $88 = (_strstr(594339,615422)|0);
    $cp = $88;
    $89 = ($88|0)!=(0|0);
    if ($89) {
     $90 = $cp;
     HEAP8[$90>>0] = 0;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $91 = HEAP32[944>>2]|0;
  $92 = $save;
  (_fseek($91,$92,0)|0);
 }
 $93 = HEAP32[1688>>2]|0;
 $94 = ($93|0)<(3);
 $95 = $94 ? 7 : 8;
 HEAP32[31028>>2] = $95;
 HEAP32[1040>>2] = 65535;
 (_strcpy(594275,615430)|0);
 $96 = HEAP8[594339>>0]|0;
 $97 = ($96<<24>>24)!=(0);
 if ($97) {
  STACKTOP = sp;return;
 }
 $98 = HEAP16[580244>>1]|0;
 $99 = $98&65535;
 switch ($99|0) {
 case 2060:  {
  (_strcpy(594339,615440)|0);
  STACKTOP = sp;return;
  break;
 }
 case 2682:  {
  (_strcpy(594339,615451)|0);
  STACKTOP = sp;return;
  break;
 }
 case 4128:  {
  (_strcpy(594339,615456)|0);
  STACKTOP = sp;return;
  break;
 }
 case 5488:  {
  (_strcpy(594339,615461)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _parse_fuji($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $c = 0, $entries = 0, $len = 0, $save = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = HEAP32[944>>2]|0;
 $2 = $0;
 (_fseek($1,$2,0)|0);
 $3 = (_get4()|0);
 $entries = $3;
 $4 = $entries;
 $5 = ($4>>>0)>(255);
 if ($5) {
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = $entries;
  $7 = (($6) + -1)|0;
  $entries = $7;
  $8 = ($6|0)!=(0);
  if (!($8)) {
   break;
  }
  $9 = (_get2()|0);
  $10 = $9&65535;
  $tag = $10;
  $11 = (_get2()|0);
  $12 = $11&65535;
  $len = $12;
  $13 = HEAP32[944>>2]|0;
  $14 = (_ftell($13)|0);
  $save = $14;
  $15 = $tag;
  $16 = ($15|0)==(256);
  L6: do {
   if ($16) {
    $17 = (_get2()|0);
    HEAP16[580244>>1] = $17;
    $18 = (_get2()|0);
    HEAP16[580226>>1] = $18;
   } else {
    $19 = $tag;
    $20 = ($19|0)==(289);
    if ($20) {
     $21 = (_get2()|0);
     HEAP16[580074>>1] = $21;
     $22 = (_get2()|0);
     HEAP16[580076>>1] = $22;
     $23 = $22&65535;
     $24 = ($23|0)==(4284);
     if (!($24)) {
      break;
     }
     $25 = HEAP16[580076>>1]|0;
     $26 = $25&65535;
     $27 = (($26) + 3)|0;
     $28 = $27&65535;
     HEAP16[580076>>1] = $28;
     break;
    }
    $29 = $tag;
    $30 = ($29|0)==(304);
    if ($30) {
     $31 = HEAP32[944>>2]|0;
     $32 = (_getc_unlocked($31)|0);
     $33 = $32 >> 7;
     HEAP32[31032>>2] = $33;
     $34 = HEAP32[944>>2]|0;
     $35 = (_getc_unlocked($34)|0);
     $36 = $35 & 8;
     $37 = ($36|0)!=(0);
     $38 = $37 ^ 1;
     $39 = $38&1;
     $40 = $39&65535;
     HEAP16[589194>>1] = $40;
     break;
    }
    $41 = $tag;
    $42 = ($41|0)==(305);
    if ($42) {
     HEAP32[776>>2] = 9;
     $c = 0;
     while(1) {
      $43 = $c;
      $44 = ($43>>>0)<(36);
      if (!($44)) {
       break L6;
      }
      $45 = HEAP32[944>>2]|0;
      $46 = (_getc_unlocked($45)|0);
      $47 = $46 & 3;
      $48 = $47&255;
      $49 = $c;
      $50 = (35 - ($49))|0;
      $51 = (615466 + ($50)|0);
      HEAP8[$51>>0] = $48;
      $52 = $c;
      $53 = (($52) + 1)|0;
      $c = $53;
     }
    }
    $54 = $tag;
    $55 = ($54|0)==(12272);
    if ($55) {
     $c = 0;
     while(1) {
      $56 = $c;
      $57 = ($56>>>0)<(4);
      if (!($57)) {
       break L6;
      }
      $58 = (_get2()|0);
      $59 = (+($58&65535));
      $60 = $c;
      $61 = $60 ^ 1;
      $62 = (1528 + ($61<<2)|0);
      HEAPF32[$62>>2] = $59;
      $63 = $c;
      $64 = (($63) + 1)|0;
      $c = $64;
     }
    }
    $65 = $tag;
    $66 = ($65|0)==(49152);
    if ($66) {
     $67 = HEAP16[448960>>1]|0;
     $68 = $67 << 16 >> 16;
     $c = $68;
     HEAP16[448960>>1] = 18761;
     while(1) {
      $69 = (_get4()|0);
      $tag = $69;
      $70 = HEAP16[580226>>1]|0;
      $71 = $70&65535;
      $72 = ($69>>>0)>($71>>>0);
      if (!($72)) {
       break;
      }
     }
     $73 = $tag;
     $74 = $73&65535;
     HEAP16[580076>>1] = $74;
     $75 = (_get4()|0);
     $76 = $75&65535;
     HEAP16[580074>>1] = $76;
     $77 = $c;
     $78 = $77&65535;
     HEAP16[448960>>1] = $78;
    }
   }
  } while(0);
  $79 = HEAP32[944>>2]|0;
  $80 = $save;
  $81 = $len;
  $82 = (($80) + ($81))|0;
  (_fseek($79,$82,0)|0);
 }
 $83 = HEAP32[31032>>2]|0;
 $84 = HEAP16[580074>>1]|0;
 $85 = $84&65535;
 $86 = $85 << $83;
 $87 = $86&65535;
 HEAP16[580074>>1] = $87;
 $88 = HEAP32[31032>>2]|0;
 $89 = HEAP16[580076>>1]|0;
 $90 = $89&65535;
 $91 = $90 >> $88;
 $92 = $91&65535;
 HEAP16[580076>>1] = $92;
 STACKTOP = sp;return;
}
function _parse_jpeg($offset) {
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hlen = 0, $len = 0, $mark = 0, $or$cond = 0, $or$cond3 = 0, $save = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $offset;
 $2 = HEAP32[944>>2]|0;
 $3 = $1;
 (_fseek($2,$3,0)|0);
 $4 = HEAP32[944>>2]|0;
 $5 = (_getc_unlocked($4)|0);
 $6 = ($5|0)!=(255);
 if (!($6)) {
  $7 = HEAP32[944>>2]|0;
  $8 = (_getc_unlocked($7)|0);
  $9 = ($8|0)!=(216);
  if (!($9)) {
   while(1) {
    $10 = HEAP32[944>>2]|0;
    $11 = (_getc_unlocked($10)|0);
    $12 = ($11|0)==(255);
    if (!($12)) {
     break;
    }
    $13 = HEAP32[944>>2]|0;
    $14 = (_getc_unlocked($13)|0);
    $mark = $14;
    $15 = ($14|0)!=(218);
    if (!($15)) {
     break;
    }
    HEAP16[448960>>1] = 19789;
    $16 = (_get2()|0);
    $17 = $16&65535;
    $18 = (($17) - 2)|0;
    $len = $18;
    $19 = HEAP32[944>>2]|0;
    $20 = (_ftell($19)|0);
    $save = $20;
    $21 = $mark;
    $22 = ($21|0)==(192);
    $23 = $mark;
    $24 = ($23|0)==(195);
    $or$cond = $22 | $24;
    $25 = $mark;
    $26 = ($25|0)==(201);
    $or$cond3 = $or$cond | $26;
    if ($or$cond3) {
     $27 = HEAP32[944>>2]|0;
     (_getc_unlocked($27)|0);
     $28 = (_get2()|0);
     HEAP16[580244>>1] = $28;
     $29 = (_get2()|0);
     HEAP16[580226>>1] = $29;
    }
    $30 = (_get2()|0);
    HEAP16[448960>>1] = $30;
    $31 = (_get4()|0);
    $hlen = $31;
    $32 = (_get4()|0);
    $33 = ($32|0)==(1212498256);
    if ($33) {
     $34 = $save;
     $35 = $hlen;
     $36 = (($34) + ($35))|0;
     $37 = $len;
     $38 = $hlen;
     $39 = (($37) - ($38))|0;
     _parse_ciff($36,$39,0);
    }
    $40 = $save;
    $41 = (($40) + 6)|0;
    $42 = (_parse_tiff($41)|0);
    $43 = ($42|0)!=(0);
    if ($43) {
     _apply_tiff();
    }
    $44 = HEAP32[944>>2]|0;
    $45 = $save;
    $46 = $len;
    $47 = (($45) + ($46))|0;
    (_fseek($44,$47,0)|0);
   }
   $0 = 1;
   $48 = $0;
   STACKTOP = sp;return ($48|0);
  }
 }
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;return ($48|0);
}
function _parse_riff() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $date = 0, $end = 0, $i = 0, $month = 0, $or$cond = 0, $or$cond3 = 0, $size = 0, $t = 0, $tag = 0, $vararg_buffer = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tag = sp + 208|0;
 $date = sp + 144|0;
 $month = sp + 80|0;
 $t = sp + 24|0;
 HEAP16[448960>>1] = 18761;
 $0 = HEAP32[944>>2]|0;
 (_fread($tag,4,1,$0)|0);
 $1 = (_get4()|0);
 $size = $1;
 $2 = HEAP32[944>>2]|0;
 $3 = (_ftell($2)|0);
 $4 = $size;
 $5 = (($3) + ($4))|0;
 $end = $5;
 $6 = (_memcmp($tag,615550,4)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = (_memcmp($tag,615555,4)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $19 = (_memcmp($tag,615560,4)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    while(1) {
     $21 = HEAP32[944>>2]|0;
     $22 = (_ftell($21)|0);
     $23 = (($22) + 7)|0;
     $24 = $end;
     $25 = ($23>>>0)<($24>>>0);
     if (!($25)) {
      break;
     }
     $26 = (_get2()|0);
     $27 = $26&65535;
     $i = $27;
     $28 = (_get2()|0);
     $29 = $28&65535;
     $size = $29;
     $30 = $i;
     $31 = (($30) + 1)|0;
     $32 = $31 >>> 1;
     $33 = ($32|0)==(10);
     $34 = $size;
     $35 = ($34|0)==(20);
     $or$cond = $33 & $35;
     if ($or$cond) {
      _get_timestamp(0);
      continue;
     } else {
      $36 = HEAP32[944>>2]|0;
      $37 = $size;
      (_fseek($36,$37,1)|0);
      continue;
     }
    }
    STACKTOP = sp;return;
   }
   $38 = (_memcmp($tag,615565,4)|0);
   $39 = ($38|0)==(0);
   $40 = $size;
   $41 = ($40>>>0)<(64);
   $or$cond3 = $39 & $41;
   if (!($or$cond3)) {
    $67 = HEAP32[944>>2]|0;
    $68 = $size;
    (_fseek($67,$68,1)|0);
    STACKTOP = sp;return;
   }
   $42 = HEAP32[944>>2]|0;
   (_fread($date,64,1,$42)|0);
   $43 = $size;
   $44 = (($date) + ($43)|0);
   HEAP8[$44>>0] = 0;
   dest=$t; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $45 = ((($t)) + 12|0);
   $46 = ((($t)) + 8|0);
   $47 = ((($t)) + 4|0);
   $48 = ((($t)) + 20|0);
   HEAP32[$vararg_buffer>>2] = $month;
   $vararg_ptr5 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $45;
   $vararg_ptr6 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $46;
   $vararg_ptr7 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr7>>2] = $47;
   $vararg_ptr8 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr8>>2] = $t;
   $vararg_ptr9 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr9>>2] = $48;
   $49 = (_sscanf($date,615570,$vararg_buffer)|0);
   $50 = ($49|0)==(6);
   if (!($50)) {
    STACKTOP = sp;return;
   }
   $i = 0;
   while(1) {
    $51 = $i;
    $52 = ($51>>>0)<(12);
    if (!($52)) {
     break;
    }
    $53 = $i;
    $54 = (615502 + ($53<<2)|0);
    $55 = (_strcasecmp($54,$month)|0);
    $56 = ($55|0)!=(0);
    if (!($56)) {
     break;
    }
    $57 = $i;
    $58 = (($57) + 1)|0;
    $i = $58;
   }
   $59 = $i;
   $60 = ((($t)) + 16|0);
   HEAP32[$60>>2] = $59;
   $61 = ((($t)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) - 1900)|0;
   HEAP32[$61>>2] = $63;
   $64 = (_mktime(($t|0))|0);
   $65 = ($64|0)>(0);
   if (!($65)) {
    STACKTOP = sp;return;
   }
   $66 = (_mktime(($t|0))|0);
   HEAP32[31164>>2] = $66;
   STACKTOP = sp;return;
  }
 }
 (_get4()|0);
 while(1) {
  $10 = HEAP32[944>>2]|0;
  $11 = (_ftell($10)|0);
  $12 = (($11) + 7)|0;
  $13 = $end;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 21;
   break;
  }
  $15 = HEAP32[944>>2]|0;
  $16 = (_feof($15)|0);
  $17 = ($16|0)!=(0);
  $18 = $17 ^ 1;
  if (!($18)) {
   label = 21;
   break;
  }
  _parse_riff();
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function _parse_qt($end) {
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $save = 0, $size = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tag = sp + 12|0;
 $0 = $end;
 HEAP16[448960>>1] = 19789;
 while(1) {
  $1 = HEAP32[944>>2]|0;
  $2 = (_ftell($1)|0);
  $3 = (($2) + 7)|0;
  $4 = $0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   label = 11;
   break;
  }
  $6 = HEAP32[944>>2]|0;
  $7 = (_ftell($6)|0);
  $save = $7;
  $8 = (_get4()|0);
  $size = $8;
  $9 = ($8>>>0)<(8);
  if ($9) {
   label = 11;
   break;
  }
  $10 = HEAP32[944>>2]|0;
  (_fread($tag,4,1,$10)|0);
  $11 = (_memcmp($tag,615592,4)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = (_memcmp($tag,615597,4)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = (_memcmp($tag,615602,4)|0);
    $16 = ($15|0)!=(0);
    if (!($16)) {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $17 = $save;
   $18 = $size;
   $19 = (($17) + ($18))|0;
   _parse_qt($19);
  }
  $20 = (_memcmp($tag,615607,4)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $22 = HEAP32[944>>2]|0;
   $23 = (_ftell($22)|0);
   (_parse_jpeg($23)|0);
  }
  $24 = HEAP32[944>>2]|0;
  $25 = $save;
  $26 = $size;
  $27 = (($25) + ($26))|0;
  (_fseek($24,$27,0)|0);
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _parse_smal($offset,$fsize) {
 $offset = $offset|0;
 $fsize = $fsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $ver = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $offset;
 $1 = $fsize;
 $2 = HEAP32[944>>2]|0;
 $3 = $0;
 $4 = (($3) + 2)|0;
 (_fseek($2,$4,0)|0);
 HEAP16[448960>>1] = 18761;
 $5 = HEAP32[944>>2]|0;
 $6 = (_getc_unlocked($5)|0);
 $ver = $6;
 $7 = $ver;
 $8 = ($7|0)==(6);
 if ($8) {
  $9 = HEAP32[944>>2]|0;
  (_fseek($9,5,1)|0);
 }
 $10 = (_get4()|0);
 $11 = $1;
 $12 = ($10|0)!=($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = $ver;
 $14 = ($13|0)>(6);
 if ($14) {
  $15 = (_get4()|0);
  HEAP32[1524>>2] = $15;
 }
 $16 = (_get2()|0);
 HEAP16[580074>>1] = $16;
 HEAP16[580244>>1] = $16;
 $17 = (_get2()|0);
 HEAP16[580076>>1] = $17;
 HEAP16[580226>>1] = $17;
 (_strcpy(594275,615612)|0);
 $18 = $ver;
 $19 = HEAP16[580076>>1]|0;
 $20 = $19&65535;
 $21 = HEAP16[580074>>1]|0;
 $22 = $21&65535;
 HEAP32[$vararg_buffer>>2] = $18;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $20;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $22;
 (_sprintf(594339,615617,$vararg_buffer)|0);
 $23 = $ver;
 $24 = ($23|0)==(6);
 if ($24) {
  HEAP32[31028>>2] = 38;
 }
 $25 = $ver;
 $26 = ($25|0)==(9);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 HEAP32[31028>>2] = 39;
 STACKTOP = sp;return;
}
function _parse_cine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $off_head = 0, $off_image = 0, $off_setup = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP16[448960>>1] = 18761;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,4,0)|0);
 $1 = (_get2()|0);
 $2 = $1&65535;
 $3 = ($2|0)==(2);
 $4 = $3&1;
 HEAP32[1508>>2] = $4;
 $5 = HEAP32[944>>2]|0;
 (_fseek($5,14,1)|0);
 $6 = (_get4()|0);
 $7 = HEAP32[1508>>2]|0;
 $8 = Math_imul($7, $6)|0;
 HEAP32[1508>>2] = $8;
 $9 = (_get4()|0);
 $off_head = $9;
 $10 = (_get4()|0);
 $off_setup = $10;
 $11 = (_get4()|0);
 $off_image = $11;
 $12 = (_get4()|0);
 HEAP32[31164>>2] = $12;
 $13 = (_get4()|0);
 $i = $13;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $i;
  HEAP32[31164>>2] = $15;
 }
 $16 = HEAP32[944>>2]|0;
 $17 = $off_head;
 $18 = (($17) + 4)|0;
 (_fseek($16,$18,0)|0);
 $19 = (_get4()|0);
 $20 = $19&65535;
 HEAP16[580226>>1] = $20;
 $21 = (_get4()|0);
 $22 = $21&65535;
 HEAP16[580244>>1] = $22;
 (_get2()|0);
 $23 = (_get2()|0);
 $24 = $23&65535;
 switch ($24|0) {
 case 8:  {
  HEAP32[31028>>2] = 13;
  break;
 }
 case 16:  {
  HEAP32[31028>>2] = 24;
  break;
 }
 default: {
 }
 }
 $25 = HEAP32[944>>2]|0;
 $26 = $off_setup;
 $27 = (($26) + 792)|0;
 (_fseek($25,$27,0)|0);
 (_strcpy(594275,615627)|0);
 $28 = (_get4()|0);
 HEAP32[$vararg_buffer>>2] = $28;
 (_sprintf(594339,614269,$vararg_buffer)|0);
 $29 = HEAP32[944>>2]|0;
 (_fseek($29,12,1)|0);
 $30 = (_get4()|0);
 $i = $30;
 $31 = $30 & 16777215;
 switch ($31|0) {
 case 3:  {
  HEAP32[776>>2] = -1802201964;
  break;
 }
 case 4:  {
  HEAP32[776>>2] = 1229539657;
  break;
 }
 default: {
  HEAP32[1508>>2] = 0;
 }
 }
 $32 = HEAP32[944>>2]|0;
 (_fseek($32,72,1)|0);
 $33 = (_get4()|0);
 $34 = (($33) + 3600)|0;
 $35 = (($34>>>0) % 360)&-1;
 switch ($35|0) {
 case 270:  {
  HEAP32[293688>>2] = 4;
  break;
 }
 case 180:  {
  HEAP32[293688>>2] = 1;
  break;
 }
 case 90:  {
  HEAP32[293688>>2] = 7;
  break;
 }
 case 0:  {
  HEAP32[293688>>2] = 2;
  break;
 }
 default: {
 }
 }
 $36 = (+_getreal(11));
 $37 = $36;
 HEAPF32[1528>>2] = $37;
 $38 = (+_getreal(11));
 $39 = $38;
 HEAPF32[(1536)>>2] = $39;
 $40 = (_get4()|0);
 $41 = -1 << $40;
 $42 = $41 ^ -1;
 HEAP32[1040>>2] = $42;
 $43 = HEAP32[944>>2]|0;
 (_fseek($43,668,1)|0);
 $44 = (_get4()|0);
 $45 = (+($44>>>0));
 $46 = $45 / 1.0E+9;
 $47 = $46;
 HEAPF32[293680>>2] = $47;
 $48 = HEAP32[944>>2]|0;
 $49 = $off_image;
 (_fseek($48,$49,0)|0);
 $50 = HEAP32[664>>2]|0;
 $51 = HEAP32[1508>>2]|0;
 $52 = ($50>>>0)<($51>>>0);
 if (!($52)) {
  $56 = (_get4()|0);
  $57 = (_i64Add(($56|0),0,8,0)|0);
  $58 = tempRet0;
  HEAP32[1524>>2] = $57;
  $59 = (_get4()|0);
  $60 = HEAP32[1524>>2]|0;
  $61 = ($60|0)<(0);
  $62 = $61 << 31 >> 31;
  $63 = (_i64Add(($60|0),($62|0),0,($59|0))|0);
  $64 = tempRet0;
  HEAP32[1524>>2] = $63;
  STACKTOP = sp;return;
 }
 $53 = HEAP32[944>>2]|0;
 $54 = HEAP32[664>>2]|0;
 $55 = $54<<3;
 (_fseek($53,$55,1)|0);
 $56 = (_get4()|0);
 $57 = (_i64Add(($56|0),0,8,0)|0);
 $58 = tempRet0;
 HEAP32[1524>>2] = $57;
 $59 = (_get4()|0);
 $60 = HEAP32[1524>>2]|0;
 $61 = ($60|0)<(0);
 $62 = $61 << 31 >> 31;
 $63 = (_i64Add(($60|0),($62|0),0,($59|0))|0);
 $64 = tempRet0;
 HEAP32[1524>>2] = $63;
 STACKTOP = sp;return;
}
function _parse_redcine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $rdvo = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP16[448960>>1] = 19789;
 HEAP32[1508>>2] = 0;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,52,0)|0);
 $1 = (_get4()|0);
 $2 = $1&65535;
 HEAP16[580076>>1] = $2;
 $3 = (_get4()|0);
 $4 = $3&65535;
 HEAP16[580074>>1] = $4;
 $5 = HEAP32[944>>2]|0;
 (_fseek($5,0,2)|0);
 $6 = HEAP32[944>>2]|0;
 $7 = HEAP32[944>>2]|0;
 $8 = (___ftello($7)|0);
 $9 = $8 & 511;
 $i = $9;
 $10 = (0 - ($9))|0;
 (_fseek($6,$10,1)|0);
 $11 = (_get4()|0);
 $12 = $i;
 $13 = ($11|0)!=($12|0);
 if (!($13)) {
  $14 = (_get4()|0);
  $15 = ($14|0)!=(1380273986);
  if (!($15)) {
   $33 = (_get4()|0);
   $rdvo = $33;
   $34 = HEAP32[944>>2]|0;
   (_fseek($34,12,1)|0);
   $35 = (_get4()|0);
   HEAP32[1508>>2] = $35;
   $36 = HEAP32[944>>2]|0;
   $37 = $rdvo;
   $38 = (($37) + 8)|0;
   $39 = HEAP32[664>>2]|0;
   $40 = $39<<2;
   $41 = (($38) + ($40))|0;
   (___fseeko($36,$41,0)|0);
   $42 = (_get4()|0);
   HEAP32[1524>>2] = $42;
   STACKTOP = sp;return;
  }
 }
 $16 = HEAP32[447952>>2]|0;
 $17 = HEAP32[780>>2]|0;
 HEAP32[$vararg_buffer>>2] = $17;
 (_fprintf($16,615632,$vararg_buffer)|0);
 $18 = HEAP32[944>>2]|0;
 (_fseek($18,0,0)|0);
 while(1) {
  $19 = (_get4()|0);
  $len = $19;
  $20 = ($19|0)!=(-1);
  if (!($20)) {
   break;
  }
  $21 = (_get4()|0);
  $22 = ($21|0)==(1380271190);
  if ($22) {
   $23 = HEAP32[1508>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[1508>>2] = $24;
   $25 = HEAP32[664>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[944>>2]|0;
    $28 = (___ftello($27)|0);
    $29 = (($28) - 8)|0;
    HEAP32[1524>>2] = $29;
   }
  }
  $30 = HEAP32[944>>2]|0;
  $31 = $len;
  $32 = (($31) - 8)|0;
  (_fseek($30,$32,1)|0);
 }
 STACKTOP = sp;return;
}
function _foveon_gets($offset,$str,$len) {
 $offset = $offset|0;
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $offset;
 $1 = $str;
 $2 = $len;
 $3 = HEAP32[944>>2]|0;
 $4 = $0;
 (_fseek($3,$4,0)|0);
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $2;
  $7 = (($6) - 1)|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = (_get2()|0);
  $10 = $9&255;
  $11 = $i;
  $12 = $1;
  $13 = (($12) + ($11)|0);
  HEAP8[$13>>0] = $10;
  $14 = $10 << 24 >> 24;
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = $i;
 $19 = $1;
 $20 = (($19) + ($18)|0);
 HEAP8[$20>>0] = 0;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _parse_foveon() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entries = 0, $high = 0, $i = 0;
 var $img = 0, $len = 0, $name = 0, $off = 0, $or$cond = 0, $pent = 0, $poff = 0, $save = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $tag = 0, $value = 0, $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $poff = sp;
 $name = sp + 2152|0;
 $value = sp + 2088|0;
 $img = 0;
 HEAP16[448960>>1] = 18761;
 $0 = HEAP32[944>>2]|0;
 (_fseek($0,36,0)|0);
 $1 = (_get4()|0);
 HEAP32[293688>>2] = $1;
 $2 = HEAP32[944>>2]|0;
 (_fseek($2,-4,2)|0);
 $3 = HEAP32[944>>2]|0;
 $4 = (_get4()|0);
 (_fseek($3,$4,0)|0);
 $5 = (_get4()|0);
 $6 = ($5|0)!=(1682130259);
 if ($6) {
  STACKTOP = sp;return;
 }
 (_get4()|0);
 $7 = (_get4()|0);
 $entries = $7;
 while(1) {
  $8 = $entries;
  $9 = (($8) + -1)|0;
  $entries = $9;
  $10 = ($8|0)!=(0);
  if (!($10)) {
   label = 46;
   break;
  }
  $11 = (_get4()|0);
  $off = $11;
  $12 = (_get4()|0);
  $len = $12;
  $13 = (_get4()|0);
  $tag = $13;
  $14 = HEAP32[944>>2]|0;
  $15 = (_ftell($14)|0);
  $save = $15;
  $16 = HEAP32[944>>2]|0;
  $17 = $off;
  (_fseek($16,$17,0)|0);
  $18 = (_get4()|0);
  $19 = $tag;
  $20 = $19 << 24;
  $21 = 541279571 | $20;
  $22 = ($18|0)!=($21|0);
  if ($22) {
   label = 46;
   break;
  }
  $23 = $tag;
  $switch$split2D = ($23|0)<(1195461961);
  L8: do {
   if ($switch$split2D) {
    $switch$split12D = ($23|0)<(1179468099);
    if ($switch$split12D) {
     switch ($23|0) {
     case 843140425:  {
      label = 6;
      break L8;
      break;
     }
     default: {
      break L8;
     }
     }
    }
    switch ($23|0) {
    case 1179468099:  {
     break;
    }
    default: {
     break L8;
    }
    }
    $71 = $off;
    $72 = (($71) + 8)|0;
    HEAP32[1520>>2] = $72;
    $73 = $len;
    $74 = (($73) - 28)|0;
    HEAP32[1684>>2] = $74;
   } else {
    $switch$split42D = ($23|0)<(1347375696);
    if ($switch$split42D) {
     switch ($23|0) {
     case 1195461961:  {
      label = 6;
      break L8;
      break;
     }
     default: {
      break L8;
     }
     }
    }
    switch ($23|0) {
    case 1347375696:  {
     break;
    }
    default: {
     break L8;
    }
    }
    (_get4()|0);
    $75 = (_get4()|0);
    $pent = $75;
    $76 = HEAP32[944>>2]|0;
    (_fseek($76,12,1)|0);
    $77 = $pent;
    $78 = $77<<3;
    $79 = (($78) + 24)|0;
    $80 = $off;
    $81 = (($80) + ($79))|0;
    $off = $81;
    $82 = $pent;
    $83 = ($82>>>0)>(256);
    if ($83) {
     $pent = 256;
    }
    $i = 0;
    while(1) {
     $84 = $i;
     $85 = $pent;
     $86 = $85<<1;
     $87 = ($84|0)<($86|0);
     if (!($87)) {
      break;
     }
     $88 = $off;
     $89 = (_get4()|0);
     $90 = $89<<1;
     $91 = (($88) + ($90))|0;
     $92 = $i;
     $93 = (($poff) + ($92<<2)|0);
     HEAP32[$93>>2] = $91;
     $94 = $i;
     $95 = (($94) + 1)|0;
     $i = $95;
    }
    $i = 0;
    while(1) {
     $96 = $i;
     $97 = $pent;
     $98 = ($96|0)<($97|0);
     if (!($98)) {
      break L8;
     }
     $99 = $i;
     $100 = (($poff) + ($99<<3)|0);
     $101 = HEAP32[$100>>2]|0;
     (_foveon_gets($101,$name,64)|0);
     $102 = $i;
     $103 = (($poff) + ($102<<3)|0);
     $104 = ((($103)) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     (_foveon_gets($105,$value,64)|0);
     $106 = (_strcmp($name,615675)|0);
     $107 = ($106|0)!=(0);
     if (!($107)) {
      $108 = (_atoi($value)|0);
      $109 = (+($108|0));
      HEAPF32[293672>>2] = $109;
     }
     $110 = (_strcmp($name,615679)|0);
     $111 = ($110|0)!=(0);
     if (!($111)) {
      (_strcpy(594275,$value)|0);
     }
     $112 = (_strcmp($name,615688)|0);
     $113 = ($112|0)!=(0);
     if (!($113)) {
      (_strcpy(594339,$value)|0);
     }
     $114 = (_strcmp($name,615697)|0);
     $115 = ($114|0)!=(0);
     if (!($115)) {
      (_strcpy(593904,$value)|0);
     }
     $116 = (_strcmp($name,615705)|0);
     $117 = ($116|0)!=(0);
     if (!($117)) {
      $118 = (_atoi($value)|0);
      HEAP32[31164>>2] = $118;
     }
     $119 = (_strcmp($name,615710)|0);
     $120 = ($119|0)!=(0);
     if (!($120)) {
      $121 = (_atoi($value)|0);
      $122 = (+($121|0));
      $123 = $122 / 1.0E+6;
      $124 = $123;
      HEAPF32[293680>>2] = $124;
     }
     $125 = (_strcmp($name,615718)|0);
     $126 = ($125|0)!=(0);
     if (!($126)) {
      $127 = (+_atof($value));
      $128 = $127;
      HEAPF32[293676>>2] = $128;
     }
     $129 = (_strcmp($name,615727)|0);
     $130 = ($129|0)!=(0);
     if (!($130)) {
      $131 = (+_atof($value));
      $132 = $131;
      HEAPF32[294224>>2] = $132;
     }
     $133 = $i;
     $134 = (($133) + 1)|0;
     $i = $134;
    }
   }
  } while(0);
  if ((label|0) == 6) {
   label = 0;
   $24 = HEAP32[944>>2]|0;
   (_fseek($24,8,1)|0);
   $25 = (_get4()|0);
   $pent = $25;
   $26 = (_get4()|0);
   $wide = $26;
   $27 = (_get4()|0);
   $high = $27;
   $28 = $wide;
   $29 = HEAP16[580226>>1]|0;
   $30 = $29&65535;
   $31 = ($28|0)>($30|0);
   if ($31) {
    $32 = $high;
    $33 = HEAP16[580244>>1]|0;
    $34 = $33&65535;
    $35 = ($32|0)>($34|0);
    if ($35) {
     $36 = $pent;
     switch ($36|0) {
     case 5:  {
      HEAP32[1068>>2] = 1;
      label = 10;
      break;
     }
     case 6:  {
      label = 10;
      break;
     }
     case 30:  {
      HEAP32[31028>>2] = 41;
      break;
     }
     default: {
      HEAP32[31028>>2] = 0;
     }
     }
     if ((label|0) == 10) {
      label = 0;
      HEAP32[31028>>2] = 40;
     }
     $37 = $wide;
     $38 = $37&65535;
     HEAP16[580226>>1] = $38;
     $39 = $high;
     $40 = $39&65535;
     HEAP16[580244>>1] = $40;
     $41 = $off;
     $42 = (($41) + 28)|0;
     HEAP32[1524>>2] = $42;
     HEAP32[294636>>2] = 1;
    }
   }
   $43 = HEAP32[944>>2]|0;
   $44 = $off;
   $45 = (($44) + 28)|0;
   (_fseek($43,$45,0)|0);
   $46 = HEAP32[944>>2]|0;
   $47 = (_getc_unlocked($46)|0);
   $48 = ($47|0)==(255);
   if ($48) {
    $49 = HEAP32[944>>2]|0;
    $50 = (_getc_unlocked($49)|0);
    $51 = ($50|0)==(216);
    if ($51) {
     $52 = HEAP32[1672>>2]|0;
     $53 = $len;
     $54 = (($53) - 28)|0;
     $55 = ($52>>>0)<($54>>>0);
     if ($55) {
      $56 = $off;
      $57 = (($56) + 28)|0;
      HEAP32[293668>>2] = $57;
      $58 = $len;
      $59 = (($58) - 28)|0;
      HEAP32[1672>>2] = $59;
      HEAP32[294628>>2] = 42;
     }
    }
   }
   $60 = $img;
   $61 = (($60) + 1)|0;
   $img = $61;
   $62 = ($61|0)!=(2);
   $63 = HEAP32[1672>>2]|0;
   $64 = ($63|0)!=(0);
   $or$cond = $62 | $64;
   if (!($or$cond)) {
    $65 = $off;
    $66 = (($65) + 24)|0;
    HEAP32[293668>>2] = $66;
    $67 = $wide;
    $68 = $67&65535;
    HEAP16[580260>>1] = $68;
    $69 = $high;
    $70 = $69&65535;
    HEAP16[580262>>1] = $70;
    HEAP32[294628>>2] = 43;
   }
  }
  $135 = HEAP32[944>>2]|0;
  $136 = $save;
  (_fseek($135,$136,0)|0);
 }
 if ((label|0) == 46) {
  STACKTOP = sp;return;
 }
}
function _adobe_coeff($make,$model) {
 $make = $make|0;
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cam_xyz = 0, $i = 0, $j = 0, $name = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 96|0;
 $cam_xyz = sp;
 $name = sp + 120|0;
 $0 = $make;
 $1 = $model;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 (_sprintf($name,623431,$vararg_buffer)|0);
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4>>>0)<(518);
  if (!($5)) {
   label = 14;
   break;
  }
  $6 = $i;
  $7 = (294640 + ($6<<5)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $i;
  $10 = (294640 + ($9<<5)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen($11)|0);
  $13 = (_strncmp($name,$8,$12)|0);
  $14 = ($13|0)!=(0);
  $15 = $i;
  if (!($14)) {
   break;
  }
  $55 = (($15) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
 $16 = (294640 + ($15<<5)|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ($18<<16>>16)!=(0);
 if ($19) {
  $20 = $i;
  $21 = (294640 + ($20<<5)|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  HEAP32[1036>>2] = $24;
 }
 $25 = $i;
 $26 = (294640 + ($25<<5)|0);
 $27 = ((($26)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28<<16>>16)!=(0);
 if ($29) {
  $30 = $i;
  $31 = (294640 + ($30<<5)|0);
  $32 = ((($31)) + 6|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  HEAP32[1040>>2] = $34;
 }
 $35 = $i;
 $36 = (294640 + ($35<<5)|0);
 $37 = ((($36)) + 8|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38<<16>>16)!=(0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $j = 0;
 HEAP32[976>>2] = 0;
 while(1) {
  $40 = $j;
  $41 = ($40|0)<(12);
  if (!($41)) {
   break;
  }
  $42 = $j;
  $43 = $i;
  $44 = (294640 + ($43<<5)|0);
  $45 = ((($44)) + 8|0);
  $46 = (($45) + ($42<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = (+($48|0));
  $50 = $49 / 1.0E+4;
  $51 = $j;
  $52 = (($cam_xyz) + ($51<<3)|0);
  HEAPF64[$52>>3] = $50;
  $53 = $j;
  $54 = (($53) + 1)|0;
  $j = $54;
 }
 _cam_xyz_coeff(984,$cam_xyz);
 STACKTOP = sp;return;
}
function _simple_coeff($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $i = 0;
 HEAP32[976>>2] = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(3);
  if (!($2)) {
   break;
  }
  $c = 0;
  while(1) {
   $3 = $c;
   $4 = HEAP32[980>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   $6 = $i;
   if (!($5)) {
    break;
   }
   $7 = HEAP32[980>>2]|0;
   $8 = Math_imul($6, $7)|0;
   $9 = $c;
   $10 = (($8) + ($9))|0;
   $11 = $0;
   $12 = (311216 + (($11*48)|0)|0);
   $13 = (($12) + ($10<<2)|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $c;
   $16 = $i;
   $17 = (984 + ($16<<4)|0);
   $18 = (($17) + ($15<<2)|0);
   HEAPF32[$18>>2] = $14;
   $19 = $c;
   $20 = (($19) + 1)|0;
   $c = $20;
  }
  $21 = (($6) + 1)|0;
  $i = $21;
 }
 STACKTOP = sp;return;
}
function _guess_byte_order($words) {
 $words = $words|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0.0, $msb = 0, $sum = 0, $t = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $test = sp + 40|0;
 $sum = sp;
 $0 = $words;
 $t = 2;
 ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $1 = HEAP32[944>>2]|0;
 (_fread($test,2,2,$1)|0);
 $2 = $0;
 $3 = (($2) - 2)|0;
 $0 = $3;
 while(1) {
  $4 = $0;
  $5 = (($4) + -1)|0;
  $0 = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = $t;
  $8 = (($test) + ($7<<1)|0);
  $9 = HEAP32[944>>2]|0;
  (_fread($8,2,1,$9)|0);
  $msb = 0;
  while(1) {
   $10 = $msb;
   $11 = ($10|0)<(2);
   if (!($11)) {
    break;
   }
   $12 = $msb;
   $13 = $t;
   $14 = $13 ^ 2;
   $15 = (($test) + ($14<<1)|0);
   $16 = (($15) + ($12)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $18 << 8;
   $20 = $msb;
   $21 = ($20|0)!=(0);
   $22 = $21 ^ 1;
   $23 = $22&1;
   $24 = $t;
   $25 = $24 ^ 2;
   $26 = (($test) + ($25<<1)|0);
   $27 = (($26) + ($23)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $19 | $29;
   $31 = $msb;
   $32 = $t;
   $33 = (($test) + ($32<<1)|0);
   $34 = (($33) + ($31)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $36 << 8;
   $38 = $msb;
   $39 = ($38|0)!=(0);
   $40 = $39 ^ 1;
   $41 = $40&1;
   $42 = $t;
   $43 = (($test) + ($42<<1)|0);
   $44 = (($43) + ($41)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $37 | $46;
   $48 = (($30) - ($47))|0;
   $49 = (+($48|0));
   $diff = $49;
   $50 = $diff;
   $51 = $diff;
   $52 = $50 * $51;
   $53 = $msb;
   $54 = (($sum) + ($53<<3)|0);
   $55 = +HEAPF64[$54>>3];
   $56 = $55 + $52;
   HEAPF64[$54>>3] = $56;
   $57 = $msb;
   $58 = (($57) + 1)|0;
   $msb = $58;
  }
  $59 = $t;
  $60 = (($59) + 1)|0;
  $61 = $60 & 3;
  $t = $61;
 }
 $62 = +HEAPF64[$sum>>3];
 $63 = ((($sum)) + 8|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $62 < $64;
 $66 = $65 ? 19789 : 18761;
 $67 = $66&65535;
 STACKTOP = sp;return ($67|0);
}
function _find_green($bps,$bite,$off0,$off1) {
 $bps = $bps|0;
 $bite = $bite|0;
 $off0 = $off0|0;
 $off1 = $off1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitbuf = 0, $c = 0, $col = 0, $i = 0, $img = 0, $sum = 0, $vbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bitbuf = sp + 16|0;
 $img = sp + 56|0;
 $sum = sp;
 $0 = $bps;
 $1 = $bite;
 $2 = $off0;
 $3 = $off1;
 $4 = $bitbuf;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 ;HEAP32[$sum>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $c = 0;
 while(1) {
  $8 = $c;
  $9 = ($8|0)<(2);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[944>>2]|0;
  $11 = $c;
  $12 = ($11|0)!=(0);
  $13 = $3;
  $14 = $2;
  $15 = $12 ? $13 : $14;
  (_fseek($10,$15,0)|0);
  $col = 0;
  $vbits = 0;
  while(1) {
   $16 = $col;
   $17 = HEAP16[580076>>1]|0;
   $18 = $17&65535;
   $19 = ($16|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $0;
   $21 = $vbits;
   $22 = (($21) - ($20))|0;
   $vbits = $22;
   while(1) {
    $23 = $vbits;
    $24 = ($23|0)<(0);
    if (!($24)) {
     break;
    }
    $25 = $1;
    $26 = $bitbuf;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26) + 4)|0;
    $30 = $29;
    $31 = HEAP32[$30>>2]|0;
    $32 = (_bitshift64Shl(($28|0),($31|0),($25|0))|0);
    $33 = tempRet0;
    $34 = $bitbuf;
    $35 = $34;
    HEAP32[$35>>2] = $32;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $i = 0;
    while(1) {
     $38 = $i;
     $39 = $1;
     $40 = ($38|0)<($39|0);
     if (!($40)) {
      break;
     }
     $41 = HEAP32[944>>2]|0;
     $42 = (_getc_unlocked($41)|0);
     $43 = $i;
     $44 = $42 << $43;
     $45 = $bitbuf;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $48 = (($45) + 4)|0;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = $47 | $44;
     $52 = $bitbuf;
     $53 = $52;
     HEAP32[$53>>2] = $51;
     $54 = (($52) + 4)|0;
     $55 = $54;
     HEAP32[$55>>2] = $50;
     $56 = $i;
     $57 = (($56) + 8)|0;
     $i = $57;
    }
    $58 = $1;
    $59 = $vbits;
    $60 = (($59) + ($58))|0;
    $vbits = $60;
   }
   $61 = $bitbuf;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = $0;
   $68 = (64 - ($67))|0;
   $69 = $vbits;
   $70 = (($68) - ($69))|0;
   $71 = (_bitshift64Shl(($63|0),($66|0),($70|0))|0);
   $72 = tempRet0;
   $73 = $0;
   $74 = (64 - ($73))|0;
   $75 = (_bitshift64Lshr(($71|0),($72|0),($74|0))|0);
   $76 = tempRet0;
   $77 = $75&65535;
   $78 = $col;
   $79 = $c;
   $80 = (($img) + (($79*4128)|0)|0);
   $81 = (($80) + ($78<<1)|0);
   HEAP16[$81>>1] = $77;
   $82 = $col;
   $83 = (($82) + 1)|0;
   $col = $83;
  }
  $84 = $c;
  $85 = (($84) + 1)|0;
  $c = $85;
 }
 $c = 0;
 while(1) {
  $86 = $c;
  $87 = HEAP16[580076>>1]|0;
  $88 = $87&65535;
  $89 = (($88) - 1)|0;
  $90 = ($86|0)<($89|0);
  if (!($90)) {
   break;
  }
  $91 = $c;
  $92 = (($img) + ($91<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93&65535;
  $95 = $c;
  $96 = (($95) + 1)|0;
  $97 = ((($img)) + 4128|0);
  $98 = (($97) + ($96<<1)|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = $99&65535;
  $101 = (($94) - ($100))|0;
  $102 = $c;
  $103 = (($img) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = $c;
  $107 = (($106) + 1)|0;
  $108 = ((($img)) + 4128|0);
  $109 = (($108) + ($107<<1)|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110&65535;
  $112 = (($105) - ($111))|0;
  $113 = $112 >> 31;
  $114 = $101 ^ $113;
  $115 = $c;
  $116 = (($img) + ($115<<1)|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117&65535;
  $119 = $c;
  $120 = (($119) + 1)|0;
  $121 = ((($img)) + 4128|0);
  $122 = (($121) + ($120<<1)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123&65535;
  $125 = (($118) - ($124))|0;
  $126 = $125 >> 31;
  $127 = (($114) - ($126))|0;
  $128 = (+($127|0));
  $129 = $c;
  $130 = $129 & 1;
  $131 = (($sum) + ($130<<3)|0);
  $132 = +HEAPF64[$131>>3];
  $133 = $132 + $128;
  HEAPF64[$131>>3] = $133;
  $134 = $c;
  $135 = ((($img)) + 4128|0);
  $136 = (($135) + ($134<<1)|0);
  $137 = HEAP16[$136>>1]|0;
  $138 = $137&65535;
  $139 = $c;
  $140 = (($139) + 1)|0;
  $141 = (($img) + ($140<<1)|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $142&65535;
  $144 = (($138) - ($143))|0;
  $145 = $c;
  $146 = ((($img)) + 4128|0);
  $147 = (($146) + ($145<<1)|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148&65535;
  $150 = $c;
  $151 = (($150) + 1)|0;
  $152 = (($img) + ($151<<1)|0);
  $153 = HEAP16[$152>>1]|0;
  $154 = $153&65535;
  $155 = (($149) - ($154))|0;
  $156 = $155 >> 31;
  $157 = $144 ^ $156;
  $158 = $c;
  $159 = ((($img)) + 4128|0);
  $160 = (($159) + ($158<<1)|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = $161&65535;
  $163 = $c;
  $164 = (($163) + 1)|0;
  $165 = (($img) + ($164<<1)|0);
  $166 = HEAP16[$165>>1]|0;
  $167 = $166&65535;
  $168 = (($162) - ($167))|0;
  $169 = $168 >> 31;
  $170 = (($157) - ($169))|0;
  $171 = (+($170|0));
  $172 = $c;
  $173 = $172 ^ -1;
  $174 = $173 & 1;
  $175 = (($sum) + ($174<<3)|0);
  $176 = +HEAPF64[$175>>3];
  $177 = $176 + $171;
  HEAPF64[$175>>3] = $177;
  $178 = $c;
  $179 = (($178) + 1)|0;
  $c = $179;
 }
 $180 = +HEAPF64[$sum>>3];
 $181 = ((($sum)) + 8|0);
 $182 = +HEAPF64[$181>>3];
 $183 = $180 / $182;
 $184 = (+Math_log((+$183)));
 $185 = 100.0 * $184;
 $186 = $185;
 STACKTOP = sp;return (+$186);
}
function _identify() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0.0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0.0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0.0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0.0, $172 = 0, $1720 = 0.0, $1721 = 0, $1722 = 0, $1723 = 0.0, $1724 = 0.0, $1725 = 0.0, $1726 = 0, $1727 = 0, $1728 = 0.0, $1729 = 0.0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0.0, $1733 = 0.0, $1734 = 0.0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0.0, $1744 = 0.0, $1745 = 0, $1746 = 0, $1747 = 0.0, $1748 = 0.0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0.0, $1838 = 0.0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0.0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0.0, $774 = 0.0;
 var $775 = 0.0, $776 = 0.0, $777 = 0.0, $778 = 0.0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0.0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0.0, $962 = 0, $963 = 0.0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $c = 0, $cp = 0, $flen = 0, $fsize = 0, $head = 0, $hlen = 0, $i = 0, $jh = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0;
 var $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch$split12D = 0, $switch$split2D = 0, $vararg_buffer = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0;
 var $vararg_buffer42 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $zero_fsize = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer42 = sp + 24|0;
 $vararg_buffer38 = sp + 16|0;
 $vararg_buffer34 = sp + 8|0;
 $vararg_buffer = sp;
 $head = sp + 536|0;
 $jh = sp + 32|0;
 $zero_fsize = 1;
 HEAP32[776>>2] = -1;
 HEAP32[293688>>2] = -1;
 HEAP32[294624>>2] = -1;
 HEAP16[580246>>1] = 0;
 HEAP32[31032>>2] = 0;
 HEAP16[589194>>1] = 0;
 HEAP16[580226>>1] = 0;
 HEAP16[580244>>1] = 0;
 HEAP16[448956>>1] = 0;
 HEAP16[448958>>1] = 0;
 HEAP16[580076>>1] = 0;
 HEAP16[580074>>1] = 0;
 HEAP32[1040>>2] = 0;
 HEAP8[593904>>0] = 0;
 HEAP8[594339>>0] = 0;
 HEAP8[594275>>0] = 0;
 HEAP8[613809>>0] = 0;
 HEAP8[614459>>0] = 0;
 HEAP8[615136>>0] = 0;
 HEAP32[1072>>2] = 0;
 HEAPF32[294224>>2] = 0.0;
 HEAPF32[293676>>2] = 0.0;
 HEAPF32[293680>>2] = 0.0;
 HEAPF32[293672>>2] = 0.0;
 HEAP32[293740>>2] = 0;
 _memset((293744|0),0,480)|0;
 dest=294232; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset((580264|0),0,8204)|0;
 dest=589198; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=31036; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP16[580262>>1] = 0;
 HEAP16[580260>>1] = 0;
 HEAP32[1672>>2] = 0;
 HEAP32[293668>>2] = 0;
 HEAP32[294632>>2] = 0;
 HEAP32[31028>>2] = 0;
 HEAP32[294628>>2] = 42;
 HEAP32[1060>>2] = 0;
 HEAP32[1516>>2] = 0;
 HEAP32[1684>>2] = 0;
 HEAP32[1520>>2] = 0;
 HEAP32[1524>>2] = 0;
 HEAP32[1068>>2] = 0;
 HEAP32[1064>>2] = 0;
 HEAP32[1056>>2] = 0;
 HEAP32[1796>>2] = 0;
 HEAP32[294636>>2] = 0;
 HEAP32[1036>>2] = 0;
 HEAP32[1076>>2] = 0;
 HEAP32[293684>>2] = 0;
 HEAP32[31164>>2] = 0;
 HEAP32[316340>>2] = 0;
 HEAP32[940>>2] = 0;
 HEAP32[294556>>2] = 0;
 HEAP32[1788>>2] = 0;
 HEAP32[976>>2] = 1;
 HEAP32[1508>>2] = 1;
 HEAPF64[224>>3] = 1.0;
 HEAP32[1504>>2] = 0;
 HEAP32[1512>>2] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(4);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = ($2|0)==(1);
  $4 = $3&1;
  $5 = (+($4|0));
  $6 = $i;
  $7 = (1528 + ($6<<2)|0);
  HEAPF32[$7>>2] = $5;
  $8 = $i;
  $9 = ($8|0)<(3);
  $10 = $9&1;
  $11 = (+($10|0));
  $12 = $i;
  $13 = (948 + ($12<<2)|0);
  HEAPF32[$13>>2] = $11;
  $c = 0;
  while(1) {
   $14 = $c;
   $15 = ($14|0)<(3);
   if (!($15)) {
    break;
   }
   $16 = $i;
   $17 = $c;
   $18 = (293692 + ($17<<4)|0);
   $19 = (($18) + ($16<<2)|0);
   HEAPF32[$19>>2] = 0.0;
   $20 = $c;
   $21 = (($20) + 1)|0;
   $c = $21;
  }
  $c = 0;
  while(1) {
   $22 = $c;
   $23 = ($22|0)<(3);
   if (!($23)) {
    break;
   }
   $24 = $c;
   $25 = $i;
   $26 = ($24|0)==($25|0);
   $27 = $26&1;
   $28 = (+($27|0));
   $29 = $i;
   $30 = $c;
   $31 = (984 + ($30<<4)|0);
   $32 = (($31) + ($29<<2)|0);
   HEAPF32[$32>>2] = $28;
   $33 = $c;
   $34 = (($33) + 1)|0;
   $c = $34;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 HEAP32[980>>2] = 3;
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = ($37|0)<(65536);
  if (!($38)) {
   break;
  }
  $39 = $i;
  $40 = $39&65535;
  $41 = $i;
  $42 = (448962 + ($41<<1)|0);
  HEAP16[$42>>1] = $40;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $45 = (_get2()|0);
 HEAP16[448960>>1] = $45;
 $46 = (_get4()|0);
 $hlen = $46;
 $47 = HEAP32[944>>2]|0;
 (_fseek($47,0,0)|0);
 $48 = HEAP32[944>>2]|0;
 (_fread($head,1,32,$48)|0);
 $49 = HEAP32[944>>2]|0;
 (_fseek($49,0,2)|0);
 $50 = HEAP32[944>>2]|0;
 $51 = (_ftell($50)|0);
 $fsize = $51;
 $flen = $51;
 $52 = (_my_memmem($head,32,613692,4)|0);
 $cp = $52;
 $53 = ($52|0)!=(0|0);
 L17: do {
  if ($53) {
   label = 15;
  } else {
   $54 = (_my_memmem($head,32,613687,4)|0);
   $cp = $54;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    label = 15;
   } else {
    $67 = HEAP16[448960>>1]|0;
    $68 = $67 << 16 >> 16;
    $69 = ($68|0)==(18761);
    if (!($69)) {
     $70 = HEAP16[448960>>1]|0;
     $71 = $70 << 16 >> 16;
     $72 = ($71|0)==(19789);
     if (!($72)) {
      $83 = (_memcmp($head,623548,4)|0);
      $84 = ($83|0)!=(0);
      if (!($84)) {
       $85 = ((($head)) + 6|0);
       $86 = (_memcmp($85,623553,4)|0);
       $87 = ($86|0)!=(0);
       if (!($87)) {
        $88 = HEAP32[944>>2]|0;
        (_fseek($88,4,0)|0);
        $89 = (_get2()|0);
        $90 = $89&65535;
        $91 = (4 + ($90))|0;
        HEAP32[1524>>2] = $91;
        $92 = HEAP32[944>>2]|0;
        $93 = HEAP32[1524>>2]|0;
        (_fseek($92,$93,0)|0);
        $94 = HEAP32[944>>2]|0;
        $95 = (_getc_unlocked($94)|0);
        $96 = ($95|0)!=(255);
        if ($96) {
         (_parse_tiff(12)|0);
        }
        HEAP32[293668>>2] = 0;
        break;
       }
      }
      $97 = ((($head)) + 25|0);
      $98 = (_memcmp($97,623558,7)|0);
      $99 = ($98|0)!=(0);
      if (!($99)) {
       (_strcpy(594275,623566)|0);
       (_strcpy(594339,623573)|0);
       $100 = HEAP32[944>>2]|0;
       (_fseek($100,33,0)|0);
       _get_timestamp(1);
       $101 = HEAP32[944>>2]|0;
       (_fseek($101,60,0)|0);
       $c = 0;
       while(1) {
        $102 = $c;
        $103 = ($102|0)<(4);
        if (!($103)) {
         break L17;
        }
        $104 = (_get4()|0);
        $105 = (+($104>>>0));
        $106 = $c;
        $107 = $c;
        $108 = $107 >> 1;
        $109 = $106 ^ $108;
        $110 = (1528 + ($109<<2)|0);
        HEAPF32[$110>>2] = $105;
        $111 = $c;
        $112 = (($111) + 1)|0;
        $c = $112;
       }
      }
      $113 = (_strcmp($head,623583)|0);
      $114 = ($113|0)!=(0);
      if (!($114)) {
       (_strcpy(594275,623587)|0);
       (_strcpy(594339,623596)|0);
       break;
      }
      $115 = (_strcmp($head,623612)|0);
      $116 = ($115|0)!=(0);
      if (!($116)) {
       (_strcpy(594275,623617)|0);
       (_strcpy(594339,623623)|0);
       HEAP32[31028>>2] = 44;
       break;
      }
      $117 = (_strcmp($head,623637)|0);
      $118 = ($117|0)!=(0);
      if (!($118)) {
       (_strcpy(594275,623617)|0);
       (_strcpy(594339,623642)|0);
       HEAP32[31028>>2] = 45;
       break;
      }
      $119 = (_memcmp($head,613741,8)|0);
      $120 = ($119|0)!=(0);
      if (!($120)) {
       $121 = HEAP32[944>>2]|0;
       (_fseek($121,84,0)|0);
       $122 = (_get4()|0);
       HEAP32[293668>>2] = $122;
       $123 = (_get4()|0);
       HEAP32[1672>>2] = $123;
       $124 = HEAP32[944>>2]|0;
       (_fseek($124,92,0)|0);
       $125 = (_get4()|0);
       _parse_fuji($125);
       $126 = HEAP32[293668>>2]|0;
       $127 = ($126|0)>(120);
       if ($127) {
        $128 = HEAP32[944>>2]|0;
        (_fseek($128,120,0)|0);
        $129 = (_get4()|0);
        $i = $129;
        $130 = ($129|0)!=(0);
        $$ = $130 ? 1 : 0;
        $131 = $$&1;
        $132 = HEAP32[1508>>2]|0;
        $133 = (($132) + ($131))|0;
        HEAP32[1508>>2] = $133;
        $134 = HEAP32[1508>>2]|0;
        $135 = ($134|0)==(2);
        $136 = HEAP32[664>>2]|0;
        $137 = ($136|0)!=(0);
        $or$cond = $135 & $137;
        if ($or$cond) {
         $138 = $i;
         _parse_fuji($138);
        }
       }
       HEAP32[31028>>2] = 24;
       $139 = HEAP32[944>>2]|0;
       $140 = HEAP32[664>>2]|0;
       $141 = ($140>>>0)>(0);
       $142 = $141&1;
       $143 = ($142*28)|0;
       $144 = (100 + ($143))|0;
       (_fseek($139,$144,0)|0);
       $145 = (_get4()|0);
       HEAP32[1524>>2] = $145;
       (_parse_tiff($145)|0);
       $146 = HEAP32[293668>>2]|0;
       $147 = (($146) + 12)|0;
       (_parse_tiff($147)|0);
       _apply_tiff();
       break;
      }
      $148 = (_memcmp($head,615550,4)|0);
      $149 = ($148|0)!=(0);
      if (!($149)) {
       $150 = HEAP32[944>>2]|0;
       (_fseek($150,0,0)|0);
       _parse_riff();
       break;
      }
      $151 = ((($head)) + 4|0);
      $152 = (_memcmp($151,623656,9)|0);
      $153 = ($152|0)!=(0);
      if (!($153)) {
       $154 = HEAP32[944>>2]|0;
       (_fseek($154,0,0)|0);
       $155 = $fsize;
       _parse_qt($155);
       HEAP32[1508>>2] = 0;
       break;
      }
      $156 = (_memcmp($head,623666,6)|0);
      $157 = ($156|0)!=(0);
      if (!($157)) {
       $158 = HEAP32[944>>2]|0;
       (_fseek($158,6,0)|0);
       $159 = HEAP32[944>>2]|0;
       (_fread(594275,1,8,$159)|0);
       $160 = HEAP32[944>>2]|0;
       (_fread(594339,1,8,$160)|0);
       $161 = HEAP32[944>>2]|0;
       (_fread(593904,1,16,$161)|0);
       $162 = (_get2()|0);
       $163 = $162&65535;
       HEAP32[1524>>2] = $163;
       (_get2()|0);
       $164 = (_get2()|0);
       HEAP16[580226>>1] = $164;
       $165 = (_get2()|0);
       HEAP16[580244>>1] = $165;
       HEAP32[31028>>2] = 16;
       HEAP32[776>>2] = 1633771873;
       break;
      }
      $166 = (_memcmp($head,623673,8)|0);
      $167 = ($166|0)!=(0);
      if (!($167)) {
       (_strcpy(594275,623682)|0);
       HEAP16[448960>>1] = 18761;
       $168 = HEAP32[944>>2]|0;
       (_fseek($168,300,0)|0);
       $169 = (_get4()|0);
       HEAP32[1524>>2] = $169;
       $170 = (_get4()|0);
       $i = $170;
       $171 = (_get2()|0);
       HEAP16[580076>>1] = $171;
       $172 = (_get2()|0);
       HEAP16[580074>>1] = $172;
       $173 = $i;
       $174 = $173<<3;
       $175 = HEAP16[580076>>1]|0;
       $176 = $175&65535;
       $177 = HEAP16[580074>>1]|0;
       $178 = $177&65535;
       $179 = Math_imul($176, $178)|0;
       $180 = (($174|0) / ($179|0))&-1;
       HEAP32[1516>>2] = $180;
       switch ($180|0) {
       case 8:  {
        HEAP32[31028>>2] = 13;
        break;
       }
       case 10:  {
        HEAP32[31028>>2] = 16;
        break;
       }
       default: {
       }
       }
       $181 = HEAP16[580074>>1]|0;
       $182 = $181&65535;
       $183 = $i;
       $184 = HEAP16[580076>>1]|0;
       $185 = $184&65535;
       $186 = HEAP32[1516>>2]|0;
       $187 = Math_imul($185, $186)|0;
       $188 = (($187>>>0) / 8)&-1;
       $189 = (($183>>>0) / ($188>>>0))&-1;
       $190 = HEAP16[580074>>1]|0;
       $191 = $190&65535;
       $192 = (($189) - ($191))|0;
       $193 = $192&65535;
       HEAP16[448958>>1] = $193;
       $194 = $193&65535;
       $195 = (($182) + ($194))|0;
       $196 = $195&65535;
       HEAP16[580244>>1] = $196;
       HEAP32[(31048)>>2] = 1;
       HEAP32[776>>2] = 1633771873;
       break;
      }
      $197 = (_memcmp($head,623688,4)|0);
      $198 = ($197|0)!=(0);
      if (!($198)) {
       HEAP16[448960>>1] = 18761;
       $199 = HEAP32[944>>2]|0;
       (_fseek($199,20,0)|0);
       $200 = (_get4()|0);
       $201 = $200&65535;
       HEAP16[580076>>1] = $201;
       $202 = (_get4()|0);
       $203 = $202&65535;
       HEAP16[580074>>1] = $203;
       (_strcpy(594275,623688)|0);
       $204 = HEAP32[944>>2]|0;
       (_fseek($204,668,0)|0);
       $205 = HEAP32[944>>2]|0;
       (_fread(594339,1,64,$205)|0);
       HEAP32[1524>>2] = 4096;
       HEAP32[31028>>2] = 15;
       HEAP32[1068>>2] = 88;
       HEAP32[776>>2] = 1633771873;
       break;
      }
      $206 = (_memcmp($head,623693,4)|0);
      $207 = ($206|0)!=(0);
      if (!($207)) {
       HEAP16[448960>>1] = 18761;
       $208 = HEAP32[944>>2]|0;
       (_fseek($208,2048,0)|0);
       $209 = HEAP32[944>>2]|0;
       (_fread(594275,1,41,$209)|0);
       $210 = (_get2()|0);
       HEAP16[580244>>1] = $210;
       $211 = (_get2()|0);
       HEAP16[580226>>1] = $211;
       $212 = HEAP32[944>>2]|0;
       (_fseek($212,56,1)|0);
       $213 = HEAP32[944>>2]|0;
       (_fread(594339,1,30,$213)|0);
       HEAP32[1524>>2] = 65536;
       HEAP32[31028>>2] = 46;
       _gamma_curve(0.0,12.25,1,1023);
       break;
      }
      $214 = ((($head)) + 4|0);
      $215 = (_memcmp($214,623698,4)|0);
      $216 = ($215|0)!=(0);
      if (!($216)) {
       (_strcpy(594275,623703)|0);
       (_strcpy(594339,623707)|0);
       _parse_redcine();
       HEAP32[31028>>2] = 47;
       _gamma_curve(0.41666666666666669,12.92,1,4095);
       HEAP32[776>>2] = 1229539657;
       break;
      }
      $217 = (_memcmp($head,623711,9)|0);
      $218 = ($217|0)!=(0);
      if (!($218)) {
       _parse_rollei();
       break;
      }
      $219 = (_memcmp($head,623721,4)|0);
      $220 = ($219|0)!=(0);
      if (!($220)) {
       _parse_sinar_ia();
       break;
      }
      $221 = (_memcmp($head,623726,4)|0);
      $222 = ($221|0)!=(0);
      if (!($222)) {
       _parse_minolta(0);
       break;
      }
      $223 = (_memcmp($head,623731,4)|0);
      $224 = ($223|0)!=(0);
      if (!($224)) {
       _parse_foveon();
       break;
      }
      $225 = (_memcmp($head,623736,2)|0);
      $226 = ($225|0)!=(0);
      if ($226) {
       break;
      }
      _parse_cine();
      break;
     }
    }
    $73 = ((($head)) + 6|0);
    $74 = (_memcmp($73,623539,8)|0);
    $75 = ($74|0)!=(0);
    if (!($75)) {
     $76 = $hlen;
     HEAP32[1524>>2] = $76;
     $77 = $hlen;
     $78 = $flen;
     $79 = $hlen;
     $80 = (($78) - ($79))|0;
     _parse_ciff($77,$80,0);
     HEAP32[31028>>2] = 9;
     break;
    }
    $81 = (_parse_tiff(0)|0);
    $82 = ($81|0)!=(0);
    if ($82) {
     _apply_tiff();
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $56 = $cp;
  $57 = $56;
  $58 = $head;
  $59 = (($57) - ($58))|0;
  _parse_phase_one($59);
  $60 = $cp;
  $61 = $60;
  $62 = $head;
  $63 = (($61) - ($62))|0;
  $64 = ($63|0)!=(0);
  if ($64) {
   $65 = (_parse_tiff(0)|0);
   $66 = ($65|0)!=(0);
   if ($66) {
    _apply_tiff();
   }
  }
 }
 $227 = HEAP8[594275>>0]|0;
 $228 = $227 << 24 >> 24;
 $229 = ($228|0)==(0);
 L100: do {
  if ($229) {
   $i = 0;
   $zero_fsize = 0;
   while(1) {
    $230 = $i;
    $231 = ($230>>>0)<(101);
    if (!($231)) {
     break L100;
    }
    $232 = $fsize;
    $233 = $i;
    $234 = (311408 + (($233*48)|0)|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = ($232|0)==($235|0);
    if ($236) {
     $237 = $i;
     $238 = (311408 + (($237*48)|0)|0);
     $239 = ((($238)) + 16|0);
     (_strcpy(594275,$239)|0);
     $240 = $i;
     $241 = (311408 + (($240*48)|0)|0);
     $242 = ((($241)) + 26|0);
     (_strcpy(594339,$242)|0);
     $243 = $i;
     $244 = (311408 + (($243*48)|0)|0);
     $245 = ((($244)) + 15|0);
     $246 = HEAP8[$245>>0]|0;
     $247 = $246&255;
     $248 = $247 >> 2;
     HEAP32[293688>>2] = $248;
     $249 = $i;
     $250 = (311408 + (($249*48)|0)|0);
     $251 = ((($250)) + 15|0);
     $252 = HEAP8[$251>>0]|0;
     $253 = $252&255;
     $254 = $253 & 2;
     HEAP32[316340>>2] = $254;
     $255 = $i;
     $256 = (311408 + (($255*48)|0)|0);
     $257 = ((($256)) + 15|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = $259 & 1;
     $261 = ($260|0)!=(0);
     if ($261) {
      _parse_external_jpeg();
     }
     $262 = $i;
     $263 = (311408 + (($262*48)|0)|0);
     $264 = ((($263)) + 46|0);
     $265 = HEAP16[$264>>1]|0;
     $266 = $265&65535;
     HEAP32[1524>>2] = $266;
     $267 = $i;
     $268 = (311408 + (($267*48)|0)|0);
     $269 = ((($268)) + 4|0);
     $270 = HEAP16[$269>>1]|0;
     HEAP16[580226>>1] = $270;
     $271 = $i;
     $272 = (311408 + (($271*48)|0)|0);
     $273 = ((($272)) + 6|0);
     $274 = HEAP16[$273>>1]|0;
     HEAP16[580244>>1] = $274;
     $275 = $i;
     $276 = (311408 + (($275*48)|0)|0);
     $277 = ((($276)) + 8|0);
     $278 = HEAP8[$277>>0]|0;
     $279 = $278&255;
     HEAP16[448956>>1] = $279;
     $280 = $i;
     $281 = (311408 + (($280*48)|0)|0);
     $282 = ((($281)) + 9|0);
     $283 = HEAP8[$282>>0]|0;
     $284 = $283&255;
     HEAP16[448958>>1] = $284;
     $285 = HEAP16[580226>>1]|0;
     $286 = $285&65535;
     $287 = HEAP16[448956>>1]|0;
     $288 = $287&65535;
     $289 = (($286) - ($288))|0;
     $290 = $i;
     $291 = (311408 + (($290*48)|0)|0);
     $292 = ((($291)) + 10|0);
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = (($289) - ($294))|0;
     $296 = $295&65535;
     HEAP16[580076>>1] = $296;
     $297 = HEAP16[580244>>1]|0;
     $298 = $297&65535;
     $299 = HEAP16[448958>>1]|0;
     $300 = $299&65535;
     $301 = (($298) - ($300))|0;
     $302 = $i;
     $303 = (311408 + (($302*48)|0)|0);
     $304 = ((($303)) + 11|0);
     $305 = HEAP8[$304>>0]|0;
     $306 = $305&255;
     $307 = (($301) - ($306))|0;
     $308 = $307&65535;
     HEAP16[580074>>1] = $308;
     $309 = $i;
     $310 = (311408 + (($309*48)|0)|0);
     $311 = ((($310)) + 13|0);
     $312 = HEAP8[$311>>0]|0;
     $313 = $312&255;
     $314 = Math_imul(16843009, $313)|0;
     HEAP32[776>>2] = $314;
     $315 = HEAP32[776>>2]|0;
     $316 = HEAP32[776>>2]|0;
     $317 = $316 >>> 1;
     $318 = $315 & $317;
     $319 = $318 & 21845;
     $320 = ($319|0)!=(0);
     $321 = $320 ^ 1;
     $322 = $321&1;
     $323 = (4 - ($322))|0;
     HEAP32[980>>2] = $323;
     $324 = $i;
     $325 = (311408 + (($324*48)|0)|0);
     $326 = ((($325)) + 12|0);
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     HEAP32[1068>>2] = $328;
     $329 = $fsize;
     $330 = HEAP32[1524>>2]|0;
     $331 = (($329) - ($330))|0;
     $332 = $331<<3;
     $333 = HEAP16[580226>>1]|0;
     $334 = $333&65535;
     $335 = HEAP16[580244>>1]|0;
     $336 = $335&65535;
     $337 = Math_imul($334, $336)|0;
     $338 = (($332|0) / ($337|0))&-1;
     HEAP32[1516>>2] = $338;
     switch ($338|0) {
     case 6:  {
      HEAP32[31028>>2] = 48;
      break;
     }
     case 8:  {
      HEAP32[31028>>2] = 13;
      break;
     }
     case 12: case 10:  {
      $339 = HEAP32[1068>>2]|0;
      $340 = $339 | 128;
      HEAP32[1068>>2] = $340;
      HEAP32[31028>>2] = 15;
      break;
     }
     case 16:  {
      $341 = HEAP32[1068>>2]|0;
      $342 = $341 & 1;
      $343 = ($342*1028)|0;
      $344 = 18761 | $343;
      $345 = $344&65535;
      HEAP16[448960>>1] = $345;
      $346 = HEAP32[1068>>2]|0;
      $347 = $346 >>> 4;
      $348 = HEAP32[1516>>2]|0;
      $349 = (($348) - ($347))|0;
      HEAP32[1516>>2] = $349;
      $350 = HEAP32[1068>>2]|0;
      $351 = $350 >>> 1;
      $352 = $351 & 7;
      HEAP32[1068>>2] = $352;
      $353 = HEAP32[1516>>2]|0;
      $354 = (($353) - ($352))|0;
      HEAP32[1516>>2] = $354;
      HEAP32[31028>>2] = 24;
      break;
     }
     default: {
     }
     }
     $355 = HEAP32[1516>>2]|0;
     $356 = 1 << $355;
     $357 = $i;
     $358 = (311408 + (($357*48)|0)|0);
     $359 = ((($358)) + 14|0);
     $360 = HEAP8[$359>>0]|0;
     $361 = $360&255;
     $362 = 1 << $361;
     $363 = (($356) - ($362))|0;
     HEAP32[1040>>2] = $363;
    }
    $364 = $i;
    $365 = (($364) + 1)|0;
    $i = $365;
   }
  }
 } while(0);
 $366 = $zero_fsize;
 $367 = ($366|0)!=(0);
 if ($367) {
  $fsize = 0;
 }
 $368 = HEAP8[594275>>0]|0;
 $369 = $368 << 24 >> 24;
 $370 = ($369|0)==(0);
 if ($370) {
  $371 = $flen;
  _parse_smal(0,$371);
 }
 $372 = HEAP8[594275>>0]|0;
 $373 = $372 << 24 >> 24;
 $374 = ($373|0)==(0);
 do {
  if ($374) {
   (_parse_jpeg(0)|0);
   $375 = (_strncmp(594339,623739,2)|0);
   $376 = ($375|0)!=(0);
   if ($376) {
    $377 = (_strncmp(594339,623742,5)|0);
    $378 = ($377|0)!=(0);
    if (!($378)) {
     label = 91;
    }
   } else {
    label = 91;
   }
   if ((label|0) == 91) {
    $379 = HEAP32[944>>2]|0;
    $380 = (_fseek($379,-6404096,2)|0);
    $381 = ($380|0)!=(0);
    if (!($381)) {
     $382 = HEAP32[944>>2]|0;
     $383 = (_fread($head,1,32,$382)|0);
     $384 = ($383|0)!=(0);
     if ($384) {
      $385 = (_strcmp($head,623748)|0);
      $386 = ($385|0)!=(0);
      if (!($386)) {
       (_strcpy(594275,594692)|0);
       $387 = HEAP32[944>>2]|0;
       $388 = (_ftell($387)|0);
       $389 = (($388) + 32768)|0;
       $390 = (($389) - 32)|0;
       HEAP32[1524>>2] = $390;
       $391 = HEAP16[580226>>1]|0;
       HEAP16[580076>>1] = $391;
       HEAP16[580226>>1] = 2611;
       HEAP32[31028>>2] = 16;
       HEAP32[776>>2] = 370546198;
       break;
      }
     }
    }
   }
   HEAP32[1508>>2] = 0;
  }
 } while(0);
 $i = 0;
 while(1) {
  $392 = $i;
  $393 = ($392>>>0)<(21);
  if (!($393)) {
   break;
  }
  $394 = $i;
  $395 = (316256 + ($394<<2)|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = (_my_strcasestr(594275,$396)|0);
  $398 = ($397|0)!=(0|0);
  if ($398) {
   $399 = $i;
   $400 = (316256 + ($399<<2)|0);
   $401 = HEAP32[$400>>2]|0;
   (_strcpy(594275,$401)|0);
  }
  $402 = $i;
  $403 = (($402) + 1)|0;
  $i = $403;
 }
 $404 = (_strcmp(594275,615147)|0);
 $405 = ($404|0)!=(0);
 if ($405) {
  $406 = (_strcmp(594275,623499)|0);
  $407 = ($406|0)!=(0);
  if (!($407)) {
   label = 103;
  }
 } else {
  label = 103;
 }
 do {
  if ((label|0) == 103) {
   $408 = (_my_strcasestr(594339,623754)|0);
   $cp = $408;
   $409 = ($408|0)!=(0|0);
   if (!($409)) {
    $410 = (_strstr(594339,623770)|0);
    $cp = $410;
    $411 = ($410|0)!=(0|0);
    if (!($411)) {
     break;
    }
   }
   $412 = $cp;
   HEAP8[$412>>0] = 0;
  }
 } while(0);
 $413 = (_strncasecmp(594339,613887,6)|0);
 $414 = ($413|0)!=(0);
 if (!($414)) {
  (_strcpy(594275,623513)|0);
 }
 $415 = (_strlen(594275)|0);
 $416 = (594275 + ($415)|0);
 $cp = $416;
 while(1) {
  $417 = $cp;
  $418 = ((($417)) + -1|0);
  $cp = $418;
  $419 = HEAP8[$418>>0]|0;
  $420 = $419 << 24 >> 24;
  $421 = ($420|0)==(32);
  if (!($421)) {
   break;
  }
  $422 = $cp;
  HEAP8[$422>>0] = 0;
 }
 $423 = (_strlen(594339)|0);
 $424 = (594339 + ($423)|0);
 $cp = $424;
 while(1) {
  $425 = $cp;
  $426 = ((($425)) + -1|0);
  $cp = $426;
  $427 = HEAP8[$426>>0]|0;
  $428 = $427 << 24 >> 24;
  $429 = ($428|0)==(32);
  if (!($429)) {
   break;
  }
  $430 = $cp;
  HEAP8[$430>>0] = 0;
 }
 $431 = (_strlen(594275)|0);
 $i = $431;
 $432 = $i;
 $433 = (_strncasecmp(594339,594275,$432)|0);
 $434 = ($433|0)!=(0);
 if (!($434)) {
  $435 = $i;
  $436 = (($435) + 1)|0;
  $i = $436;
  $437 = (594339 + ($435)|0);
  $438 = HEAP8[$437>>0]|0;
  $439 = $438 << 24 >> 24;
  $440 = ($439|0)==(32);
  if ($440) {
   $441 = $i;
   $442 = (594339 + ($441)|0);
   $443 = $i;
   $444 = (64 - ($443))|0;
   _memmove((594339|0),($442|0),($444|0))|0;
  }
 }
 $445 = (_strncmp(594339,623783,8)|0);
 $446 = ($445|0)!=(0);
 if (!($446)) {
  (_strcpy(594339,(594347))|0);
 }
 $447 = (_strncmp(594339,623792,15)|0);
 $448 = ($447|0)!=(0);
 if (!($448)) {
  (_strcpy(594339,(594354))|0);
 }
 HEAP8[(593967)>>0] = 0;
 HEAP8[(594402)>>0] = 0;
 HEAP8[(594338)>>0] = 0;
 HEAP8[(613872)>>0] = 0;
 HEAP8[(614970)>>0] = 0;
 $449 = HEAP32[1508>>2]|0;
 $450 = ($449|0)!=(0);
 do {
  if ($450) {
   $451 = HEAP16[580074>>1]|0;
   $452 = ($451<<16>>16)!=(0);
   if (!($452)) {
    $453 = HEAP16[580244>>1]|0;
    HEAP16[580074>>1] = $453;
   }
   $454 = HEAP16[580076>>1]|0;
   $455 = ($454<<16>>16)!=(0);
   if (!($455)) {
    $456 = HEAP16[580226>>1]|0;
    HEAP16[580076>>1] = $456;
   }
   $457 = HEAP16[580074>>1]|0;
   $458 = $457&65535;
   $459 = ($458|0)==(2624);
   if ($459) {
    $460 = HEAP16[580076>>1]|0;
    $461 = $460&65535;
    $462 = ($461|0)==(3936);
    if ($462) {
     HEAP16[580074>>1] = 2616;
     HEAP16[580076>>1] = 3896;
    }
   }
   $463 = HEAP16[580074>>1]|0;
   $464 = $463&65535;
   $465 = ($464|0)==(3136);
   if ($465) {
    $466 = HEAP16[580076>>1]|0;
    $467 = $466&65535;
    $468 = ($467|0)==(4864);
    if ($468) {
     HEAP16[580074>>1] = 3124;
     HEAP16[580076>>1] = 4688;
     HEAP32[776>>2] = 370546198;
    }
   }
   $469 = HEAP16[580076>>1]|0;
   $470 = $469&65535;
   $471 = ($470|0)==(4352);
   do {
    if ($471) {
     $472 = (_strcmp(594339,623808)|0);
     $473 = ($472|0)!=(0);
     if ($473) {
      $474 = (_strcmp(594339,623812)|0);
      $475 = ($474|0)!=(0);
      if ($475) {
       break;
      }
     }
     HEAP16[580076>>1] = 4309;
     HEAP32[776>>2] = 370546198;
    }
   } while(0);
   $476 = HEAP16[580076>>1]|0;
   $477 = $476&65535;
   $478 = ($477|0)>=(4960);
   if ($478) {
    $479 = (_strncmp(594339,623816,3)|0);
    $480 = ($479|0)!=(0);
    if (!($480)) {
     HEAP16[448956>>1] = 10;
     HEAP16[580076>>1] = 4950;
     HEAP32[776>>2] = 370546198;
    }
   }
   $481 = HEAP16[580076>>1]|0;
   $482 = $481&65535;
   $483 = ($482|0)==(4736);
   do {
    if ($483) {
     $484 = (_strcmp(594339,623820)|0);
     $485 = ($484|0)!=(0);
     if ($485) {
      break;
     }
     HEAP16[580074>>1] = 3122;
     HEAP16[580076>>1] = 4684;
     HEAP32[776>>2] = 370546198;
     HEAP16[448958>>1] = 2;
    }
   } while(0);
   $486 = HEAP16[580076>>1]|0;
   $487 = $486&65535;
   $488 = ($487|0)==(6080);
   do {
    if ($488) {
     $489 = (_strcmp(594339,623824)|0);
     $490 = ($489|0)!=(0);
     if ($490) {
      break;
     }
     HEAP16[448956>>1] = 4;
     HEAP16[580076>>1] = 6040;
    }
   } while(0);
   $491 = HEAP16[580076>>1]|0;
   $492 = $491&65535;
   $493 = ($492|0)==(7424);
   do {
    if ($493) {
     $494 = (_strcmp(594339,623828)|0);
     $495 = ($494|0)!=(0);
     if ($495) {
      break;
     }
     HEAP16[580074>>1] = 5502;
     HEAP16[580076>>1] = 7328;
     HEAP32[776>>2] = 1633771873;
     HEAP16[448958>>1] = 29;
     HEAP16[448956>>1] = 48;
    }
   } while(0);
   $496 = HEAP16[580074>>1]|0;
   $497 = $496&65535;
   $498 = ($497|0)==(3014);
   do {
    if ($498) {
     $499 = HEAP16[580076>>1]|0;
     $500 = $499&65535;
     $501 = ($500|0)==(4096);
     if (!($501)) {
      break;
     }
     HEAP16[580076>>1] = 4014;
    }
   } while(0);
   $502 = HEAP32[1064>>2]|0;
   $503 = ($502|0)!=(0);
   L213: do {
    if ($503) {
     $504 = HEAP32[776>>2]|0;
     $505 = ($504|0)==(-1);
     if ($505) {
      HEAP32[776>>2] = 0;
     }
     $506 = HEAP32[776>>2]|0;
     $507 = ($506|0)!=(0);
     $508 = HEAP32[1076>>2]|0;
     if ($507) {
      $509 = HEAP32[1508>>2]|0;
      $510 = Math_imul($509, $508)|0;
      HEAP32[1508>>2] = $510;
     } else {
      HEAP32[980>>2] = $508;
     }
     $511 = HEAP32[1060>>2]|0;
     $switch$split2D = ($511|0)<(7);
     L222: do {
      if ($switch$split2D) {
       switch ($511|0) {
       case 1: case 0:  {
        break;
       }
       default: {
        break L222;
       }
       }
       HEAP32[31028>>2] = 49;
       break L213;
      } else {
       $switch$split12D = ($511|0)<(34892);
       if ($switch$split12D) {
        switch ($511|0) {
        case 7:  {
         break;
        }
        default: {
         break L222;
        }
        }
        HEAP32[31028>>2] = 50;
        break L213;
       } else {
        switch ($511|0) {
        case 34892:  {
         break;
        }
        default: {
         break L222;
        }
        }
        HEAP32[31028>>2] = 51;
        break L213;
       }
      }
     } while(0);
     HEAP32[31028>>2] = 0;
    } else {
     $512 = (_strcmp(594275,613803)|0);
     $513 = ($512|0)!=(0);
     $514 = $fsize;
     $515 = ($514|0)!=(0);
     $or$cond3 = $513 | $515;
     $or$cond3$not = $or$cond3 ^ 1;
     $516 = HEAP32[1516>>2]|0;
     $517 = ($516|0)!=(15);
     $or$cond5 = $or$cond3$not & $517;
     do {
      if ($or$cond5) {
       $518 = HEAP32[31028>>2]|0;
       $519 = ($518|0)!=(0|0);
       if (!($519)) {
        HEAP32[31028>>2] = 10;
       }
       $i = 0;
       while(1) {
        $520 = $i;
        $521 = ($520>>>0)<(43);
        if (!($521)) {
         break;
        }
        $522 = HEAP16[580226>>1]|0;
        $523 = $522&65535;
        $524 = $i;
        $525 = (589702 + (($524*22)|0)|0);
        $526 = HEAP16[$525>>1]|0;
        $527 = $526&65535;
        $528 = ($523|0)==($527|0);
        do {
         if ($528) {
          $529 = HEAP16[580244>>1]|0;
          $530 = $529&65535;
          $531 = $i;
          $532 = (589702 + (($531*22)|0)|0);
          $533 = ((($532)) + 2|0);
          $534 = HEAP16[$533>>1]|0;
          $535 = $534&65535;
          $536 = ($530|0)==($535|0);
          if (!($536)) {
           break;
          }
          $537 = HEAP16[580226>>1]|0;
          $538 = $537&65535;
          $539 = $i;
          $540 = (589702 + (($539*22)|0)|0);
          $541 = ((($540)) + 4|0);
          $542 = HEAP16[$541>>1]|0;
          HEAP16[448956>>1] = $542;
          $543 = $542&65535;
          $544 = (($538) - ($543))|0;
          $545 = $544&65535;
          HEAP16[580076>>1] = $545;
          $546 = HEAP16[580244>>1]|0;
          $547 = $546&65535;
          $548 = $i;
          $549 = (589702 + (($548*22)|0)|0);
          $550 = ((($549)) + 6|0);
          $551 = HEAP16[$550>>1]|0;
          HEAP16[448958>>1] = $551;
          $552 = $551&65535;
          $553 = (($547) - ($552))|0;
          $554 = $553&65535;
          HEAP16[580074>>1] = $554;
          $555 = $i;
          $556 = (589702 + (($555*22)|0)|0);
          $557 = ((($556)) + 8|0);
          $558 = HEAP16[$557>>1]|0;
          $559 = $558&65535;
          $560 = HEAP16[580076>>1]|0;
          $561 = $560&65535;
          $562 = (($561) - ($559))|0;
          $563 = $562&65535;
          HEAP16[580076>>1] = $563;
          $564 = $i;
          $565 = (589702 + (($564*22)|0)|0);
          $566 = ((($565)) + 10|0);
          $567 = HEAP16[$566>>1]|0;
          $568 = $567&65535;
          $569 = HEAP16[580074>>1]|0;
          $570 = $569&65535;
          $571 = (($570) - ($568))|0;
          $572 = $571&65535;
          HEAP16[580074>>1] = $572;
          $573 = $i;
          $574 = (589702 + (($573*22)|0)|0);
          $575 = ((($574)) + 12|0);
          $576 = HEAP16[$575>>1]|0;
          $577 = $576&65535;
          HEAP32[(31040)>>2] = $577;
          $578 = $i;
          $579 = (589702 + (($578*22)|0)|0);
          $580 = ((($579)) + 14|0);
          $581 = HEAP16[$580>>1]|0;
          $582 = $581&65535;
          $583 = (0 - ($582))|0;
          HEAP32[(31048)>>2] = $583;
          $584 = $i;
          $585 = (589702 + (($584*22)|0)|0);
          $586 = ((($585)) + 16|0);
          $587 = HEAP16[$586>>1]|0;
          $588 = $587&65535;
          HEAP32[(31056)>>2] = $588;
          $589 = $i;
          $590 = (589702 + (($589*22)|0)|0);
          $591 = ((($590)) + 18|0);
          $592 = HEAP16[$591>>1]|0;
          $593 = $592&65535;
          $594 = (0 - ($593))|0;
          HEAP32[(31064)>>2] = $594;
          $595 = $i;
          $596 = (589702 + (($595*22)|0)|0);
          $597 = ((($596)) + 20|0);
          $598 = HEAP16[$597>>1]|0;
          $599 = ($598<<16>>16)!=(0);
          if (!($599)) {
           break;
          }
          $600 = $i;
          $601 = (589702 + (($600*22)|0)|0);
          $602 = ((($601)) + 20|0);
          $603 = HEAP16[$602>>1]|0;
          $604 = $603&65535;
          $605 = Math_imul($604, 16843009)|0;
          HEAP32[776>>2] = $605;
         }
        } while(0);
        $606 = $i;
        $607 = (($606) + 1)|0;
        $i = $607;
       }
       $608 = HEAP32[1072>>2]|0;
       $609 = $608 | 131072;
       $610 = ($609|0)==(41025536);
       if (!($610)) {
        break;
       }
       HEAP16[448956>>1] = 8;
       HEAP16[448958>>1] = 16;
      }
     } while(0);
     $i = 0;
     while(1) {
      $611 = $i;
      $612 = ($611>>>0)<(43);
      if (!($612)) {
       break;
      }
      $613 = HEAP32[1072>>2]|0;
      $614 = $i;
      $615 = (590648 + (($614*22)|0)|0);
      $616 = HEAP16[$615>>1]|0;
      $617 = $616&65535;
      $618 = (-2147483648 + ($617))|0;
      $619 = ($613|0)==($618|0);
      do {
       if ($619) {
        $620 = $i;
        $621 = (590648 + (($620*22)|0)|0);
        $622 = ((($621)) + 2|0);
        _adobe_coeff(613803,$622);
        $623 = HEAP8[(594343)>>0]|0;
        $624 = $623 << 24 >> 24;
        $625 = ($624|0)==(75);
        if (!($625)) {
         break;
        }
        $626 = (_strlen(594339)|0);
        $627 = ($626|0)==(8);
        if (!($627)) {
         break;
        }
        $628 = $i;
        $629 = (590648 + (($628*22)|0)|0);
        $630 = ((($629)) + 2|0);
        (_strcpy(594339,$630)|0);
       }
      } while(0);
      $631 = $i;
      $632 = (($631) + 1)|0;
      $i = $632;
     }
     $i = 0;
     while(1) {
      $633 = $i;
      $634 = ($633>>>0)<(58);
      if (!($634)) {
       break;
      }
      $635 = HEAP32[1072>>2]|0;
      $636 = $i;
      $637 = (591594 + (($636*22)|0)|0);
      $638 = HEAP16[$637>>1]|0;
      $639 = $638&65535;
      $640 = ($635|0)==($639|0);
      if ($640) {
       $641 = $i;
       $642 = (591594 + (($641*22)|0)|0);
       $643 = ((($642)) + 2|0);
       (_strcpy(594339,$643)|0);
      }
      $644 = $i;
      $645 = (($644) + 1)|0;
      $i = $645;
     }
     $646 = (_strcmp(594275,613704)|0);
     $647 = ($646|0)!=(0);
     do {
      if (!($647)) {
       $648 = HEAP32[31028>>2]|0;
       $649 = ($648|0)!=(0|0);
       if (!($649)) {
        HEAP32[31028>>2] = 15;
       }
       $650 = HEAP8[594339>>0]|0;
       $651 = $650 << 24 >> 24;
       $652 = ($651|0)==(69);
       if (!($652)) {
        break;
       }
       $653 = HEAP32[1524>>2]|0;
       $654 = ($653|0)!=(0);
       $655 = $654 ^ 1;
       $656 = $655&1;
       $657 = $656 << 2;
       $658 = $657 | 2;
       $659 = HEAP32[1068>>2]|0;
       $660 = $659 | $658;
       HEAP32[1068>>2] = $660;
      }
     } while(0);
     $661 = (_strcmp(594339,623833)|0);
     $662 = ($661|0)!=(0);
     do {
      if (!($662)) {
       $663 = (+_find_green(16,16,3840,5120));
       $664 = $663 < 25.0;
       if (!($664)) {
        break;
       }
       HEAP16[580074>>1] = 480;
       HEAP32[776>>2] = 0;
       HEAP16[448958>>1] = 0;
       (_strcpy(594339,623842)|0);
      }
     } while(0);
     $665 = (_strcmp(594275,623534)|0);
     $666 = ($665|0)!=(0);
     do {
      if (!($666)) {
       $667 = HEAP16[580226>>1]|0;
       $668 = $667&65535;
       $669 = ($668|0)>(3888);
       if (!($669)) {
        break;
       }
       $670 = HEAP32[1516>>2]|0;
       $671 = (($670) - 12)|0;
       $672 = 128 << $671;
       HEAP32[1036>>2] = $672;
      }
     } while(0);
     $673 = HEAP32[294636>>2]|0;
     $674 = ($673|0)!=(0);
     L280: do {
      if ($674) {
       $675 = HEAP16[580074>>1]|0;
       $676 = $675&65535;
       $677 = $676<<1;
       $678 = HEAP16[580076>>1]|0;
       $679 = $678&65535;
       $680 = ($677|0)<($679|0);
       if ($680) {
        HEAPF64[224>>3] = 0.5;
       }
       $681 = HEAP16[580074>>1]|0;
       $682 = $681&65535;
       $683 = HEAP16[580076>>1]|0;
       $684 = $683&65535;
       $685 = ($682|0)>($684|0);
       if ($685) {
        HEAPF64[224>>3] = 2.0;
       }
       HEAP32[776>>2] = 0;
       _simple_coeff(0);
      } else {
       $686 = (_strcmp(594275,613803)|0);
       $687 = ($686|0)==(0);
       $688 = HEAP32[1516>>2]|0;
       $689 = ($688|0)==(15);
       $or$cond7 = $687 & $689;
       if ($or$cond7) {
        $690 = HEAP16[580076>>1]|0;
        $691 = $690&65535;
        switch ($691|0) {
        case 3344:  {
         $692 = HEAP16[580076>>1]|0;
         $693 = $692&65535;
         $694 = (($693) - 66)|0;
         $695 = $694&65535;
         HEAP16[580076>>1] = $695;
         label = 206;
         break;
        }
        case 3872:  {
         label = 206;
         break;
        }
        default: {
        }
        }
        if ((label|0) == 206) {
         $696 = HEAP16[580076>>1]|0;
         $697 = $696&65535;
         $698 = (($697) - 6)|0;
         $699 = $698&65535;
         HEAP16[580076>>1] = $699;
        }
        $700 = HEAP16[580074>>1]|0;
        $701 = $700&65535;
        $702 = HEAP16[580076>>1]|0;
        $703 = $702&65535;
        $704 = ($701|0)>($703|0);
        if ($704) {
         $705 = HEAP16[580074>>1]|0;
         $706 = $705&65535;
         $707 = HEAP16[580076>>1]|0;
         $708 = $707&65535;
         $709 = (($706) + ($708))|0;
         $710 = $709&65535;
         HEAP16[580074>>1] = $710;
         $711 = HEAP16[580074>>1]|0;
         $712 = $711&65535;
         $713 = HEAP16[580076>>1]|0;
         $714 = $713&65535;
         $715 = (($712) - ($714))|0;
         $716 = $715&65535;
         HEAP16[580076>>1] = $716;
         $717 = HEAP16[580074>>1]|0;
         $718 = $717&65535;
         $719 = HEAP16[580076>>1]|0;
         $720 = $719&65535;
         $721 = (($718) - ($720))|0;
         $722 = $721&65535;
         HEAP16[580074>>1] = $722;
         $723 = HEAP16[580244>>1]|0;
         $724 = $723&65535;
         $725 = HEAP16[580226>>1]|0;
         $726 = $725&65535;
         $727 = (($724) + ($726))|0;
         $728 = $727&65535;
         HEAP16[580244>>1] = $728;
         $729 = HEAP16[580244>>1]|0;
         $730 = $729&65535;
         $731 = HEAP16[580226>>1]|0;
         $732 = $731&65535;
         $733 = (($730) - ($732))|0;
         $734 = $733&65535;
         HEAP16[580226>>1] = $734;
         $735 = HEAP16[580244>>1]|0;
         $736 = $735&65535;
         $737 = HEAP16[580226>>1]|0;
         $738 = $737&65535;
         $739 = (($736) - ($738))|0;
         $740 = $739&65535;
         HEAP16[580244>>1] = $740;
        }
        $741 = HEAP16[580076>>1]|0;
        $742 = $741&65535;
        $743 = ($742|0)==(7200);
        do {
         if ($743) {
          $744 = HEAP16[580074>>1]|0;
          $745 = $744&65535;
          $746 = ($745|0)==(3888);
          if (!($746)) {
           break;
          }
          HEAP16[580076>>1] = 6480;
          HEAP16[580226>>1] = 6480;
          HEAP16[580074>>1] = 4320;
          HEAP16[580244>>1] = 4320;
         }
        } while(0);
        HEAP32[776>>2] = 0;
        HEAP32[980>>2] = 3;
        HEAP32[1076>>2] = 3;
        HEAP32[31028>>2] = 52;
        break;
       }
       $747 = (_strcmp(594339,623847)|0);
       $748 = ($747|0)!=(0);
       if (!($748)) {
        HEAP16[580074>>1] = 613;
        HEAP16[580076>>1] = 854;
        HEAP16[580226>>1] = 896;
        HEAP32[980>>2] = 4;
        HEAP32[776>>2] = -505093660;
        HEAP32[31028>>2] = 11;
        break;
       }
       $749 = (_strcmp(594339,623861)|0);
       $750 = ($749|0)!=(0);
       do {
        if ($750) {
         $751 = (_strcmp(594339,623874)|0);
         $752 = ($751|0)!=(0);
         if (!($752)) {
          label = 217;
          break;
         }
         $753 = (_strcmp(594339,623892)|0);
         $754 = ($753|0)!=(0);
         if (!($754)) {
          HEAP16[580074>>1] = 968;
          HEAP16[580076>>1] = 1290;
          HEAP16[580226>>1] = 1320;
          HEAP32[776>>2] = 458115870;
          break;
         }
         $755 = (_strcmp(594339,623906)|0);
         $756 = ($755|0)!=(0);
         if (!($756)) {
          HEAP16[580074>>1] = 1024;
          HEAP16[580076>>1] = 1552;
          HEAP32[776>>2] = 508251675;
          break;
         }
         $757 = (_strcmp(594339,623922)|0);
         $758 = ($757|0)!=(0);
         do {
          if ($758) {
           $759 = (_strcmp(594339,623941)|0);
           $760 = ($759|0)!=(0);
           if (!($760)) {
            break;
           }
           $761 = (_strcmp(594339,623954)|0);
           $762 = ($761|0)!=(0);
           if (!($762)) {
            $763 = (_canon_s2is()|0);
            $764 = ($763|0)!=(0);
            if (!($764)) {
             break L280;
            }
            (_strcpy((594349),623969)|0);
            break L280;
           }
           $765 = (_strcmp(594339,623975)|0);
           $766 = ($765|0)!=(0);
           if (!($766)) {
            HEAP32[(31064)>>2] = -4;
            break L280;
           }
           $767 = (_strcmp(594339,623994)|0);
           $768 = ($767|0)!=(0);
           if (!($768)) {
            HEAP32[776>>2] = 1633771873;
            $769 = HEAP16[(449362)>>1]|0;
            $770 = $769&65535;
            HEAP32[1036>>2] = $770;
            break L280;
           }
           $771 = (_strcmp(594339,624005)|0);
           $772 = ($771|0)!=(0);
           if (!($772)) {
            $773 = +HEAPF32[1528>>2];
            $774 = $773;
            $775 = $774 * 0.48576850094876661;
            $776 = $775;
            HEAPF32[1528>>2] = $776;
            $777 = +HEAPF32[(1536)>>2];
            $778 = $777;
            $779 = $778 * 0.80757097791798105;
            $780 = $779;
            HEAPF32[(1536)>>2] = $780;
            break L280;
           }
           $781 = (_strcmp(594339,624008)|0);
           $782 = ($781|0)!=(0);
           if (!($782)) {
            $783 = HEAP16[580076>>1]|0;
            $784 = $783&65535;
            $785 = (($784) - 4)|0;
            $786 = $785&65535;
            HEAP16[580076>>1] = $786;
            HEAPF64[224>>3] = 0.5;
            break L280;
           }
           $787 = (_strcmp(594339,624012)|0);
           $788 = ($787|0)!=(0);
           do {
            if ($788) {
             $789 = (_strcmp(594339,624017)|0);
             $790 = ($789|0)!=(0);
             if (!($790)) {
              break;
             }
             $791 = (_strcmp(594339,624021)|0);
             $792 = ($791|0)!=(0);
             if (!($792)) {
              break;
             }
             $793 = (_strcmp(594339,624025)|0);
             $794 = ($793|0)!=(0);
             if (!($794)) {
              break;
             }
             $803 = (_strcmp(594339,624031)|0);
             $804 = ($803|0)!=(0);
             do {
              if ($804) {
               $805 = (_strcmp(594339,624034)|0);
               $806 = ($805|0)!=(0);
               if (!($806)) {
                break;
               }
               $807 = (_strcmp(594339,624038)|0);
               $808 = ($807|0)!=(0);
               if (!($808)) {
                break;
               }
               $813 = (_strcmp(594339,624043)|0);
               $814 = ($813|0)!=(0);
               if (!($814)) {
                $815 = HEAP16[580076>>1]|0;
                $816 = $815&65535;
                $817 = (($816) - 28)|0;
                $818 = $817&65535;
                HEAP16[580076>>1] = $818;
                HEAP16[448956>>1] = 6;
                break L280;
               }
               $819 = (_strcmp(594339,624049)|0);
               $820 = ($819|0)!=(0);
               do {
                if ($820) {
                 $821 = (_strcmp(594339,624055)|0);
                 $822 = ($821|0)!=(0);
                 if (!($822)) {
                  break;
                 }
                 $827 = (_strcmp(594339,624059)|0);
                 $828 = ($827|0)!=(0);
                 do {
                  if ($828) {
                   $829 = (_strcmp(594339,624065)|0);
                   $830 = ($829|0)!=(0);
                   if (!($830)) {
                    break;
                   }
                   $831 = (_strcmp(594339,624071)|0);
                   $832 = ($831|0)!=(0);
                   if (!($832)) {
                    break;
                   }
                   $837 = (_strcmp(594339,624081)|0);
                   $838 = ($837|0)!=(0);
                   do {
                    if ($838) {
                     $839 = (_strncmp(594339,624087,2)|0);
                     $840 = ($839|0)!=(0);
                     if (!($840)) {
                      break;
                     }
                     $841 = (_strncmp(594339,624090,4)|0);
                     $842 = ($841|0)!=(0);
                     if (!($842)) {
                      break;
                     }
                     $847 = (_strcmp(594339,624095)|0);
                     $848 = ($847|0)!=(0);
                     do {
                      if ($848) {
                       $849 = (_strcmp(594339,624098)|0);
                       $850 = ($849|0)!=(0);
                       if (!($850)) {
                        break;
                       }
                       $855 = (_strncmp(594339,624101,3)|0);
                       $856 = ($855|0)!=(0);
                       do {
                        if ($856) {
                         $857 = (_strncmp(594339,624105,3)|0);
                         $858 = ($857|0)!=(0);
                         if (!($858)) {
                          break;
                         }
                         $859 = (_strncmp(594339,624109,3)|0);
                         $860 = ($859|0)!=(0);
                         if (!($860)) {
                          break;
                         }
                         $863 = (_strcmp(594339,624113)|0);
                         $864 = ($863|0)!=(0);
                         if (!($864)) {
                          $865 = HEAP32[1068>>2]|0;
                          $866 = ($865|0)!=(0);
                          if (!($866)) {
                           break L280;
                          }
                          $867 = HEAP16[580076>>1]|0;
                          $868 = $867&65535;
                          $869 = (($868) + 3)|0;
                          $870 = $869&65535;
                          HEAP16[580076>>1] = $870;
                          $871 = $870&65535;
                          $872 = (($871) + 3)|0;
                          $873 = $872&65535;
                          HEAP16[580226>>1] = $873;
                          break L280;
                         }
                         $874 = (_strcmp(594339,624118)|0);
                         $875 = ($874|0)!=(0);
                         if (!($875)) {
                          HEAP16[448956>>1] = 1;
                          $876 = HEAP16[580076>>1]|0;
                          $877 = $876&65535;
                          $878 = (($877) - 4)|0;
                          $879 = $878&65535;
                          HEAP16[580076>>1] = $879;
                          HEAP32[776>>2] = -1802201964;
                          break L280;
                         }
                         $880 = (_strncmp(594339,624123,3)|0);
                         $881 = ($880|0)!=(0);
                         if (!($881)) {
                          HEAP16[448956>>1] = 6;
                          $882 = HEAP16[580076>>1]|0;
                          $883 = $882&65535;
                          $884 = (($883) - 14)|0;
                          $885 = $884&65535;
                          HEAP16[580076>>1] = $885;
                          break L280;
                         }
                         $886 = (_strncmp(594339,624127,3)|0);
                         $887 = ($886|0)!=(0);
                         if (!($887)) {
                          $888 = HEAP16[580076>>1]|0;
                          $889 = $888&65535;
                          $890 = ($889|0)==(3264);
                          $891 = HEAP16[580076>>1]|0;
                          $892 = $891&65535;
                          if ($890) {
                           $893 = (($892) - 32)|0;
                           $894 = $893&65535;
                           HEAP16[580076>>1] = $894;
                           break L280;
                          } else {
                           $895 = (($892) - 8)|0;
                           $896 = $895&65535;
                           HEAP16[580076>>1] = $896;
                           break L280;
                          }
                         }
                         $897 = (_strncmp(594339,624131,4)|0);
                         $898 = ($897|0)!=(0);
                         if (!($898)) {
                          $899 = HEAP16[580076>>1]|0;
                          $900 = $899&65535;
                          $901 = (($900) - 32)|0;
                          $902 = $901&65535;
                          HEAP16[580076>>1] = $902;
                          break L280;
                         }
                         $903 = (_strncmp(594339,624136,9)|0);
                         $904 = ($903|0)!=(0);
                         do {
                          if (!($904)) {
                           $905 = HEAP16[580226>>1]|0;
                           $906 = $905&65535;
                           $907 = ($906|0)!=(4032);
                           if (!($907)) {
                            break;
                           }
                           HEAP32[1068>>2] = 24;
                           HEAP32[776>>2] = -1802201964;
                           $908 = HEAP8[(594348)>>0]|0;
                           $909 = $908 << 24 >> 24;
                           $910 = ($909|0)==(55);
                           $911 = +HEAPF32[293672>>2];
                           $912 = $911 >= 400.0;
                           $or$cond9 = $910 & $912;
                           if (!($or$cond9)) {
                            break L280;
                           }
                           HEAP32[1036>>2] = 255;
                           break L280;
                          }
                         } while(0);
                         $913 = (_strncmp(594339,624146,2)|0);
                         $914 = ($913|0)!=(0);
                         if (!($914)) {
                          $915 = HEAP16[580074>>1]|0;
                          $916 = $915&65535;
                          $917 = (($916) - 2)|0;
                          $918 = $917&65535;
                          HEAP16[580074>>1] = $918;
                          break L280;
                         }
                         $919 = $fsize;
                         $920 = ($919|0)==(1581060);
                         if ($920) {
                          _simple_coeff(3);
                          HEAPF32[948>>2] = 1.2085000276565552;
                          HEAPF32[(952)>>2] = 1.0943000316619873;
                          HEAPF32[(960)>>2] = 1.1102999448776245;
                          break L280;
                         }
                         $921 = $fsize;
                         $922 = ($921|0)==(3178560);
                         if ($922) {
                          $923 = +HEAPF32[1528>>2];
                          $924 = $923 * 4.0;
                          HEAPF32[1528>>2] = $924;
                          $925 = +HEAPF32[(1536)>>2];
                          $926 = $925 * 4.0;
                          HEAPF32[(1536)>>2] = $926;
                          break L280;
                         }
                         $927 = $fsize;
                         $928 = ($927|0)==(4771840);
                         if ($928) {
                          $929 = HEAP32[31164>>2]|0;
                          $930 = ($929|0)!=(0);
                          do {
                           if (!($930)) {
                            $931 = (_nikon_e995()|0);
                            $932 = ($931|0)!=(0);
                            if (!($932)) {
                             break;
                            }
                            (_strcpy(594339,624149)|0);
                           }
                          } while(0);
                          $933 = (_strcmp(594339,624149)|0);
                          $934 = ($933|0)!=(0);
                          if (!($934)) {
                           break L280;
                          }
                          HEAP32[776>>2] = -1263225676;
                          _simple_coeff(3);
                          HEAPF32[948>>2] = 1.1959999799728394;
                          HEAPF32[(952)>>2] = 1.2460000514984131;
                          HEAPF32[(956)>>2] = 1.0180000066757202;
                          break L280;
                         }
                         $935 = $fsize;
                         $936 = ($935|0)==(2940928);
                         if ($936) {
                          $937 = HEAP32[31164>>2]|0;
                          $938 = ($937|0)!=(0);
                          do {
                           if (!($938)) {
                            $939 = (_nikon_e2100()|0);
                            $940 = ($939|0)!=(0);
                            if ($940) {
                             break;
                            }
                            (_strcpy(594339,624154)|0);
                           }
                          } while(0);
                          $941 = (_strcmp(594339,624154)|0);
                          $942 = ($941|0)!=(0);
                          if ($942) {
                           break L280;
                          }
                          $943 = HEAP16[580074>>1]|0;
                          $944 = $943&65535;
                          $945 = (($944) - 2)|0;
                          $946 = $945&65535;
                          HEAP16[580074>>1] = $946;
                          HEAP32[1068>>2] = 6;
                          HEAP32[980>>2] = 4;
                          HEAP32[776>>2] = 1263225675;
                          break L280;
                         }
                         $947 = $fsize;
                         $948 = ($947|0)==(4775936);
                         if ($948) {
                          $949 = HEAP32[31164>>2]|0;
                          $950 = ($949|0)!=(0);
                          if (!($950)) {
                           _nikon_3700();
                          }
                          $951 = HEAP8[594339>>0]|0;
                          $952 = $951 << 24 >> 24;
                          $953 = ($952|0)==(69);
                          do {
                           if ($953) {
                            $954 = (_atoi((594340))|0);
                            $955 = ($954|0)<(3700);
                            if (!($955)) {
                             break;
                            }
                            HEAP32[776>>2] = 1229539657;
                           }
                          } while(0);
                          $956 = (_strcmp(594339,624160)|0);
                          $957 = ($956|0)!=(0);
                          if (!($957)) {
                           HEAP32[293688>>2] = 1;
                           HEAP32[776>>2] = 370546198;
                          }
                          $958 = HEAP8[594275>>0]|0;
                          $959 = $958 << 24 >> 24;
                          $960 = ($959|0)==(79);
                          if (!($960)) {
                           break L280;
                          }
                          $961 = (+_find_green(12,32,1188864,3576832));
                          $962 = (~~(($961)));
                          $i = $962;
                          $963 = (+_find_green(12,32,2383920,2387016));
                          $964 = (~~(($963)));
                          $c = $964;
                          $965 = $i;
                          $966 = (Math_abs(($965|0))|0);
                          $967 = $c;
                          $968 = (Math_abs(($967|0))|0);
                          $969 = ($966|0)<($968|0);
                          if ($969) {
                           $970 = $i;
                           $971 = $c;
                           $972 = (($970) + ($971))|0;
                           $i = $972;
                           $973 = $i;
                           $974 = $c;
                           $975 = (($973) - ($974))|0;
                           $c = $975;
                           $976 = $i;
                           $977 = $c;
                           $978 = (($976) - ($977))|0;
                           $i = $978;
                           HEAP32[1068>>2] = 24;
                          }
                          $979 = $i;
                          $980 = ($979|0)<(0);
                          if (!($980)) {
                           break L280;
                          }
                          HEAP32[776>>2] = 1633771873;
                          break L280;
                         }
                         $981 = $fsize;
                         $982 = ($981|0)==(5869568);
                         if ($982) {
                          $983 = HEAP32[31164>>2]|0;
                          $984 = ($983|0)!=(0);
                          do {
                           if (!($984)) {
                            $985 = (_minolta_z2()|0);
                            $986 = ($985|0)!=(0);
                            if (!($986)) {
                             break;
                            }
                            (_strcpy(594275,623475)|0);
                            (_strcpy(594339,624171)|0);
                           }
                          } while(0);
                          $987 = HEAP8[594275>>0]|0;
                          $988 = $987 << 24 >> 24;
                          $989 = ($988|0)==(77);
                          $990 = $989&1;
                          $991 = ($990*24)|0;
                          $992 = (6 + ($991))|0;
                          HEAP32[1068>>2] = $992;
                          break L280;
                         }
                         $993 = $fsize;
                         $994 = ($993|0)==(6291456);
                         if ($994) {
                          $995 = HEAP32[944>>2]|0;
                          (_fseek($995,3145728,0)|0);
                          $996 = (_guess_byte_order(65536)|0);
                          HEAP16[448960>>1] = $996;
                          $997 = $996 << 16 >> 16;
                          $998 = ($997|0)==(19789);
                          if (!($998)) {
                           break L280;
                          }
                          HEAP16[448958>>1] = 16;
                          $999 = HEAP16[580074>>1]|0;
                          $1000 = $999&65535;
                          $1001 = (($1000) - 16)|0;
                          $1002 = $1001&65535;
                          HEAP16[580074>>1] = $1002;
                          HEAP16[448956>>1] = 28;
                          $1003 = HEAP16[580076>>1]|0;
                          $1004 = $1003&65535;
                          $1005 = (($1004) - 28)|0;
                          $1006 = $1005&65535;
                          HEAP16[580076>>1] = $1006;
                          HEAP32[1040>>2] = 62912;
                          (_strcpy(594275,624181)|0);
                          HEAP8[594339>>0] = 0;
                          break L280;
                         }
                         $1007 = (_strcmp(594275,623459)|0);
                         $1008 = ($1007|0)!=(0);
                         if (!($1008)) {
                          $1009 = (_strcmp((594346),624185)|0);
                          $1010 = ($1009|0)!=(0);
                          do {
                           if ($1010) {
                            $1011 = HEAP32[31028>>2]|0;
                            $1012 = ($1011|0)!=(15|0);
                            if (!($1012)) {
                             break;
                            }
                            $1013 = HEAP32[1508>>2]|0;
                            $1014 = ($1013|0)==(2);
                            $1015 = HEAP32[664>>2]|0;
                            $1016 = ($1015|0)!=(0);
                            $1017 = $1014 ? $1016 : 0;
                            $1018 = $1017 ? 12032 : 15872;
                            HEAP32[1040>>2] = $1018;
                           } else {
                            (_strcpy(594339,624185)|0);
                            HEAP16[580074>>1] = 2144;
                            HEAP16[580076>>1] = 2880;
                            HEAP32[293688>>2] = 6;
                           }
                          } while(0);
                          $1019 = HEAP16[580244>>1]|0;
                          $1020 = $1019&65535;
                          $1021 = HEAP16[580074>>1]|0;
                          $1022 = $1021&65535;
                          $1023 = (($1020) - ($1022))|0;
                          $1024 = $1023 >> 2;
                          $1025 = $1024 << 1;
                          $1026 = $1025&65535;
                          HEAP16[448958>>1] = $1026;
                          $1027 = HEAP16[580226>>1]|0;
                          $1028 = $1027&65535;
                          $1029 = HEAP16[580076>>1]|0;
                          $1030 = $1029&65535;
                          $1031 = (($1028) - ($1030))|0;
                          $1032 = $1031 >> 2;
                          $1033 = $1032 << 1;
                          $1034 = $1033&65535;
                          HEAP16[448956>>1] = $1034;
                          $1035 = HEAP16[580076>>1]|0;
                          $1036 = $1035&65535;
                          $1037 = ($1036|0)==(2848);
                          if ($1037) {
                           label = 329;
                          } else {
                           $1038 = HEAP16[580076>>1]|0;
                           $1039 = $1038&65535;
                           $1040 = ($1039|0)==(3664);
                           if ($1040) {
                            label = 329;
                           }
                          }
                          if ((label|0) == 329) {
                           HEAP32[776>>2] = 370546198;
                          }
                          $1041 = HEAP16[580076>>1]|0;
                          $1042 = $1041&65535;
                          $1043 = ($1042|0)==(4032);
                          do {
                           if ($1043) {
                            label = 333;
                           } else {
                            $1044 = HEAP16[580076>>1]|0;
                            $1045 = $1044&65535;
                            $1046 = ($1045|0)==(4952);
                            if ($1046) {
                             label = 333;
                             break;
                            }
                            $1047 = HEAP16[580076>>1]|0;
                            $1048 = $1047&65535;
                            $1049 = ($1048|0)==(6032);
                            if ($1049) {
                             label = 333;
                            }
                           }
                          } while(0);
                          if ((label|0) == 333) {
                           HEAP16[448956>>1] = 0;
                          }
                          $1050 = HEAP16[580076>>1]|0;
                          $1051 = $1050&65535;
                          $1052 = ($1051|0)==(3328);
                          do {
                           if ($1052) {
                            $1053 = HEAP16[580076>>1]|0;
                            $1054 = $1053&65535;
                            $1055 = (($1054) - 66)|0;
                            $1056 = $1055&65535;
                            HEAP16[580076>>1] = $1056;
                            $1057 = $1056&65535;
                            $1058 = ($1057|0)!=(0);
                            if (!($1058)) {
                             break;
                            }
                            HEAP16[448956>>1] = 34;
                           }
                          } while(0);
                          $1059 = HEAP16[580076>>1]|0;
                          $1060 = $1059&65535;
                          $1061 = ($1060|0)==(4936);
                          if ($1061) {
                           HEAP16[448956>>1] = 4;
                          }
                          $1062 = (_strcmp(594339,624191)|0);
                          $1063 = ($1062|0)!=(0);
                          if ($1063) {
                           $1064 = (_strcmp(594339,624199)|0);
                           $1065 = ($1064|0)!=(0);
                           if (!($1065)) {
                            label = 341;
                           }
                          } else {
                           label = 341;
                          }
                          if ((label|0) == 341) {
                           $1066 = HEAP16[580076>>1]|0;
                           $1067 = $1066&65535;
                           $1068 = (($1067) + 2)|0;
                           $1069 = $1068&65535;
                           HEAP16[580076>>1] = $1069;
                           HEAP16[448956>>1] = 0;
                           HEAP32[776>>2] = 370546198;
                          }
                          $1070 = HEAP32[31032>>2]|0;
                          $1071 = ($1070|0)!=(0);
                          if ($1071) {
                           $1072 = HEAP32[1508>>2]|0;
                           $1073 = HEAP16[580226>>1]|0;
                           $1074 = $1073&65535;
                           $1075 = Math_imul($1074, $1072)|0;
                           $1076 = $1075&65535;
                           HEAP16[580226>>1] = $1076;
                          }
                          $1077 = HEAP32[776>>2]|0;
                          $1078 = ($1077|0)==(9);
                          if (!($1078)) {
                           break L280;
                          }
                          $c = 0;
                          while(1) {
                           $1079 = $c;
                           $1080 = ($1079|0)<(36);
                           if (!($1080)) {
                            break L280;
                           }
                           $1081 = $c;
                           $1082 = HEAP16[448956>>1]|0;
                           $1083 = $1082&65535;
                           $1084 = (($1081) + ($1083))|0;
                           $1085 = (($1084|0) % 6)&-1;
                           $1086 = $c;
                           $1087 = (($1086|0) / 6)&-1;
                           $1088 = HEAP16[448958>>1]|0;
                           $1089 = $1088&65535;
                           $1090 = (($1087) + ($1089))|0;
                           $1091 = (($1090|0) % 6)&-1;
                           $1092 = (615466 + (($1091*6)|0)|0);
                           $1093 = (($1092) + ($1085)|0);
                           $1094 = HEAP8[$1093>>0]|0;
                           $1095 = $c;
                           $1096 = (593126 + ($1095)|0);
                           HEAP8[$1096>>0] = $1094;
                           $1097 = $c;
                           $1098 = (($1097) + 1)|0;
                           $c = $1098;
                          }
                         }
                         $1099 = (_strcmp(594339,624207)|0);
                         $1100 = ($1099|0)!=(0);
                         if ($1100) {
                          $1101 = (_strcmp(594339,624215)|0);
                          $1102 = ($1101|0)!=(0);
                          L483: do {
                           if ($1102) {
                            $1103 = (_strcasecmp(594275,623475)|0);
                            $1104 = ($1103|0)!=(0);
                            if (!($1104)) {
                             $1105 = HEAP32[31028>>2]|0;
                             $1106 = ($1105|0)!=(0|0);
                             if (!($1106)) {
                              HEAP32[1040>>2] = 4095;
                              HEAP32[31028>>2] = 24;
                             }
                             $1107 = (_strncmp(594339,624223,8)|0);
                             $1108 = ($1107|0)!=(0);
                             if (!($1108)) {
                              $1109 = (_strcmp(594339,615163)|0);
                              $1110 = ($1109|0)!=(0);
                              if (!($1110)) {
                               HEAP32[776>>2] = 1229539657;
                              }
                              HEAP32[1516>>2] = 12;
                              HEAP32[31028>>2] = 15;
                              break L280;
                             }
                             $1111 = (_strncmp(594339,624232,5)|0);
                             $1112 = ($1111|0)!=(0);
                             do {
                              if ($1112) {
                               $1113 = (_strncmp(594339,624238,5)|0);
                               $1114 = ($1113|0)!=(0);
                               if (!($1114)) {
                                break;
                               }
                               $1115 = (_strncmp(594339,624244,6)|0);
                               $1116 = ($1115|0)!=(0);
                               if (!($1116)) {
                                break;
                               }
                               $1122 = (_strncmp(594339,624263,8)|0);
                               $1123 = ($1122|0)!=(0);
                               if ($1123) {
                                break L280;
                               }
                               $1124 = HEAP8[(594347)>>0]|0;
                               $1125 = $1124 << 24 >> 24;
                               $1126 = ($1125|0)==(52);
                               if ($1126) {
                                HEAP16[580074>>1] = 1716;
                                HEAP16[580076>>1] = 2304;
                                break L483;
                               }
                               $1127 = HEAP8[(594347)>>0]|0;
                               $1128 = $1127 << 24 >> 24;
                               $1129 = ($1128|0)==(53);
                               if ($1129) {
                                label = 366;
                                break L483;
                               }
                               $1130 = HEAP8[(594347)>>0]|0;
                               $1131 = $1130 << 24 >> 24;
                               $1132 = ($1131|0)==(54);
                               if (!($1132)) {
                                break L483;
                               }
                               HEAP16[580074>>1] = 2136;
                               HEAP16[580076>>1] = 2848;
                               break L483;
                              }
                             } while(0);
                             $1117 = HEAP8[594339>>0]|0;
                             $1118 = $1117 << 24 >> 24;
                             $1119 = ($1118|0)==(77);
                             $1120 = $1119&1;
                             $1121 = ((594345) + ($1120)|0);
                             HEAP32[$vararg_buffer>>2] = $1121;
                             (_sprintf((594359),624251,$vararg_buffer)|0);
                             _adobe_coeff(594275,(594359));
                             HEAP32[31028>>2] = 15;
                             break L280;
                            }
                            $1135 = (_strcmp(594339,624272)|0);
                            $1136 = ($1135|0)!=(0);
                            if (!($1136)) {
                             HEAP32[31028>>2] = 24;
                             HEAP32[940>>2] = -1;
                             break L280;
                            }
                            $1137 = (_strcmp(594339,624279)|0);
                            $1138 = ($1137|0)!=(0);
                            if (!($1138)) {
                             $1139 = HEAP16[580074>>1]|0;
                             $1140 = $1139&65535;
                             $1141 = (($1140) - 2)|0;
                             $1142 = $1141&65535;
                             HEAP16[580074>>1] = $1142;
                             break L280;
                            }
                            $1143 = (_strcmp(594275,623520)|0);
                            $1144 = ($1143|0)!=(0);
                            do {
                             if (!($1144)) {
                              $1145 = HEAP16[580226>>1]|0;
                              $1146 = $1145&65535;
                              $1147 = ($1146|0)==(4704);
                              if (!($1147)) {
                               break;
                              }
                              HEAP16[448958>>1] = 8;
                              $1148 = HEAP16[580074>>1]|0;
                              $1149 = $1148&65535;
                              $1150 = (($1149) - 8)|0;
                              $1151 = $1150&65535;
                              HEAP16[580074>>1] = $1151;
                              HEAP16[448956>>1] = 8;
                              $1152 = HEAP16[580076>>1]|0;
                              $1153 = $1152&65535;
                              $1154 = (($1153) - 16)|0;
                              $1155 = $1154&65535;
                              HEAP16[580076>>1] = $1155;
                              HEAP32[1068>>2] = 32;
                              break L280;
                             }
                            } while(0);
                            $1156 = (_strcmp(594275,623520)|0);
                            $1157 = ($1156|0)!=(0);
                            do {
                             if (!($1157)) {
                              $1158 = HEAP16[580244>>1]|0;
                              $1159 = $1158&65535;
                              $1160 = ($1159|0)==(3714);
                              if (!($1160)) {
                               break;
                              }
                              HEAP16[448958>>1] = 18;
                              $1161 = HEAP16[580074>>1]|0;
                              $1162 = $1161&65535;
                              $1163 = (($1162) - 18)|0;
                              $1164 = $1163&65535;
                              HEAP16[580074>>1] = $1164;
                              $1165 = HEAP16[580226>>1]|0;
                              $1166 = $1165&65535;
                              HEAP16[580076>>1] = 5536;
                              $1167 = (($1166) - 5536)|0;
                              $1168 = $1167&65535;
                              HEAP16[448956>>1] = $1168;
                              $1169 = HEAP16[580226>>1]|0;
                              $1170 = $1169&65535;
                              $1171 = ($1170|0)!=(5600);
                              if ($1171) {
                               HEAP16[448958>>1] = 0;
                               HEAP16[448956>>1] = 0;
                              }
                              HEAP32[776>>2] = 1633771873;
                              HEAP32[980>>2] = 3;
                              break L280;
                             }
                            } while(0);
                            $1172 = (_strcmp(594275,623520)|0);
                            $1173 = ($1172|0)!=(0);
                            do {
                             if (!($1173)) {
                              $1174 = HEAP16[580226>>1]|0;
                              $1175 = $1174&65535;
                              $1176 = ($1175|0)==(5632);
                              if (!($1176)) {
                               break;
                              }
                              HEAP16[448960>>1] = 18761;
                              HEAP16[580074>>1] = 3694;
                              HEAP16[448958>>1] = 2;
                              $1177 = HEAP32[1516>>2]|0;
                              $1178 = (32 + ($1177))|0;
                              $1179 = $1178&65535;
                              HEAP16[448956>>1] = $1179;
                              $1180 = $1179&65535;
                              $1181 = (5574 - ($1180))|0;
                              $1182 = $1181&65535;
                              HEAP16[580076>>1] = $1182;
                              $1183 = HEAP32[1516>>2]|0;
                              $1184 = ($1183|0)==(12);
                              if (!($1184)) {
                               break L280;
                              }
                              HEAP32[1068>>2] = 80;
                              break L280;
                             }
                            } while(0);
                            $1185 = (_strcmp(594275,623520)|0);
                            $1186 = ($1185|0)!=(0);
                            do {
                             if (!($1186)) {
                              $1187 = HEAP16[580226>>1]|0;
                              $1188 = $1187&65535;
                              $1189 = ($1188|0)==(5664);
                              if (!($1189)) {
                               break;
                              }
                              HEAP16[448958>>1] = 17;
                              $1190 = HEAP16[580074>>1]|0;
                              $1191 = $1190&65535;
                              $1192 = (($1191) - 17)|0;
                              $1193 = $1192&65535;
                              HEAP16[580074>>1] = $1193;
                              HEAP16[448956>>1] = 96;
                              HEAP16[580076>>1] = 5544;
                              HEAP32[776>>2] = 1229539657;
                              break L280;
                             }
                            } while(0);
                            $1194 = (_strcmp(594275,623520)|0);
                            $1195 = ($1194|0)!=(0);
                            do {
                             if (!($1195)) {
                              $1196 = HEAP16[580226>>1]|0;
                              $1197 = $1196&65535;
                              $1198 = ($1197|0)==(6496);
                              if (!($1198)) {
                               break;
                              }
                              HEAP32[776>>2] = 1633771873;
                              $1199 = HEAP32[1516>>2]|0;
                              $1200 = (($1199) - 7)|0;
                              $1201 = 1 << $1200;
                              HEAP32[1036>>2] = $1201;
                              break L280;
                             }
                            } while(0);
                            $1202 = (_strcmp(594339,624287)|0);
                            $1203 = ($1202|0)!=(0);
                            if (!($1203)) {
                             HEAP16[448960>>1] = 18761;
                             $1204 = HEAP16[580074>>1]|0;
                             $1205 = $1204&65535;
                             $1206 = (($1205) - 20)|0;
                             $1207 = $1206&65535;
                             HEAP16[580074>>1] = $1207;
                             HEAP16[448958>>1] = 2;
                             $1208 = HEAP16[580076>>1]|0;
                             $1209 = $1208&65535;
                             $1210 = (($1209) - 6)|0;
                             $1211 = $1210&65535;
                             HEAP16[580076>>1] = $1211;
                             $1212 = $1211&65535;
                             $1213 = ($1212|0)>(3682);
                             if (!($1213)) {
                              break L280;
                             }
                             $1214 = HEAP16[580074>>1]|0;
                             $1215 = $1214&65535;
                             $1216 = (($1215) - 10)|0;
                             $1217 = $1216&65535;
                             HEAP16[580074>>1] = $1217;
                             $1218 = HEAP16[580076>>1]|0;
                             $1219 = $1218&65535;
                             $1220 = (($1219) - 46)|0;
                             $1221 = $1220&65535;
                             HEAP16[580076>>1] = $1221;
                             HEAP16[448958>>1] = 8;
                             break L280;
                            }
                            $1222 = (_strcmp(594339,624291)|0);
                            $1223 = ($1222|0)!=(0);
                            if (!($1223)) {
                             HEAP16[448960>>1] = 18761;
                             $1224 = HEAP16[580074>>1]|0;
                             $1225 = $1224&65535;
                             $1226 = (($1225) - 3)|0;
                             $1227 = $1226&65535;
                             HEAP16[580074>>1] = $1227;
                             HEAP16[448958>>1] = 2;
                             $1228 = HEAP16[580076>>1]|0;
                             $1229 = $1228&65535;
                             $1230 = (($1229) - 10)|0;
                             $1231 = $1230&65535;
                             HEAP16[580076>>1] = $1231;
                             $1232 = $1231&65535;
                             $1233 = ($1232|0)>(3718);
                             if (!($1233)) {
                              break L280;
                             }
                             $1234 = HEAP16[580074>>1]|0;
                             $1235 = $1234&65535;
                             $1236 = (($1235) - 28)|0;
                             $1237 = $1236&65535;
                             HEAP16[580074>>1] = $1237;
                             $1238 = HEAP16[580076>>1]|0;
                             $1239 = $1238&65535;
                             $1240 = (($1239) - 56)|0;
                             $1241 = $1240&65535;
                             HEAP16[580076>>1] = $1241;
                             HEAP16[448958>>1] = 8;
                             break L280;
                            }
                            $1242 = (_strstr(594339,624298)|0);
                            $1243 = ($1242|0)!=(0|0);
                            if ($1243) {
                             (_strcpy(594339,624298)|0);
                             break L280;
                            }
                            $1244 = (_strcmp(594339,624304)|0);
                            $1245 = ($1244|0)!=(0);
                            if (!($1245)) {
                             HEAP16[580074>>1] = 3045;
                             HEAP16[580076>>1] = 4070;
                             HEAP16[448958>>1] = 3;
                             HEAP16[448960>>1] = 18761;
                             HEAP32[776>>2] = 1229539657;
                             HEAP32[31028>>2] = 24;
                             break L280;
                            }
                            $1246 = (_strcmp(594339,624309)|0);
                            $1247 = ($1246|0)!=(0);
                            if (!($1247)) {
                             HEAP32[1036>>2] = 16;
                             break L280;
                            }
                            $1248 = (_strcmp(594339,624320)|0);
                            $1249 = ($1248|0)!=(0);
                            if (!($1249)) {
                             $1250 = HEAP16[580244>>1]|0;
                             $1251 = $1250&65535;
                             HEAP16[448958>>1] = 2;
                             $1252 = (($1251) - 2)|0;
                             $1253 = $1252&65535;
                             HEAP16[580074>>1] = $1253;
                             break L280;
                            }
                            $1254 = (_strcmp(594339,624324)|0);
                            $1255 = ($1254|0)!=(0);
                            if (!($1255)) {
                             _gamma_curve(0.45000000000000001,4.5,1,255);
                             break L280;
                            }
                            $1256 = (_strcmp(594275,615121)|0);
                            $1257 = ($1256|0)!=(0);
                            if (!($1257)) {
                             $1258 = HEAP32[31028>>2]|0;
                             $1259 = ($1258|0)==(10|0);
                             if ($1259) {
                              HEAP32[31028>>2] = 53;
                             }
                             $1260 = HEAP16[580226>>1]|0;
                             $1261 = $1260&65535;
                             $1262 = ($1261|0)==(7262);
                             L566: do {
                              if ($1262) {
                               HEAP16[580074>>1] = 5444;
                               HEAP16[580076>>1] = 7248;
                               HEAP16[448958>>1] = 4;
                               HEAP16[448956>>1] = 7;
                               HEAP32[776>>2] = 1633771873;
                              } else {
                               $1263 = HEAP16[580226>>1]|0;
                               $1264 = $1263&65535;
                               $1265 = ($1264|0)==(7410);
                               do {
                                if (!($1265)) {
                                 $1266 = HEAP16[580226>>1]|0;
                                 $1267 = $1266&65535;
                                 $1268 = ($1267|0)==(8282);
                                 if ($1268) {
                                  break;
                                 }
                                 $1277 = HEAP16[580226>>1]|0;
                                 $1278 = $1277&65535;
                                 $1279 = ($1278|0)==(9044);
                                 if ($1279) {
                                  HEAP16[580074>>1] = 6716;
                                  HEAP16[580076>>1] = 8964;
                                  HEAP16[448958>>1] = 8;
                                  HEAP16[448956>>1] = 40;
                                  HEAP32[1068>>2] = 256;
                                  $1280 = HEAP32[1036>>2]|0;
                                  $1281 = (($1280) + 256)|0;
                                  HEAP32[1036>>2] = $1281;
                                  HEAP32[1040>>2] = 33025;
                                  break L566;
                                 }
                                 $1282 = HEAP16[580226>>1]|0;
                                 $1283 = $1282&65535;
                                 $1284 = ($1283|0)==(4090);
                                 if (!($1284)) {
                                  break L566;
                                 }
                                 (_strcpy(594339,624332)|0);
                                 HEAP16[448958>>1] = 6;
                                 $1285 = HEAP16[580074>>1]|0;
                                 $1286 = $1285&65535;
                                 $1287 = (($1286) - 6)|0;
                                 $1288 = $1287&65535;
                                 HEAP16[580074>>1] = $1288;
                                 HEAP16[448956>>1] = 3;
                                 $1289 = HEAP16[580076>>1]|0;
                                 $1290 = $1289&65535;
                                 $1291 = (($1290) - 10)|0;
                                 $1292 = $1291&65535;
                                 HEAP16[580076>>1] = $1292;
                                 HEAP32[776>>2] = 1633771873;
                                 break L566;
                                }
                               } while(0);
                               $1269 = HEAP16[580074>>1]|0;
                               $1270 = $1269&65535;
                               $1271 = (($1270) - 84)|0;
                               $1272 = $1271&65535;
                               HEAP16[580074>>1] = $1272;
                               $1273 = HEAP16[580076>>1]|0;
                               $1274 = $1273&65535;
                               $1275 = (($1274) - 82)|0;
                               $1276 = $1275&65535;
                               HEAP16[580076>>1] = $1276;
                               HEAP16[448958>>1] = 4;
                               HEAP16[448956>>1] = 41;
                               HEAP32[776>>2] = 1633771873;
                              }
                             } while(0);
                             $1293 = HEAP32[1076>>2]|0;
                             $1294 = ($1293>>>0)>(1);
                             if (!($1294)) {
                              break L280;
                             }
                             $1295 = HEAP32[1076>>2]|0;
                             $1296 = (($1295) + 1)|0;
                             HEAP32[1508>>2] = $1296;
                             $1297 = HEAP32[664>>2]|0;
                             $1298 = ($1297|0)!=(0);
                             $1299 = HEAP32[696>>2]|0;
                             $1300 = ($1299|0)!=(0);
                             $or$cond11 = $1298 | $1300;
                             if ($or$cond11) {
                              break L280;
                             }
                             HEAP32[776>>2] = 0;
                             break L280;
                            }
                            $1301 = (_strcmp(594275,622754)|0);
                            $1302 = ($1301|0)!=(0);
                            if (!($1302)) {
                             $1303 = HEAP32[31028>>2]|0;
                             $1304 = ($1303|0)!=(0|0);
                             if (!($1304)) {
                              HEAP32[31028>>2] = 24;
                             }
                             $1305 = HEAP32[1508>>2]|0;
                             $1306 = ($1305>>>0)<=(1);
                             $1307 = HEAP32[664>>2]|0;
                             $1308 = ($1307|0)!=(0);
                             $or$cond13 = $1306 | $1308;
                             $1309 = HEAP32[696>>2]|0;
                             $1310 = ($1309|0)!=(0);
                             $or$cond15 = $or$cond13 | $1310;
                             if (!($or$cond15)) {
                              HEAP32[776>>2] = 0;
                             }
                             HEAP32[1040>>2] = 16383;
                             break L280;
                            }
                            $1311 = (_strcmp(594275,615077)|0);
                            $1312 = ($1311|0)!=(0);
                            if (!($1312)) {
                             HEAP32[1040>>2] = 16383;
                             $1313 = HEAP32[944>>2]|0;
                             $1314 = HEAP32[1524>>2]|0;
                             (_fseek($1313,$1314,0)|0);
                             $1315 = (_ljpeg_start($jh,1)|0);
                             $1316 = ($1315|0)!=(0);
                             do {
                              if ($1316) {
                               $1317 = ((($jh)) + 4|0);
                               $1318 = HEAP32[$1317>>2]|0;
                               $1319 = ($1318|0)==(15);
                               if (!($1319)) {
                                break;
                               }
                               HEAP32[1040>>2] = 8191;
                              }
                             } while(0);
                             $1320 = HEAP32[1076>>2]|0;
                             $1321 = ($1320>>>0)>(1);
                             if ($1321) {
                              HEAP32[776>>2] = 0;
                             }
                             $1322 = HEAP32[1076>>2]|0;
                             $1323 = ($1322>>>0)>(1);
                             if ($1323) {
                              label = 438;
                             } else {
                              $1324 = HEAP32[1504>>2]|0;
                              $1325 = HEAP16[580244>>1]|0;
                              $1326 = $1325&65535;
                              $1327 = ($1324>>>0)<($1326>>>0);
                              if ($1327) {
                               label = 438;
                              }
                             }
                             if ((label|0) == 438) {
                              HEAP32[31028>>2] = 54;
                              $1328 = HEAP32[1512>>2]|0;
                              $1329 = $1328&65535;
                              HEAP16[580226>>1] = $1329;
                             }
                             $1330 = HEAP16[580076>>1]|0;
                             $1331 = $1330&65535;
                             $1332 = HEAP16[580074>>1]|0;
                             $1333 = $1332&65535;
                             $1334 = $1331 | $1333;
                             $1335 = ($1334|0)==(2048);
                             if ($1335) {
                              $1336 = HEAP32[1076>>2]|0;
                              $1337 = ($1336|0)==(1);
                              if ($1337) {
                               HEAP32[776>>2] = 1;
                               (_strcpy(615136,624337)|0);
                               (_strcpy(594339,624342)|0);
                               HEAP16[448958>>1] = 8;
                               HEAP16[448956>>1] = 18;
                               HEAP16[580074>>1] = 2032;
                               HEAP16[580076>>1] = 2016;
                               break L280;
                              } else {
                               (_strcpy(594339,613958)|0);
                               HEAP16[448958>>1] = 10;
                               HEAP16[448956>>1] = 16;
                               HEAP16[580074>>1] = 2028;
                               HEAP16[580076>>1] = 2022;
                               break L280;
                              }
                             }
                             $1338 = HEAP16[580076>>1]|0;
                             $1339 = $1338&65535;
                             $1340 = HEAP16[580074>>1]|0;
                             $1341 = $1340&65535;
                             $1342 = (($1339) + ($1341))|0;
                             $1343 = ($1342|0)==(5204);
                             if (!($1343)) {
                              $1357 = HEAP16[580076>>1]|0;
                              $1358 = $1357&65535;
                              $1359 = ($1358|0)==(2116);
                              if ($1359) {
                               (_strcpy(594339,613984)|0);
                               HEAP16[448958>>1] = 30;
                               $1360 = HEAP16[580074>>1]|0;
                               $1361 = $1360&65535;
                               $1362 = (($1361) - 60)|0;
                               $1363 = $1362&65535;
                               HEAP16[580074>>1] = $1363;
                               HEAP16[448956>>1] = 55;
                               $1364 = HEAP16[580076>>1]|0;
                               $1365 = $1364&65535;
                               $1366 = (($1365) - 110)|0;
                               $1367 = $1366&65535;
                               HEAP16[580076>>1] = $1367;
                               HEAP32[776>>2] = 1229539657;
                               break L280;
                              }
                              $1368 = HEAP16[580076>>1]|0;
                              $1369 = $1368&65535;
                              $1370 = ($1369|0)==(3171);
                              if (!($1370)) {
                               break L280;
                              }
                              (_strcpy(594339,613984)|0);
                              HEAP16[448958>>1] = 24;
                              $1371 = HEAP16[580074>>1]|0;
                              $1372 = $1371&65535;
                              $1373 = (($1372) - 48)|0;
                              $1374 = $1373&65535;
                              HEAP16[580074>>1] = $1374;
                              HEAP16[448956>>1] = 24;
                              $1375 = HEAP16[580076>>1]|0;
                              $1376 = $1375&65535;
                              $1377 = (($1376) - 48)|0;
                              $1378 = $1377&65535;
                              HEAP16[580076>>1] = $1378;
                              HEAP32[776>>2] = 370546198;
                              break L280;
                             }
                             $1344 = HEAP8[594339>>0]|0;
                             $1345 = ($1344<<24>>24)!=(0);
                             if (!($1345)) {
                              (_strcpy(594339,613970)|0);
                             }
                             $1346 = HEAP16[580076>>1]|0;
                             $1347 = $1346&65535;
                             $1348 = HEAP16[580074>>1]|0;
                             $1349 = $1348&65535;
                             $1350 = ($1347|0)>($1349|0);
                             if ($1350) {
                              HEAP16[448958>>1] = 6;
                              HEAP16[448956>>1] = 32;
                              HEAP16[580074>>1] = 2048;
                              HEAP16[580076>>1] = 3072;
                              HEAP32[776>>2] = 1633771873;
                             } else {
                              HEAP16[448956>>1] = 6;
                              HEAP16[448958>>1] = 32;
                              HEAP16[580076>>1] = 2048;
                              HEAP16[580074>>1] = 3072;
                              HEAP32[776>>2] = 370546198;
                             }
                             $1351 = +HEAPF32[1528>>2];
                             $1352 = $1351 != 0.0;
                             do {
                              if ($1352) {
                               $1353 = HEAP8[594339>>0]|0;
                               $1354 = $1353 << 24 >> 24;
                               $1355 = ($1354|0)==(86);
                               if ($1355) {
                                break;
                               }
                               $1356 = HEAP32[1076>>2]|0;
                               HEAP32[1508>>2] = $1356;
                               break L280;
                              }
                             } while(0);
                             HEAP32[776>>2] = 0;
                             break L280;
                            }
                            $1379 = (_strcmp(594275,623499)|0);
                            $1380 = ($1379|0)!=(0);
                            do {
                             if ($1380) {
                              $1381 = (_strcmp(594275,613731)|0);
                              $1382 = ($1381|0)!=(0);
                              if (!($1382)) {
                               break;
                              }
                              $1465 = (_strcmp(594339,624358)|0);
                              $1466 = ($1465|0)!=(0);
                              if (!($1466)) {
                               HEAP16[580074>>1] = 1718;
                               HEAP16[580076>>1] = 2304;
                               HEAP32[776>>2] = 370546198;
                               HEAP32[31028>>2] = 15;
                               HEAP32[1068>>2] = 30;
                               break L280;
                              }
                              $1467 = (_strcmp(594275,623505)|0);
                              $1468 = ($1467|0)!=(0);
                              if (!($1468)) {
                               $1469 = HEAP16[580074>>1]|0;
                               $1470 = $1469&65535;
                               $1471 = $1470 & 1;
                               $1472 = HEAP16[580074>>1]|0;
                               $1473 = $1472&65535;
                               $1474 = (($1473) + ($1471))|0;
                               $1475 = $1474&65535;
                               HEAP16[580074>>1] = $1475;
                               $1476 = HEAP32[294228>>2]|0;
                               $1477 = ($1476|0)!=(0);
                               if ($1477) {
                                $1478 = HEAP32[294228>>2]|0;
                                HEAP32[776>>2] = $1478;
                               }
                               $1479 = HEAP16[580076>>1]|0;
                               $1480 = $1479&65535;
                               $1481 = ($1480|0)==(4100);
                               if ($1481) {
                                $1482 = HEAP16[580076>>1]|0;
                                $1483 = $1482&65535;
                                $1484 = (($1483) - 4)|0;
                                $1485 = $1484&65535;
                                HEAP16[580076>>1] = $1485;
                               }
                               $1486 = HEAP16[580076>>1]|0;
                               $1487 = $1486&65535;
                               $1488 = ($1487|0)==(4080);
                               if ($1488) {
                                $1489 = HEAP16[580076>>1]|0;
                                $1490 = $1489&65535;
                                $1491 = (($1490) - 24)|0;
                                $1492 = $1491&65535;
                                HEAP16[580076>>1] = $1492;
                               }
                               $1493 = HEAP16[580076>>1]|0;
                               $1494 = $1493&65535;
                               $1495 = ($1494|0)==(9280);
                               if ($1495) {
                                $1496 = HEAP16[580076>>1]|0;
                                $1497 = $1496&65535;
                                $1498 = (($1497) - 6)|0;
                                $1499 = $1498&65535;
                                HEAP16[580076>>1] = $1499;
                                $1500 = HEAP16[580074>>1]|0;
                                $1501 = $1500&65535;
                                $1502 = (($1501) - 6)|0;
                                $1503 = $1502&65535;
                                HEAP16[580074>>1] = $1503;
                               }
                               $1504 = HEAP32[31028>>2]|0;
                               $1505 = ($1504|0)==(24|0);
                               if ($1505) {
                                HEAP32[1068>>2] = 4;
                               }
                               HEAP32[1516>>2] = 12;
                               $1506 = (_strcmp(594339,624365)|0);
                               $1507 = ($1506|0)!=(0);
                               do {
                                if ($1507) {
                                 $1508 = (_strcmp(594339,624371)|0);
                                 $1509 = ($1508|0)!=(0);
                                 if (!($1509)) {
                                  break;
                                 }
                                 $1516 = (_strcmp(594339,624377)|0);
                                 $1517 = ($1516|0)!=(0);
                                 if (!($1517)) {
                                  $1518 = HEAP16[580076>>1]|0;
                                  $1519 = $1518&65535;
                                  $1520 = (($1519) - 30)|0;
                                  $1521 = $1520&65535;
                                  HEAP16[580076>>1] = $1521;
                                  $1522 = HEAP32[31028>>2]|0;
                                  $1523 = ($1522|0)==(24|0);
                                  if (!($1523)) {
                                   break L280;
                                  }
                                  HEAP32[1040>>2] = 3961;
                                  break L280;
                                 }
                                 $1524 = (_strcmp(594339,624383)|0);
                                 $1525 = ($1524|0)!=(0);
                                 if (!($1525)) {
                                  $1526 = $flen;
                                  HEAP32[293668>>2] = 10721280;
                                  $1527 = (($1526) - 10721280)|0;
                                  HEAP32[1672>>2] = $1527;
                                  HEAP16[580262>>1] = 480;
                                  HEAP16[580260>>1] = 640;
                                  break L280;
                                 }
                                 $1528 = (_strcmp(594339,624391)|0);
                                 $1529 = ($1528|0)!=(0);
                                 if ($1529) {
                                  break L280;
                                 }
                                 $1530 = HEAP16[580076>>1]|0;
                                 $1531 = $1530&65535;
                                 $1532 = (($1531) - 16)|0;
                                 $1533 = $1532&65535;
                                 HEAP16[580076>>1] = $1533;
                                 break L280;
                                }
                               } while(0);
                               $1510 = HEAP16[580076>>1]|0;
                               $1511 = $1510&65535;
                               $1512 = (($1511) - 20)|0;
                               $1513 = $1512&65535;
                               HEAP16[580076>>1] = $1513;
                               $1514 = HEAP32[31028>>2]|0;
                               $1515 = ($1514|0)==(24|0);
                               if (!($1515)) {
                                break L280;
                               }
                               HEAP32[1040>>2] = 4035;
                               _memset((580264|0),0,8204)|0;
                               break L280;
                              }
                              $1534 = (_strcmp(594339,623573)|0);
                              $1535 = ($1534|0)!=(0);
                              if (!($1535)) {
                               HEAP16[580074>>1] = 2047;
                               HEAP16[580076>>1] = 3072;
                               HEAP32[776>>2] = 1633771873;
                               HEAP32[1524>>2] = 6656;
                               HEAP32[31028>>2] = 15;
                               break L280;
                              }
                              $1536 = (_strcmp(594339,624396)|0);
                              $1537 = ($1536|0)!=(0);
                              if (!($1537)) {
                               HEAP16[580076>>1] = 3288;
                               HEAP16[448956>>1] = 5;
                               HEAP32[(31064)>>2] = -17;
                               HEAP32[1524>>2] = 862144;
                               HEAP32[31028>>2] = 12;
                               HEAP32[776>>2] = -1667457892;
                               HEAP32[980>>2] = 4;
                               (_strcpy(615136,624405)|0);
                               break L280;
                              }
                              $1538 = (_strcmp(594339,624410)|0);
                              $1539 = ($1538|0)!=(0);
                              if (!($1539)) {
                               HEAP16[580076>>1] = 3109;
                               HEAP16[448956>>1] = 59;
                               HEAP32[(31040)>>2] = 9;
                               HEAP32[1524>>2] = 787392;
                               HEAP32[31028>>2] = 12;
                               break L280;
                              }
                              $1540 = (_strcmp(594275,623534)|0);
                              $1541 = ($1540|0)!=(0);
                              do {
                               if (!($1541)) {
                                $1542 = HEAP16[580226>>1]|0;
                                $1543 = $1542&65535;
                                $1544 = ($1543|0)==(3984);
                                if (!($1544)) {
                                 break;
                                }
                                HEAP16[580076>>1] = 3925;
                                HEAP16[448960>>1] = 19789;
                                break L280;
                               }
                              } while(0);
                              $1545 = (_strcmp(594275,623534)|0);
                              $1546 = ($1545|0)!=(0);
                              do {
                               if (!($1546)) {
                                $1547 = HEAP16[580226>>1]|0;
                                $1548 = $1547&65535;
                                $1549 = ($1548|0)==(4288);
                                if (!($1549)) {
                                 break;
                                }
                                $1550 = HEAP16[580076>>1]|0;
                                $1551 = $1550&65535;
                                $1552 = (($1551) - 32)|0;
                                $1553 = $1552&65535;
                                HEAP16[580076>>1] = $1553;
                                break L280;
                               }
                              } while(0);
                              $1554 = (_strcmp(594275,623534)|0);
                              $1555 = ($1554|0)!=(0);
                              do {
                               if (!($1555)) {
                                $1556 = HEAP16[580226>>1]|0;
                                $1557 = $1556&65535;
                                $1558 = ($1557|0)==(4600);
                                if (!($1558)) {
                                 break;
                                }
                                $1559 = (_strcmp(594339,624417)|0);
                                $1560 = ($1559|0)!=(0);
                                if (!($1560)) {
                                 $1561 = HEAP16[580074>>1]|0;
                                 $1562 = $1561&65535;
                                 $1563 = (($1562) - 4)|0;
                                 $1564 = $1563&65535;
                                 HEAP16[580074>>1] = $1564;
                                }
                                HEAP32[1036>>2] = 0;
                                break L280;
                               }
                              } while(0);
                              $1565 = (_strcmp(594275,623534)|0);
                              $1566 = ($1565|0)!=(0);
                              do {
                               if (!($1566)) {
                                $1567 = HEAP16[580226>>1]|0;
                                $1568 = $1567&65535;
                                $1569 = ($1568|0)==(4928);
                                if (!($1569)) {
                                 break;
                                }
                                $1570 = HEAP16[580074>>1]|0;
                                $1571 = $1570&65535;
                                $1572 = ($1571|0)<(3280);
                                if (!($1572)) {
                                 break L280;
                                }
                                $1573 = HEAP16[580076>>1]|0;
                                $1574 = $1573&65535;
                                $1575 = (($1574) - 8)|0;
                                $1576 = $1575&65535;
                                HEAP16[580076>>1] = $1576;
                                break L280;
                               }
                              } while(0);
                              $1577 = (_strcmp(594275,623534)|0);
                              $1578 = ($1577|0)!=(0);
                              do {
                               if (!($1578)) {
                                $1579 = HEAP16[580226>>1]|0;
                                $1580 = $1579&65535;
                                $1581 = ($1580|0)==(5504);
                                if (!($1581)) {
                                 break;
                                }
                                $1582 = HEAP16[580074>>1]|0;
                                $1583 = $1582&65535;
                                $1584 = ($1583|0)>(3664);
                                $1585 = $1584 ? 8 : 32;
                                $1586 = HEAP16[580076>>1]|0;
                                $1587 = $1586&65535;
                                $1588 = (($1587) - ($1585))|0;
                                $1589 = $1588&65535;
                                HEAP16[580076>>1] = $1589;
                                $1590 = (_strncmp(594339,624427,3)|0);
                                $1591 = ($1590|0)!=(0);
                                if ($1591) {
                                 break L280;
                                }
                                $1592 = HEAP32[1516>>2]|0;
                                $1593 = (($1592) - 12)|0;
                                $1594 = 200 << $1593;
                                HEAP32[1036>>2] = $1594;
                                break L280;
                               }
                              } while(0);
                              $1595 = (_strcmp(594275,623534)|0);
                              $1596 = ($1595|0)!=(0);
                              do {
                               if (!($1596)) {
                                $1597 = HEAP16[580226>>1]|0;
                                $1598 = $1597&65535;
                                $1599 = ($1598|0)==(6048);
                                if (!($1599)) {
                                 break;
                                }
                                $1600 = HEAP16[580076>>1]|0;
                                $1601 = $1600&65535;
                                $1602 = (($1601) - 24)|0;
                                $1603 = $1602&65535;
                                HEAP16[580076>>1] = $1603;
                                $1604 = (_strstr(594339,624431)|0);
                                $1605 = ($1604|0)!=(0|0);
                                if (!($1605)) {
                                 $1606 = (_strstr(594339,624435)|0);
                                 $1607 = ($1606|0)!=(0|0);
                                 if (!($1607)) {
                                  break L280;
                                 }
                                }
                                $1608 = HEAP16[580076>>1]|0;
                                $1609 = $1608&65535;
                                $1610 = (($1609) - 6)|0;
                                $1611 = $1610&65535;
                                HEAP16[580076>>1] = $1611;
                                break L280;
                               }
                              } while(0);
                              $1612 = (_strcmp(594275,623534)|0);
                              $1613 = ($1612|0)!=(0);
                              do {
                               if (!($1613)) {
                                $1614 = HEAP16[580226>>1]|0;
                                $1615 = $1614&65535;
                                $1616 = ($1615|0)==(7392);
                                if (!($1616)) {
                                 break;
                                }
                                $1617 = HEAP16[580076>>1]|0;
                                $1618 = $1617&65535;
                                $1619 = (($1618) - 30)|0;
                                $1620 = $1619&65535;
                                HEAP16[580076>>1] = $1620;
                                break L280;
                               }
                              } while(0);
                              $1621 = (_strcmp(594275,623534)|0);
                              $1622 = ($1621|0)!=(0);
                              do {
                               if (!($1622)) {
                                $1623 = HEAP16[580226>>1]|0;
                                $1624 = $1623&65535;
                                $1625 = ($1624|0)==(8000);
                                if (!($1625)) {
                                 break;
                                }
                                $1626 = HEAP16[580076>>1]|0;
                                $1627 = $1626&65535;
                                $1628 = (($1627) - 32)|0;
                                $1629 = $1628&65535;
                                HEAP16[580076>>1] = $1629;
                                $1630 = (_strncmp(594339,624427,3)|0);
                                $1631 = ($1630|0)!=(0);
                                if ($1631) {
                                 break L280;
                                }
                                HEAP32[1516>>2] = 14;
                                HEAP32[31028>>2] = 24;
                                HEAP32[1036>>2] = 512;
                                break L280;
                               }
                              } while(0);
                              $1632 = (_strcmp(594339,615043)|0);
                              $1633 = ($1632|0)!=(0);
                              if (!($1633)) {
                               $1634 = HEAP16[580076>>1]|0;
                               $1635 = $1634&65535;
                               $1636 = ($1635|0)==(3880);
                               $1637 = HEAP16[580074>>1]|0;
                               if ($1636) {
                                $1638 = (($1637) + -1)<<16>>16;
                                HEAP16[580074>>1] = $1638;
                                $1639 = HEAP16[580226>>1]|0;
                                $1640 = (($1639) + 1)<<16>>16;
                                HEAP16[580226>>1] = $1640;
                                HEAP16[580076>>1] = $1640;
                               } else {
                                $1641 = $1637&65535;
                                $1642 = (($1641) - 4)|0;
                                $1643 = $1642&65535;
                                HEAP16[580074>>1] = $1643;
                                $1644 = HEAP16[580076>>1]|0;
                                $1645 = $1644&65535;
                                $1646 = (($1645) - 4)|0;
                                $1647 = $1646&65535;
                                HEAP16[580076>>1] = $1647;
                                HEAP16[448960>>1] = 19789;
                                HEAP32[1068>>2] = 2;
                               }
                               HEAP32[776>>2] = 1633771873;
                               break L280;
                              }
                              $1648 = (_strcmp(594339,624439)|0);
                              $1649 = ($1648|0)!=(0);
                              if (!($1649)) {
                               HEAP16[448958>>1] = 4;
                               $1650 = HEAP16[580074>>1]|0;
                               $1651 = $1650&65535;
                               $1652 = (($1651) - 4)|0;
                               $1653 = $1652&65535;
                               HEAP16[580074>>1] = $1653;
                               HEAP16[448956>>1] = 32;
                               $1654 = HEAP16[580076>>1]|0;
                               $1655 = $1654&65535;
                               $1656 = (($1655) - 32)|0;
                               $1657 = $1656&65535;
                               HEAP16[580076>>1] = $1657;
                               _gamma_curve(0.0,7.0,1,255);
                               break L280;
                              }
                              $1658 = (_strcmp(594339,623842)|0);
                              $1659 = ($1658|0)!=(0);
                              do {
                               if ($1659) {
                                $1660 = (_strcmp(594339,624444)|0);
                                $1661 = ($1660|0)!=(0);
                                if (!($1661)) {
                                 break;
                                }
                                $1662 = (_strcmp(594339,624449)|0);
                                $1663 = ($1662|0)!=(0);
                                if (!($1663)) {
                                 break;
                                }
                                $1681 = (_strncasecmp(594339,624454,9)|0);
                                $1682 = ($1681|0)!=(0);
                                if (!($1682)) {
                                 $1683 = HEAP32[1524>>2]|0;
                                 $1684 = ($1683|0)<(86016);
                                 $1685 = $1684 ? 86016 : 94208;
                                 HEAP32[1524>>2] = $1685;
                                 HEAP32[31028>>2] = 15;
                                 break L280;
                                }
                                $1686 = (_strcasecmp(594275,615147)|0);
                                $1687 = ($1686|0)!=(0);
                                if ($1687) {
                                 $1754 = (_strcmp(594339,623596)|0);
                                 $1755 = ($1754|0)!=(0);
                                 if (!($1755)) {
                                  HEAP16[580074>>1] = 512;
                                  HEAP16[580076>>1] = 768;
                                  HEAP32[1524>>2] = 3632;
                                  HEAP32[31028>>2] = 45;
                                  HEAP32[776>>2] = 1633771873;
                                  _simple_coeff(2);
                                  break L280;
                                 }
                                 $1756 = (_strncmp(594339,624547,9)|0);
                                 $1757 = ($1756|0)!=(0);
                                 if ($1757) {
                                  $1800 = (_strcmp(594275,615385)|0);
                                  $1801 = ($1800|0)!=(0);
                                  $1802 = HEAP32[31028>>2]|0;
                                  $1803 = ($1802|0)!=(0|0);
                                  $or$cond19 = $1801 | $1803;
                                  if ($or$cond19) {
                                   break L280;
                                  }
                                  $1804 = HEAP16[580226>>1]|0;
                                  $1805 = $1804&65535;
                                  switch ($1805|0) {
                                  case 1316:  {
                                   HEAP16[580074>>1] = 1030;
                                   HEAP16[580076>>1] = 1300;
                                   HEAP16[448958>>1] = 1;
                                   HEAP16[448956>>1] = 6;
                                   break;
                                  }
                                  case 2568:  {
                                   HEAP16[580074>>1] = 1960;
                                   HEAP16[580076>>1] = 2560;
                                   HEAP16[448958>>1] = 2;
                                   HEAP16[448956>>1] = 8;
                                   break;
                                  }
                                  default: {
                                  }
                                  }
                                  HEAP32[776>>2] = 370546198;
                                  HEAP32[31028>>2] = 59;
                                  break L280;
                                 } else {
                                  $1758 = ((($head)) + 5|0);
                                  $1759 = HEAP8[$1758>>0]|0;
                                  $1760 = ($1759<<24>>24)!=(0);
                                  if ($1760) {
                                   (_strcpy((594349),624557)|0);
                                  }
                                  $1761 = HEAP32[944>>2]|0;
                                  (_fseek($1761,544,0)|0);
                                  $1762 = (_get2()|0);
                                  HEAP16[580074>>1] = $1762;
                                  $1763 = (_get2()|0);
                                  HEAP16[580076>>1] = $1763;
                                  (_get4()|0);
                                  $1764 = (_get2()|0);
                                  $1765 = $1764&65535;
                                  $1766 = ($1765|0)==(30);
                                  $1767 = $1766 ? 738 : 736;
                                  HEAP32[1524>>2] = $1767;
                                  $1768 = HEAP16[580074>>1]|0;
                                  $1769 = $1768&65535;
                                  $1770 = HEAP16[580076>>1]|0;
                                  $1771 = $1770&65535;
                                  $1772 = ($1769|0)>($1771|0);
                                  if ($1772) {
                                   $1773 = HEAP16[580074>>1]|0;
                                   $1774 = $1773&65535;
                                   $1775 = HEAP16[580076>>1]|0;
                                   $1776 = $1775&65535;
                                   $1777 = (($1774) + ($1776))|0;
                                   $1778 = $1777&65535;
                                   HEAP16[580074>>1] = $1778;
                                   $1779 = HEAP16[580074>>1]|0;
                                   $1780 = $1779&65535;
                                   $1781 = HEAP16[580076>>1]|0;
                                   $1782 = $1781&65535;
                                   $1783 = (($1780) - ($1782))|0;
                                   $1784 = $1783&65535;
                                   HEAP16[580076>>1] = $1784;
                                   $1785 = HEAP16[580074>>1]|0;
                                   $1786 = $1785&65535;
                                   $1787 = HEAP16[580076>>1]|0;
                                   $1788 = $1787&65535;
                                   $1789 = (($1786) - ($1788))|0;
                                   $1790 = $1789&65535;
                                   HEAP16[580074>>1] = $1790;
                                   $1791 = HEAP32[944>>2]|0;
                                   $1792 = HEAP32[1524>>2]|0;
                                   $1793 = (($1792) - 6)|0;
                                   (_fseek($1791,$1793,0)|0);
                                   $1794 = (_get2()|0);
                                   $1795 = $1794&65535;
                                   $1796 = $1795 ^ -1;
                                   $1797 = $1796 & 3;
                                   $1798 = ($1797|0)!=(0);
                                   $1799 = $1798 ? 5 : 6;
                                   HEAP32[293688>>2] = $1799;
                                  }
                                  HEAP32[776>>2] = 1633771873;
                                  break L280;
                                 }
                                }
                                $1688 = HEAP32[776>>2]|0;
                                $1689 = ($1688|0)==(-1);
                                if ($1689) {
                                 HEAP32[776>>2] = 1633771873;
                                }
                                $1690 = (_strncmp(594339,624464,6)|0);
                                $1691 = ($1690|0)!=(0);
                                do {
                                 if ($1691) {
                                  $1692 = (_strncmp(594339,624471,6)|0);
                                  $1693 = ($1692|0)!=(0);
                                  if (!($1693)) {
                                   label = 557;
                                   break;
                                  }
                                  $1694 = (_strncmp(594339,624478,4)|0);
                                  $1695 = ($1694|0)!=(0);
                                  if (!($1695)) {
                                   label = 557;
                                   break;
                                  }
                                  $1705 = (_strcmp(594339,624491)|0);
                                  $1706 = ($1705|0)!=(0);
                                  if ($1706) {
                                   $1707 = (_strcmp(594339,624499)|0);
                                   $1708 = ($1707|0)!=(0);
                                   if ($1708) {
                                    break;
                                   } else {
                                    label = 563;
                                    break;
                                   }
                                  } else {
                                   HEAP32[1036>>2] = 214;
                                   label = 563;
                                   break;
                                  }
                                 } else {
                                  label = 557;
                                 }
                                } while(0);
                                if ((label|0) == 557) {
                                 $1696 = HEAP16[580076>>1]|0;
                                 $1697 = $1696&65535;
                                 $1698 = (($1697) - 4)|0;
                                 $1699 = $1698&65535;
                                 HEAP16[580076>>1] = $1699;
                                 HEAP16[448956>>1] = 2;
                                 $1700 = HEAP8[(594345)>>0]|0;
                                 $1701 = $1700 << 24 >> 24;
                                 $1702 = ($1701|0)==(32);
                                 if ($1702) {
                                  HEAP8[(594345)>>0] = 0;
                                 }
                                 $1703 = (_strcmp(594339,624483)|0);
                                 $1704 = ($1703|0)!=(0);
                                 if (!($1704)) {
                                  label = 563;
                                 }
                                }
                                if ((label|0) == 563) {
                                 HEAP32[980>>2] = 1;
                                 HEAP32[776>>2] = 0;
                                }
                                $1709 = (_strcmp((594343),624507)|0);
                                $1710 = ($1709|0)!=(0);
                                if (!($1710)) {
                                 (_strcpy(615136,624511)|0);
                                }
                                $1711 = (_strstr(594339,624516)|0);
                                $1712 = ($1711|0)!=(0|0);
                                if ($1712) {
                                 (_strcpy(594339,624516)|0);
                                 HEAP32[1524>>2] = 15424;
                                }
                                $1713 = (_strncmp(594339,612074,3)|0);
                                $1714 = ($1713|0)!=(0);
                                if (!($1714)) {
                                 HEAP16[580074>>1] = 242;
                                 HEAP16[580244>>1] = 244;
                                 $1715 = $flen;
                                 $1716 = ($1715|0)<(100000);
                                 if ($1716) {
                                  HEAP16[580226>>1] = 256;
                                  HEAP16[580076>>1] = 249;
                                  $1717 = HEAP16[580074>>1]|0;
                                  $1718 = $1717&65535;
                                  $1719 = (+($1718|0));
                                  $1720 = 4.0 * $1719;
                                  $1721 = HEAP16[580076>>1]|0;
                                  $1722 = $1721&65535;
                                  $1723 = (+($1722|0));
                                  $1724 = 3.0 * $1723;
                                  $1725 = $1720 / $1724;
                                  HEAPF64[224>>3] = $1725;
                                 } else {
                                  HEAP16[580226>>1] = 512;
                                  HEAP16[580076>>1] = 501;
                                  $1726 = HEAP16[580074>>1]|0;
                                  $1727 = $1726&65535;
                                  $1728 = (+($1727|0));
                                  $1729 = 493.0 * $1728;
                                  $1730 = HEAP16[580076>>1]|0;
                                  $1731 = $1730&65535;
                                  $1732 = (+($1731|0));
                                  $1733 = 373.0 * $1732;
                                  $1734 = $1729 / $1733;
                                  HEAPF64[224>>3] = $1734;
                                 }
                                 HEAP16[448956>>1] = 1;
                                 HEAP16[448958>>1] = 1;
                                 HEAP32[980>>2] = 4;
                                 HEAP32[776>>2] = -1920103027;
                                 _simple_coeff(1);
                                 HEAPF32[(952)>>2] = 1.1790000200271606;
                                 HEAPF32[(956)>>2] = 1.2089999914169312;
                                 HEAPF32[(960)>>2] = 1.0360000133514404;
                                 HEAP32[31028>>2] = 13;
                                 break L280;
                                }
                                $1735 = (_strcmp(594339,624521)|0);
                                $1736 = ($1735|0)!=(0);
                                if (!($1736)) {
                                 (_strcpy(594339,624524)|0);
                                 HEAP16[580074>>1] = 512;
                                 HEAP16[580076>>1] = 768;
                                 HEAP32[1524>>2] = 1152;
                                 HEAP32[31028>>2] = 45;
                                 HEAP32[1516>>2] = 12;
                                 break L280;
                                }
                                $1737 = (_strstr(594339,624529)|0);
                                $1738 = ($1737|0)!=(0|0);
                                if ($1738) {
                                 (_strcpy(594339,624529)|0);
                                 HEAP16[580074>>1] = 512;
                                 HEAP16[580076>>1] = 768;
                                 HEAP32[1524>>2] = 19712;
                                 HEAP32[31028>>2] = 45;
                                 break L280;
                                }
                                $1739 = (_strstr(594339,624534)|0);
                                $1740 = ($1739|0)!=(0|0);
                                if ($1740) {
                                 (_strcpy(594339,624534)|0);
                                 HEAP16[580074>>1] = 976;
                                 HEAP16[580076>>1] = 848;
                                 $1741 = HEAP16[580074>>1]|0;
                                 $1742 = $1741&65535;
                                 $1743 = (+($1742|0));
                                 $1744 = $1743 / 0.75;
                                 $1745 = HEAP16[580076>>1]|0;
                                 $1746 = $1745&65535;
                                 $1747 = (+($1746|0));
                                 $1748 = $1744 / $1747;
                                 HEAPF64[224>>3] = $1748;
                                 $1749 = HEAP32[1060>>2]|0;
                                 $1750 = ($1749|0)==(7);
                                 $1751 = $1750 ? 57 : 58;
                                 HEAP32[31028>>2] = $1751;
                                 break L280;
                                }
                                $1752 = (_strcmp(594339,624540)|0);
                                $1753 = ($1752|0)!=(0);
                                if ($1753) {
                                 break L280;
                                }
                                HEAP16[580262>>1] = 128;
                                HEAP16[580260>>1] = 192;
                                HEAP32[293668>>2] = 6144;
                                HEAP32[1680>>2] = 360;
                                HEAP32[294628>>2] = 33;
                                HEAP32[1036>>2] = 17;
                                break L280;
                               }
                              } while(0);
                              HEAP16[448960>>1] = 18761;
                              $1664 = HEAP32[776>>2]|0;
                              $1665 = ($1664|0)!=(0);
                              $1666 = HEAP32[1524>>2]|0;
                              $1667 = ($1666|0)!=(0);
                              $or$cond17 = $1665 & $1667;
                              if ($or$cond17) {
                               $1668 = HEAP32[944>>2]|0;
                               $1669 = HEAP32[1524>>2]|0;
                               $1670 = ($1669|0)<(4096);
                               $1671 = $1670 ? 168 : 5252;
                               (_fseek($1668,$1671,0)|0);
                               _read_shorts(448962,256);
                              } else {
                               _gamma_curve(0.0,3.875,1,255);
                              }
                              $1672 = HEAP32[776>>2]|0;
                              $1673 = ($1672|0)!=(0);
                              if ($1673) {
                               $1677 = 13;
                              } else {
                               $1674 = (_strcmp(594339,624444)|0);
                               $1675 = ($1674|0)!=(0);
                               $1676 = $1675 ? 55 : 56;
                               $1677 = $1676;
                              }
                              HEAP32[31028>>2] = $1677;
                              $1678 = HEAP32[1516>>2]|0;
                              $1679 = ($1678>>>0)>(16);
                              $1680 = $1679&1;
                              HEAP32[1068>>2] = $1680;
                              HEAP32[1516>>2] = 8;
                              break L280;
                             }
                            } while(0);
                            $1383 = $flen;
                            $1384 = HEAP32[1524>>2]|0;
                            $1385 = (($1383) - ($1384))|0;
                            $1386 = HEAP16[580226>>1]|0;
                            $1387 = $1386&65535;
                            $1388 = $1387<<3;
                            $1389 = (($1388|0) / 7)&-1;
                            $1390 = (($1385|0) / ($1389|0))&-1;
                            $1391 = HEAP16[580244>>1]|0;
                            $1392 = $1391&65535;
                            $1393 = ($1390|0)==($1392|0);
                            if ($1393) {
                             HEAP32[31028>>2] = 17;
                            }
                            $1394 = HEAP32[31028>>2]|0;
                            $1395 = ($1394|0)!=(0|0);
                            if (!($1395)) {
                             HEAP32[31028>>2] = 24;
                             HEAP32[1068>>2] = 4;
                            }
                            HEAP32[316340>>2] = 1;
                            $1396 = HEAP16[580074>>1]|0;
                            $1397 = $1396&65535;
                            $1398 = (($1397) + 12)|0;
                            $1399 = $1398&65535;
                            HEAP16[580074>>1] = $1399;
                            $1400 = $1399&65535;
                            $1401 = HEAP16[580244>>1]|0;
                            $1402 = $1401&65535;
                            $1403 = ($1400|0)>($1402|0);
                            if ($1403) {
                             $1404 = HEAP16[580244>>1]|0;
                             HEAP16[580074>>1] = $1404;
                            }
                            $i = 0;
                            while(1) {
                             $1405 = $i;
                             $1406 = ($1405>>>0)<(23);
                             if (!($1406)) {
                              break;
                             }
                             $1407 = HEAP16[580226>>1]|0;
                             $1408 = $1407&65535;
                             $1409 = $i;
                             $1410 = (589426 + (($1409*12)|0)|0);
                             $1411 = HEAP16[$1410>>1]|0;
                             $1412 = $1411 << 16 >> 16;
                             $1413 = ($1408|0)==($1412|0);
                             do {
                              if ($1413) {
                               $1414 = HEAP16[580244>>1]|0;
                               $1415 = $1414&65535;
                               $1416 = $i;
                               $1417 = (589426 + (($1416*12)|0)|0);
                               $1418 = ((($1417)) + 2|0);
                               $1419 = HEAP16[$1418>>1]|0;
                               $1420 = $1419 << 16 >> 16;
                               $1421 = ($1415|0)==($1420|0);
                               if (!($1421)) {
                                break;
                               }
                               $1422 = $i;
                               $1423 = (589426 + (($1422*12)|0)|0);
                               $1424 = ((($1423)) + 4|0);
                               $1425 = HEAP16[$1424>>1]|0;
                               HEAP16[448956>>1] = $1425;
                               $1426 = $i;
                               $1427 = (589426 + (($1426*12)|0)|0);
                               $1428 = ((($1427)) + 6|0);
                               $1429 = HEAP16[$1428>>1]|0;
                               HEAP16[448958>>1] = $1429;
                               $1430 = $i;
                               $1431 = (589426 + (($1430*12)|0)|0);
                               $1432 = ((($1431)) + 8|0);
                               $1433 = HEAP16[$1432>>1]|0;
                               $1434 = $1433 << 16 >> 16;
                               $1435 = HEAP16[580076>>1]|0;
                               $1436 = $1435&65535;
                               $1437 = (($1436) + ($1434))|0;
                               $1438 = $1437&65535;
                               HEAP16[580076>>1] = $1438;
                               $1439 = $i;
                               $1440 = (589426 + (($1439*12)|0)|0);
                               $1441 = ((($1440)) + 10|0);
                               $1442 = HEAP16[$1441>>1]|0;
                               $1443 = $1442 << 16 >> 16;
                               $1444 = HEAP16[580074>>1]|0;
                               $1445 = $1444&65535;
                               $1446 = (($1445) + ($1443))|0;
                               $1447 = $1446&65535;
                               HEAP16[580074>>1] = $1447;
                              }
                             } while(0);
                             $1448 = $i;
                             $1449 = (($1448) + 1)|0;
                             $i = $1449;
                            }
                            $1450 = HEAP32[776>>2]|0;
                            $1451 = (($1450) - 1)|0;
                            $1452 = HEAP16[448956>>1]|0;
                            $1453 = $1452&65535;
                            $1454 = $1453 & 1;
                            $1455 = $1451 ^ $1454;
                            $1456 = HEAP16[448958>>1]|0;
                            $1457 = $1456&65535;
                            $1458 = $1457 << 1;
                            $1459 = $1455 ^ $1458;
                            $1460 = $1459 & 3;
                            $1461 = (624353 + ($1460)|0);
                            $1462 = HEAP8[$1461>>0]|0;
                            $1463 = $1462&255;
                            $1464 = Math_imul(16843009, $1463)|0;
                            HEAP32[776>>2] = $1464;
                            break L280;
                           } else {
                            label = 366;
                           }
                          } while(0);
                          if ((label|0) == 366) {
                           HEAP16[580074>>1] = 1956;
                           HEAP16[580076>>1] = 2607;
                           HEAP16[580226>>1] = 2624;
                          }
                          $1133 = HEAP32[1524>>2]|0;
                          $1134 = (($1133) + 14)|0;
                          HEAP32[1524>>2] = $1134;
                          HEAP32[776>>2] = 1633771873;
                         } else {
                          HEAP16[580074>>1] = 1712;
                          HEAP16[580076>>1] = 2312;
                          HEAP16[580226>>1] = 2336;
                         }
                         HEAP32[31028>>2] = 24;
                         HEAP32[1040>>2] = 991;
                         HEAP16[448960>>1] = 19789;
                         break L280;
                        }
                       } while(0);
                       $861 = HEAP16[580076>>1]|0;
                       $862 = (($861) + -1)<<16>>16;
                       HEAP16[580076>>1] = $862;
                       break L280;
                      }
                     } while(0);
                     $851 = HEAP16[580076>>1]|0;
                     $852 = $851&65535;
                     $853 = (($852) - 52)|0;
                     $854 = $853&65535;
                     HEAP16[580076>>1] = $854;
                     HEAP16[448956>>1] = 2;
                     break L280;
                    }
                   } while(0);
                   $843 = HEAP16[580076>>1]|0;
                   $844 = $843&65535;
                   $845 = (($844) - 46)|0;
                   $846 = $845&65535;
                   HEAP16[580076>>1] = $846;
                   break L280;
                  }
                 } while(0);
                 $833 = HEAP16[580076>>1]|0;
                 $834 = $833&65535;
                 $835 = (($834) - 44)|0;
                 $836 = $835&65535;
                 HEAP16[580076>>1] = $836;
                 break L280;
                }
               } while(0);
               $823 = HEAP16[580076>>1]|0;
               $824 = $823&65535;
               $825 = (($824) - 42)|0;
               $826 = $825&65535;
               HEAP16[580076>>1] = $826;
               break L280;
              }
             } while(0);
             $809 = HEAP16[580076>>1]|0;
             $810 = $809&65535;
             $811 = (($810) - 4)|0;
             $812 = $811&65535;
             HEAP16[580076>>1] = $812;
             HEAP16[448956>>1] = 2;
             break L280;
            }
           } while(0);
           $795 = HEAP16[580074>>1]|0;
           $796 = $795&65535;
           $797 = (($796) - 3)|0;
           $798 = $797&65535;
           HEAP16[580074>>1] = $798;
           $799 = HEAP16[580076>>1]|0;
           $800 = $799&65535;
           $801 = (($800) - 4)|0;
           $802 = $801&65535;
           HEAP16[580076>>1] = $802;
           break L280;
          }
         } while(0);
         HEAP32[980>>2] = 4;
         HEAP32[776>>2] = -1263225676;
         break L280;
        } else {
         label = 217;
        }
       } while(0);
       if ((label|0) == 217) {
        HEAP16[580074>>1] = 773;
        HEAP16[580076>>1] = 960;
        HEAP16[580226>>1] = 992;
        HEAPF64[224>>3] = 1.0893617021276596;
        HEAP32[776>>2] = 508436046;
       }
       HEAP32[980>>2] = 4;
       HEAP32[1516>>2] = 10;
       HEAP32[31028>>2] = 15;
       HEAP32[1068>>2] = 40;
      }
     } while(0);
     $1806 = HEAP8[594339>>0]|0;
     $1807 = ($1806<<24>>24)!=(0);
     if (!($1807)) {
      $1808 = HEAP16[580076>>1]|0;
      $1809 = $1808&65535;
      $1810 = HEAP16[580074>>1]|0;
      $1811 = $1810&65535;
      HEAP32[$vararg_buffer34>>2] = $1809;
      $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
      HEAP32[$vararg_ptr37>>2] = $1811;
      (_sprintf(594339,624561,$vararg_buffer34)|0);
     }
     $1812 = HEAP32[776>>2]|0;
     $1813 = ($1812|0)==(-1);
     if ($1813) {
      HEAP32[776>>2] = -1802201964;
     }
     $1814 = HEAP32[293668>>2]|0;
     $1815 = ($1814|0)==(0);
     $1816 = HEAP16[580262>>1]|0;
     $1817 = ($1816<<16>>16)!=(0);
     $or$cond21 = $1815 | $1817;
     if ($or$cond21) {
      break;
     }
     $1818 = HEAP32[944>>2]|0;
     $1819 = HEAP32[293668>>2]|0;
     (_fseek($1818,$1819,0)|0);
     $1820 = (_ljpeg_start($jh,1)|0);
     $1821 = ($1820|0)!=(0);
     if (!($1821)) {
      break;
     }
     $1822 = ((($jh)) + 12|0);
     $1823 = HEAP32[$1822>>2]|0;
     $1824 = $1823&65535;
     HEAP16[580260>>1] = $1824;
     $1825 = ((($jh)) + 8|0);
     $1826 = HEAP32[$1825>>2]|0;
     $1827 = $1826&65535;
     HEAP16[580262>>1] = $1827;
    }
   } while(0);
   $1828 = HEAP32[724>>2]|0;
   $1829 = HEAP32[720>>2]|0;
   $1830 = ($1829|0)!=(0);
   $1831 = HEAP32[1064>>2]|0;
   $1832 = ($1831|0)!=(0);
   $1833 = $1830 ? 1 : $1832;
   $1834 = $1833&1;
   $1835 = $1828 & $1834;
   $1836 = ($1835|0)!=(0);
   do {
    if ($1836) {
     $1837 = +HEAPF32[293692>>2];
     $1838 = $1837;
     $1839 = $1838 > 0.125;
     if (!($1839)) {
      break;
     }
     dest=984; src=293692; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     HEAP32[976>>2] = 0;
    }
   } while(0);
   $1840 = HEAP32[976>>2]|0;
   $1841 = ($1840|0)!=(0);
   if ($1841) {
    _adobe_coeff(594275,594339);
   }
   $1842 = HEAP32[31028>>2]|0;
   $1843 = ($1842|0)==(45|0);
   $1844 = HEAP32[976>>2]|0;
   $1845 = ($1844|0)!=(0);
   $or$cond33 = $1843 & $1845;
   if ($or$cond33) {
    _adobe_coeff(623617,624567);
   }
   $1846 = HEAP16[589194>>1]|0;
   $1847 = ($1846<<16>>16)!=(0);
   do {
    if ($1847) {
     $1848 = HEAP16[580076>>1]|0;
     $1849 = $1848&65535;
     $1850 = HEAP32[31032>>2]|0;
     $1851 = ($1850|0)!=(0);
     $1852 = $1851 ^ 1;
     $1853 = $1852&1;
     $1854 = $1849 >> $1853;
     $1855 = $1854&65535;
     HEAP16[589194>>1] = $1855;
     $1856 = HEAP16[589194>>1]|0;
     $1857 = $1856&65535;
     $1858 = $1857 & 1;
     $1859 = ($1858|0)!=(0);
     $1860 = $1859 ? -1802201964 : 1229539657;
     HEAP32[776>>2] = $1860;
     $1861 = HEAP16[580074>>1]|0;
     $1862 = $1861&65535;
     $1863 = HEAP32[31032>>2]|0;
     $1864 = $1862 >> $1863;
     $1865 = HEAP16[589194>>1]|0;
     $1866 = $1865&65535;
     $1867 = (($1864) + ($1866))|0;
     $1868 = $1867&65535;
     HEAP16[580076>>1] = $1868;
     $1869 = HEAP16[580076>>1]|0;
     $1870 = $1869&65535;
     $1871 = (($1870) - 1)|0;
     $1872 = $1871&65535;
     HEAP16[580074>>1] = $1872;
     HEAPF64[224>>3] = 1.0;
    } else {
     $1873 = HEAP16[580244>>1]|0;
     $1874 = $1873&65535;
     $1875 = HEAP16[580074>>1]|0;
     $1876 = $1875&65535;
     $1877 = ($1874|0)<($1876|0);
     if ($1877) {
      $1878 = HEAP16[580074>>1]|0;
      HEAP16[580244>>1] = $1878;
     }
     $1879 = HEAP16[580226>>1]|0;
     $1880 = $1879&65535;
     $1881 = HEAP16[580076>>1]|0;
     $1882 = $1881&65535;
     $1883 = ($1880|0)<($1882|0);
     if (!($1883)) {
      break;
     }
     $1884 = HEAP16[580076>>1]|0;
     HEAP16[580226>>1] = $1884;
    }
   } while(0);
   $1885 = HEAP32[1516>>2]|0;
   $1886 = ($1885|0)!=(0);
   if (!($1886)) {
    HEAP32[1516>>2] = 12;
   }
   $1887 = HEAP32[1040>>2]|0;
   $1888 = ($1887|0)!=(0);
   if (!($1888)) {
    $1889 = HEAP32[1516>>2]|0;
    $1890 = 1 << $1889;
    $1891 = (($1890) - 1)|0;
    HEAP32[1040>>2] = $1891;
   }
   $1892 = HEAP32[31028>>2]|0;
   $1893 = ($1892|0)!=(0|0);
   do {
    if ($1893) {
     $1894 = HEAP16[580074>>1]|0;
     $1895 = $1894&65535;
     $1896 = ($1895|0)<(22);
     if ($1896) {
      label = 621;
      break;
     }
     $1897 = HEAP16[580076>>1]|0;
     $1898 = $1897&65535;
     $1899 = ($1898|0)<(22);
     $1900 = HEAP32[1516>>2]|0;
     $1901 = ($1900>>>0)>(16);
     $or$cond23 = $1899 | $1901;
     $1902 = HEAP32[1076>>2]|0;
     $1903 = ($1902>>>0)>(6);
     $or$cond25 = $or$cond23 | $1903;
     $1904 = HEAP32[980>>2]|0;
     $1905 = ($1904>>>0)>(4);
     $or$cond27 = $or$cond25 | $1905;
     if ($or$cond27) {
      label = 621;
     }
    } else {
     label = 621;
    }
   } while(0);
   if ((label|0) == 621) {
    HEAP32[1508>>2] = 0;
   }
   $1906 = HEAP32[31028>>2]|0;
   $1907 = ($1906|0)==(47|0);
   if ($1907) {
    $1908 = HEAP32[447952>>2]|0;
    $1909 = HEAP32[780>>2]|0;
    HEAP32[$vararg_buffer38>>2] = $1909;
    $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
    HEAP32[$vararg_ptr41>>2] = 624612;
    (_fprintf($1908,624577,$vararg_buffer38)|0);
    HEAP32[1508>>2] = 0;
   }
   $1910 = HEAP32[31028>>2]|0;
   $1911 = ($1910|0)==(57|0);
   $1912 = HEAP32[31028>>2]|0;
   $1913 = ($1912|0)==(51|0);
   $or$cond29 = $1911 | $1913;
   if ($or$cond29) {
    $1914 = HEAP32[447952>>2]|0;
    $1915 = HEAP32[780>>2]|0;
    HEAP32[$vararg_buffer42>>2] = $1915;
    $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
    HEAP32[$vararg_ptr45>>2] = 624622;
    (_fprintf($1914,624577,$vararg_buffer42)|0);
    HEAP32[1508>>2] = 0;
   }
   $1916 = HEAP8[615136>>0]|0;
   $1917 = ($1916<<24>>24)!=(0);
   if (!($1917)) {
    $1918 = HEAP32[980>>2]|0;
    $1919 = ($1918|0)==(3);
    $1920 = $1919 ? 624630 : 624635;
    (_strcpy(615136,$1920)|0);
   }
   $1921 = HEAP16[580244>>1]|0;
   $1922 = ($1921<<16>>16)!=(0);
   if (!($1922)) {
    $1923 = HEAP16[580074>>1]|0;
    HEAP16[580244>>1] = $1923;
   }
   $1924 = HEAP16[580226>>1]|0;
   $1925 = ($1924<<16>>16)!=(0);
   if (!($1925)) {
    $1926 = HEAP16[580076>>1]|0;
    HEAP16[580226>>1] = $1926;
   }
   $1927 = HEAP32[776>>2]|0;
   $1928 = ($1927>>>0)>(999);
   $1929 = HEAP32[980>>2]|0;
   $1930 = ($1929|0)==(3);
   $or$cond31 = $1928 & $1930;
   if (!($or$cond31)) {
    break;
   }
   $1931 = HEAP32[776>>2]|0;
   $1932 = $1931 >>> 2;
   $1933 = $1932 & 572662306;
   $1934 = HEAP32[776>>2]|0;
   $1935 = $1934 << 2;
   $1936 = $1935 & -2004318072;
   $1937 = $1933 | $1936;
   $1938 = HEAP32[776>>2]|0;
   $1939 = $1938 << 1;
   $1940 = $1937 & $1939;
   $1941 = HEAP32[776>>2]|0;
   $1942 = $1941 | $1940;
   HEAP32[776>>2] = $1942;
  }
 } while(0);
 $1943 = HEAP32[293688>>2]|0;
 $1944 = ($1943|0)==(-1);
 if ($1944) {
  $1945 = HEAP32[294624>>2]|0;
  HEAP32[293688>>2] = $1945;
 }
 $1946 = HEAP32[293688>>2]|0;
 $1947 = ($1946|0)==(-1);
 if (!($1947)) {
  STACKTOP = sp;return;
 }
 HEAP32[293688>>2] = 0;
 STACKTOP = sp;return;
}
function _convert_to_rgb() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $i = 0, $img = 0, $inverse = 0, $j = 0, $k = 0, $num = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $out = 0, $out_cam = 0, $pbody = 0, $pcurve = 0, $row = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 80|0;
 $out = sp + 280|0;
 $out_cam = sp + 232|0;
 $inverse = sp;
 $pbody = sp + 104|0;
 $pcurve = sp + 88|0;
 dest=$pbody; src=316472; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$pcurve>>2]=HEAP32[316608>>2]|0;HEAP32[$pcurve+4>>2]=HEAP32[316608+4>>2]|0;HEAP32[$pcurve+8>>2]=HEAP32[316608+8>>2]|0;HEAP32[$pcurve+12>>2]=HEAP32[316608+12>>2]|0;
 $0 = +HEAPF64[40>>3];
 $1 = +HEAPF64[(48)>>3];
 _gamma_curve($0,$1,0,0);
 dest=$out_cam; src=984; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[980>>2]|0;
 $3 = ($2|0)==(1);
 $4 = HEAP32[704>>2]|0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 | $5;
 $6 = HEAP32[728>>2]|0;
 $7 = ($6|0)<(1);
 $or$cond3 = $or$cond | $7;
 if ($or$cond3) {
  $11 = 1;
 } else {
  $8 = HEAP32[728>>2]|0;
  $9 = ($8|0)>(6);
  $11 = $9;
 }
 $10 = $11&1;
 $12 = HEAP32[976>>2]|0;
 $13 = $12 | $10;
 HEAP32[976>>2] = $13;
 $14 = HEAP32[976>>2]|0;
 $15 = ($14|0)!=(0);
 L4: do {
  if (!($15)) {
   $16 = HEAP32[316392>>2]|0;
   $17 = (_calloc($16,1)|0);
   HEAP32[316624>>2] = $17;
   $18 = HEAP32[316624>>2]|0;
   _merror($18,624698);
   $19 = HEAP32[316624>>2]|0;
   dest=$19; src=316392; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $20 = HEAP32[728>>2]|0;
   $21 = ($20|0)==(5);
   if ($21) {
    $22 = HEAP32[316624>>2]|0;
    $23 = ((($22)) + 20|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[316624>>2]|0;
    $26 = ((($25)) + 16|0);
    HEAP32[$26>>2] = $24;
   }
   $27 = HEAP32[$pbody>>2]|0;
   $28 = ($27*12)|0;
   $29 = (132 + ($28))|0;
   $30 = HEAP32[316624>>2]|0;
   HEAP32[$30>>2] = $29;
   $i = 0;
   while(1) {
    $31 = $i;
    $32 = HEAP32[$pbody>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if (!($33)) {
     break;
    }
    $34 = $i;
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $i;
     $37 = ($36|0)>(1);
     $38 = $37 ? 1482250784 : 1684370275;
     $44 = $38;
    } else {
     $44 = 1952807028;
    }
    $39 = HEAP32[316624>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40>>>0) / 4)&-1;
    $42 = HEAP32[316624>>2]|0;
    $43 = (($42) + ($41<<2)|0);
    HEAP32[$43>>2] = $44;
    $45 = HEAP32[316624>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = $i;
    $48 = ($47*3)|0;
    $49 = (($48) + 2)|0;
    $50 = (($pbody) + ($49<<2)|0);
    HEAP32[$50>>2] = $46;
    $51 = $i;
    $52 = ($51*3)|0;
    $53 = (($52) + 3)|0;
    $54 = (($pbody) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + 3)|0;
    $57 = $56 & -4;
    $58 = HEAP32[316624>>2]|0;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($59) + ($57))|0;
    HEAP32[$58>>2] = $60;
    $61 = $i;
    $62 = (($61) + 1)|0;
    $i = $62;
   }
   $63 = HEAP32[316624>>2]|0;
   $64 = ((($63)) + 128|0);
   dest=$64; src=$pbody; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $65 = HEAP32[728>>2]|0;
   $66 = (($65) - 1)|0;
   $67 = (316368 + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (_strlen($68)|0);
   $70 = (($69) + 1)|0;
   $71 = ((($pbody)) + 20|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72>>>0) / 4)&-1;
   $74 = (($73) + 2)|0;
   $75 = HEAP32[316624>>2]|0;
   $76 = (($75) + ($74<<2)|0);
   HEAP32[$76>>2] = $70;
   $77 = HEAP32[316624>>2]|0;
   $78 = ((($pbody)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($77) + ($79)|0);
   $81 = ((($80)) + 8|0);
   dest=$81; src=316596; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $82 = +HEAPF64[(80)>>3];
   $83 = 256.0 / $82;
   $84 = $83 + 0.5;
   $85 = (~~(($84)));
   $86 = $85 << 16 >> 16;
   $87 = $86 << 16;
   $88 = ((($pcurve)) + 12|0);
   HEAP32[$88>>2] = $87;
   $i = 4;
   while(1) {
    $89 = $i;
    $90 = ($89|0)<(7);
    if (!($90)) {
     break;
    }
    $91 = HEAP32[316624>>2]|0;
    $92 = $i;
    $93 = ($92*3)|0;
    $94 = (($93) + 2)|0;
    $95 = (($pbody) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($91) + ($96)|0);
    dest=$97; src=$pcurve; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $98 = $i;
    $99 = (($98) + 1)|0;
    $i = $99;
   }
   $100 = HEAP32[728>>2]|0;
   $101 = (($100) - 1)|0;
   $102 = (316344 + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   _pseudoinverse($103,$inverse,3);
   $i = 0;
   while(1) {
    $104 = $i;
    $105 = ($104|0)<(3);
    if (!($105)) {
     break;
    }
    $j = 0;
    while(1) {
     $106 = $j;
     $107 = ($106|0)<(3);
     if (!($107)) {
      break;
     }
     $k = 0;
     $num = 0.0;
     while(1) {
      $108 = $k;
      $109 = ($108|0)<(3);
      if (!($109)) {
       break;
      }
      $110 = $k;
      $111 = $i;
      $112 = (232 + (($111*24)|0)|0);
      $113 = (($112) + ($110<<3)|0);
      $114 = +HEAPF64[$113>>3];
      $115 = $k;
      $116 = $j;
      $117 = (($inverse) + (($116*24)|0)|0);
      $118 = (($117) + ($115<<3)|0);
      $119 = +HEAPF64[$118>>3];
      $120 = $114 * $119;
      $121 = $num;
      $122 = $121 + $120;
      $num = $122;
      $123 = $k;
      $124 = (($123) + 1)|0;
      $k = $124;
     }
     $125 = $num;
     $126 = $125 * 65536.0;
     $127 = $126 + 0.5;
     $128 = (~~(($127))>>>0);
     $129 = $j;
     $130 = ($129*3)|0;
     $131 = (($130) + 23)|0;
     $132 = (($pbody) + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (($133>>>0) / 4)&-1;
     $135 = $i;
     $136 = (($134) + ($135))|0;
     $137 = (($136) + 2)|0;
     $138 = HEAP32[316624>>2]|0;
     $139 = (($138) + ($137<<2)|0);
     HEAP32[$139>>2] = $128;
     $140 = $j;
     $141 = (($140) + 1)|0;
     $j = $141;
    }
    $142 = $i;
    $143 = (($142) + 1)|0;
    $i = $143;
   }
   $i = 0;
   while(1) {
    $144 = $i;
    $145 = HEAP32[316392>>2]|0;
    $146 = (($145>>>0) / 4)&-1;
    $147 = ($144>>>0)<($146>>>0);
    if (!($147)) {
     break;
    }
    $148 = $i;
    $149 = HEAP32[316624>>2]|0;
    $150 = (($149) + ($148<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (_htonl($151)|0);
    $153 = $i;
    $154 = HEAP32[316624>>2]|0;
    $155 = (($154) + ($153<<2)|0);
    HEAP32[$155>>2] = $152;
    $156 = $i;
    $157 = (($156) + 1)|0;
    $i = $157;
   }
   $158 = HEAP32[316624>>2]|0;
   $159 = ((($pbody)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($158) + ($160)|0);
   $162 = ((($161)) + 8|0);
   (_strcpy($162,624715)|0);
   $163 = HEAP32[316624>>2]|0;
   $164 = ((($pbody)) + 20|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($163) + ($165)|0);
   $167 = ((($166)) + 12|0);
   $168 = HEAP32[728>>2]|0;
   $169 = (($168) - 1)|0;
   $170 = (316368 + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   (_strcpy($167,$171)|0);
   $i = 0;
   while(1) {
    $172 = $i;
    $173 = ($172|0)<(3);
    if (!($173)) {
     break L4;
    }
    $j = 0;
    while(1) {
     $174 = $j;
     $175 = HEAP32[980>>2]|0;
     $176 = ($174>>>0)<($175>>>0);
     if (!($176)) {
      break;
     }
     $k = 0;
     $177 = $j;
     $178 = $i;
     $179 = (($out_cam) + ($178<<4)|0);
     $180 = (($179) + ($177<<2)|0);
     HEAPF32[$180>>2] = 0.0;
     while(1) {
      $181 = $k;
      $182 = ($181|0)<(3);
      if (!($182)) {
       break;
      }
      $183 = $k;
      $184 = $i;
      $185 = HEAP32[728>>2]|0;
      $186 = (($185) - 1)|0;
      $187 = (316344 + ($186<<2)|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (($188) + (($184*24)|0)|0);
      $190 = (($189) + ($183<<3)|0);
      $191 = +HEAPF64[$190>>3];
      $192 = $j;
      $193 = $k;
      $194 = (984 + ($193<<4)|0);
      $195 = (($194) + ($192<<2)|0);
      $196 = +HEAPF32[$195>>2];
      $197 = $196;
      $198 = $191 * $197;
      $199 = $j;
      $200 = $i;
      $201 = (($out_cam) + ($200<<4)|0);
      $202 = (($201) + ($199<<2)|0);
      $203 = +HEAPF32[$202>>2];
      $204 = $203;
      $205 = $204 + $198;
      $206 = $205;
      HEAPF32[$202>>2] = $206;
      $207 = $k;
      $208 = (($207) + 1)|0;
      $k = $208;
     }
     $209 = $j;
     $210 = (($209) + 1)|0;
     $j = $210;
    }
    $211 = $i;
    $212 = (($211) + 1)|0;
    $i = $212;
   }
  }
 } while(0);
 $213 = HEAP32[712>>2]|0;
 $214 = ($213|0)!=(0);
 if ($214) {
  $215 = HEAP32[447952>>2]|0;
  $216 = HEAP32[976>>2]|0;
  $217 = ($216|0)!=(0);
  $218 = $217 ? 624739 : 624763;
  $219 = HEAP32[728>>2]|0;
  $220 = (($219) - 1)|0;
  $221 = (316368 + ($220<<2)|0);
  $222 = HEAP32[$221>>2]|0;
  HEAP32[$vararg_buffer>>2] = $222;
  (_fprintf($215,$218,$vararg_buffer)|0);
 }
 _memset((316628|0),0,131072)|0;
 $223 = HEAP32[972>>2]|0;
 $img = $223;
 $row = 0;
 while(1) {
  $224 = $row;
  $225 = HEAP16[580074>>1]|0;
  $226 = $225&65535;
  $227 = ($224|0)<($226|0);
  if (!($227)) {
   break;
  }
  $col = 0;
  while(1) {
   $228 = $col;
   $229 = HEAP16[580076>>1]|0;
   $230 = $229&65535;
   $231 = ($228|0)<($230|0);
   if (!($231)) {
    break;
   }
   $232 = HEAP32[976>>2]|0;
   $233 = ($232|0)!=(0);
   L57: do {
    if ($233) {
     $310 = HEAP32[704>>2]|0;
     $311 = ($310|0)!=(0);
     if ($311) {
      $312 = $row;
      $313 = $col;
      $314 = (_fcol($312,$313)|0);
      $315 = $img;
      $316 = (($315) + ($314<<1)|0);
      $317 = HEAP16[$316>>1]|0;
      $318 = $img;
      HEAP16[$318>>1] = $317;
     }
    } else {
     $234 = ((($out)) + 8|0);
     HEAPF32[$234>>2] = 0.0;
     $235 = ((($out)) + 4|0);
     HEAPF32[$235>>2] = 0.0;
     HEAPF32[$out>>2] = 0.0;
     $c = 0;
     while(1) {
      $236 = $c;
      $237 = HEAP32[980>>2]|0;
      $238 = ($236>>>0)<($237>>>0);
      if (!($238)) {
       break;
      }
      $239 = $c;
      $240 = (($out_cam) + ($239<<2)|0);
      $241 = +HEAPF32[$240>>2];
      $242 = $c;
      $243 = $img;
      $244 = (($243) + ($242<<1)|0);
      $245 = HEAP16[$244>>1]|0;
      $246 = $245&65535;
      $247 = (+($246|0));
      $248 = $241 * $247;
      $249 = +HEAPF32[$out>>2];
      $250 = $249 + $248;
      HEAPF32[$out>>2] = $250;
      $251 = $c;
      $252 = ((($out_cam)) + 16|0);
      $253 = (($252) + ($251<<2)|0);
      $254 = +HEAPF32[$253>>2];
      $255 = $c;
      $256 = $img;
      $257 = (($256) + ($255<<1)|0);
      $258 = HEAP16[$257>>1]|0;
      $259 = $258&65535;
      $260 = (+($259|0));
      $261 = $254 * $260;
      $262 = ((($out)) + 4|0);
      $263 = +HEAPF32[$262>>2];
      $264 = $263 + $261;
      HEAPF32[$262>>2] = $264;
      $265 = $c;
      $266 = ((($out_cam)) + 32|0);
      $267 = (($266) + ($265<<2)|0);
      $268 = +HEAPF32[$267>>2];
      $269 = $c;
      $270 = $img;
      $271 = (($270) + ($269<<1)|0);
      $272 = HEAP16[$271>>1]|0;
      $273 = $272&65535;
      $274 = (+($273|0));
      $275 = $268 * $274;
      $276 = ((($out)) + 8|0);
      $277 = +HEAPF32[$276>>2];
      $278 = $277 + $275;
      HEAPF32[$276>>2] = $278;
      $279 = $c;
      $280 = (($279) + 1)|0;
      $c = $280;
     }
     $c = 0;
     while(1) {
      $281 = $c;
      $282 = ($281|0)<(3);
      if (!($282)) {
       break L57;
      }
      $283 = $c;
      $284 = (($out) + ($283<<2)|0);
      $285 = +HEAPF32[$284>>2];
      $286 = (~~(($285)));
      $287 = ($286|0)<(65535);
      if ($287) {
       $288 = $c;
       $289 = (($out) + ($288<<2)|0);
       $290 = +HEAPF32[$289>>2];
       $291 = (~~(($290)));
       $293 = $291;
      } else {
       $293 = 65535;
      }
      $292 = (0)>($293|0);
      if ($292) {
       $304 = 0;
      } else {
       $294 = $c;
       $295 = (($out) + ($294<<2)|0);
       $296 = +HEAPF32[$295>>2];
       $297 = (~~(($296)));
       $298 = ($297|0)<(65535);
       if ($298) {
        $299 = $c;
        $300 = (($out) + ($299<<2)|0);
        $301 = +HEAPF32[$300>>2];
        $302 = (~~(($301)));
        $304 = $302;
       } else {
        $304 = 65535;
       }
      }
      $303 = $304&65535;
      $305 = $c;
      $306 = $img;
      $307 = (($306) + ($305<<1)|0);
      HEAP16[$307>>1] = $303;
      $308 = $c;
      $309 = (($308) + 1)|0;
      $c = $309;
     }
    }
   } while(0);
   $c = 0;
   while(1) {
    $319 = $c;
    $320 = HEAP32[980>>2]|0;
    $321 = ($319>>>0)<($320>>>0);
    if (!($321)) {
     break;
    }
    $322 = $c;
    $323 = $img;
    $324 = (($323) + ($322<<1)|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = $325&65535;
    $327 = $326 >> 3;
    $328 = $c;
    $329 = (316628 + ($328<<15)|0);
    $330 = (($329) + ($327<<2)|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = (($331) + 1)|0;
    HEAP32[$330>>2] = $332;
    $333 = $c;
    $334 = (($333) + 1)|0;
    $c = $334;
   }
   $335 = $col;
   $336 = (($335) + 1)|0;
   $col = $336;
   $337 = $img;
   $338 = ((($337)) + 8|0);
   $img = $338;
  }
  $339 = $row;
  $340 = (($339) + 1)|0;
  $row = $340;
 }
 $341 = HEAP32[980>>2]|0;
 $342 = ($341|0)==(4);
 $343 = HEAP32[728>>2]|0;
 $344 = ($343|0)!=(0);
 $or$cond5 = $342 & $344;
 if ($or$cond5) {
  HEAP32[980>>2] = 3;
 }
 $345 = HEAP32[704>>2]|0;
 $346 = ($345|0)!=(0);
 $347 = HEAP32[776>>2]|0;
 $348 = ($347|0)!=(0);
 $or$cond7 = $346 & $348;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 HEAP32[980>>2] = 1;
 STACKTOP = sp;return;
}
function _fuji_rotate() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0.0, $col = 0, $fc = 0.0, $fr = 0.0, $high = 0, $i = 0, $img = 0, $pix = 0, $r = 0.0, $row = 0, $step = 0.0, $uc = 0, $ur = 0, $vararg_buffer = 0;
 var $wide = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $0 = HEAP16[589194>>1]|0;
 $1 = ($0<<16>>16)!=(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[712>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[447952>>2]|0;
  (_fprintf($4,624795,$vararg_buffer)|0);
 }
 $5 = HEAP16[589194>>1]|0;
 $6 = $5&65535;
 $7 = (($6) - 1)|0;
 $8 = HEAP16[580078>>1]|0;
 $9 = $8&65535;
 $10 = (($7) + ($9))|0;
 $11 = HEAP16[580078>>1]|0;
 $12 = $11&65535;
 $13 = $10 >> $12;
 $14 = $13&65535;
 HEAP16[589194>>1] = $14;
 $15 = (+Math_sqrt(0.5));
 $step = $15;
 $16 = HEAP16[589194>>1]|0;
 $17 = $16&65535;
 $18 = (+($17|0));
 $19 = $step;
 $20 = $18 / $19;
 $21 = (~~(($20))&65535);
 $wide = $21;
 $22 = HEAP16[580074>>1]|0;
 $23 = $22&65535;
 $24 = HEAP16[589194>>1]|0;
 $25 = $24&65535;
 $26 = (($23) - ($25))|0;
 $27 = (+($26|0));
 $28 = $step;
 $29 = $27 / $28;
 $30 = (~~(($29))&65535);
 $high = $30;
 $31 = $high;
 $32 = $31&65535;
 $33 = $wide;
 $34 = $33&65535;
 $35 = $34<<3;
 $36 = (_calloc($32,$35)|0);
 $img = $36;
 $37 = $img;
 _merror($37,624825);
 $row = 0;
 while(1) {
  $38 = $row;
  $39 = $high;
  $40 = $39&65535;
  $41 = ($38|0)<($40|0);
  if (!($41)) {
   break;
  }
  $col = 0;
  while(1) {
   $42 = $col;
   $43 = $wide;
   $44 = $43&65535;
   $45 = ($42|0)<($44|0);
   if (!($45)) {
    break;
   }
   $46 = HEAP16[589194>>1]|0;
   $47 = $46&65535;
   $48 = (+($47|0));
   $49 = $row;
   $50 = $col;
   $51 = (($49) - ($50))|0;
   $52 = (+($51|0));
   $53 = $step;
   $54 = $52 * $53;
   $55 = $48 + $54;
   $56 = $55;
   $r = $56;
   $57 = (~~(($56))>>>0);
   $ur = $57;
   $58 = $row;
   $59 = $col;
   $60 = (($58) + ($59))|0;
   $61 = (+($60|0));
   $62 = $step;
   $63 = $61 * $62;
   $64 = $63;
   $c = $64;
   $65 = (~~(($64))>>>0);
   $uc = $65;
   $66 = $ur;
   $67 = HEAP16[580074>>1]|0;
   $68 = $67&65535;
   $69 = (($68) - 2)|0;
   $70 = ($66>>>0)>($69>>>0);
   L13: do {
    if (!($70)) {
     $71 = $uc;
     $72 = HEAP16[580076>>1]|0;
     $73 = $72&65535;
     $74 = (($73) - 2)|0;
     $75 = ($71>>>0)>($74>>>0);
     if (!($75)) {
      $76 = $r;
      $77 = $ur;
      $78 = (+($77>>>0));
      $79 = $76 - $78;
      $fr = $79;
      $80 = $c;
      $81 = $uc;
      $82 = (+($81>>>0));
      $83 = $80 - $82;
      $fc = $83;
      $84 = HEAP32[972>>2]|0;
      $85 = $ur;
      $86 = HEAP16[580076>>1]|0;
      $87 = $86&65535;
      $88 = Math_imul($85, $87)|0;
      $89 = (($84) + ($88<<3)|0);
      $90 = $uc;
      $91 = (($89) + ($90<<3)|0);
      $pix = $91;
      $i = 0;
      while(1) {
       $92 = $i;
       $93 = HEAP32[980>>2]|0;
       $94 = ($92>>>0)<($93>>>0);
       if (!($94)) {
        break L13;
       }
       $95 = $i;
       $96 = $pix;
       $97 = (($96) + ($95<<1)|0);
       $98 = HEAP16[$97>>1]|0;
       $99 = $98&65535;
       $100 = (+($99|0));
       $101 = $fc;
       $102 = 1.0 - $101;
       $103 = $100 * $102;
       $104 = $i;
       $105 = $pix;
       $106 = ((($105)) + 8|0);
       $107 = (($106) + ($104<<1)|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = $108&65535;
       $110 = (+($109|0));
       $111 = $fc;
       $112 = $110 * $111;
       $113 = $103 + $112;
       $114 = $fr;
       $115 = 1.0 - $114;
       $116 = $113 * $115;
       $117 = $i;
       $118 = HEAP16[580076>>1]|0;
       $119 = $118&65535;
       $120 = $pix;
       $121 = (($120) + ($119<<3)|0);
       $122 = (($121) + ($117<<1)|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123&65535;
       $125 = (+($124|0));
       $126 = $fc;
       $127 = 1.0 - $126;
       $128 = $125 * $127;
       $129 = $i;
       $130 = HEAP16[580076>>1]|0;
       $131 = $130&65535;
       $132 = (($131) + 1)|0;
       $133 = $pix;
       $134 = (($133) + ($132<<3)|0);
       $135 = (($134) + ($129<<1)|0);
       $136 = HEAP16[$135>>1]|0;
       $137 = $136&65535;
       $138 = (+($137|0));
       $139 = $fc;
       $140 = $138 * $139;
       $141 = $128 + $140;
       $142 = $fr;
       $143 = $141 * $142;
       $144 = $116 + $143;
       $145 = (~~(($144))&65535);
       $146 = $i;
       $147 = $row;
       $148 = $wide;
       $149 = $148&65535;
       $150 = Math_imul($147, $149)|0;
       $151 = $col;
       $152 = (($150) + ($151))|0;
       $153 = $img;
       $154 = (($153) + ($152<<3)|0);
       $155 = (($154) + ($146<<1)|0);
       HEAP16[$155>>1] = $145;
       $156 = $i;
       $157 = (($156) + 1)|0;
       $i = $157;
      }
     }
    }
   } while(0);
   $158 = $col;
   $159 = (($158) + 1)|0;
   $col = $159;
  }
  $160 = $row;
  $161 = (($160) + 1)|0;
  $row = $161;
 }
 $162 = HEAP32[972>>2]|0;
 _free($162);
 $163 = $wide;
 HEAP16[580076>>1] = $163;
 $164 = $high;
 HEAP16[580074>>1] = $164;
 $165 = $img;
 HEAP32[972>>2] = $165;
 HEAP16[589194>>1] = 0;
 STACKTOP = sp;return;
}
function _stretch() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $c = 0, $col = 0, $frac = 0.0, $img = 0, $newdim = 0, $pix0 = 0, $pix1 = 0, $rc = 0.0, $row = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $0 = +HEAPF64[224>>3];
 $1 = $0 == 1.0;
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[712>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[447952>>2]|0;
  (_fprintf($4,624839,$vararg_buffer)|0);
 }
 $5 = +HEAPF64[224>>3];
 $6 = $5 < 1.0;
 if ($6) {
  $7 = HEAP16[580074>>1]|0;
  $8 = $7&65535;
  $9 = (+($8|0));
  $10 = +HEAPF64[224>>3];
  $11 = $9 / $10;
  $12 = $11 + 0.5;
  $13 = (~~(($12))&65535);
  $newdim = $13;
  $14 = HEAP16[580076>>1]|0;
  $15 = $14&65535;
  $16 = $newdim;
  $17 = $16&65535;
  $18 = $17<<3;
  $19 = (_calloc($15,$18)|0);
  $img = $19;
  $20 = $img;
  _merror($20,624864);
  $row = 0;
  $rc = 0.0;
  while(1) {
   $21 = $row;
   $22 = $newdim;
   $23 = $22&65535;
   $24 = ($21|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $rc;
   $26 = $rc;
   $27 = (~~(($26)));
   $c = $27;
   $28 = (+($27|0));
   $29 = $25 - $28;
   $frac = $29;
   $30 = $c;
   $31 = HEAP16[580076>>1]|0;
   $32 = $31&65535;
   $33 = Math_imul($30, $32)|0;
   $34 = HEAP32[972>>2]|0;
   $35 = (($34) + ($33<<3)|0);
   $pix1 = $35;
   $pix0 = $35;
   $36 = $c;
   $37 = (($36) + 1)|0;
   $38 = HEAP16[580074>>1]|0;
   $39 = $38&65535;
   $40 = ($37|0)<($39|0);
   if ($40) {
    $41 = HEAP16[580076>>1]|0;
    $42 = $41&65535;
    $43 = $42<<2;
    $44 = $pix1;
    $45 = (($44) + ($43<<1)|0);
    $pix1 = $45;
   }
   $col = 0;
   while(1) {
    $46 = $col;
    $47 = HEAP16[580076>>1]|0;
    $48 = $47&65535;
    $49 = ($46|0)<($48|0);
    if (!($49)) {
     break;
    }
    $c = 0;
    while(1) {
     $50 = $c;
     $51 = HEAP32[980>>2]|0;
     $52 = ($50>>>0)<($51>>>0);
     if (!($52)) {
      break;
     }
     $53 = $c;
     $54 = $pix0;
     $55 = (($54) + ($53<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = (+($57|0));
     $59 = $frac;
     $60 = 1.0 - $59;
     $61 = $58 * $60;
     $62 = $c;
     $63 = $pix1;
     $64 = (($63) + ($62<<1)|0);
     $65 = HEAP16[$64>>1]|0;
     $66 = $65&65535;
     $67 = (+($66|0));
     $68 = $frac;
     $69 = $67 * $68;
     $70 = $61 + $69;
     $71 = $70 + 0.5;
     $72 = (~~(($71))&65535);
     $73 = $c;
     $74 = $row;
     $75 = HEAP16[580076>>1]|0;
     $76 = $75&65535;
     $77 = Math_imul($74, $76)|0;
     $78 = $col;
     $79 = (($77) + ($78))|0;
     $80 = $img;
     $81 = (($80) + ($79<<3)|0);
     $82 = (($81) + ($73<<1)|0);
     HEAP16[$82>>1] = $72;
     $83 = $c;
     $84 = (($83) + 1)|0;
     $c = $84;
    }
    $85 = $col;
    $86 = (($85) + 1)|0;
    $col = $86;
    $87 = $pix0;
    $88 = ((($87)) + 8|0);
    $pix0 = $88;
    $89 = $pix1;
    $90 = ((($89)) + 8|0);
    $pix1 = $90;
   }
   $91 = $row;
   $92 = (($91) + 1)|0;
   $row = $92;
   $93 = +HEAPF64[224>>3];
   $94 = $rc;
   $95 = $94 + $93;
   $rc = $95;
  }
  $96 = $newdim;
  HEAP16[580074>>1] = $96;
 } else {
  $97 = HEAP16[580076>>1]|0;
  $98 = $97&65535;
  $99 = (+($98|0));
  $100 = +HEAPF64[224>>3];
  $101 = $99 * $100;
  $102 = $101 + 0.5;
  $103 = (~~(($102))&65535);
  $newdim = $103;
  $104 = HEAP16[580074>>1]|0;
  $105 = $104&65535;
  $106 = $newdim;
  $107 = $106&65535;
  $108 = $107<<3;
  $109 = (_calloc($105,$108)|0);
  $img = $109;
  $110 = $img;
  _merror($110,624864);
  $col = 0;
  $rc = 0.0;
  while(1) {
   $111 = $col;
   $112 = $newdim;
   $113 = $112&65535;
   $114 = ($111|0)<($113|0);
   if (!($114)) {
    break;
   }
   $115 = $rc;
   $116 = $rc;
   $117 = (~~(($116)));
   $c = $117;
   $118 = (+($117|0));
   $119 = $115 - $118;
   $frac = $119;
   $120 = $c;
   $121 = HEAP32[972>>2]|0;
   $122 = (($121) + ($120<<3)|0);
   $pix1 = $122;
   $pix0 = $122;
   $123 = $c;
   $124 = (($123) + 1)|0;
   $125 = HEAP16[580076>>1]|0;
   $126 = $125&65535;
   $127 = ($124|0)<($126|0);
   if ($127) {
    $128 = $pix1;
    $129 = ((($128)) + 8|0);
    $pix1 = $129;
   }
   $row = 0;
   while(1) {
    $130 = $row;
    $131 = HEAP16[580074>>1]|0;
    $132 = $131&65535;
    $133 = ($130|0)<($132|0);
    if (!($133)) {
     break;
    }
    $c = 0;
    while(1) {
     $134 = $c;
     $135 = HEAP32[980>>2]|0;
     $136 = ($134>>>0)<($135>>>0);
     if (!($136)) {
      break;
     }
     $137 = $c;
     $138 = $pix0;
     $139 = (($138) + ($137<<1)|0);
     $140 = HEAP16[$139>>1]|0;
     $141 = $140&65535;
     $142 = (+($141|0));
     $143 = $frac;
     $144 = 1.0 - $143;
     $145 = $142 * $144;
     $146 = $c;
     $147 = $pix1;
     $148 = (($147) + ($146<<1)|0);
     $149 = HEAP16[$148>>1]|0;
     $150 = $149&65535;
     $151 = (+($150|0));
     $152 = $frac;
     $153 = $151 * $152;
     $154 = $145 + $153;
     $155 = $154 + 0.5;
     $156 = (~~(($155))&65535);
     $157 = $c;
     $158 = $row;
     $159 = $newdim;
     $160 = $159&65535;
     $161 = Math_imul($158, $160)|0;
     $162 = $col;
     $163 = (($161) + ($162))|0;
     $164 = $img;
     $165 = (($164) + ($163<<3)|0);
     $166 = (($165) + ($157<<1)|0);
     HEAP16[$166>>1] = $156;
     $167 = $c;
     $168 = (($167) + 1)|0;
     $c = $168;
    }
    $169 = $row;
    $170 = (($169) + 1)|0;
    $row = $170;
    $171 = HEAP16[580076>>1]|0;
    $172 = $171&65535;
    $173 = $172<<2;
    $174 = $pix0;
    $175 = (($174) + ($173<<1)|0);
    $pix0 = $175;
    $176 = HEAP16[580076>>1]|0;
    $177 = $176&65535;
    $178 = $177<<2;
    $179 = $pix1;
    $180 = (($179) + ($178<<1)|0);
    $pix1 = $180;
   }
   $181 = $col;
   $182 = (($181) + 1)|0;
   $col = $182;
   $183 = +HEAPF64[224>>3];
   $184 = 1.0 / $183;
   $185 = $rc;
   $186 = $185 + $184;
   $rc = $186;
  }
  $187 = $newdim;
  HEAP16[580076>>1] = $187;
 }
 $188 = HEAP32[972>>2]|0;
 _free($188);
 $189 = $img;
 HEAP32[972>>2] = $189;
 STACKTOP = sp;return;
}
function _flip_index($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row;
 $1 = $col;
 $2 = HEAP32[293688>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = $1;
  $7 = (($5) + ($6))|0;
  $0 = $7;
  $8 = $0;
  $9 = $1;
  $10 = (($8) - ($9))|0;
  $1 = $10;
  $11 = $0;
  $12 = $1;
  $13 = (($11) - ($12))|0;
  $0 = $13;
 }
 $14 = HEAP32[293688>>2]|0;
 $15 = $14 & 2;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP16[589196>>1]|0;
  $18 = $17&65535;
  $19 = (($18) - 1)|0;
  $20 = $0;
  $21 = (($19) - ($20))|0;
  $0 = $21;
 }
 $22 = HEAP32[293688>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = HEAP16[580080>>1]|0;
  $26 = $25&65535;
  $27 = (($26) - 1)|0;
  $28 = $1;
  $29 = (($27) - ($28))|0;
  $1 = $29;
 }
 $30 = $0;
 $31 = HEAP16[580080>>1]|0;
 $32 = $31&65535;
 $33 = Math_imul($30, $32)|0;
 $34 = $1;
 $35 = (($33) + ($34))|0;
 STACKTOP = sp;return ($35|0);
}
function _tiff_set($th,$ntag,$tag,$type,$count,$val) {
 $th = $th|0;
 $ntag = $ntag|0;
 $tag = $tag|0;
 $type = $type|0;
 $count = $count|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $c = 0, $or$cond = 0, $or$cond3 = 0, $tt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $th;
 $1 = $ntag;
 $2 = $tag;
 $3 = $type;
 $4 = $count;
 $5 = $val;
 $6 = $1;
 $7 = ((($6)) + 2|0);
 $8 = $1;
 $9 = HEAP16[$8>>1]|0;
 $10 = (($9) + 1)<<16>>16;
 HEAP16[$8>>1] = $10;
 $11 = $9&65535;
 $12 = (($7) + (($11*12)|0)|0);
 $tt = $12;
 $13 = $5;
 $14 = $tt;
 $15 = ((($14)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 $17 = $16&65535;
 $18 = ($17|0)==(1);
 $19 = $4;
 $20 = ($19|0)<=(4);
 $or$cond = $18 & $20;
 L1: do {
  if ($or$cond) {
   $c = 0;
   while(1) {
    $21 = $c;
    $22 = ($21|0)<(4);
    if (!($22)) {
     break L1;
    }
    $23 = $5;
    $24 = $c;
    $25 = $24 << 3;
    $26 = $23 >> $25;
    $27 = $26&255;
    $28 = $c;
    $29 = $tt;
    $30 = ((($29)) + 8|0);
    $31 = (($30) + ($28)|0);
    HEAP8[$31>>0] = $27;
    $32 = $c;
    $33 = (($32) + 1)|0;
    $c = $33;
   }
  } else {
   $34 = $3;
   $35 = $34&65535;
   $36 = ($35|0)==(2);
   if ($36) {
    $37 = $0;
    $38 = $5;
    $39 = (($37) + ($38)|0);
    $40 = $4;
    $41 = (($40) - 1)|0;
    $42 = (_strnlen($39,$41)|0);
    $43 = (($42) + 1)|0;
    $4 = $43;
    $44 = $4;
    $45 = ($44|0)<=(4);
    if (!($45)) {
     break;
    }
    $c = 0;
    while(1) {
     $46 = $c;
     $47 = ($46|0)<(4);
     if (!($47)) {
      break L1;
     }
     $48 = $5;
     $49 = $c;
     $50 = (($48) + ($49))|0;
     $51 = $0;
     $52 = (($51) + ($50)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $c;
     $55 = $tt;
     $56 = ((($55)) + 8|0);
     $57 = (($56) + ($54)|0);
     HEAP8[$57>>0] = $53;
     $58 = $c;
     $59 = (($58) + 1)|0;
     $c = $59;
    }
   } else {
    $60 = $3;
    $61 = $60&65535;
    $62 = ($61|0)==(3);
    $63 = $4;
    $64 = ($63|0)<=(2);
    $or$cond3 = $62 & $64;
    if (!($or$cond3)) {
     break;
    }
    $c = 0;
    while(1) {
     $65 = $c;
     $66 = ($65|0)<(2);
     if (!($66)) {
      break L1;
     }
     $67 = $5;
     $68 = $c;
     $69 = $68 << 4;
     $70 = $67 >> $69;
     $71 = $70&65535;
     $72 = $c;
     $73 = $tt;
     $74 = ((($73)) + 8|0);
     $75 = (($74) + ($72<<1)|0);
     HEAP16[$75>>1] = $71;
     $76 = $c;
     $77 = (($76) + 1)|0;
     $c = $77;
    }
   }
  }
 } while(0);
 $78 = $4;
 $79 = $tt;
 $80 = ((($79)) + 4|0);
 HEAP32[$80>>2] = $78;
 $81 = $3;
 $82 = $tt;
 $83 = ((($82)) + 2|0);
 HEAP16[$83>>1] = $81;
 $84 = $2;
 $85 = $tt;
 HEAP16[$85>>1] = $84;
 STACKTOP = sp;return;
}
function _tiff_head($th,$full) {
 $th = $th|0;
 $full = $full|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c = 0, $psize = 0, $t = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $th;
 $1 = $full;
 $psize = 0;
 $2 = $0;
 _memset(($2|0),0,1376)|0;
 $3 = (_htonl(1296910665)|0);
 $4 = $3 >>> 16;
 $5 = $4&65535;
 $6 = $0;
 HEAP16[$6>>1] = $5;
 $7 = $0;
 $8 = ((($7)) + 2|0);
 HEAP16[$8>>1] = 42;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 10;
 $11 = $0;
 $12 = ((($11)) + 476|0);
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = 300;
 $14 = $0;
 $15 = ((($14)) + 476|0);
 HEAP32[$15>>2] = 300;
 $16 = $0;
 $17 = ((($16)) + 476|0);
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = 1;
 $19 = $0;
 $20 = ((($19)) + 476|0);
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 1;
 $c = 0;
 while(1) {
  $22 = $c;
  $23 = ($22|0)<(6);
  if (!($23)) {
   break;
  }
  $24 = $c;
  $25 = (4 + ($24))|0;
  $26 = $0;
  $27 = ((($26)) + 476|0);
  $28 = (($27) + ($25<<2)|0);
  HEAP32[$28>>2] = 1000000;
  $29 = $c;
  $30 = (($29) + 1)|0;
  $c = $30;
 }
 $31 = +HEAPF32[293680>>2];
 $32 = $0;
 $33 = ((($32)) + 476|0);
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+($35|0));
 $37 = $36 * $31;
 $38 = (~~(($37)));
 HEAP32[$34>>2] = $38;
 $39 = +HEAPF32[293676>>2];
 $40 = $0;
 $41 = ((($40)) + 476|0);
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (+($43|0));
 $45 = $44 * $39;
 $46 = (~~(($45)));
 HEAP32[$42>>2] = $46;
 $47 = +HEAPF32[294224>>2];
 $48 = $0;
 $49 = ((($48)) + 476|0);
 $50 = ((($49)) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (+($51|0));
 $53 = $52 * $47;
 $54 = (~~(($53)));
 HEAP32[$50>>2] = $54;
 $55 = $0;
 $56 = ((($55)) + 620|0);
 (_strncpy($56,614459,512)|0);
 $57 = $0;
 $58 = ((($57)) + 1132|0);
 (_strncpy($58,594275,64)|0);
 $59 = $0;
 $60 = ((($59)) + 1196|0);
 (_strncpy($60,594339,64)|0);
 $61 = $0;
 $62 = ((($61)) + 1260|0);
 (_strcpy($62,624874)|0);
 $63 = (_localtime((31164|0))|0);
 $t = $63;
 $64 = $0;
 $65 = ((($64)) + 1292|0);
 $66 = $t;
 $67 = ((($66)) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 1900)|0;
 $70 = $t;
 $71 = ((($70)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + 1)|0;
 $74 = $t;
 $75 = ((($74)) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $t;
 $78 = ((($77)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $t;
 $81 = ((($80)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $t;
 $84 = HEAP32[$83>>2]|0;
 HEAP32[$vararg_buffer>>2] = $69;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $73;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $76;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $79;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $82;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $84;
 (_sprintf($65,624886,$vararg_buffer)|0);
 $85 = $0;
 $86 = ((($85)) + 1312|0);
 (_strncpy($86,613809,64)|0);
 $87 = $1;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $0;
  $90 = $0;
  $91 = ((($90)) + 10|0);
  _tiff_set($89,$91,254,4,1,0);
  $92 = $0;
  $93 = $0;
  $94 = ((($93)) + 10|0);
  $95 = HEAP16[580076>>1]|0;
  $96 = $95&65535;
  _tiff_set($92,$94,256,4,1,$96);
  $97 = $0;
  $98 = $0;
  $99 = ((($98)) + 10|0);
  $100 = HEAP16[580074>>1]|0;
  $101 = $100&65535;
  _tiff_set($97,$99,257,4,1,$101);
  $102 = $0;
  $103 = $0;
  $104 = ((($103)) + 10|0);
  $105 = HEAP32[980>>2]|0;
  $106 = HEAP32[732>>2]|0;
  _tiff_set($102,$104,258,3,$105,$106);
  $107 = HEAP32[980>>2]|0;
  $108 = ($107>>>0)>(2);
  if ($108) {
   $109 = $0;
   $110 = ((($109)) + 468|0);
   $111 = $0;
   $112 = $110;
   $113 = $111;
   $114 = (($112) - ($113))|0;
   $115 = $0;
   $116 = ((($115)) + 10|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117&65535;
   $119 = (($118) - 1)|0;
   $120 = $0;
   $121 = ((($120)) + 12|0);
   $122 = (($121) + (($119*12)|0)|0);
   $123 = ((($122)) + 8|0);
   HEAP32[$123>>2] = $114;
  }
  $c = 0;
  while(1) {
   $124 = $c;
   $125 = ($124|0)<(4);
   if (!($125)) {
    break;
   }
   $126 = HEAP32[732>>2]|0;
   $127 = $126&65535;
   $128 = $c;
   $129 = $0;
   $130 = ((($129)) + 468|0);
   $131 = (($130) + ($128<<1)|0);
   HEAP16[$131>>1] = $127;
   $132 = $c;
   $133 = (($132) + 1)|0;
   $c = $133;
  }
  $134 = $0;
  $135 = $0;
  $136 = ((($135)) + 10|0);
  _tiff_set($134,$136,259,3,1,1);
  $137 = $0;
  $138 = $0;
  $139 = ((($138)) + 10|0);
  $140 = HEAP32[980>>2]|0;
  $141 = ($140>>>0)>(1);
  $142 = $141&1;
  $143 = (1 + ($142))|0;
  _tiff_set($137,$139,262,3,1,$143);
 }
 $144 = $0;
 $145 = $0;
 $146 = ((($145)) + 10|0);
 $147 = $0;
 $148 = ((($147)) + 620|0);
 $149 = $0;
 $150 = $148;
 $151 = $149;
 $152 = (($150) - ($151))|0;
 _tiff_set($144,$146,270,2,512,$152);
 $153 = $0;
 $154 = $0;
 $155 = ((($154)) + 10|0);
 $156 = $0;
 $157 = ((($156)) + 1132|0);
 $158 = $0;
 $159 = $157;
 $160 = $158;
 $161 = (($159) - ($160))|0;
 _tiff_set($153,$155,271,2,64,$161);
 $162 = $0;
 $163 = $0;
 $164 = ((($163)) + 10|0);
 $165 = $0;
 $166 = ((($165)) + 1196|0);
 $167 = $0;
 $168 = $166;
 $169 = $167;
 $170 = (($168) - ($169))|0;
 _tiff_set($162,$164,272,2,64,$170);
 $171 = $1;
 $172 = ($171|0)!=(0);
 if ($172) {
  $173 = HEAP32[316624>>2]|0;
  $174 = ($173|0)!=(0|0);
  if ($174) {
   $175 = HEAP32[316624>>2]|0;
   $176 = HEAP32[$175>>2]|0;
   $177 = (_ntohl($176)|0);
   $psize = $177;
  }
  $178 = $0;
  $179 = $0;
  $180 = ((($179)) + 10|0);
  $181 = $psize;
  $182 = (1376 + ($181))|0;
  _tiff_set($178,$180,273,4,1,$182);
  $183 = $0;
  $184 = $0;
  $185 = ((($184)) + 10|0);
  $186 = HEAP32[980>>2]|0;
  _tiff_set($183,$185,277,3,1,$186);
  $187 = $0;
  $188 = $0;
  $189 = ((($188)) + 10|0);
  $190 = HEAP16[580074>>1]|0;
  $191 = $190&65535;
  _tiff_set($187,$189,278,4,1,$191);
  $192 = $0;
  $193 = $0;
  $194 = ((($193)) + 10|0);
  $195 = HEAP16[580074>>1]|0;
  $196 = $195&65535;
  $197 = HEAP16[580076>>1]|0;
  $198 = $197&65535;
  $199 = Math_imul($196, $198)|0;
  $200 = HEAP32[980>>2]|0;
  $201 = Math_imul($199, $200)|0;
  $202 = HEAP32[732>>2]|0;
  $203 = Math_imul($201, $202)|0;
  $204 = (($203>>>0) / 8)&-1;
  _tiff_set($192,$194,279,4,1,$204);
 } else {
  $205 = $0;
  $206 = $0;
  $207 = ((($206)) + 10|0);
  $208 = HEAP32[293688>>2]|0;
  $209 = (624916 + ($208)|0);
  $210 = HEAP8[$209>>0]|0;
  $211 = $210 << 24 >> 24;
  $212 = (($211) - 48)|0;
  _tiff_set($205,$207,274,3,1,$212);
 }
 $213 = $0;
 $214 = $0;
 $215 = ((($214)) + 10|0);
 $216 = $0;
 $217 = ((($216)) + 476|0);
 $218 = $0;
 $219 = $217;
 $220 = $218;
 $221 = (($219) - ($220))|0;
 _tiff_set($213,$215,282,5,1,$221);
 $222 = $0;
 $223 = $0;
 $224 = ((($223)) + 10|0);
 $225 = $0;
 $226 = ((($225)) + 476|0);
 $227 = ((($226)) + 8|0);
 $228 = $0;
 $229 = $227;
 $230 = $228;
 $231 = (($229) - ($230))|0;
 _tiff_set($222,$224,283,5,1,$231);
 $232 = $0;
 $233 = $0;
 $234 = ((($233)) + 10|0);
 _tiff_set($232,$234,284,3,1,1);
 $235 = $0;
 $236 = $0;
 $237 = ((($236)) + 10|0);
 _tiff_set($235,$237,296,3,1,2);
 $238 = $0;
 $239 = $0;
 $240 = ((($239)) + 10|0);
 $241 = $0;
 $242 = ((($241)) + 1260|0);
 $243 = $0;
 $244 = $242;
 $245 = $243;
 $246 = (($244) - ($245))|0;
 _tiff_set($238,$240,305,2,32,$246);
 $247 = $0;
 $248 = $0;
 $249 = ((($248)) + 10|0);
 $250 = $0;
 $251 = ((($250)) + 1292|0);
 $252 = $0;
 $253 = $251;
 $254 = $252;
 $255 = (($253) - ($254))|0;
 _tiff_set($247,$249,306,2,20,$255);
 $256 = $0;
 $257 = $0;
 $258 = ((($257)) + 10|0);
 $259 = $0;
 $260 = ((($259)) + 1312|0);
 $261 = $0;
 $262 = $260;
 $263 = $261;
 $264 = (($262) - ($263))|0;
 _tiff_set($256,$258,315,2,64,$264);
 $265 = $0;
 $266 = $0;
 $267 = ((($266)) + 10|0);
 $268 = $0;
 $269 = ((($268)) + 294|0);
 $270 = $0;
 $271 = $269;
 $272 = $270;
 $273 = (($271) - ($272))|0;
 _tiff_set($265,$267,-30871,4,1,$273);
 $274 = $psize;
 $275 = ($274|0)!=(0);
 if ($275) {
  $276 = $0;
  $277 = $0;
  $278 = ((($277)) + 10|0);
  $279 = $psize;
  _tiff_set($276,$278,-30861,7,$279,1376);
 }
 $280 = $0;
 $281 = $0;
 $282 = ((($281)) + 294|0);
 $283 = $0;
 $284 = ((($283)) + 476|0);
 $285 = ((($284)) + 16|0);
 $286 = $0;
 $287 = $285;
 $288 = $286;
 $289 = (($287) - ($288))|0;
 _tiff_set($280,$282,-32102,5,1,$289);
 $290 = $0;
 $291 = $0;
 $292 = ((($291)) + 294|0);
 $293 = $0;
 $294 = ((($293)) + 476|0);
 $295 = ((($294)) + 24|0);
 $296 = $0;
 $297 = $295;
 $298 = $296;
 $299 = (($297) - ($298))|0;
 _tiff_set($290,$292,-32099,5,1,$299);
 $300 = $0;
 $301 = $0;
 $302 = ((($301)) + 294|0);
 $303 = +HEAPF32[293672>>2];
 $304 = (~~(($303)));
 _tiff_set($300,$302,-30681,3,1,$304);
 $305 = $0;
 $306 = $0;
 $307 = ((($306)) + 294|0);
 $308 = $0;
 $309 = ((($308)) + 476|0);
 $310 = ((($309)) + 32|0);
 $311 = $0;
 $312 = $310;
 $313 = $311;
 $314 = (($312) - ($313))|0;
 _tiff_set($305,$307,-28150,5,1,$314);
 $315 = HEAP32[(294236)>>2]|0;
 $316 = ($315|0)!=(0);
 if (!($316)) {
  STACKTOP = sp;return;
 }
 $317 = $0;
 $318 = $0;
 $319 = ((($318)) + 10|0);
 $320 = $0;
 $321 = ((($320)) + 346|0);
 $322 = $0;
 $323 = $321;
 $324 = $322;
 $325 = (($323) - ($324))|0;
 _tiff_set($317,$319,-30683,4,1,$325);
 $326 = $0;
 $327 = $0;
 $328 = ((($327)) + 346|0);
 _tiff_set($326,$328,0,1,4,514);
 $329 = $0;
 $330 = $0;
 $331 = ((($330)) + 346|0);
 $332 = HEAP32[(294348)>>2]|0;
 _tiff_set($329,$331,1,2,2,$332);
 $333 = $0;
 $334 = $0;
 $335 = ((($334)) + 346|0);
 $336 = $0;
 $337 = ((($336)) + 516|0);
 $338 = $0;
 $339 = $337;
 $340 = $338;
 $341 = (($339) - ($340))|0;
 _tiff_set($333,$335,2,5,3,$341);
 $342 = $0;
 $343 = $0;
 $344 = ((($343)) + 346|0);
 $345 = HEAP32[(294352)>>2]|0;
 _tiff_set($342,$344,3,2,2,$345);
 $346 = $0;
 $347 = $0;
 $348 = ((($347)) + 346|0);
 $349 = $0;
 $350 = ((($349)) + 516|0);
 $351 = ((($350)) + 24|0);
 $352 = $0;
 $353 = $351;
 $354 = $352;
 $355 = (($353) - ($354))|0;
 _tiff_set($346,$348,4,5,3,$355);
 $356 = $0;
 $357 = $0;
 $358 = ((($357)) + 346|0);
 $359 = HEAP32[(294356)>>2]|0;
 _tiff_set($356,$358,5,1,1,$359);
 $360 = $0;
 $361 = $0;
 $362 = ((($361)) + 346|0);
 $363 = $0;
 $364 = ((($363)) + 516|0);
 $365 = ((($364)) + 72|0);
 $366 = $0;
 $367 = $365;
 $368 = $366;
 $369 = (($367) - ($368))|0;
 _tiff_set($360,$362,6,5,1,$369);
 $370 = $0;
 $371 = $0;
 $372 = ((($371)) + 346|0);
 $373 = $0;
 $374 = ((($373)) + 516|0);
 $375 = ((($374)) + 48|0);
 $376 = $0;
 $377 = $375;
 $378 = $376;
 $379 = (($377) - ($378))|0;
 _tiff_set($370,$372,7,5,3,$379);
 $380 = $0;
 $381 = $0;
 $382 = ((($381)) + 346|0);
 $383 = $0;
 $384 = ((($383)) + 516|0);
 $385 = ((($384)) + 80|0);
 $386 = $0;
 $387 = $385;
 $388 = $386;
 $389 = (($387) - ($388))|0;
 _tiff_set($380,$382,18,2,12,$389);
 $390 = $0;
 $391 = $0;
 $392 = ((($391)) + 346|0);
 $393 = $0;
 $394 = ((($393)) + 516|0);
 $395 = ((($394)) + 92|0);
 $396 = $0;
 $397 = $395;
 $398 = $396;
 $399 = (($397) - ($398))|0;
 _tiff_set($390,$392,29,2,12,$399);
 $400 = $0;
 $401 = ((($400)) + 516|0);
 dest=$401; src=294232; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _jpeg_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exif = 0, $th = 0, $thumb = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $exif = sp + 1380|0;
 $th = sp;
 $0 = HEAP32[1672>>2]|0;
 $1 = (_malloc($0)|0);
 $thumb = $1;
 $2 = $thumb;
 _merror($2,624925);
 $3 = $thumb;
 $4 = HEAP32[1672>>2]|0;
 $5 = HEAP32[944>>2]|0;
 (_fread($3,1,$4,$5)|0);
 $6 = HEAP32[1676>>2]|0;
 (_fputc(255,$6)|0);
 $7 = HEAP32[1676>>2]|0;
 (_fputc(216,$7)|0);
 $8 = $thumb;
 $9 = ((($8)) + 6|0);
 $10 = (_strcmp($9,623553)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  dest=$exif; src=624938; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $12 = (_htons(1384)|0);
  $13 = ((($exif)) + 2|0);
  HEAP16[$13>>1] = $12;
  $14 = HEAP32[1676>>2]|0;
  (_fwrite($exif,1,10,$14)|0);
  _tiff_head($th,0);
  $15 = HEAP32[1676>>2]|0;
  (_fwrite($th,1,1376,$15)|0);
 }
 $16 = $thumb;
 $17 = ((($16)) + 2|0);
 $18 = HEAP32[1672>>2]|0;
 $19 = (($18) - 2)|0;
 $20 = HEAP32[1676>>2]|0;
 (_fwrite($17,1,$19,$20)|0);
 $21 = $thumb;
 _free($21);
 STACKTOP = sp;return;
}
function _write_ppm_tiff() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $col = 0, $cstep = 0, $or$cond = 0, $or$cond3 = 0, $perc = 0, $ppm = 0, $ppm2 = 0, $row = 0, $rstep = 0, $soff = 0, $th = 0, $total = 0, $val = 0, $vararg_buffer = 0;
 var $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $white = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer = sp;
 $th = sp + 88|0;
 $white = 8192;
 $0 = HEAP16[580076>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[580074>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($1, $3)|0;
 $5 = (+($4|0));
 $6 = $5 * 0.01;
 $7 = (~~(($6)));
 $perc = $7;
 $8 = HEAP16[589194>>1]|0;
 $9 = ($8<<16>>16)!=(0);
 if ($9) {
  $10 = $perc;
  $11 = (($10|0) / 2)&-1;
  $perc = $11;
 }
 $12 = HEAP32[708>>2]|0;
 $13 = $12 & -3;
 $14 = ($13|0)!=(0);
 $15 = HEAP32[744>>2]|0;
 $16 = ($15|0)!=(0);
 $or$cond = $14 | $16;
 L4: do {
  if (!($or$cond)) {
   $c = 0;
   $white = 0;
   while(1) {
    $17 = $c;
    $18 = HEAP32[980>>2]|0;
    $19 = ($17>>>0)<($18>>>0);
    if (!($19)) {
     break L4;
    }
    $val = 8192;
    $total = 0;
    while(1) {
     $20 = $val;
     $21 = (($20) + -1)|0;
     $val = $21;
     $22 = ($21|0)>(32);
     if (!($22)) {
      break;
     }
     $23 = $val;
     $24 = $c;
     $25 = (316628 + ($24<<15)|0);
     $26 = (($25) + ($23<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $total;
     $29 = (($28) + ($27))|0;
     $total = $29;
     $30 = $perc;
     $31 = ($29|0)>($30|0);
     if ($31) {
      break;
     }
    }
    $32 = $white;
    $33 = $val;
    $34 = ($32|0)<($33|0);
    if ($34) {
     $35 = $val;
     $white = $35;
    }
    $36 = $c;
    $37 = (($36) + 1)|0;
    $c = $37;
   }
  }
 } while(0);
 $38 = +HEAPF64[40>>3];
 $39 = +HEAPF64[(48)>>3];
 $40 = $white;
 $41 = $40 << 3;
 $42 = (+($41|0));
 $43 = +HEAPF32[672>>2];
 $44 = $42 / $43;
 $45 = (~~(($44)));
 _gamma_curve($38,$39,2,$45);
 $46 = HEAP16[580074>>1]|0;
 HEAP16[589196>>1] = $46;
 $47 = HEAP16[580076>>1]|0;
 HEAP16[580080>>1] = $47;
 $48 = HEAP32[293688>>2]|0;
 $49 = $48 & 4;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = HEAP16[580074>>1]|0;
  $52 = $51&65535;
  $53 = HEAP16[580076>>1]|0;
  $54 = $53&65535;
  $55 = (($52) + ($54))|0;
  $56 = $55&65535;
  HEAP16[580074>>1] = $56;
  $57 = HEAP16[580074>>1]|0;
  $58 = $57&65535;
  $59 = HEAP16[580076>>1]|0;
  $60 = $59&65535;
  $61 = (($58) - ($60))|0;
  $62 = $61&65535;
  HEAP16[580076>>1] = $62;
  $63 = HEAP16[580074>>1]|0;
  $64 = $63&65535;
  $65 = HEAP16[580076>>1]|0;
  $66 = $65&65535;
  $67 = (($64) - ($66))|0;
  $68 = $67&65535;
  HEAP16[580074>>1] = $68;
 }
 $69 = HEAP16[580076>>1]|0;
 $70 = $69&65535;
 $71 = HEAP32[980>>2]|0;
 $72 = HEAP32[732>>2]|0;
 $73 = Math_imul($71, $72)|0;
 $74 = (($73>>>0) / 8)&-1;
 $75 = (_calloc($70,$74)|0);
 $ppm = $75;
 $76 = $ppm;
 $ppm2 = $76;
 $77 = $ppm;
 _merror($77,624949);
 $78 = HEAP32[736>>2]|0;
 $79 = ($78|0)!=(0);
 do {
  if ($79) {
   _tiff_head($th,1);
   $80 = HEAP32[1676>>2]|0;
   (_fwrite($th,1376,1,$80)|0);
   $81 = HEAP32[316624>>2]|0;
   $82 = ($81|0)!=(0|0);
   if ($82) {
    $83 = HEAP32[316624>>2]|0;
    $84 = HEAP32[316624>>2]|0;
    $85 = HEAP32[$84>>2]|0;
    $86 = (_ntohl($85)|0);
    $87 = HEAP32[1676>>2]|0;
    (_fwrite($83,$86,1,$87)|0);
   }
  } else {
   $88 = HEAP32[980>>2]|0;
   $89 = ($88>>>0)>(3);
   $90 = HEAP32[1676>>2]|0;
   if ($89) {
    $91 = HEAP16[580076>>1]|0;
    $92 = $91&65535;
    $93 = HEAP16[580074>>1]|0;
    $94 = $93&65535;
    $95 = HEAP32[980>>2]|0;
    $96 = HEAP32[732>>2]|0;
    $97 = 1 << $96;
    $98 = (($97) - 1)|0;
    HEAP32[$vararg_buffer>>2] = $92;
    $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $94;
    $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $95;
    $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr6>>2] = $98;
    $vararg_ptr7 = ((($vararg_buffer)) + 16|0);
    HEAP32[$vararg_ptr7>>2] = 615136;
    (_fprintf($90,624966,$vararg_buffer)|0);
    break;
   } else {
    $99 = HEAP32[980>>2]|0;
    $100 = (($99>>>0) / 2)&-1;
    $101 = (($100) + 5)|0;
    $102 = HEAP16[580076>>1]|0;
    $103 = $102&65535;
    $104 = HEAP16[580074>>1]|0;
    $105 = $104&65535;
    $106 = HEAP32[732>>2]|0;
    $107 = 1 << $106;
    $108 = (($107) - 1)|0;
    HEAP32[$vararg_buffer8>>2] = $101;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $103;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $105;
    $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
    HEAP32[$vararg_ptr13>>2] = $108;
    (_fprintf($90,625027,$vararg_buffer8)|0);
    break;
   }
  }
 } while(0);
 $109 = (_flip_index(0,0)|0);
 $soff = $109;
 $110 = (_flip_index(0,1)|0);
 $111 = $soff;
 $112 = (($110) - ($111))|0;
 $cstep = $112;
 $113 = (_flip_index(1,0)|0);
 $114 = HEAP16[580076>>1]|0;
 $115 = $114&65535;
 $116 = (_flip_index(0,$115)|0);
 $117 = (($113) - ($116))|0;
 $rstep = $117;
 $row = 0;
 while(1) {
  $118 = $row;
  $119 = HEAP16[580074>>1]|0;
  $120 = $119&65535;
  $121 = ($118|0)<($120|0);
  if (!($121)) {
   break;
  }
  $col = 0;
  while(1) {
   $122 = $col;
   $123 = HEAP16[580076>>1]|0;
   $124 = $123&65535;
   $125 = ($122|0)<($124|0);
   $126 = HEAP32[732>>2]|0;
   if (!($125)) {
    break;
   }
   $127 = ($126|0)==(8);
   $c = 0;
   L34: do {
    if ($127) {
     while(1) {
      $128 = $c;
      $129 = HEAP32[980>>2]|0;
      $130 = ($128>>>0)<($129>>>0);
      if (!($130)) {
       break L34;
      }
      $131 = $c;
      $132 = $soff;
      $133 = HEAP32[972>>2]|0;
      $134 = (($133) + ($132<<3)|0);
      $135 = (($134) + ($131<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $138 = (448962 + ($137<<1)|0);
      $139 = HEAP16[$138>>1]|0;
      $140 = $139&65535;
      $141 = $140 >> 8;
      $142 = $141&255;
      $143 = $col;
      $144 = HEAP32[980>>2]|0;
      $145 = Math_imul($143, $144)|0;
      $146 = $c;
      $147 = (($145) + ($146))|0;
      $148 = $ppm;
      $149 = (($148) + ($147)|0);
      HEAP8[$149>>0] = $142;
      $150 = $c;
      $151 = (($150) + 1)|0;
      $c = $151;
     }
    } else {
     while(1) {
      $152 = $c;
      $153 = HEAP32[980>>2]|0;
      $154 = ($152>>>0)<($153>>>0);
      if (!($154)) {
       break L34;
      }
      $155 = $c;
      $156 = $soff;
      $157 = HEAP32[972>>2]|0;
      $158 = (($157) + ($156<<3)|0);
      $159 = (($158) + ($155<<1)|0);
      $160 = HEAP16[$159>>1]|0;
      $161 = $160&65535;
      $162 = (448962 + ($161<<1)|0);
      $163 = HEAP16[$162>>1]|0;
      $164 = $col;
      $165 = HEAP32[980>>2]|0;
      $166 = Math_imul($164, $165)|0;
      $167 = $c;
      $168 = (($166) + ($167))|0;
      $169 = $ppm2;
      $170 = (($169) + ($168<<1)|0);
      HEAP16[$170>>1] = $163;
      $171 = $c;
      $172 = (($171) + 1)|0;
      $c = $172;
     }
    }
   } while(0);
   $173 = $col;
   $174 = (($173) + 1)|0;
   $col = $174;
   $175 = $cstep;
   $176 = $soff;
   $177 = (($176) + ($175))|0;
   $soff = $177;
  }
  $178 = ($126|0)!=(16);
  $179 = HEAP32[736>>2]|0;
  $180 = ($179|0)!=(0);
  $or$cond3 = $178 | $180;
  if (!($or$cond3)) {
   $181 = (_htons(21930)|0);
   $182 = $181&65535;
   $183 = ($182|0)!=(21930);
   if ($183) {
    $184 = $ppm2;
    $185 = $ppm2;
    $186 = HEAP16[580076>>1]|0;
    $187 = $186&65535;
    $188 = HEAP32[980>>2]|0;
    $189 = Math_imul($187, $188)|0;
    $190 = $189<<1;
    _swab($184,$185,$190);
   }
  }
  $191 = $ppm;
  $192 = HEAP32[980>>2]|0;
  $193 = HEAP32[732>>2]|0;
  $194 = Math_imul($192, $193)|0;
  $195 = (($194>>>0) / 8)&-1;
  $196 = HEAP16[580076>>1]|0;
  $197 = $196&65535;
  $198 = HEAP32[1676>>2]|0;
  (_fwrite($191,$195,$197,$198)|0);
  $199 = $row;
  $200 = (($199) + 1)|0;
  $row = $200;
  $201 = $rstep;
  $202 = $soff;
  $203 = (($202) + ($201))|0;
  $soff = $203;
 }
 $204 = $ppm;
 _free($204);
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$0 = 0, $$reg2mem569$0 = 0, $$reg2mem571$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0;
 var $555 = 0.0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0, $590 = 0;
 var $591 = 0.0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0.0, $673 = 0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0;
 var $681 = 0.0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0.0, $778 = 0.0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $arg$0 = 0, $arg$1 = 0, $arg$2 = 0, $arg$3 = 0, $arg$4 = 0, $arg$5 = 0, $arg$5$phi = 0;
 var $arg$6 = 0, $bpfile$0 = 0, $bpfile$0$phi = 0, $bpfile$1 = 0, $bpfile$2 = 0, $bpfile$2$phi = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond100 = 0;
 var $cond101 = 0, $cond102 = 0, $cond103 = 0, $cond104 = 0, $cond105 = 0, $cond106 = 0, $cond107 = 0, $cond108 = 0, $cond109 = 0, $cond11 = 0, $cond110 = 0, $cond111 = 0, $cond112 = 0, $cond113 = 0, $cond114 = 0, $cond115 = 0, $cond116 = 0, $cond117 = 0, $cond118 = 0, $cond119 = 0;
 var $cond12 = 0, $cond120 = 0, $cond121 = 0, $cond122 = 0, $cond123 = 0, $cond124 = 0, $cond125 = 0, $cond126 = 0, $cond127 = 0, $cond128 = 0, $cond129 = 0, $cond13 = 0, $cond130 = 0, $cond131 = 0, $cond132 = 0, $cond133 = 0, $cond134 = 0, $cond135 = 0, $cond136 = 0, $cond137 = 0;
 var $cond138 = 0, $cond139 = 0, $cond14 = 0, $cond140 = 0, $cond141 = 0, $cond142 = 0, $cond143 = 0, $cond144 = 0, $cond145 = 0, $cond146 = 0, $cond147 = 0, $cond148 = 0, $cond149 = 0, $cond15 = 0, $cond150 = 0, $cond151 = 0, $cond152 = 0, $cond153 = 0, $cond154 = 0, $cond155 = 0;
 var $cond156 = 0, $cond157 = 0, $cond158 = 0, $cond159 = 0, $cond16 = 0, $cond160 = 0, $cond161 = 0, $cond162 = 0, $cond163 = 0, $cond164 = 0, $cond165 = 0, $cond166 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0;
 var $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0, $cond37 = 0, $cond38 = 0, $cond39 = 0, $cond4 = 0, $cond40 = 0, $cond41 = 0;
 var $cond42 = 0, $cond43 = 0, $cond44 = 0, $cond45 = 0, $cond46 = 0, $cond47 = 0, $cond48 = 0, $cond49 = 0, $cond5 = 0, $cond50 = 0, $cond51 = 0, $cond52 = 0, $cond53 = 0, $cond54 = 0, $cond55 = 0, $cond56 = 0, $cond57 = 0, $cond58 = 0, $cond59 = 0, $cond6 = 0;
 var $cond60 = 0, $cond61 = 0, $cond62 = 0, $cond63 = 0, $cond64 = 0, $cond65 = 0, $cond66 = 0, $cond67 = 0, $cond68 = 0, $cond69 = 0, $cond7 = 0, $cond70 = 0, $cond71 = 0, $cond72 = 0, $cond73 = 0, $cond74 = 0, $cond75 = 0, $cond76 = 0, $cond77 = 0, $cond78 = 0;
 var $cond79 = 0, $cond8 = 0, $cond80 = 0, $cond81 = 0, $cond82 = 0, $cond83 = 0, $cond84 = 0, $cond85 = 0, $cond86 = 0, $cond87 = 0, $cond88 = 0, $cond89 = 0, $cond9 = 0, $cond90 = 0, $cond91 = 0, $cond92 = 0, $cond93 = 0, $cond94 = 0, $cond95 = 0, $cond96 = 0;
 var $cond97 = 0, $cond98 = 0, $cond99 = 0, $dark_frame$0 = 0, $dark_frame$0$phi = 0, $dark_frame$1 = 0, $dark_frame$2 = 0, $dark_frame$2$phi = 0, $fhigh$0 = 0, $fhigh$1 = 0, $fhigh$2 = 0, $fhigh$3 = 0, $fwide$0 = 0, $fwide$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0;
 var $i$6 = 0, $i$7 = 0, $i$8 = 0, $identify_only$0 = 0, $identify_only$0$phi = 0, $identify_only$1 = 0, $identify_only$2 = 0, $identify_only$2$phi = 0, $ofname$0 = 0, $ofname$0$phi = 0, $ofname$1 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $quality$0 = 0, $read_from_stdin$0 = 0, $read_from_stdin$0$phi = 0, $read_from_stdin$1 = 0, $read_from_stdin$2 = 0, $read_from_stdin$2$phi = 0, $status$0 = 0, $status$1 = 0, $status$1$phi = 0, $status$2 = 0, $status$3 = 0, $status$4 = 0, $status$5 = 0, $status$6 = 0, $thumbnail_only$0 = 0, $thumbnail_only$0$phi = 0;
 var $thumbnail_only$1 = 0, $thumbnail_only$2 = 0, $thumbnail_only$2$phi = 0, $timestamp_only$0 = 0, $timestamp_only$0$phi = 0, $timestamp_only$1 = 0, $timestamp_only$2 = 0, $timestamp_only$2$phi = 0, $use_fuji_rotate$0 = 0, $use_fuji_rotate$0$phi = 0, $use_fuji_rotate$1 = 0, $use_fuji_rotate$2 = 0, $use_fuji_rotate$2$phi = 0, $user_black$0 = 0, $user_black$0$phi = 0, $user_black$1 = 0, $user_black$2 = 0, $user_black$2$phi = 0, $user_flip$0 = 0, $user_flip$0$phi = 0;
 var $user_flip$1 = 0, $user_flip$2 = 0, $user_flip$2$phi = 0, $user_qual$0 = 0, $user_qual$0$phi = 0, $user_qual$1 = 0, $user_qual$2 = 0, $user_qual$2$phi = 0, $user_sat$0 = 0, $user_sat$0$phi = 0, $user_sat$1 = 0, $user_sat$2 = 0, $user_sat$2$phi = 0, $ut = 0, $vararg_buffer = 0, $vararg_buffer573 = 0, $vararg_buffer575 = 0, $vararg_buffer578 = 0, $vararg_buffer581 = 0, $vararg_buffer584 = 0;
 var $vararg_buffer586 = 0, $vararg_buffer588 = 0, $vararg_buffer591 = 0, $vararg_buffer596 = 0, $vararg_buffer600 = 0, $vararg_buffer603 = 0, $vararg_buffer606 = 0, $vararg_buffer609 = 0, $vararg_buffer613 = 0, $vararg_buffer616 = 0, $vararg_buffer618 = 0, $vararg_buffer622 = 0, $vararg_buffer625 = 0, $vararg_buffer627 = 0, $vararg_buffer629 = 0, $vararg_buffer632 = 0, $vararg_buffer635 = 0, $vararg_buffer638 = 0, $vararg_buffer641 = 0, $vararg_buffer644 = 0;
 var $vararg_buffer647 = 0, $vararg_buffer651 = 0, $vararg_buffer655 = 0, $vararg_buffer658 = 0, $vararg_buffer662 = 0, $vararg_buffer666 = 0, $vararg_buffer669 = 0, $vararg_buffer671 = 0, $vararg_buffer673 = 0, $vararg_buffer676 = 0, $vararg_buffer678 = 0, $vararg_buffer681 = 0, $vararg_buffer686 = 0, $vararg_buffer691 = 0, $vararg_buffer695 = 0, $vararg_buffer698 = 0, $vararg_buffer702 = 0, $vararg_ptr594 = 0, $vararg_ptr595 = 0, $vararg_ptr599 = 0;
 var $vararg_ptr612 = 0, $vararg_ptr621 = 0, $vararg_ptr650 = 0, $vararg_ptr654 = 0, $vararg_ptr661 = 0, $vararg_ptr665 = 0, $vararg_ptr684 = 0, $vararg_ptr685 = 0, $vararg_ptr689 = 0, $vararg_ptr690 = 0, $vararg_ptr694 = 0, $vararg_ptr701 = 0, $write_ext$0 = 0, $write_to_stdout$0 = 0, $write_to_stdout$0$phi = 0, $write_to_stdout$1 = 0, $write_to_stdout$2 = 0, $write_to_stdout$2$phi = 0, _setjmpTable = 0, _setjmpTableSize = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer702 = sp + 360|0;
 $vararg_buffer698 = sp + 352|0;
 $vararg_buffer695 = sp + 344|0;
 $vararg_buffer691 = sp + 336|0;
 $vararg_buffer686 = sp + 320|0;
 $vararg_buffer681 = sp + 304|0;
 $vararg_buffer678 = sp + 296|0;
 $vararg_buffer676 = sp + 288|0;
 $vararg_buffer673 = sp + 280|0;
 $vararg_buffer671 = sp + 272|0;
 $vararg_buffer669 = sp + 264|0;
 $vararg_buffer666 = sp + 256|0;
 $vararg_buffer662 = sp + 248|0;
 $vararg_buffer658 = sp + 240|0;
 $vararg_buffer655 = sp + 232|0;
 $vararg_buffer651 = sp + 224|0;
 $vararg_buffer647 = sp + 216|0;
 $vararg_buffer644 = sp + 208|0;
 $vararg_buffer641 = sp + 200|0;
 $vararg_buffer638 = sp + 192|0;
 $vararg_buffer635 = sp + 184|0;
 $vararg_buffer632 = sp + 176|0;
 $vararg_buffer629 = sp + 168|0;
 $vararg_buffer627 = sp + 160|0;
 $vararg_buffer625 = sp + 152|0;
 $vararg_buffer622 = sp + 144|0;
 $vararg_buffer618 = sp + 136|0;
 $vararg_buffer616 = sp + 128|0;
 $vararg_buffer613 = sp + 120|0;
 $vararg_buffer609 = sp + 112|0;
 $vararg_buffer606 = sp + 104|0;
 $vararg_buffer603 = sp + 96|0;
 $vararg_buffer600 = sp + 88|0;
 $vararg_buffer596 = sp + 80|0;
 $vararg_buffer591 = sp + 64|0;
 $vararg_buffer588 = sp + 56|0;
 $vararg_buffer586 = sp + 48|0;
 $vararg_buffer584 = sp + 40|0;
 $vararg_buffer581 = sp + 32|0;
 $vararg_buffer578 = sp + 24|0;
 $vararg_buffer575 = sp + 16|0;
 $vararg_buffer573 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $ut = sp + 368|0;
 __THREW__ = 0;
 (invoke_ii(60,(625041|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = (threwValue); } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 L1: do {
  if ($cond) {
   $$reg2mem571$0 = $2;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
  } else {
   $3 = ($argc|0)==(1);
   if ($3) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = 625079;
    (invoke_iii(61,(625048|0),($vararg_buffer|0))|0);
    $4 = __THREW__; __THREW__ = 0;
    if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = (threwValue); } else { $5 = -1; };
    $6 = tempRet0;
    $cond28 = ($5|0)==(1);
    if ($cond28) {
     $$reg2mem571$0 = $6;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_iii(61,(625084|0),($vararg_buffer573|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
    $9 = tempRet0;
    $cond29 = ($8|0)==(1);
    if ($cond29) {
     $$reg2mem571$0 = $9;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    $10 = HEAP32[$argv>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer575>>2] = $10;
    (invoke_iii(61,(625127|0),($vararg_buffer575|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = (threwValue); } else { $12 = -1; };
    $13 = tempRet0;
    $cond30 = ($12|0)==(1);
    if ($cond30) {
     $$reg2mem571$0 = $13;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625163|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
    $16 = tempRet0;
    $cond31 = ($15|0)==(1);
    if ($cond31) {
     $$reg2mem571$0 = $16;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625196|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = (threwValue); } else { $18 = -1; };
    $19 = tempRet0;
    $cond32 = ($18|0)==(1);
    if ($cond32) {
     $$reg2mem571$0 = $19;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625242|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = (threwValue); } else { $21 = -1; };
    $22 = tempRet0;
    $cond33 = ($21|0)==(1);
    if ($cond33) {
     $$reg2mem571$0 = $22;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625285|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
    $25 = tempRet0;
    $cond34 = ($24|0)==(1);
    if ($cond34) {
     $$reg2mem571$0 = $25;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625332|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = (threwValue); } else { $27 = -1; };
    $28 = tempRet0;
    $cond35 = ($27|0)==(1);
    if ($cond35) {
     $$reg2mem571$0 = $28;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625375|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = (threwValue); } else { $30 = -1; };
    $31 = tempRet0;
    $cond36 = ($30|0)==(1);
    if ($cond36) {
     $$reg2mem571$0 = $31;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625423|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
    $34 = tempRet0;
    $cond37 = ($33|0)==(1);
    if ($cond37) {
     $$reg2mem571$0 = $34;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625471|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
    $37 = tempRet0;
    $cond38 = ($36|0)==(1);
    if ($cond38) {
     $$reg2mem571$0 = $37;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625523|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = (threwValue); } else { $39 = -1; };
    $40 = tempRet0;
    $cond39 = ($39|0)==(1);
    if ($cond39) {
     $$reg2mem571$0 = $40;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625573|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = (threwValue); } else { $42 = -1; };
    $43 = tempRet0;
    $cond40 = ($42|0)==(1);
    if ($cond40) {
     $$reg2mem571$0 = $43;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625611|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = (threwValue); } else { $45 = -1; };
    $46 = tempRet0;
    $cond41 = ($45|0)==(1);
    if ($cond41) {
     $$reg2mem571$0 = $46;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625660|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = (threwValue); } else { $48 = -1; };
    $49 = tempRet0;
    $cond42 = ($48|0)==(1);
    if ($cond42) {
     $$reg2mem571$0 = $49;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625699|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = (threwValue); } else { $51 = -1; };
    $52 = tempRet0;
    $cond43 = ($51|0)==(1);
    if ($cond43) {
     $$reg2mem571$0 = $52;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625749|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = (threwValue); } else { $54 = -1; };
    $55 = tempRet0;
    $cond44 = ($54|0)==(1);
    if ($cond44) {
     $$reg2mem571$0 = $55;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625796|0))|0);
    $56 = __THREW__; __THREW__ = 0;
    if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = (threwValue); } else { $57 = -1; };
    $58 = tempRet0;
    $cond45 = ($57|0)==(1);
    if ($cond45) {
     $$reg2mem571$0 = $58;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625829|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = (threwValue); } else { $60 = -1; };
    $61 = tempRet0;
    $cond46 = ($60|0)==(1);
    if ($cond46) {
     $$reg2mem571$0 = $61;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625864|0))|0);
    $62 = __THREW__; __THREW__ = 0;
    if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = (threwValue); } else { $63 = -1; };
    $64 = tempRet0;
    $cond47 = ($63|0)==(1);
    if ($cond47) {
     $$reg2mem571$0 = $64;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625910|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    if ((($65|0) != 0) & ((threwValue|0) != 0)) { $66 = _testSetjmp(HEAP32[$65>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($66|0) == 0) { _longjmp($65|0, threwValue|0); } tempRet0 = (threwValue); } else { $66 = -1; };
    $67 = tempRet0;
    $cond48 = ($66|0)==(1);
    if ($cond48) {
     $$reg2mem571$0 = $67;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(625975|0))|0);
    $68 = __THREW__; __THREW__ = 0;
    if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = (threwValue); } else { $69 = -1; };
    $70 = tempRet0;
    $cond49 = ($69|0)==(1);
    if ($cond49) {
     $$reg2mem571$0 = $70;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626029|0))|0);
    $71 = __THREW__; __THREW__ = 0;
    if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = (threwValue); } else { $72 = -1; };
    $73 = tempRet0;
    $cond50 = ($72|0)==(1);
    if ($cond50) {
     $$reg2mem571$0 = $73;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626097|0))|0);
    $74 = __THREW__; __THREW__ = 0;
    if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = (threwValue); } else { $75 = -1; };
    $76 = tempRet0;
    $cond51 = ($75|0)==(1);
    if ($cond51) {
     $$reg2mem571$0 = $76;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626150|0))|0);
    $77 = __THREW__; __THREW__ = 0;
    if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = (threwValue); } else { $78 = -1; };
    $79 = tempRet0;
    $cond52 = ($78|0)==(1);
    if ($cond52) {
     $$reg2mem571$0 = $79;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626204|0))|0);
    $80 = __THREW__; __THREW__ = 0;
    if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = (threwValue); } else { $81 = -1; };
    $82 = tempRet0;
    $cond53 = ($81|0)==(1);
    if ($cond53) {
     $$reg2mem571$0 = $82;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626249|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    if ((($83|0) != 0) & ((threwValue|0) != 0)) { $84 = _testSetjmp(HEAP32[$83>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($84|0) == 0) { _longjmp($83|0, threwValue|0); } tempRet0 = (threwValue); } else { $84 = -1; };
    $85 = tempRet0;
    $cond54 = ($84|0)==(1);
    if ($cond54) {
     $$reg2mem571$0 = $85;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626298|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = (threwValue); } else { $87 = -1; };
    $88 = tempRet0;
    $cond55 = ($87|0)==(1);
    if ($cond55) {
     $$reg2mem571$0 = $88;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626342|0))|0);
    $89 = __THREW__; __THREW__ = 0;
    if ((($89|0) != 0) & ((threwValue|0) != 0)) { $90 = _testSetjmp(HEAP32[$89>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($90|0) == 0) { _longjmp($89|0, threwValue|0); } tempRet0 = (threwValue); } else { $90 = -1; };
    $91 = tempRet0;
    $cond56 = ($90|0)==(1);
    if ($cond56) {
     $$reg2mem571$0 = $91;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626397|0))|0);
    $92 = __THREW__; __THREW__ = 0;
    if ((($92|0) != 0) & ((threwValue|0) != 0)) { $93 = _testSetjmp(HEAP32[$92>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($93|0) == 0) { _longjmp($92|0, threwValue|0); } tempRet0 = (threwValue); } else { $93 = -1; };
    $94 = tempRet0;
    $cond57 = ($93|0)==(1);
    if ($cond57) {
     $$reg2mem571$0 = $94;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626437|0))|0);
    $95 = __THREW__; __THREW__ = 0;
    if ((($95|0) != 0) & ((threwValue|0) != 0)) { $96 = _testSetjmp(HEAP32[$95>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($96|0) == 0) { _longjmp($95|0, threwValue|0); } tempRet0 = (threwValue); } else { $96 = -1; };
    $97 = tempRet0;
    $cond58 = ($96|0)==(1);
    if ($cond58) {
     $$reg2mem571$0 = $97;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626495|0))|0);
    $98 = __THREW__; __THREW__ = 0;
    if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = (threwValue); } else { $99 = -1; };
    $100 = tempRet0;
    $cond59 = ($99|0)==(1);
    if ($cond59) {
     $$reg2mem571$0 = $100;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626537|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = (threwValue); } else { $102 = -1; };
    $103 = tempRet0;
    $cond60 = ($102|0)==(1);
    if ($cond60) {
     $$reg2mem571$0 = $103;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626588|0))|0);
    $104 = __THREW__; __THREW__ = 0;
    if ((($104|0) != 0) & ((threwValue|0) != 0)) { $105 = _testSetjmp(HEAP32[$104>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($105|0) == 0) { _longjmp($104|0, threwValue|0); } tempRet0 = (threwValue); } else { $105 = -1; };
    $106 = tempRet0;
    $cond61 = ($105|0)==(1);
    if ($cond61) {
     $$reg2mem571$0 = $106;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626645|0))|0);
    $107 = __THREW__; __THREW__ = 0;
    if ((($107|0) != 0) & ((threwValue|0) != 0)) { $108 = _testSetjmp(HEAP32[$107>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($108|0) == 0) { _longjmp($107|0, threwValue|0); } tempRet0 = (threwValue); } else { $108 = -1; };
    $109 = tempRet0;
    $cond62 = ($108|0)==(1);
    if ($cond62) {
     $$reg2mem571$0 = $109;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626685|0))|0);
    $110 = __THREW__; __THREW__ = 0;
    if ((($110|0) != 0) & ((threwValue|0) != 0)) { $111 = _testSetjmp(HEAP32[$110>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($111|0) == 0) { _longjmp($110|0, threwValue|0); } tempRet0 = (threwValue); } else { $111 = -1; };
    $112 = tempRet0;
    $cond63 = ($111|0)==(1);
    if ($cond63) {
     $$reg2mem571$0 = $112;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(626733|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    if ((($113|0) != 0) & ((threwValue|0) != 0)) { $114 = _testSetjmp(HEAP32[$113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($114|0) == 0) { _longjmp($113|0, threwValue|0); } tempRet0 = (threwValue); } else { $114 = -1; };
    $115 = tempRet0;
    $cond64 = ($114|0)==(1);
    if ($cond64) {
     $$reg2mem571$0 = $115;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(62,(613957|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    if ((($116|0) != 0) & ((threwValue|0) != 0)) { $117 = _testSetjmp(HEAP32[$116>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($117|0) == 0) { _longjmp($116|0, threwValue|0); } tempRet0 = (threwValue); } else { $117 = -1; };
    $118 = tempRet0;
    $cond65 = ($117|0)==(1);
    if ($cond65) {
     $$reg2mem571$0 = $118;$arg$5 = 0;$bpfile$2 = 0;$dark_frame$2 = 0;$identify_only$2 = 0;$ofname$0 = 0;$read_from_stdin$2 = 0;$status$1 = 0;$thumbnail_only$2 = 0;$timestamp_only$2 = 0;$use_fuji_rotate$2 = 1;$user_black$2 = -1;$user_flip$2 = -1;$user_qual$2 = -1;$user_sat$2 = -1;$write_to_stdout$2 = 0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   $119 = (($argv) + ($argc<<2)|0);
   HEAP32[$119>>2] = 613957;
   $arg$0 = 1;$bpfile$0 = 0;$dark_frame$0 = 0;$identify_only$0 = 0;$read_from_stdin$0 = 0;$thumbnail_only$0 = 0;$timestamp_only$0 = 0;$use_fuji_rotate$0 = 1;$user_black$0 = -1;$user_flip$0 = -1;$user_qual$0 = -1;$user_sat$0 = -1;$write_to_stdout$0 = 0;
   L45: while(1) {
    $120 = (($argv) + ($arg$0<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $124 = (($123) - 2)|0;
    $125 = $124 | 2;
    $126 = ($125|0)==(43);
    if (!($126)) {
     label = 117;
     break;
    }
    $127 = (($arg$0) + 1)|0;
    $128 = (($argv) + ($arg$0<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ((($129)) + 1|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131 << 24 >> 24;
    __THREW__ = 0;
    $133 = (invoke_iii(63,(626769|0),($132|0))|0);
    $134 = __THREW__; __THREW__ = 0;
    if ((($134|0) != 0) & ((threwValue|0) != 0)) { $135 = _testSetjmp(HEAP32[$134>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($135|0) == 0) { _longjmp($134|0, threwValue|0); } tempRet0 = (threwValue); } else { $135 = -1; };
    $136 = tempRet0;
    $cond5 = ($135|0)==(1);
    if ($cond5) {
     $$reg2mem571$0 = $136;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
     break L1;
    }
    $137 = ($133|0)!=(0|0);
    L49: do {
     if ($137) {
      $i$0 = 0;
      while(1) {
       $138 = $133;
       $139 = 626769;
       $140 = (($138) - ($139))|0;
       $141 = (626782 + ($140)|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = $142 << 24 >> 24;
       $144 = (($143) - 48)|0;
       $145 = ($i$0|0)<($144|0);
       if (!($145)) {
        break L49;
       }
       $146 = (($127) + ($i$0))|0;
       $147 = (($argv) + ($146<<2)|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = HEAP8[$148>>0]|0;
       $150 = $149 << 24 >> 24;
       __THREW__ = 0;
       $151 = (invoke_ii(64,($150|0))|0);
       $152 = __THREW__; __THREW__ = 0;
       if ((($152|0) != 0) & ((threwValue|0) != 0)) { $153 = _testSetjmp(HEAP32[$152>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($153|0) == 0) { _longjmp($152|0, threwValue|0); } tempRet0 = (threwValue); } else { $153 = -1; };
       $154 = tempRet0;
       $cond26 = ($153|0)==(1);
       if ($cond26) {
        $$reg2mem571$0 = $154;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
        break L1;
       }
       $155 = ($151|0)!=(0);
       if (!($155)) {
        label = 50;
        break L45;
       }
       $161 = (($i$0) + 1)|0;
       $i$0 = $161;
      }
     }
    } while(0);
    $162 = $131 << 24 >> 24;
    L57: do {
     switch ($162|0) {
     case 110:  {
      $163 = (($127) + 1)|0;
      $164 = (($argv) + ($127<<2)|0);
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = (+invoke_di(66,($165|0)));
      $167 = __THREW__; __THREW__ = 0;
      if ((($167|0) != 0) & ((threwValue|0) != 0)) { $168 = _testSetjmp(HEAP32[$167>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($168|0) == 0) { _longjmp($167|0, threwValue|0); } tempRet0 = (threwValue); } else { $168 = -1; };
      $169 = tempRet0;
      $cond24 = ($168|0)==(1);
      if ($cond24) {
       $$reg2mem571$0 = $169;$arg$5 = $163;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $170 = $166;
      HEAPF32[692>>2] = $170;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $163;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 98:  {
      $171 = (($127) + 1)|0;
      $172 = (($argv) + ($127<<2)|0);
      $173 = HEAP32[$172>>2]|0;
      __THREW__ = 0;
      $174 = (+invoke_di(66,($173|0)));
      $175 = __THREW__; __THREW__ = 0;
      if ((($175|0) != 0) & ((threwValue|0) != 0)) { $176 = _testSetjmp(HEAP32[$175>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($176|0) == 0) { _longjmp($175|0, threwValue|0); } tempRet0 = (threwValue); } else { $176 = -1; };
      $177 = tempRet0;
      $cond23 = ($176|0)==(1);
      if ($cond23) {
       $$reg2mem571$0 = $177;$arg$5 = $171;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $178 = $174;
      HEAPF32[672>>2] = $178;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $171;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 114:  {
      $arg$1 = $127;$c$0 = 0;
      while(1) {
       $179 = ($c$0|0)<(4);
       if (!($179)) {
        $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $arg$1;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
        continue L45;
       }
       $180 = (($arg$1) + 1)|0;
       $181 = (($argv) + ($arg$1<<2)|0);
       $182 = HEAP32[$181>>2]|0;
       __THREW__ = 0;
       $183 = (+invoke_di(66,($182|0)));
       $184 = __THREW__; __THREW__ = 0;
       if ((($184|0) != 0) & ((threwValue|0) != 0)) { $185 = _testSetjmp(HEAP32[$184>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($185|0) == 0) { _longjmp($184|0, threwValue|0); } tempRet0 = (threwValue); } else { $185 = -1; };
       $186 = tempRet0;
       $cond22 = ($185|0)==(1);
       if ($cond22) {
        $$reg2mem571$0 = $186;$arg$5 = $180;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
        break L1;
       }
       $187 = $183;
       $188 = (676 + ($c$0<<2)|0);
       HEAPF32[$188>>2] = $187;
       $189 = (($c$0) + 1)|0;
       $arg$1 = $180;$c$0 = $189;
      }
      break;
     }
     case 67:  {
      $190 = (($127) + 1)|0;
      $191 = (($argv) + ($127<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      __THREW__ = 0;
      $193 = (+invoke_di(66,($192|0)));
      $194 = __THREW__; __THREW__ = 0;
      if ((($194|0) != 0) & ((threwValue|0) != 0)) { $195 = _testSetjmp(HEAP32[$194>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($195|0) == 0) { _longjmp($194|0, threwValue|0); } tempRet0 = (threwValue); } else { $195 = -1; };
      $196 = tempRet0;
      $cond20 = ($195|0)==(1);
      if ($cond20) {
       $$reg2mem571$0 = $196;$arg$5 = $190;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $197 = 1.0 / $193;
      HEAPF64[8>>3] = $197;
      $198 = (($190) + 1)|0;
      $199 = (($argv) + ($190<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      __THREW__ = 0;
      $201 = (+invoke_di(66,($200|0)));
      $202 = __THREW__; __THREW__ = 0;
      if ((($202|0) != 0) & ((threwValue|0) != 0)) { $203 = _testSetjmp(HEAP32[$202>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($203|0) == 0) { _longjmp($202|0, threwValue|0); } tempRet0 = (threwValue); } else { $203 = -1; };
      $204 = tempRet0;
      $cond21 = ($203|0)==(1);
      if ($cond21) {
       $$reg2mem571$0 = $204;$arg$5 = $198;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $205 = 1.0 / $201;
      HEAPF64[(24)>>3] = $205;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $198;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 103:  {
      $206 = (($127) + 1)|0;
      $207 = (($argv) + ($127<<2)|0);
      $208 = HEAP32[$207>>2]|0;
      __THREW__ = 0;
      $209 = (+invoke_di(66,($208|0)));
      $210 = __THREW__; __THREW__ = 0;
      if ((($210|0) != 0) & ((threwValue|0) != 0)) { $211 = _testSetjmp(HEAP32[$210>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($211|0) == 0) { _longjmp($210|0, threwValue|0); } tempRet0 = (threwValue); } else { $211 = -1; };
      $212 = tempRet0;
      $cond18 = ($211|0)==(1);
      if ($cond18) {
       $$reg2mem571$0 = $212;$arg$5 = $206;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      HEAPF64[40>>3] = $209;
      $213 = (($206) + 1)|0;
      $214 = (($argv) + ($206<<2)|0);
      $215 = HEAP32[$214>>2]|0;
      __THREW__ = 0;
      $216 = (+invoke_di(66,($215|0)));
      $217 = __THREW__; __THREW__ = 0;
      if ((($217|0) != 0) & ((threwValue|0) != 0)) { $218 = _testSetjmp(HEAP32[$217>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($218|0) == 0) { _longjmp($217|0, threwValue|0); } tempRet0 = (threwValue); } else { $218 = -1; };
      $219 = tempRet0;
      $cond19 = ($218|0)==(1);
      if ($cond19) {
       $$reg2mem571$0 = $219;$arg$5 = $213;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      HEAPF64[(48)>>3] = $216;
      $220 = +HEAPF64[40>>3];
      $221 = $220 != 0.0;
      if (!($221)) {
       $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $213;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
       continue L45;
      }
      $222 = +HEAPF64[40>>3];
      $223 = 1.0 / $222;
      HEAPF64[40>>3] = $223;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $213;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 107:  {
      $224 = (($127) + 1)|0;
      $225 = (($argv) + ($127<<2)|0);
      $226 = HEAP32[$225>>2]|0;
      __THREW__ = 0;
      $227 = (invoke_ii(67,($226|0))|0);
      $228 = __THREW__; __THREW__ = 0;
      if ((($228|0) != 0) & ((threwValue|0) != 0)) { $229 = _testSetjmp(HEAP32[$228>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($229|0) == 0) { _longjmp($228|0, threwValue|0); } tempRet0 = (threwValue); } else { $229 = -1; };
      $230 = tempRet0;
      $cond17 = ($229|0)==(1);
      if ($cond17) {
       $$reg2mem571$0 = $230;$arg$5 = $224;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $224;$user_black$0 = $227;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 83:  {
      $231 = (($127) + 1)|0;
      $232 = (($argv) + ($127<<2)|0);
      $233 = HEAP32[$232>>2]|0;
      __THREW__ = 0;
      $234 = (invoke_ii(67,($233|0))|0);
      $235 = __THREW__; __THREW__ = 0;
      if ((($235|0) != 0) & ((threwValue|0) != 0)) { $236 = _testSetjmp(HEAP32[$235>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($236|0) == 0) { _longjmp($235|0, threwValue|0); } tempRet0 = (threwValue); } else { $236 = -1; };
      $237 = tempRet0;
      $cond16 = ($236|0)==(1);
      if ($cond16) {
       $$reg2mem571$0 = $237;$arg$5 = $231;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $231;$user_sat$0 = $234;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 116:  {
      $238 = (($127) + 1)|0;
      $239 = (($argv) + ($127<<2)|0);
      $240 = HEAP32[$239>>2]|0;
      __THREW__ = 0;
      $241 = (invoke_ii(67,($240|0))|0);
      $242 = __THREW__; __THREW__ = 0;
      if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = (threwValue); } else { $243 = -1; };
      $244 = tempRet0;
      $cond15 = ($243|0)==(1);
      if ($cond15) {
       $$reg2mem571$0 = $244;$arg$5 = $238;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $238;$user_flip$0 = $241;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 113:  {
      $245 = (($127) + 1)|0;
      $246 = (($argv) + ($127<<2)|0);
      $247 = HEAP32[$246>>2]|0;
      __THREW__ = 0;
      $248 = (invoke_ii(67,($247|0))|0);
      $249 = __THREW__; __THREW__ = 0;
      if ((($249|0) != 0) & ((threwValue|0) != 0)) { $250 = _testSetjmp(HEAP32[$249>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($250|0) == 0) { _longjmp($249|0, threwValue|0); } tempRet0 = (threwValue); } else { $250 = -1; };
      $251 = tempRet0;
      $cond14 = ($250|0)==(1);
      if ($cond14) {
       $$reg2mem571$0 = $251;$arg$5 = $245;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $245;$user_qual$0 = $248;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 109:  {
      $252 = (($127) + 1)|0;
      $253 = (($argv) + ($127<<2)|0);
      $254 = HEAP32[$253>>2]|0;
      __THREW__ = 0;
      $255 = (invoke_ii(67,($254|0))|0);
      $256 = __THREW__; __THREW__ = 0;
      if ((($256|0) != 0) & ((threwValue|0) != 0)) { $257 = _testSetjmp(HEAP32[$256>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($257|0) == 0) { _longjmp($256|0, threwValue|0); } tempRet0 = (threwValue); } else { $257 = -1; };
      $258 = tempRet0;
      $cond13 = ($257|0)==(1);
      if ($cond13) {
       $$reg2mem571$0 = $258;$arg$5 = $252;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[740>>2] = $255;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $252;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 72:  {
      $259 = (($127) + 1)|0;
      $260 = (($argv) + ($127<<2)|0);
      $261 = HEAP32[$260>>2]|0;
      __THREW__ = 0;
      $262 = (invoke_ii(67,($261|0))|0);
      $263 = __THREW__; __THREW__ = 0;
      if ((($263|0) != 0) & ((threwValue|0) != 0)) { $264 = _testSetjmp(HEAP32[$263>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($264|0) == 0) { _longjmp($263|0, threwValue|0); } tempRet0 = (threwValue); } else { $264 = -1; };
      $265 = tempRet0;
      $cond12 = ($264|0)==(1);
      if ($cond12) {
       $$reg2mem571$0 = $265;$arg$5 = $259;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[708>>2] = $262;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $259;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 115:  {
      $266 = (($argv) + ($127<<2)|0);
      $267 = HEAP32[$266>>2]|0;
      __THREW__ = 0;
      $268 = (invoke_ii(67,($267|0))|0);
      $269 = __THREW__; __THREW__ = 0;
      if ((($269|0) != 0) & ((threwValue|0) != 0)) { $270 = _testSetjmp(HEAP32[$269>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($270|0) == 0) { _longjmp($269|0, threwValue|0); } tempRet0 = (threwValue); } else { $270 = -1; };
      $271 = tempRet0;
      $cond9 = ($270|0)==(1);
      if ($cond9) {
       $$reg2mem571$0 = $271;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      __THREW__ = 0;
      $272 = (invoke_ii(68,($268|0))|0);
      $273 = __THREW__; __THREW__ = 0;
      if ((($273|0) != 0) & ((threwValue|0) != 0)) { $274 = _testSetjmp(HEAP32[$273>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($274|0) == 0) { _longjmp($273|0, threwValue|0); } tempRet0 = (threwValue); } else { $274 = -1; };
      $275 = tempRet0;
      $cond10 = ($274|0)==(1);
      if ($cond10) {
       $$reg2mem571$0 = $275;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[664>>2] = $272;
      $276 = (($127) + 1)|0;
      $277 = (($argv) + ($127<<2)|0);
      $278 = HEAP32[$277>>2]|0;
      __THREW__ = 0;
      $279 = (invoke_iii(69,($278|0),(626826|0))|0);
      $280 = __THREW__; __THREW__ = 0;
      if ((($280|0) != 0) & ((threwValue|0) != 0)) { $281 = _testSetjmp(HEAP32[$280>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($281|0) == 0) { _longjmp($280|0, threwValue|0); } tempRet0 = (threwValue); } else { $281 = -1; };
      $282 = tempRet0;
      $cond11 = ($281|0)==(1);
      if ($cond11) {
       $$reg2mem571$0 = $282;$arg$5 = $276;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $283 = ($279|0)!=(0);
      $284 = $283 ^ 1;
      $285 = $284&1;
      HEAP32[668>>2] = $285;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $276;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 111:  {
      $286 = (($argv) + ($127<<2)|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = HEAP8[$287>>0]|0;
      $289 = $288 << 24 >> 24;
      __THREW__ = 0;
      $290 = (invoke_ii(64,($289|0))|0);
      $291 = __THREW__; __THREW__ = 0;
      if ((($291|0) != 0) & ((threwValue|0) != 0)) { $292 = _testSetjmp(HEAP32[$291>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($292|0) == 0) { _longjmp($291|0, threwValue|0); } tempRet0 = (threwValue); } else { $292 = -1; };
      $293 = tempRet0;
      $cond7 = ($292|0)==(1);
      if ($cond7) {
       $$reg2mem571$0 = $293;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      $294 = ($290|0)!=(0);
      if (!($294)) {
       $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
       continue L45;
      }
      $295 = (($argv) + ($127<<2)|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($296)) + 1|0);
      $298 = HEAP8[$297>>0]|0;
      $299 = ($298<<24>>24)!=(0);
      if ($299) {
       $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
       continue L45;
      }
      $300 = (($127) + 1)|0;
      $301 = (($argv) + ($127<<2)|0);
      $302 = HEAP32[$301>>2]|0;
      __THREW__ = 0;
      $303 = (invoke_ii(67,($302|0))|0);
      $304 = __THREW__; __THREW__ = 0;
      if ((($304|0) != 0) & ((threwValue|0) != 0)) { $305 = _testSetjmp(HEAP32[$304>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($305|0) == 0) { _longjmp($304|0, threwValue|0); } tempRet0 = (threwValue); } else { $305 = -1; };
      $306 = tempRet0;
      $cond8 = ($305|0)==(1);
      if ($cond8) {
       $$reg2mem571$0 = $306;$arg$5 = $300;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
       break L1;
      }
      HEAP32[728>>2] = $303;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $300;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 80:  {
      $307 = (($127) + 1)|0;
      $308 = (($argv) + ($127<<2)|0);
      $309 = HEAP32[$308>>2]|0;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$arg$0 = $307;$bpfile$0 = $309;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;
      continue L45;
      break;
     }
     case 75:  {
      $310 = (($127) + 1)|0;
      $311 = (($argv) + ($127<<2)|0);
      $312 = HEAP32[$311>>2]|0;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $310;$dark_frame$0 = $312;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 122:  {
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$timestamp_only$0 = 1;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 101:  {
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$thumbnail_only$0 = 1;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 105:  {
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$identify_only$0 = 1;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 99:  {
      $user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = 1;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 118:  {
      HEAP32[712>>2] = 1;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 104:  {
      HEAP32[696>>2] = 1;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 102:  {
      HEAP32[700>>2] = 1;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 65:  {
      $arg$2 = $127;$c$1 = 0;
      while(1) {
       $313 = ($c$1|0)<(4);
       if (!($313)) {
        $arg$3 = $arg$2;
        label = 103;
        break L57;
       }
       $314 = (($arg$2) + 1)|0;
       $315 = (($argv) + ($arg$2<<2)|0);
       $316 = HEAP32[$315>>2]|0;
       __THREW__ = 0;
       $317 = (invoke_ii(67,($316|0))|0);
       $318 = __THREW__; __THREW__ = 0;
       if ((($318|0) != 0) & ((threwValue|0) != 0)) { $319 = _testSetjmp(HEAP32[$318>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($319|0) == 0) { _longjmp($318|0, threwValue|0); } tempRet0 = (threwValue); } else { $319 = -1; };
       $320 = tempRet0;
       $cond6 = ($319|0)==(1);
       if ($cond6) {
        $$reg2mem571$0 = $320;$arg$5 = $314;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
        break L1;
       }
       $321 = (748 + ($c$1<<2)|0);
       HEAP32[$321>>2] = $317;
       $322 = (($c$1) + 1)|0;
       $arg$2 = $314;$c$1 = $322;
      }
      break;
     }
     case 97:  {
      $arg$3 = $127;
      label = 103;
      break;
     }
     case 119:  {
      HEAP32[720>>2] = 1;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 77:  {
      $323 = $122 << 24 >> 24;
      $324 = ($323|0)==(43);
      $325 = $324&1;
      $326 = ($325*3)|0;
      HEAP32[724>>2] = $326;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 73:  {
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$read_from_stdin$0 = 1;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 69:  {
      $327 = HEAP32[704>>2]|0;
      $328 = (($327) + 1)|0;
      HEAP32[704>>2] = $328;
      label = 108;
      break;
     }
     case 68:  {
      label = 108;
      break;
     }
     case 100:  {
      label = 109;
      break;
     }
     case 106:  {
      break;
     }
     case 87:  {
      HEAP32[744>>2] = 1;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 84:  {
      HEAP32[736>>2] = 1;
      $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
      continue L45;
      break;
     }
     case 52:  {
      HEAP32[744>>2] = 1;
      HEAPF64[(48)>>3] = 1.0;
      HEAPF64[40>>3] = 1.0;
      label = 114;
      break;
     }
     case 54:  {
      label = 114;
      break;
     }
     default: {
      label = 115;
      break L45;
     }
     }
    } while(0);
    if ((label|0) == 103) {
     label = 0;
     HEAP32[716>>2] = 1;
     $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $arg$3;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
     continue;
    }
    else if ((label|0) == 108) {
     label = 0;
     $329 = HEAP32[704>>2]|0;
     $330 = (($329) + 1)|0;
     HEAP32[704>>2] = $330;
     label = 109;
    }
    else if ((label|0) == 114) {
     label = 0;
     HEAP32[732>>2] = 16;
     $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$use_fuji_rotate$0$phi = $use_fuji_rotate$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$use_fuji_rotate$0 = $use_fuji_rotate$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
     continue;
    }
    if ((label|0) == 109) {
     label = 0;
     $331 = HEAP32[704>>2]|0;
     $332 = (($331) + 1)|0;
     HEAP32[704>>2] = $332;
    }
    $write_to_stdout$0$phi = $write_to_stdout$0;$user_sat$0$phi = $user_sat$0;$user_qual$0$phi = $user_qual$0;$user_flip$0$phi = $user_flip$0;$user_black$0$phi = $user_black$0;$timestamp_only$0$phi = $timestamp_only$0;$thumbnail_only$0$phi = $thumbnail_only$0;$read_from_stdin$0$phi = $read_from_stdin$0;$identify_only$0$phi = $identify_only$0;$dark_frame$0$phi = $dark_frame$0;$bpfile$0$phi = $bpfile$0;$arg$0 = $127;$use_fuji_rotate$0 = 0;$write_to_stdout$0 = $write_to_stdout$0$phi;$user_sat$0 = $user_sat$0$phi;$user_qual$0 = $user_qual$0$phi;$user_flip$0 = $user_flip$0$phi;$user_black$0 = $user_black$0$phi;$timestamp_only$0 = $timestamp_only$0$phi;$thumbnail_only$0 = $thumbnail_only$0$phi;$read_from_stdin$0 = $read_from_stdin$0$phi;$identify_only$0 = $identify_only$0$phi;$dark_frame$0 = $dark_frame$0$phi;$bpfile$0 = $bpfile$0$phi;
   }
   if ((label|0) == 50) {
    $156 = HEAP32[447952>>2]|0;
    $157 = $131 << 24 >> 24;
    __THREW__ = 0;
    HEAP32[$vararg_buffer578>>2] = $157;
    (invoke_iiii(65,($156|0),(626795|0),($vararg_buffer578|0))|0);
    $158 = __THREW__; __THREW__ = 0;
    if ((($158|0) != 0) & ((threwValue|0) != 0)) { $159 = _testSetjmp(HEAP32[$158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($159|0) == 0) { _longjmp($158|0, threwValue|0); } tempRet0 = (threwValue); } else { $159 = -1; };
    $160 = tempRet0;
    $cond27 = ($159|0)==(1);
    if ($cond27) {
     $$reg2mem571$0 = $160;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 115) {
    $333 = HEAP32[447952>>2]|0;
    $334 = $131 << 24 >> 24;
    __THREW__ = 0;
    HEAP32[$vararg_buffer581>>2] = $334;
    (invoke_iiii(65,($333|0),(626830|0),($vararg_buffer581|0))|0);
    $335 = __THREW__; __THREW__ = 0;
    if ((($335|0) != 0) & ((threwValue|0) != 0)) { $336 = _testSetjmp(HEAP32[$335>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($336|0) == 0) { _longjmp($335|0, threwValue|0); } tempRet0 = (threwValue); } else { $336 = -1; };
    $337 = tempRet0;
    $cond25 = ($336|0)==(1);
    if ($cond25) {
     $$reg2mem571$0 = $337;$arg$5 = $127;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 117) {
    $338 = ($arg$0|0)==($argc|0);
    if ($338) {
     $339 = HEAP32[447952>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(65,($339|0),(626853|0),($vararg_buffer584|0))|0);
     $340 = __THREW__; __THREW__ = 0;
     if ((($340|0) != 0) & ((threwValue|0) != 0)) { $341 = _testSetjmp(HEAP32[$340>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($341|0) == 0) { _longjmp($340|0, threwValue|0); } tempRet0 = (threwValue); } else { $341 = -1; };
     $342 = tempRet0;
     $cond4 = ($341|0)==(1);
     if ($cond4) {
      $$reg2mem571$0 = $342;$arg$5 = $arg$0;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
      break;
     }
     $$0 = 1;
     _free(_setjmpTable|0);
     STACKTOP = sp;return ($$0|0);
    }
    $343 = ($write_to_stdout$0|0)!=(0);
    if (!($343)) {
     $arg$4 = $arg$0;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$status$0 = 0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
     label = 125;
     break;
    }
    __THREW__ = 0;
    $344 = (invoke_ii(70,1)|0);
    $345 = __THREW__; __THREW__ = 0;
    if ((($345|0) != 0) & ((threwValue|0) != 0)) { $346 = _testSetjmp(HEAP32[$345>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($346|0) == 0) { _longjmp($345|0, threwValue|0); } tempRet0 = (threwValue); } else { $346 = -1; };
    $347 = tempRet0;
    $cond2 = ($346|0)==(1);
    if ($cond2) {
     $$reg2mem571$0 = $347;$arg$5 = $arg$0;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
     break;
    }
    $348 = ($344|0)!=(0);
    if (!($348)) {
     $arg$4 = $arg$0;$bpfile$1 = $bpfile$0;$dark_frame$1 = $dark_frame$0;$identify_only$1 = $identify_only$0;$read_from_stdin$1 = $read_from_stdin$0;$status$0 = 0;$thumbnail_only$1 = $thumbnail_only$0;$timestamp_only$1 = $timestamp_only$0;$use_fuji_rotate$1 = $use_fuji_rotate$0;$user_black$1 = $user_black$0;$user_flip$1 = $user_flip$0;$user_qual$1 = $user_qual$0;$user_sat$1 = $user_sat$0;$write_to_stdout$1 = $write_to_stdout$0;
     label = 125;
     break;
    }
    $349 = HEAP32[447952>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(65,($349|0),(626875|0),($vararg_buffer586|0))|0);
    $350 = __THREW__; __THREW__ = 0;
    if ((($350|0) != 0) & ((threwValue|0) != 0)) { $351 = _testSetjmp(HEAP32[$350>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($351|0) == 0) { _longjmp($350|0, threwValue|0); } tempRet0 = (threwValue); } else { $351 = -1; };
    $352 = tempRet0;
    $cond3 = ($351|0)==(1);
    if ($cond3) {
     $$reg2mem571$0 = $352;$arg$5 = $arg$0;$bpfile$2 = $bpfile$0;$dark_frame$2 = $dark_frame$0;$identify_only$2 = $identify_only$0;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$0;$status$1 = 0;$thumbnail_only$2 = $thumbnail_only$0;$timestamp_only$2 = $timestamp_only$0;$use_fuji_rotate$2 = $use_fuji_rotate$0;$user_black$2 = $user_black$0;$user_flip$2 = $user_flip$0;$user_qual$2 = $user_qual$0;$user_sat$2 = $user_sat$0;$write_to_stdout$2 = $write_to_stdout$0;
     break;
    }
    $$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 L141: while(1) {
  if ((label|0) == 125) {
   label = 0;
   $353 = ($arg$4|0)<($argc|0);
   if (!($353)) {
    break;
   }
   HEAP32[1032>>2] = 0;
   HEAP32[972>>2] = 0;
   HEAP32[316624>>2] = 0;
   HEAP32[31024>>2] = 0;
   $354 = HEAP32[447960>>2]|0;
   HEAP32[1676>>2] = $354;
   _setjmpTable = _saveSetjmp(784,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $355 = __THREW__; __THREW__ = 0;
   if ((($355|0) != 0) & ((threwValue|0) != 0)) { $356 = _testSetjmp(HEAP32[$355>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($356|0) == 0) { _longjmp($355|0, threwValue|0); } tempRet0 = (threwValue); } else { $356 = -1; };
   $357 = tempRet0;
   $cond1 = ($356|0)==(1);
   if ($cond1) {
    $$reg2mem571$0 = $357;$arg$5 = $arg$4;$bpfile$2 = $bpfile$1;$dark_frame$2 = $dark_frame$1;$identify_only$2 = $identify_only$1;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$1;$status$1 = 1;$thumbnail_only$2 = $thumbnail_only$1;$timestamp_only$2 = $timestamp_only$1;$use_fuji_rotate$2 = $use_fuji_rotate$1;$user_black$2 = $user_black$1;$user_flip$2 = $user_flip$1;$user_qual$2 = $user_qual$1;$user_sat$2 = $user_sat$1;$write_to_stdout$2 = $write_to_stdout$1;
    continue;
   }
   $$reg2mem571$0 = 0;$arg$5 = $arg$4;$bpfile$2 = $bpfile$1;$dark_frame$2 = $dark_frame$1;$identify_only$2 = $identify_only$1;$ofname$0 = 0;$read_from_stdin$2 = $read_from_stdin$1;$status$1 = 1;$thumbnail_only$2 = $thumbnail_only$1;$timestamp_only$2 = $timestamp_only$1;$use_fuji_rotate$2 = $use_fuji_rotate$1;$user_black$2 = $user_black$1;$user_flip$2 = $user_flip$1;$user_qual$2 = $user_qual$1;$user_sat$2 = $user_sat$1;$write_to_stdout$2 = $write_to_stdout$1;
  }
  $358 = ($$reg2mem571$0|0)!=(0);
  L147: do {
   if ($358) {
    $359 = HEAP32[944>>2]|0;
    __THREW__ = 0;
    $360 = (invoke_ii(71,($359|0))|0);
    $361 = __THREW__; __THREW__ = 0;
    if ((($361|0) != 0) & ((threwValue|0) != 0)) { $362 = _testSetjmp(HEAP32[$361>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($362|0) == 0) { _longjmp($361|0, threwValue|0); } tempRet0 = (threwValue); } else { $362 = -1; };
    $363 = tempRet0;
    $cond163 = ($362|0)==(1);
    if ($cond163) {
     $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $363;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
     continue L141;
    }
    $364 = ($360|0)>(2);
    if ($364) {
     $365 = HEAP32[944>>2]|0;
     __THREW__ = 0;
     (invoke_ii(72,($365|0))|0);
     $366 = __THREW__; __THREW__ = 0;
     if ((($366|0) != 0) & ((threwValue|0) != 0)) { $367 = _testSetjmp(HEAP32[$366>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($367|0) == 0) { _longjmp($366|0, threwValue|0); } tempRet0 = (threwValue); } else { $367 = -1; };
     $368 = tempRet0;
     $cond166 = ($367|0)==(1);
     if ($cond166) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $368;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
    }
    $369 = HEAP32[1676>>2]|0;
    __THREW__ = 0;
    $370 = (invoke_ii(71,($369|0))|0);
    $371 = __THREW__; __THREW__ = 0;
    if ((($371|0) != 0) & ((threwValue|0) != 0)) { $372 = _testSetjmp(HEAP32[$371>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($372|0) == 0) { _longjmp($371|0, threwValue|0); } tempRet0 = (threwValue); } else { $372 = -1; };
    $373 = tempRet0;
    $cond164 = ($372|0)==(1);
    if ($cond164) {
     $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $373;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
     continue L141;
    }
    $374 = ($370|0)>(2);
    if ($374) {
     $375 = HEAP32[1676>>2]|0;
     __THREW__ = 0;
     (invoke_ii(72,($375|0))|0);
     $376 = __THREW__; __THREW__ = 0;
     if ((($376|0) != 0) & ((threwValue|0) != 0)) { $377 = _testSetjmp(HEAP32[$376>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($377|0) == 0) { _longjmp($376|0, threwValue|0); } tempRet0 = (threwValue); } else { $377 = -1; };
     $378 = tempRet0;
     $cond165 = ($377|0)==(1);
     if ($cond165) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $378;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
    }
    $ofname$1 = $ofname$0;$status$5 = 1;
    label = 416;
   } else {
    $379 = (($argv) + ($arg$5<<2)|0);
    $380 = HEAP32[$379>>2]|0;
    HEAP32[780>>2] = $380;
    $381 = HEAP32[780>>2]|0;
    __THREW__ = 0;
    $382 = (invoke_iii(73,($381|0),(612130|0))|0);
    $383 = __THREW__; __THREW__ = 0;
    if ((($383|0) != 0) & ((threwValue|0) != 0)) { $384 = _testSetjmp(HEAP32[$383>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($384|0) == 0) { _longjmp($383|0, threwValue|0); } tempRet0 = (threwValue); } else { $384 = -1; };
    $385 = tempRet0;
    $cond66 = ($384|0)==(1);
    if ($cond66) {
     $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $385;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
     continue L141;
    }
    HEAP32[944>>2] = $382;
    $386 = ($382|0)!=(0|0);
    if (!($386)) {
     $387 = HEAP32[780>>2]|0;
     __THREW__ = 0;
     invoke_vi(74,($387|0));
     $388 = __THREW__; __THREW__ = 0;
     if ((($388|0) != 0) & ((threwValue|0) != 0)) { $389 = _testSetjmp(HEAP32[$388>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($389|0) == 0) { _longjmp($388|0, threwValue|0); } tempRet0 = (threwValue); } else { $389 = -1; };
     $390 = tempRet0;
     $cond67 = ($389|0)==(1);
     if ($cond67) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $390;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
     $arg$6 = $arg$5;$status$6 = $status$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(75);
    $391 = __THREW__; __THREW__ = 0;
    if ((($391|0) != 0) & ((threwValue|0) != 0)) { $392 = _testSetjmp(HEAP32[$391>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($392|0) == 0) { _longjmp($391|0, threwValue|0); } tempRet0 = (threwValue); } else { $392 = -1; };
    $393 = tempRet0;
    $cond68 = ($392|0)==(1);
    if ($cond68) {
     $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$status$1$phi = $status$1;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $393;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$status$1 = $status$1$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
     continue L141;
    }
    $394 = HEAP32[1508>>2]|0;
    $395 = ($394|0)!=(0);
    $396 = $395 ^ 1;
    $397 = $396&1;
    $398 = ($user_flip$2|0)>=(0);
    if ($398) {
     HEAP32[293688>>2] = $user_flip$2;
    }
    $399 = HEAP32[293688>>2]|0;
    $400 = (($399) + 3600)|0;
    $401 = (($400>>>0) % 360)&-1;
    switch ($401|0) {
    case 270:  {
     HEAP32[293688>>2] = 5;
     break;
    }
    case 180:  {
     HEAP32[293688>>2] = 3;
     break;
    }
    case 90:  {
     HEAP32[293688>>2] = 6;
     break;
    }
    default: {
    }
    }
    $402 = ($timestamp_only$2|0)!=(0);
    L174: do {
     if ($402) {
      $403 = HEAP32[31164>>2]|0;
      $404 = ($403|0)!=(0);
      $405 = $404 ^ 1;
      $406 = $405&1;
      if ($405) {
       $407 = HEAP32[447952>>2]|0;
       $408 = HEAP32[780>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer588>>2] = $408;
       (invoke_iiii(65,($407|0),(626917|0),($vararg_buffer588|0))|0);
       $409 = __THREW__; __THREW__ = 0;
       if ((($409|0) != 0) & ((threwValue|0) != 0)) { $410 = _testSetjmp(HEAP32[$409>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($410|0) == 0) { _longjmp($409|0, threwValue|0); } tempRet0 = (threwValue); } else { $410 = -1; };
       $411 = tempRet0;
       $cond162 = ($410|0)==(1);
       if ($cond162) {
        $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $411;$status$1 = $406;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
        continue L141;
       }
       $status$3 = $406;
       break;
      }
      $412 = ($identify_only$2|0)!=(0);
      if ($412) {
       $413 = HEAP32[31164>>2]|0;
       $414 = HEAP32[293684>>2]|0;
       $415 = HEAP32[780>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer591>>2] = $413;
       $vararg_ptr594 = ((($vararg_buffer591)) + 4|0);
       HEAP32[$vararg_ptr594>>2] = $414;
       $vararg_ptr595 = ((($vararg_buffer591)) + 8|0);
       HEAP32[$vararg_ptr595>>2] = $415;
       (invoke_iii(61,(626939|0),($vararg_buffer591|0))|0);
       $416 = __THREW__; __THREW__ = 0;
       if ((($416|0) != 0) & ((threwValue|0) != 0)) { $417 = _testSetjmp(HEAP32[$416>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($417|0) == 0) { _longjmp($416|0, threwValue|0); } tempRet0 = (threwValue); } else { $417 = -1; };
       $418 = tempRet0;
       $cond161 = ($417|0)==(1);
       if ($cond161) {
        $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $418;$status$1 = $406;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
        continue L141;
       }
       $status$3 = $406;
       break;
      }
      $419 = HEAP32[712>>2]|0;
      $420 = ($419|0)!=(0);
      if ($420) {
       $421 = HEAP32[447952>>2]|0;
       $422 = HEAP32[780>>2]|0;
       $423 = HEAP32[31164>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer596>>2] = $422;
       $vararg_ptr599 = ((($vararg_buffer596)) + 4|0);
       HEAP32[$vararg_ptr599>>2] = $423;
       (invoke_iiii(65,($421|0),(626953|0),($vararg_buffer596|0))|0);
       $424 = __THREW__; __THREW__ = 0;
       if ((($424|0) != 0) & ((threwValue|0) != 0)) { $425 = _testSetjmp(HEAP32[$424>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($425|0) == 0) { _longjmp($424|0, threwValue|0); } tempRet0 = (threwValue); } else { $425 = -1; };
       $426 = tempRet0;
       $cond160 = ($425|0)==(1);
       if ($cond160) {
        $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $426;$status$1 = $406;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
        continue L141;
       }
      }
      $427 = HEAP32[31164>>2]|0;
      $428 = ((($ut)) + 4|0);
      HEAP32[$428>>2] = $427;
      HEAP32[$ut>>2] = $427;
      $429 = HEAP32[780>>2]|0;
      __THREW__ = 0;
      (invoke_iii(76,($429|0),($ut|0))|0);
      $430 = __THREW__; __THREW__ = 0;
      if ((($430|0) != 0) & ((threwValue|0) != 0)) { $431 = _testSetjmp(HEAP32[$430>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($431|0) == 0) { _longjmp($430|0, threwValue|0); } tempRet0 = (threwValue); } else { $431 = -1; };
      $432 = tempRet0;
      $cond159 = ($431|0)==(1);
      if ($cond159) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $432;$status$1 = $406;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      $status$3 = $406;
     } else {
      HEAP32[447700>>2] = 77;
      $433 = ($thumbnail_only$2|0)!=(0);
      do {
       if ($433) {
        $434 = HEAP32[293668>>2]|0;
        $435 = ($434|0)!=(0);
        $436 = $435 ^ 1;
        $437 = $436&1;
        if ($436) {
         $438 = HEAP32[447952>>2]|0;
         $439 = HEAP32[780>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer600>>2] = $439;
         (invoke_iiii(65,($438|0),(626973|0),($vararg_buffer600|0))|0);
         $440 = __THREW__; __THREW__ = 0;
         if ((($440|0) != 0) & ((threwValue|0) != 0)) { $441 = _testSetjmp(HEAP32[$440>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($441|0) == 0) { _longjmp($440|0, threwValue|0); } tempRet0 = (threwValue); } else { $441 = -1; };
         $442 = tempRet0;
         $cond158 = ($441|0)==(1);
         if ($cond158) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $442;$status$1 = $437;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $status$3 = $437;
         break L174;
        }
        $443 = HEAP32[294632>>2]|0;
        $444 = ($443|0)!=(0|0);
        if ($444) {
         $445 = HEAP32[294632>>2]|0;
         HEAP32[31028>>2] = $445;
         $446 = HEAP32[293668>>2]|0;
         HEAP32[1524>>2] = $446;
         $447 = HEAP16[580262>>1]|0;
         HEAP16[580074>>1] = $447;
         $448 = HEAP16[580260>>1]|0;
         HEAP16[580076>>1] = $448;
         HEAP32[776>>2] = 0;
         HEAP32[980>>2] = 3;
         $status$2 = $437;
         label = 169;
         break;
        }
        $449 = HEAP32[944>>2]|0;
        $450 = HEAP32[293668>>2]|0;
        __THREW__ = 0;
        (invoke_iiii(78,($449|0),($450|0),0)|0);
        $451 = __THREW__; __THREW__ = 0;
        if ((($451|0) != 0) & ((threwValue|0) != 0)) { $452 = _testSetjmp(HEAP32[$451>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($452|0) == 0) { _longjmp($451|0, threwValue|0); } tempRet0 = (threwValue); } else { $452 = -1; };
        $453 = tempRet0;
        $cond157 = ($452|0)==(1);
        if ($cond157) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $453;$status$1 = $437;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $454 = HEAP32[294628>>2]|0;
        HEAP32[447700>>2] = $454;
        $status$4 = $437;
       } else {
        $status$2 = $397;
        label = 169;
       }
      } while(0);
      do {
       if ((label|0) == 169) {
        label = 0;
        $455 = HEAP32[31028>>2]|0;
        $456 = ($455|0)==(31|0);
        if ($456) {
         $457 = HEAP16[580074>>1]|0;
         $458 = $457&65535;
         $459 = $458 & 1;
         $460 = HEAP16[580074>>1]|0;
         $461 = $460&65535;
         $462 = (($461) + ($459))|0;
         $463 = $462&65535;
         HEAP16[580074>>1] = $463;
         $464 = HEAP16[580076>>1]|0;
         $465 = $464&65535;
         $466 = $465 & 1;
         $467 = HEAP16[580076>>1]|0;
         $468 = $467&65535;
         $469 = (($468) + ($466))|0;
         $470 = $469&65535;
         HEAP16[580076>>1] = $470;
        }
        $471 = ($identify_only$2|0)!=(0);
        $472 = HEAP32[712>>2]|0;
        $473 = ($472|0)!=(0);
        $or$cond = $471 & $473;
        if ($or$cond) {
         $474 = HEAP8[594275>>0]|0;
         $475 = $474 << 24 >> 24;
         $476 = ($475|0)!=(0);
         if ($476) {
          $477 = HEAP32[780>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer603>>2] = $477;
          (invoke_iii(61,(626995|0),($vararg_buffer603|0))|0);
          $478 = __THREW__; __THREW__ = 0;
          if ((($478|0) != 0) & ((threwValue|0) != 0)) { $479 = _testSetjmp(HEAP32[$478>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($479|0) == 0) { _longjmp($478|0, threwValue|0); } tempRet0 = (threwValue); } else { $479 = -1; };
          $480 = tempRet0;
          $cond139 = ($479|0)==(1);
          if ($cond139) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $480;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          __THREW__ = 0;
          $481 = (invoke_ii(79,(31164|0))|0);
          $482 = __THREW__; __THREW__ = 0;
          if ((($482|0) != 0) & ((threwValue|0) != 0)) { $483 = _testSetjmp(HEAP32[$482>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($483|0) == 0) { _longjmp($482|0, threwValue|0); } tempRet0 = (threwValue); } else { $483 = -1; };
          $484 = tempRet0;
          $cond140 = ($483|0)==(1);
          if ($cond140) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $484;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          __THREW__ = 0;
          HEAP32[$vararg_buffer606>>2] = $481;
          (invoke_iii(61,(627010|0),($vararg_buffer606|0))|0);
          $485 = __THREW__; __THREW__ = 0;
          if ((($485|0) != 0) & ((threwValue|0) != 0)) { $486 = _testSetjmp(HEAP32[$485>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($486|0) == 0) { _longjmp($485|0, threwValue|0); } tempRet0 = (threwValue); } else { $486 = -1; };
          $487 = tempRet0;
          $cond141 = ($486|0)==(1);
          if ($cond141) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $487;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          __THREW__ = 0;
          HEAP32[$vararg_buffer609>>2] = 594275;
          $vararg_ptr612 = ((($vararg_buffer609)) + 4|0);
          HEAP32[$vararg_ptr612>>2] = 594339;
          (invoke_iii(61,(627024|0),($vararg_buffer609|0))|0);
          $488 = __THREW__; __THREW__ = 0;
          if ((($488|0) != 0) & ((threwValue|0) != 0)) { $489 = _testSetjmp(HEAP32[$488>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($489|0) == 0) { _longjmp($488|0, threwValue|0); } tempRet0 = (threwValue); } else { $489 = -1; };
          $490 = tempRet0;
          $cond142 = ($489|0)==(1);
          if ($cond142) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $490;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $491 = HEAP8[613809>>0]|0;
          $492 = ($491<<24>>24)!=(0);
          if ($492) {
           __THREW__ = 0;
           HEAP32[$vararg_buffer613>>2] = 613809;
           (invoke_iii(61,(627039|0),($vararg_buffer613|0))|0);
           $493 = __THREW__; __THREW__ = 0;
           if ((($493|0) != 0) & ((threwValue|0) != 0)) { $494 = _testSetjmp(HEAP32[$493>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($494|0) == 0) { _longjmp($493|0, threwValue|0); } tempRet0 = (threwValue); } else { $494 = -1; };
           $495 = tempRet0;
           $cond156 = ($494|0)==(1);
           if ($cond156) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $495;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
          }
          $496 = HEAP32[1064>>2]|0;
          $497 = ($496|0)!=(0);
          L216: do {
           if ($497) {
            __THREW__ = 0;
            (invoke_iii(61,(627050|0),($vararg_buffer616|0))|0);
            $498 = __THREW__; __THREW__ = 0;
            if ((($498|0) != 0) & ((threwValue|0) != 0)) { $499 = _testSetjmp(HEAP32[$498>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($499|0) == 0) { _longjmp($498|0, threwValue|0); } tempRet0 = (threwValue); } else { $499 = -1; };
            $500 = tempRet0;
            $cond154 = ($499|0)==(1);
            if ($cond154) {
             $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $500;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
             continue L141;
            }
            $i$1 = 24;
            while(1) {
             $501 = ($i$1|0)>=(0);
             if (!($501)) {
              break L216;
             }
             $502 = HEAP32[1064>>2]|0;
             $503 = $502 >>> $i$1;
             $504 = $503 & 255;
             $505 = ($i$1|0)!=(0);
             $506 = $505 ? 46 : 10;
             __THREW__ = 0;
             HEAP32[$vararg_buffer618>>2] = $504;
             $vararg_ptr621 = ((($vararg_buffer618)) + 4|0);
             HEAP32[$vararg_ptr621>>2] = $506;
             (invoke_iii(61,(627064|0),($vararg_buffer618|0))|0);
             $507 = __THREW__; __THREW__ = 0;
             if ((($507|0) != 0) & ((threwValue|0) != 0)) { $508 = _testSetjmp(HEAP32[$507>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($508|0) == 0) { _longjmp($507|0, threwValue|0); } tempRet0 = (threwValue); } else { $508 = -1; };
             $509 = tempRet0;
             $cond155 = ($508|0)==(1);
             if ($cond155) {
              $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $509;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
              continue L141;
             }
             $510 = (($i$1) - 8)|0;
             $i$1 = $510;
            }
           }
          } while(0);
          $511 = +HEAPF32[293672>>2];
          $512 = (~~(($511)));
          __THREW__ = 0;
          HEAP32[$vararg_buffer622>>2] = $512;
          (invoke_iii(61,(627069|0),($vararg_buffer622|0))|0);
          $513 = __THREW__; __THREW__ = 0;
          if ((($513|0) != 0) & ((threwValue|0) != 0)) { $514 = _testSetjmp(HEAP32[$513>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($514|0) == 0) { _longjmp($513|0, threwValue|0); } tempRet0 = (threwValue); } else { $514 = -1; };
          $515 = tempRet0;
          $cond143 = ($514|0)==(1);
          if ($cond143) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $515;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          __THREW__ = 0;
          (invoke_iii(61,(627084|0),($vararg_buffer625|0))|0);
          $516 = __THREW__; __THREW__ = 0;
          if ((($516|0) != 0) & ((threwValue|0) != 0)) { $517 = _testSetjmp(HEAP32[$516>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($517|0) == 0) { _longjmp($516|0, threwValue|0); } tempRet0 = (threwValue); } else { $517 = -1; };
          $518 = tempRet0;
          $cond144 = ($517|0)==(1);
          if ($cond144) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $518;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $519 = +HEAPF32[293680>>2];
          $520 = $519 > 0.0;
          $521 = +HEAPF32[293680>>2];
          $522 = $521 < 1.0;
          $or$cond3 = $520 & $522;
          if ($or$cond3) {
           __THREW__ = 0;
           (invoke_iii(61,(627094|0),($vararg_buffer627|0))|0);
           $523 = __THREW__; __THREW__ = 0;
           if ((($523|0) != 0) & ((threwValue|0) != 0)) { $524 = _testSetjmp(HEAP32[$523>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($524|0) == 0) { _longjmp($523|0, threwValue|0); } tempRet0 = (threwValue); } else { $524 = -1; };
           $525 = tempRet0;
           $cond153 = ($524|0)==(1);
           if ($cond153) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $525;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           $526 = +HEAPF32[293680>>2];
           $527 = 1.0 / $526;
           HEAPF32[293680>>2] = $527;
          }
          $528 = +HEAPF32[293680>>2];
          $529 = $528;
          __THREW__ = 0;
          HEAPF64[$vararg_buffer629>>3] = $529;
          (invoke_iii(61,(627097|0),($vararg_buffer629|0))|0);
          $530 = __THREW__; __THREW__ = 0;
          if ((($530|0) != 0) & ((threwValue|0) != 0)) { $531 = _testSetjmp(HEAP32[$530>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($531|0) == 0) { _longjmp($530|0, threwValue|0); } tempRet0 = (threwValue); } else { $531 = -1; };
          $532 = tempRet0;
          $cond145 = ($531|0)==(1);
          if ($cond145) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $532;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $533 = +HEAPF32[293676>>2];
          $534 = $533;
          __THREW__ = 0;
          HEAPF64[$vararg_buffer632>>3] = $534;
          (invoke_iii(61,(627108|0),($vararg_buffer632|0))|0);
          $535 = __THREW__; __THREW__ = 0;
          if ((($535|0) != 0) & ((threwValue|0) != 0)) { $536 = _testSetjmp(HEAP32[$535>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($536|0) == 0) { _longjmp($535|0, threwValue|0); } tempRet0 = (threwValue); } else { $536 = -1; };
          $537 = tempRet0;
          $cond146 = ($536|0)==(1);
          if ($cond146) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $537;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $538 = +HEAPF32[294224>>2];
          $539 = $538;
          __THREW__ = 0;
          HEAPF64[$vararg_buffer635>>3] = $539;
          (invoke_iii(61,(627127|0),($vararg_buffer635|0))|0);
          $540 = __THREW__; __THREW__ = 0;
          if ((($540|0) != 0) & ((threwValue|0) != 0)) { $541 = _testSetjmp(HEAP32[$540>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($541|0) == 0) { _longjmp($540|0, threwValue|0); } tempRet0 = (threwValue); } else { $541 = -1; };
          $542 = tempRet0;
          $cond147 = ($541|0)==(1);
          if ($cond147) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $542;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $543 = HEAP32[294556>>2]|0;
          $544 = ($543|0)!=(0);
          $545 = $544 ? 627177 : 627181;
          __THREW__ = 0;
          HEAP32[$vararg_buffer638>>2] = $545;
          (invoke_iii(61,(627151|0),($vararg_buffer638|0))|0);
          $546 = __THREW__; __THREW__ = 0;
          if ((($546|0) != 0) & ((threwValue|0) != 0)) { $547 = _testSetjmp(HEAP32[$546>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($547|0) == 0) { _longjmp($546|0, threwValue|0); } tempRet0 = (threwValue); } else { $547 = -1; };
          $548 = tempRet0;
          $cond148 = ($547|0)==(1);
          if ($cond148) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $548;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $549 = HEAP32[1508>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer641>>2] = $549;
          (invoke_iii(61,(627184|0),($vararg_buffer641|0))|0);
          $550 = __THREW__; __THREW__ = 0;
          if ((($550|0) != 0) & ((threwValue|0) != 0)) { $551 = _testSetjmp(HEAP32[$550>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($551|0) == 0) { _longjmp($550|0, threwValue|0); } tempRet0 = (threwValue); } else { $551 = -1; };
          $552 = tempRet0;
          $cond149 = ($551|0)==(1);
          if ($cond149) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $552;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $553 = +HEAPF64[224>>3];
          $554 = $553 != 1.0;
          if ($554) {
           $555 = +HEAPF64[224>>3];
           __THREW__ = 0;
           HEAPF64[$vararg_buffer644>>3] = $555;
           (invoke_iii(61,(627210|0),($vararg_buffer644|0))|0);
           $556 = __THREW__; __THREW__ = 0;
           if ((($556|0) != 0) & ((threwValue|0) != 0)) { $557 = _testSetjmp(HEAP32[$556>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($557|0) == 0) { _longjmp($556|0, threwValue|0); } tempRet0 = (threwValue); } else { $557 = -1; };
           $558 = tempRet0;
           $cond152 = ($557|0)==(1);
           if ($cond152) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $558;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
          }
          $559 = HEAP32[293668>>2]|0;
          $560 = ($559|0)!=(0);
          if ($560) {
           $561 = HEAP16[580260>>1]|0;
           $562 = $561&65535;
           $563 = HEAP16[580262>>1]|0;
           $564 = $563&65535;
           __THREW__ = 0;
           HEAP32[$vararg_buffer647>>2] = $562;
           $vararg_ptr650 = ((($vararg_buffer647)) + 4|0);
           HEAP32[$vararg_ptr650>>2] = $564;
           (invoke_iii(61,(627237|0),($vararg_buffer647|0))|0);
           $565 = __THREW__; __THREW__ = 0;
           if ((($565|0) != 0) & ((threwValue|0) != 0)) { $566 = _testSetjmp(HEAP32[$565>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($566|0) == 0) { _longjmp($565|0, threwValue|0); } tempRet0 = (threwValue); } else { $566 = -1; };
           $567 = tempRet0;
           $cond151 = ($566|0)==(1);
           if ($cond151) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $567;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
          }
          $568 = HEAP16[580226>>1]|0;
          $569 = $568&65535;
          $570 = HEAP16[580244>>1]|0;
          $571 = $570&65535;
          __THREW__ = 0;
          HEAP32[$vararg_buffer651>>2] = $569;
          $vararg_ptr654 = ((($vararg_buffer651)) + 4|0);
          HEAP32[$vararg_ptr654>>2] = $571;
          (invoke_iii(61,(627260|0),($vararg_buffer651|0))|0);
          $572 = __THREW__; __THREW__ = 0;
          if ((($572|0) != 0) & ((threwValue|0) != 0)) { $573 = _testSetjmp(HEAP32[$572>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($573|0) == 0) { _longjmp($572|0, threwValue|0); } tempRet0 = (threwValue); } else { $573 = -1; };
          $574 = tempRet0;
          $cond150 = ($573|0)==(1);
          if ($cond150) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $574;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
         } else {
          label = 204;
         }
        } else {
         label = 204;
        }
        if ((label|0) == 204) {
         label = 0;
         $575 = HEAP32[1508>>2]|0;
         $576 = ($575|0)!=(0);
         if (!($576)) {
          $577 = HEAP32[447952>>2]|0;
          $578 = HEAP32[780>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer655>>2] = $578;
          (invoke_iiii(65,($577|0),(627283|0),($vararg_buffer655|0))|0);
          $579 = __THREW__; __THREW__ = 0;
          if ((($579|0) != 0) & ((threwValue|0) != 0)) { $580 = _testSetjmp(HEAP32[$579>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($580|0) == 0) { _longjmp($579|0, threwValue|0); } tempRet0 = (threwValue); } else { $580 = -1; };
          $581 = tempRet0;
          $cond69 = ($580|0)==(1);
          if ($cond69) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $581;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
         }
        }
        $582 = HEAP32[1508>>2]|0;
        $583 = ($582|0)!=(0);
        if (!($583)) {
         $status$3 = $status$2;
         break L174;
        }
        $584 = HEAP32[776>>2]|0;
        $585 = ($584|0)!=(0);
        if ($585) {
         $586 = HEAP32[696>>2]|0;
         $587 = ($586|0)!=(0);
         if ($587) {
          $$reg2mem569$0 = 1;
         } else {
          $588 = ($identify_only$2|0)!=(0);
          if ($588) {
           $$reg2mem569$0 = 0;
          } else {
           $589 = +HEAPF32[692>>2];
           $590 = $589 != 0.0;
           $591 = +HEAPF64[8>>3];
           $592 = $591 != 1.0;
           $or$cond5 = $590 | $592;
           if ($or$cond5) {
            $$reg2mem569$0 = 1;
           } else {
            $593 = +HEAPF64[(24)>>3];
            $594 = $593 != 1.0;
            $$reg2mem569$0 = $594;
           }
          }
         }
        } else {
         $$reg2mem569$0 = 0;
        }
        $595 = $$reg2mem569$0&1;
        $596 = $595&65535;
        HEAP16[580078>>1] = $596;
        $597 = HEAP16[580074>>1]|0;
        $598 = $597&65535;
        $599 = HEAP16[580078>>1]|0;
        $600 = $599&65535;
        $601 = (($598) + ($600))|0;
        $602 = HEAP16[580078>>1]|0;
        $603 = $602&65535;
        $604 = $601 >> $603;
        $605 = $604&65535;
        HEAP16[589196>>1] = $605;
        $606 = HEAP16[580076>>1]|0;
        $607 = $606&65535;
        $608 = HEAP16[580078>>1]|0;
        $609 = $608&65535;
        $610 = (($607) + ($609))|0;
        $611 = HEAP16[580078>>1]|0;
        $612 = $611&65535;
        $613 = $610 >> $612;
        $614 = $613&65535;
        HEAP16[580080>>1] = $614;
        $615 = ($identify_only$2|0)!=(0);
        if ($615) {
         $616 = HEAP32[712>>2]|0;
         $617 = ($616|0)!=(0);
         if (!($617)) {
          $799 = HEAP32[780>>2]|0;
          __THREW__ = 0;
          HEAP32[$vararg_buffer681>>2] = $799;
          $vararg_ptr684 = ((($vararg_buffer681)) + 4|0);
          HEAP32[$vararg_ptr684>>2] = 594275;
          $vararg_ptr685 = ((($vararg_buffer681)) + 8|0);
          HEAP32[$vararg_ptr685>>2] = 594339;
          (invoke_iii(61,(627429|0),($vararg_buffer681|0))|0);
          $800 = __THREW__; __THREW__ = 0;
          if ((($800|0) != 0) & ((threwValue|0) != 0)) { $801 = _testSetjmp(HEAP32[$800>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($801|0) == 0) { _longjmp($800|0, threwValue|0); } tempRet0 = (threwValue); } else { $801 = -1; };
          $802 = tempRet0;
          $cond124 = ($801|0)==(1);
          if ($cond124) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $802;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $status$3 = $status$2;
          break L174;
         }
         $618 = HEAP32[704>>2]|0;
         $619 = ($618|0)==(3);
         if ($619) {
          HEAP16[589194>>1] = 0;
          HEAP16[448956>>1] = 0;
          HEAP16[448958>>1] = 0;
          $620 = HEAP16[580244>>1]|0;
          HEAP16[580074>>1] = $620;
          $621 = HEAP16[580226>>1]|0;
          HEAP16[580076>>1] = $621;
         }
         $622 = HEAP16[580074>>1]|0;
         $623 = $622&65535;
         $624 = HEAP16[580078>>1]|0;
         $625 = $624&65535;
         $626 = (($623) + ($625))|0;
         $627 = HEAP16[580078>>1]|0;
         $628 = $627&65535;
         $629 = $626 >> $628;
         $630 = $629&65535;
         HEAP16[589196>>1] = $630;
         $631 = HEAP16[580076>>1]|0;
         $632 = $631&65535;
         $633 = HEAP16[580078>>1]|0;
         $634 = $633&65535;
         $635 = (($632) + ($634))|0;
         $636 = HEAP16[580078>>1]|0;
         $637 = $636&65535;
         $638 = $635 >> $637;
         $639 = $638&65535;
         HEAP16[580080>>1] = $639;
         $640 = ($use_fuji_rotate$2|0)!=(0);
         do {
          if ($640) {
           $641 = HEAP16[589194>>1]|0;
           $642 = ($641<<16>>16)!=(0);
           if ($642) {
            $643 = HEAP16[589194>>1]|0;
            $644 = $643&65535;
            $645 = (($644) - 1)|0;
            $646 = HEAP16[580078>>1]|0;
            $647 = $646&65535;
            $648 = (($645) + ($647))|0;
            $649 = HEAP16[580078>>1]|0;
            $650 = $649&65535;
            $651 = $648 >> $650;
            $652 = $651&65535;
            HEAP16[589194>>1] = $652;
            $653 = HEAP16[589194>>1]|0;
            $654 = $653&65535;
            $655 = (+($654|0));
            __THREW__ = 0;
            $656 = (+invoke_dd(80,0.5));
            $657 = __THREW__; __THREW__ = 0;
            if ((($657|0) != 0) & ((threwValue|0) != 0)) { $658 = _testSetjmp(HEAP32[$657>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($658|0) == 0) { _longjmp($657|0, threwValue|0); } tempRet0 = (threwValue); } else { $658 = -1; };
            $659 = tempRet0;
            $cond137 = ($658|0)==(1);
            if ($cond137) {
             $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $659;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
             continue L141;
            }
            $660 = $655 / $656;
            $661 = (~~(($660))&65535);
            HEAP16[580080>>1] = $661;
            $662 = HEAP16[589196>>1]|0;
            $663 = $662&65535;
            $664 = HEAP16[589194>>1]|0;
            $665 = $664&65535;
            $666 = (($663) - ($665))|0;
            $667 = (+($666|0));
            __THREW__ = 0;
            $668 = (+invoke_dd(80,0.5));
            $669 = __THREW__; __THREW__ = 0;
            if ((($669|0) != 0) & ((threwValue|0) != 0)) { $670 = _testSetjmp(HEAP32[$669>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($670|0) == 0) { _longjmp($669|0, threwValue|0); } tempRet0 = (threwValue); } else { $670 = -1; };
            $671 = tempRet0;
            $cond138 = ($670|0)==(1);
            if ($cond138) {
             $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $671;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
             continue L141;
            }
            $672 = $667 / $668;
            $673 = (~~(($672))&65535);
            HEAP16[589196>>1] = $673;
            break;
           }
           $674 = +HEAPF64[224>>3];
           $675 = $674 < 1.0;
           if ($675) {
            $676 = HEAP16[589196>>1]|0;
            $677 = $676&65535;
            $678 = (+($677|0));
            $679 = +HEAPF64[224>>3];
            $680 = $678 / $679;
            $681 = $680 + 0.5;
            $682 = (~~(($681))&65535);
            HEAP16[589196>>1] = $682;
           }
           $683 = +HEAPF64[224>>3];
           $684 = $683 > 1.0;
           if (!($684)) {
            break;
           }
           $685 = HEAP16[580080>>1]|0;
           $686 = $685&65535;
           $687 = (+($686|0));
           $688 = +HEAPF64[224>>3];
           $689 = $687 * $688;
           $690 = $689 + 0.5;
           $691 = (~~(($690))&65535);
           HEAP16[580080>>1] = $691;
          }
         } while(0);
         $692 = HEAP32[293688>>2]|0;
         $693 = $692 & 4;
         $694 = ($693|0)!=(0);
         if ($694) {
          $695 = HEAP16[589196>>1]|0;
          $696 = $695&65535;
          $697 = HEAP16[580080>>1]|0;
          $698 = $697&65535;
          $699 = (($696) + ($698))|0;
          $700 = $699&65535;
          HEAP16[589196>>1] = $700;
          $701 = HEAP16[589196>>1]|0;
          $702 = $701&65535;
          $703 = HEAP16[580080>>1]|0;
          $704 = $703&65535;
          $705 = (($702) - ($704))|0;
          $706 = $705&65535;
          HEAP16[580080>>1] = $706;
          $707 = HEAP16[589196>>1]|0;
          $708 = $707&65535;
          $709 = HEAP16[580080>>1]|0;
          $710 = $709&65535;
          $711 = (($708) - ($710))|0;
          $712 = $711&65535;
          HEAP16[589196>>1] = $712;
         }
         $713 = HEAP16[580076>>1]|0;
         $714 = $713&65535;
         $715 = HEAP16[580074>>1]|0;
         $716 = $715&65535;
         __THREW__ = 0;
         HEAP32[$vararg_buffer658>>2] = $714;
         $vararg_ptr661 = ((($vararg_buffer658)) + 4|0);
         HEAP32[$vararg_ptr661>>2] = $716;
         (invoke_iii(61,(627306|0),($vararg_buffer658|0))|0);
         $717 = __THREW__; __THREW__ = 0;
         if ((($717|0) != 0) & ((threwValue|0) != 0)) { $718 = _testSetjmp(HEAP32[$717>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($718|0) == 0) { _longjmp($717|0, threwValue|0); } tempRet0 = (threwValue); } else { $718 = -1; };
         $719 = tempRet0;
         $cond125 = ($718|0)==(1);
         if ($cond125) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $719;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $720 = HEAP16[580080>>1]|0;
         $721 = $720&65535;
         $722 = HEAP16[589196>>1]|0;
         $723 = $722&65535;
         __THREW__ = 0;
         HEAP32[$vararg_buffer662>>2] = $721;
         $vararg_ptr665 = ((($vararg_buffer662)) + 4|0);
         HEAP32[$vararg_ptr665>>2] = $723;
         (invoke_iii(61,(627329|0),($vararg_buffer662|0))|0);
         $724 = __THREW__; __THREW__ = 0;
         if ((($724|0) != 0) & ((threwValue|0) != 0)) { $725 = _testSetjmp(HEAP32[$724>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($725|0) == 0) { _longjmp($724|0, threwValue|0); } tempRet0 = (threwValue); } else { $725 = -1; };
         $726 = tempRet0;
         $cond126 = ($725|0)==(1);
         if ($cond126) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $726;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $727 = HEAP32[980>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer666>>2] = $727;
         (invoke_iii(61,(627352|0),($vararg_buffer666|0))|0);
         $728 = __THREW__; __THREW__ = 0;
         if ((($728|0) != 0) & ((threwValue|0) != 0)) { $729 = _testSetjmp(HEAP32[$728>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($729|0) == 0) { _longjmp($728|0, threwValue|0); } tempRet0 = (threwValue); } else { $729 = -1; };
         $730 = tempRet0;
         $cond127 = ($729|0)==(1);
         if ($cond127) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $730;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $731 = HEAP32[776>>2]|0;
         $732 = ($731|0)!=(0);
         L283: do {
          if ($732) {
           $733 = HEAP32[776>>2]|0;
           $734 = HEAP32[776>>2]|0;
           $735 = $734 >>> 8;
           $736 = $733 ^ $735;
           $737 = $736 & 255;
           $738 = ($737|0)!=(0);
           if ($738) {
            $fhigh$0 = 4;
           } else {
            $fhigh$0 = 2;
           }
           $739 = HEAP32[776>>2]|0;
           $740 = HEAP32[776>>2]|0;
           $741 = $740 >>> 16;
           $742 = $739 ^ $741;
           $743 = $742 & 65535;
           $744 = ($743|0)!=(0);
           if ($744) {
            $fhigh$1 = 8;
           } else {
            $fhigh$1 = $fhigh$0;
           }
           $745 = HEAP32[776>>2]|0;
           $746 = ($745|0)==(1);
           if ($746) {
            $fhigh$2 = 16;$fwide$0 = 16;
           } else {
            $fhigh$2 = $fhigh$1;$fwide$0 = 2;
           }
           $747 = HEAP32[776>>2]|0;
           $748 = ($747|0)==(9);
           if ($748) {
            $fhigh$3 = 6;$fwide$1 = 6;
           } else {
            $fhigh$3 = $fhigh$2;$fwide$1 = $fwide$0;
           }
           __THREW__ = 0;
           (invoke_iii(61,(627367|0),($vararg_buffer669|0))|0);
           $749 = __THREW__; __THREW__ = 0;
           if ((($749|0) != 0) & ((threwValue|0) != 0)) { $750 = _testSetjmp(HEAP32[$749>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($750|0) == 0) { _longjmp($749|0, threwValue|0); } tempRet0 = (threwValue); } else { $750 = -1; };
           $751 = tempRet0;
           $cond133 = ($750|0)==(1);
           if ($cond133) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $751;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           $i$2 = 0;
           while(1) {
            $752 = ($i$2|0)<($fhigh$3|0);
            if (!($752)) {
             break L283;
            }
            $753 = ($i$2|0)!=(0);
            if ($753) {
             __THREW__ = 0;
             (invoke_ii(81,47)|0);
             $754 = __THREW__; __THREW__ = 0;
             if ((($754|0) != 0) & ((threwValue|0) != 0)) { $755 = _testSetjmp(HEAP32[$754>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($755|0) == 0) { _longjmp($754|0, threwValue|0); } tempRet0 = (threwValue); } else { $755 = -1; };
             $756 = tempRet0;
             $cond136 = ($755|0)==(1);
             if ($cond136) {
              $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $756;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
              continue L141;
             }
            }
            $757 = 0;
            $c$2 = $757;
            while(1) {
             $758 = ($c$2|0)<($fwide$1|0);
             if (!($758)) {
              break;
             }
             __THREW__ = 0;
             $759 = (invoke_iii(82,($i$2|0),($c$2|0))|0);
             $760 = __THREW__; __THREW__ = 0;
             if ((($760|0) != 0) & ((threwValue|0) != 0)) { $761 = _testSetjmp(HEAP32[$760>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($761|0) == 0) { _longjmp($760|0, threwValue|0); } tempRet0 = (threwValue); } else { $761 = -1; };
             $762 = tempRet0;
             $cond134 = ($761|0)==(1);
             if ($cond134) {
              $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $762;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
              continue L141;
             }
             $763 = (615136 + ($759)|0);
             $764 = HEAP8[$763>>0]|0;
             $765 = $764 << 24 >> 24;
             __THREW__ = 0;
             (invoke_ii(81,($765|0))|0);
             $766 = __THREW__; __THREW__ = 0;
             if ((($766|0) != 0) & ((threwValue|0) != 0)) { $767 = _testSetjmp(HEAP32[$766>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($767|0) == 0) { _longjmp($766|0, threwValue|0); } tempRet0 = (threwValue); } else { $767 = -1; };
             $768 = tempRet0;
             $cond135 = ($767|0)==(1);
             if ($cond135) {
              $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $768;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
              continue L141;
             }
             $769 = (($c$2) + 1)|0;
             $c$2 = $769;
            }
            $770 = (($i$2) + 1)|0;
            $i$2 = $770;
           }
          }
         } while(0);
         __THREW__ = 0;
         (invoke_iii(61,(627385|0),($vararg_buffer671|0))|0);
         $771 = __THREW__; __THREW__ = 0;
         if ((($771|0) != 0) & ((threwValue|0) != 0)) { $772 = _testSetjmp(HEAP32[$771>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($772|0) == 0) { _longjmp($771|0, threwValue|0); } tempRet0 = (threwValue); } else { $772 = -1; };
         $773 = tempRet0;
         $cond128 = ($772|0)==(1);
         if ($cond128) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $773;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $c$3 = 0;
         while(1) {
          $774 = HEAP32[980>>2]|0;
          $775 = ($c$3>>>0)<($774>>>0);
          if (!($775)) {
           break;
          }
          $776 = (948 + ($c$3<<2)|0);
          $777 = +HEAPF32[$776>>2];
          $778 = $777;
          __THREW__ = 0;
          HEAPF64[$vararg_buffer673>>3] = $778;
          (invoke_iii(61,(612338|0),($vararg_buffer673|0))|0);
          $779 = __THREW__; __THREW__ = 0;
          if ((($779|0) != 0) & ((threwValue|0) != 0)) { $780 = _testSetjmp(HEAP32[$779>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($780|0) == 0) { _longjmp($779|0, threwValue|0); } tempRet0 = (threwValue); } else { $780 = -1; };
          $781 = tempRet0;
          $cond132 = ($780|0)==(1);
          if ($cond132) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $781;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
          $782 = (($c$3) + 1)|0;
          $c$3 = $782;
         }
         $783 = +HEAPF32[1528>>2];
         $784 = $783 > 0.0;
         L318: do {
          if ($784) {
           __THREW__ = 0;
           (invoke_iii(61,(627408|0),($vararg_buffer676|0))|0);
           $785 = __THREW__; __THREW__ = 0;
           if ((($785|0) != 0) & ((threwValue|0) != 0)) { $786 = _testSetjmp(HEAP32[$785>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($786|0) == 0) { _longjmp($785|0, threwValue|0); } tempRet0 = (threwValue); } else { $786 = -1; };
           $787 = tempRet0;
           $cond130 = ($786|0)==(1);
           if ($cond130) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $787;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           $c$4 = 0;
           while(1) {
            $788 = ($c$4|0)<(4);
            if (!($788)) {
             break L318;
            }
            $789 = (1528 + ($c$4<<2)|0);
            $790 = +HEAPF32[$789>>2];
            $791 = $790;
            __THREW__ = 0;
            HEAPF64[$vararg_buffer678>>3] = $791;
            (invoke_iii(61,(612338|0),($vararg_buffer678|0))|0);
            $792 = __THREW__; __THREW__ = 0;
            if ((($792|0) != 0) & ((threwValue|0) != 0)) { $793 = _testSetjmp(HEAP32[$792>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($793|0) == 0) { _longjmp($792|0, threwValue|0); } tempRet0 = (threwValue); } else { $793 = -1; };
            $794 = tempRet0;
            $cond131 = ($793|0)==(1);
            if ($cond131) {
             $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $794;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
             continue L141;
            }
            $795 = (($c$4) + 1)|0;
            $c$4 = $795;
           }
          }
         } while(0);
         __THREW__ = 0;
         (invoke_ii(81,10)|0);
         $796 = __THREW__; __THREW__ = 0;
         if ((($796|0) != 0) & ((threwValue|0) != 0)) { $797 = _testSetjmp(HEAP32[$796>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($797|0) == 0) { _longjmp($796|0, threwValue|0); } tempRet0 = (threwValue); } else { $797 = -1; };
         $798 = tempRet0;
         $cond129 = ($797|0)==(1);
         if ($cond129) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $798;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $status$3 = $status$2;
         break L174;
        }
        $807 = HEAP32[1684>>2]|0;
        $808 = ($807|0)!=(0);
        if ($808) {
         $809 = HEAP32[1684>>2]|0;
         __THREW__ = 0;
         $810 = (invoke_ii(83,($809|0))|0);
         $811 = __THREW__; __THREW__ = 0;
         if ((($811|0) != 0) & ((threwValue|0) != 0)) { $812 = _testSetjmp(HEAP32[$811>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($812|0) == 0) { _longjmp($811|0, threwValue|0); } tempRet0 = (threwValue); } else { $812 = -1; };
         $813 = tempRet0;
         $cond122 = ($812|0)==(1);
         if ($cond122) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $813;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         HEAP32[31024>>2] = $810;
         $814 = HEAP32[31024>>2]|0;
         __THREW__ = 0;
         invoke_vii(84,($814|0),(627451|0));
         $815 = __THREW__; __THREW__ = 0;
         if ((($815|0) != 0) & ((threwValue|0) != 0)) { $816 = _testSetjmp(HEAP32[$815>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($816|0) == 0) { _longjmp($815|0, threwValue|0); } tempRet0 = (threwValue); } else { $816 = -1; };
         $817 = tempRet0;
         $cond123 = ($816|0)==(1);
         if ($cond123) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $817;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $818 = HEAP32[776>>2]|0;
        $819 = ($818|0)!=(0);
        $820 = HEAP32[980>>2]|0;
        $821 = ($820|0)==(1);
        $or$cond7 = $819 | $821;
        if ($or$cond7) {
         $822 = HEAP16[580244>>1]|0;
         $823 = $822&65535;
         $824 = (($823) + 7)|0;
         $825 = HEAP16[580226>>1]|0;
         $826 = $825&65535;
         $827 = $826<<1;
         __THREW__ = 0;
         $828 = (invoke_iii(85,($824|0),($827|0))|0);
         $829 = __THREW__; __THREW__ = 0;
         if ((($829|0) != 0) & ((threwValue|0) != 0)) { $830 = _testSetjmp(HEAP32[$829>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($830|0) == 0) { _longjmp($829|0, threwValue|0); } tempRet0 = (threwValue); } else { $830 = -1; };
         $831 = tempRet0;
         $cond120 = ($830|0)==(1);
         if ($cond120) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $831;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         HEAP32[1032>>2] = $828;
         $832 = HEAP32[1032>>2]|0;
         __THREW__ = 0;
         invoke_vii(84,($832|0),(627451|0));
         $833 = __THREW__; __THREW__ = 0;
         if ((($833|0) != 0) & ((threwValue|0) != 0)) { $834 = _testSetjmp(HEAP32[$833>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($834|0) == 0) { _longjmp($833|0, threwValue|0); } tempRet0 = (threwValue); } else { $834 = -1; };
         $835 = tempRet0;
         $cond121 = ($834|0)==(1);
         if ($cond121) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $835;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        } else {
         $836 = HEAP16[589196>>1]|0;
         $837 = $836&65535;
         $838 = HEAP16[580080>>1]|0;
         $839 = $838&65535;
         $840 = $839<<3;
         __THREW__ = 0;
         $841 = (invoke_iii(85,($837|0),($840|0))|0);
         $842 = __THREW__; __THREW__ = 0;
         if ((($842|0) != 0) & ((threwValue|0) != 0)) { $843 = _testSetjmp(HEAP32[$842>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($843|0) == 0) { _longjmp($842|0, threwValue|0); } tempRet0 = (threwValue); } else { $843 = -1; };
         $844 = tempRet0;
         $cond71 = ($843|0)==(1);
         if ($cond71) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $844;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         HEAP32[972>>2] = $841;
         $845 = HEAP32[972>>2]|0;
         __THREW__ = 0;
         invoke_vii(84,($845|0),(627451|0));
         $846 = __THREW__; __THREW__ = 0;
         if ((($846|0) != 0) & ((threwValue|0) != 0)) { $847 = _testSetjmp(HEAP32[$846>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($847|0) == 0) { _longjmp($846|0, threwValue|0); } tempRet0 = (threwValue); } else { $847 = -1; };
         $848 = tempRet0;
         $cond72 = ($847|0)==(1);
         if ($cond72) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $848;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $849 = HEAP32[712>>2]|0;
        $850 = ($849|0)!=(0);
        if ($850) {
         $851 = HEAP32[447952>>2]|0;
         $852 = HEAP32[780>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer686>>2] = 594275;
         $vararg_ptr689 = ((($vararg_buffer686)) + 4|0);
         HEAP32[$vararg_ptr689>>2] = 594339;
         $vararg_ptr690 = ((($vararg_buffer686)) + 8|0);
         HEAP32[$vararg_ptr690>>2] = $852;
         (invoke_iiii(65,($851|0),(627458|0),($vararg_buffer686|0))|0);
         $853 = __THREW__; __THREW__ = 0;
         if ((($853|0) != 0) & ((threwValue|0) != 0)) { $854 = _testSetjmp(HEAP32[$853>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($854|0) == 0) { _longjmp($853|0, threwValue|0); } tempRet0 = (threwValue); } else { $854 = -1; };
         $855 = tempRet0;
         $cond119 = ($854|0)==(1);
         if ($cond119) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $855;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $856 = HEAP32[664>>2]|0;
        $857 = HEAP32[1508>>2]|0;
        $858 = ($856>>>0)>=($857>>>0);
        if ($858) {
         $859 = HEAP32[447952>>2]|0;
         $860 = HEAP32[780>>2]|0;
         $861 = HEAP32[664>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer691>>2] = $860;
         $vararg_ptr694 = ((($vararg_buffer691)) + 4|0);
         HEAP32[$vararg_ptr694>>2] = $861;
         (invoke_iiii(65,($859|0),(627491|0),($vararg_buffer691|0))|0);
         $862 = __THREW__; __THREW__ = 0;
         if ((($862|0) != 0) & ((threwValue|0) != 0)) { $863 = _testSetjmp(HEAP32[$862>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($863|0) == 0) { _longjmp($862|0, threwValue|0); } tempRet0 = (threwValue); } else { $863 = -1; };
         $864 = tempRet0;
         $cond118 = ($863|0)==(1);
         if ($cond118) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $864;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $865 = HEAP32[944>>2]|0;
        $866 = HEAP32[1524>>2]|0;
        __THREW__ = 0;
        (invoke_iiii(86,($865|0),($866|0),0)|0);
        $867 = __THREW__; __THREW__ = 0;
        if ((($867|0) != 0) & ((threwValue|0) != 0)) { $868 = _testSetjmp(HEAP32[$867>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($868|0) == 0) { _longjmp($867|0, threwValue|0); } tempRet0 = (threwValue); } else { $868 = -1; };
        $869 = tempRet0;
        $cond73 = ($868|0)==(1);
        if ($cond73) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $869;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $870 = HEAP32[1032>>2]|0;
        $871 = ($870|0)!=(0|0);
        $872 = ($read_from_stdin$2|0)!=(0);
        $or$cond9 = $871 & $872;
        if ($or$cond9) {
         $873 = HEAP32[1032>>2]|0;
         $874 = HEAP16[580244>>1]|0;
         $875 = $874&65535;
         $876 = HEAP16[580226>>1]|0;
         $877 = $876&65535;
         $878 = Math_imul($875, $877)|0;
         $879 = HEAP32[447956>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii(87,($873|0),2,($878|0),($879|0))|0);
         $880 = __THREW__; __THREW__ = 0;
         if ((($880|0) != 0) & ((threwValue|0) != 0)) { $881 = _testSetjmp(HEAP32[$880>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($881|0) == 0) { _longjmp($880|0, threwValue|0); } tempRet0 = (threwValue); } else { $881 = -1; };
         $882 = tempRet0;
         $cond117 = ($881|0)==(1);
         if ($cond117) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $882;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        } else {
         $883 = HEAP32[31028>>2]|0;
         __THREW__ = 0;
         invoke_v($883|0);
         $884 = __THREW__; __THREW__ = 0;
         if ((($884|0) != 0) & ((threwValue|0) != 0)) { $885 = _testSetjmp(HEAP32[$884>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($885|0) == 0) { _longjmp($884|0, threwValue|0); } tempRet0 = (threwValue); } else { $885 = -1; };
         $886 = tempRet0;
         $cond74 = ($885|0)==(1);
         if ($cond74) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $886;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $887 = HEAP32[704>>2]|0;
        $888 = ($887|0)==(3);
        if ($888) {
         HEAP16[589194>>1] = 0;
         HEAP16[448956>>1] = 0;
         HEAP16[448958>>1] = 0;
         $889 = HEAP16[580244>>1]|0;
         HEAP16[580074>>1] = $889;
         $890 = HEAP16[580226>>1]|0;
         HEAP16[580076>>1] = $890;
        }
        $891 = HEAP16[580074>>1]|0;
        $892 = $891&65535;
        $893 = HEAP16[580078>>1]|0;
        $894 = $893&65535;
        $895 = (($892) + ($894))|0;
        $896 = HEAP16[580078>>1]|0;
        $897 = $896&65535;
        $898 = $895 >> $897;
        $899 = $898&65535;
        HEAP16[589196>>1] = $899;
        $900 = HEAP16[580076>>1]|0;
        $901 = $900&65535;
        $902 = HEAP16[580078>>1]|0;
        $903 = $902&65535;
        $904 = (($901) + ($903))|0;
        $905 = HEAP16[580078>>1]|0;
        $906 = $905&65535;
        $907 = $904 >> $906;
        $908 = $907&65535;
        HEAP16[580080>>1] = $908;
        $909 = HEAP32[1032>>2]|0;
        $910 = ($909|0)!=(0|0);
        if ($910) {
         $911 = HEAP16[589196>>1]|0;
         $912 = $911&65535;
         $913 = HEAP16[580080>>1]|0;
         $914 = $913&65535;
         $915 = $914<<3;
         __THREW__ = 0;
         $916 = (invoke_iii(85,($912|0),($915|0))|0);
         $917 = __THREW__; __THREW__ = 0;
         if ((($917|0) != 0) & ((threwValue|0) != 0)) { $918 = _testSetjmp(HEAP32[$917>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($918|0) == 0) { _longjmp($917|0, threwValue|0); } tempRet0 = (threwValue); } else { $918 = -1; };
         $919 = tempRet0;
         $cond113 = ($918|0)==(1);
         if ($cond113) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $919;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         HEAP32[972>>2] = $916;
         $920 = HEAP32[972>>2]|0;
         __THREW__ = 0;
         invoke_vii(84,($920|0),(627451|0));
         $921 = __THREW__; __THREW__ = 0;
         if ((($921|0) != 0) & ((threwValue|0) != 0)) { $922 = _testSetjmp(HEAP32[$921>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($922|0) == 0) { _longjmp($921|0, threwValue|0); } tempRet0 = (threwValue); } else { $922 = -1; };
         $923 = tempRet0;
         $cond114 = ($922|0)==(1);
         if ($cond114) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $923;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         __THREW__ = 0;
         invoke_v(88);
         $924 = __THREW__; __THREW__ = 0;
         if ((($924|0) != 0) & ((threwValue|0) != 0)) { $925 = _testSetjmp(HEAP32[$924>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($925|0) == 0) { _longjmp($924|0, threwValue|0); } tempRet0 = (threwValue); } else { $925 = -1; };
         $926 = tempRet0;
         $cond115 = ($925|0)==(1);
         if ($cond115) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $926;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $927 = HEAP32[1032>>2]|0;
         __THREW__ = 0;
         invoke_vi(89,($927|0));
         $928 = __THREW__; __THREW__ = 0;
         if ((($928|0) != 0) & ((threwValue|0) != 0)) { $929 = _testSetjmp(HEAP32[$928>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($929|0) == 0) { _longjmp($928|0, threwValue|0); } tempRet0 = (threwValue); } else { $929 = -1; };
         $930 = tempRet0;
         $cond116 = ($929|0)==(1);
         if ($cond116) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $930;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $931 = HEAP32[316340>>2]|0;
        $932 = ($931|0)!=(0);
        if ($932) {
         __THREW__ = 0;
         invoke_v(90);
         $933 = __THREW__; __THREW__ = 0;
         if ((($933|0) != 0) & ((threwValue|0) != 0)) { $934 = _testSetjmp(HEAP32[$933>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($934|0) == 0) { _longjmp($933|0, threwValue|0); } tempRet0 = (threwValue); } else { $934 = -1; };
         $935 = tempRet0;
         $cond112 = ($934|0)==(1);
         if ($cond112) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $935;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        __THREW__ = 0;
        invoke_vi(91,($bpfile$2|0));
        $936 = __THREW__; __THREW__ = 0;
        if ((($936|0) != 0) & ((threwValue|0) != 0)) { $937 = _testSetjmp(HEAP32[$936>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($937|0) == 0) { _longjmp($936|0, threwValue|0); } tempRet0 = (threwValue); } else { $937 = -1; };
        $938 = tempRet0;
        $cond75 = ($937|0)==(1);
        if ($cond75) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $938;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $939 = ($dark_frame$2|0)!=(0|0);
        if ($939) {
         __THREW__ = 0;
         invoke_vi(92,($dark_frame$2|0));
         $940 = __THREW__; __THREW__ = 0;
         if ((($940|0) != 0) & ((threwValue|0) != 0)) { $941 = _testSetjmp(HEAP32[$940>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($941|0) == 0) { _longjmp($940|0, threwValue|0); } tempRet0 = (threwValue); } else { $941 = -1; };
         $942 = tempRet0;
         $cond111 = ($941|0)==(1);
         if ($cond111) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $942;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $943 = HEAP16[589194>>1]|0;
        $944 = ($943<<16>>16)!=(0);
        $945 = $944 ^ 1;
        $946 = $945&1;
        $947 = (2 + ($946))|0;
        $948 = ($user_qual$2|0)>=(0);
        if ($948) {
         $quality$0 = $user_qual$2;
        } else {
         $quality$0 = $947;
        }
        $949 = HEAP16[(580270)>>1]|0;
        $950 = $949&65535;
        $c$5 = 0;$i$3 = $950;
        while(1) {
         $951 = ($c$5|0)<(3);
         if (!($951)) {
          break;
         }
         $952 = (580264 + ($c$5<<1)|0);
         $953 = HEAP16[$952>>1]|0;
         $954 = $953&65535;
         $955 = ($i$3|0)>($954|0);
         if ($955) {
          $956 = (580264 + ($c$5<<1)|0);
          $957 = HEAP16[$956>>1]|0;
          $958 = $957&65535;
          $i$4 = $958;
         } else {
          $i$4 = $i$3;
         }
         $959 = (($c$5) + 1)|0;
         $c$5 = $959;$i$3 = $i$4;
        }
        $c$6 = 0;
        while(1) {
         $960 = ($c$6|0)<(4);
         if (!($960)) {
          break;
         }
         $961 = (580264 + ($c$6<<1)|0);
         $962 = HEAP16[$961>>1]|0;
         $963 = $962&65535;
         $964 = (($963) - ($i$3))|0;
         $965 = $964&65535;
         HEAP16[$961>>1] = $965;
         $966 = (($c$6) + 1)|0;
         $c$6 = $966;
        }
        $967 = HEAP32[1036>>2]|0;
        $968 = (($967) + ($i$3))|0;
        HEAP32[1036>>2] = $968;
        $969 = HEAP16[(580276)>>1]|0;
        $970 = $969&65535;
        $c$7 = 0;$i$5 = $970;
        while(1) {
         $971 = HEAP16[(580272)>>1]|0;
         $972 = $971&65535;
         $973 = HEAP16[(580274)>>1]|0;
         $974 = $973&65535;
         $975 = Math_imul($972, $974)|0;
         $976 = ($c$7|0)<($975|0);
         if (!($976)) {
          break;
         }
         $977 = (6 + ($c$7))|0;
         $978 = (580264 + ($977<<1)|0);
         $979 = HEAP16[$978>>1]|0;
         $980 = $979&65535;
         $981 = ($i$5|0)>($980|0);
         if ($981) {
          $982 = (6 + ($c$7))|0;
          $983 = (580264 + ($982<<1)|0);
          $984 = HEAP16[$983>>1]|0;
          $985 = $984&65535;
          $i$6 = $985;
         } else {
          $i$6 = $i$5;
         }
         $986 = (($c$7) + 1)|0;
         $c$7 = $986;$i$5 = $i$6;
        }
        $c$8 = 0;
        while(1) {
         $987 = HEAP16[(580272)>>1]|0;
         $988 = $987&65535;
         $989 = HEAP16[(580274)>>1]|0;
         $990 = $989&65535;
         $991 = Math_imul($988, $990)|0;
         $992 = ($c$8|0)<($991|0);
         if (!($992)) {
          break;
         }
         $993 = (6 + ($c$8))|0;
         $994 = (580264 + ($993<<1)|0);
         $995 = HEAP16[$994>>1]|0;
         $996 = $995&65535;
         $997 = (($996) - ($i$5))|0;
         $998 = $997&65535;
         HEAP16[$994>>1] = $998;
         $999 = (($c$8) + 1)|0;
         $c$8 = $999;
        }
        $1000 = HEAP32[1036>>2]|0;
        $1001 = (($1000) + ($i$5))|0;
        HEAP32[1036>>2] = $1001;
        $1002 = ($user_black$2|0)>=(0);
        if ($1002) {
         HEAP32[1036>>2] = $user_black$2;
        }
        $c$9 = 0;
        while(1) {
         $1003 = ($c$9|0)<(4);
         if (!($1003)) {
          break;
         }
         $1004 = HEAP32[1036>>2]|0;
         $1005 = (580264 + ($c$9<<1)|0);
         $1006 = HEAP16[$1005>>1]|0;
         $1007 = $1006&65535;
         $1008 = (($1007) + ($1004))|0;
         $1009 = $1008&65535;
         HEAP16[$1005>>1] = $1009;
         $1010 = (($c$9) + 1)|0;
         $c$9 = $1010;
        }
        $1011 = ($user_sat$2|0)>(0);
        if ($1011) {
         HEAP32[1040>>2] = $user_sat$2;
        }
        $1012 = HEAP32[294636>>2]|0;
        $1013 = ($1012|0)!=(0);
        $1014 = HEAP32[704>>2]|0;
        L410: do {
         if ($1013) {
          $1015 = ($1014|0)!=(0);
          $1016 = HEAP32[31028>>2]|0;
          $1017 = ($1016|0)==(41|0);
          $or$cond11 = $1015 | $1017;
          if (!($or$cond11)) {
           __THREW__ = 0;
           invoke_v(93);
           $1033 = __THREW__; __THREW__ = 0;
           if ((($1033|0) != 0) & ((threwValue|0) != 0)) { $1034 = _testSetjmp(HEAP32[$1033>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1034|0) == 0) { _longjmp($1033|0, threwValue|0); } tempRet0 = (threwValue); } else { $1034 = -1; };
           $1035 = tempRet0;
           $cond110 = ($1034|0)==(1);
           if ($cond110) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1035;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           break;
          }
          $i$7 = 0;
          while(1) {
           $1018 = HEAP16[580074>>1]|0;
           $1019 = $1018&65535;
           $1020 = HEAP16[580076>>1]|0;
           $1021 = $1020&65535;
           $1022 = Math_imul($1019, $1021)|0;
           $1023 = $1022<<2;
           $1024 = ($i$7|0)<($1023|0);
           if (!($1024)) {
            break L410;
           }
           $1025 = HEAP32[972>>2]|0;
           $1026 = (($1025) + ($i$7<<1)|0);
           $1027 = HEAP16[$1026>>1]|0;
           $1028 = $1027 << 16 >> 16;
           $1029 = ($1028|0)<(0);
           if ($1029) {
            $1030 = HEAP32[972>>2]|0;
            $1031 = (($1030) + ($i$7<<1)|0);
            HEAP16[$1031>>1] = 0;
           }
           $1032 = (($i$7) + 1)|0;
           $i$7 = $1032;
          }
         } else {
          $1036 = ($1014|0)<(2);
          if (!($1036)) {
           break;
          }
          __THREW__ = 0;
          invoke_v(94);
          $1037 = __THREW__; __THREW__ = 0;
          if ((($1037|0) != 0) & ((threwValue|0) != 0)) { $1038 = _testSetjmp(HEAP32[$1037>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1038|0) == 0) { _longjmp($1037|0, threwValue|0); } tempRet0 = (threwValue); } else { $1038 = -1; };
          $1039 = tempRet0;
          $cond109 = ($1038|0)==(1);
          if ($cond109) {
           $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1039;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
           continue L141;
          }
         }
        } while(0);
        __THREW__ = 0;
        invoke_v(95);
        $1040 = __THREW__; __THREW__ = 0;
        if ((($1040|0) != 0) & ((threwValue|0) != 0)) { $1041 = _testSetjmp(HEAP32[$1040>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1041|0) == 0) { _longjmp($1040|0, threwValue|0); } tempRet0 = (threwValue); } else { $1041 = -1; };
        $1042 = tempRet0;
        $cond76 = ($1041|0)==(1);
        if ($cond76) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1042;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $1043 = HEAP32[776>>2]|0;
        $1044 = ($1043|0)==(0);
        $1045 = HEAP32[704>>2]|0;
        $1046 = ($1045|0)!=(0);
        $or$cond13 = $1044 | $1046;
        do {
         if (!($or$cond13)) {
          $1047 = ($quality$0|0)==(0);
          if ($1047) {
           __THREW__ = 0;
           invoke_v(96);
           $1048 = __THREW__; __THREW__ = 0;
           if ((($1048|0) != 0) & ((threwValue|0) != 0)) { $1049 = _testSetjmp(HEAP32[$1048>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1049|0) == 0) { _longjmp($1048|0, threwValue|0); } tempRet0 = (threwValue); } else { $1049 = -1; };
           $1050 = tempRet0;
           $cond81 = ($1049|0)==(1);
           if ($cond81) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1050;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           break;
          }
          $1051 = ($quality$0|0)==(1);
          $1052 = HEAP32[980>>2]|0;
          $1053 = ($1052>>>0)>(3);
          $or$cond15 = $1051 | $1053;
          if ($or$cond15) {
           __THREW__ = 0;
           invoke_v(97);
           $1054 = __THREW__; __THREW__ = 0;
           if ((($1054|0) != 0) & ((threwValue|0) != 0)) { $1055 = _testSetjmp(HEAP32[$1054>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1055|0) == 0) { _longjmp($1054|0, threwValue|0); } tempRet0 = (threwValue); } else { $1055 = -1; };
           $1056 = tempRet0;
           $cond80 = ($1055|0)==(1);
           if ($cond80) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1056;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           break;
          }
          $1057 = ($quality$0|0)==(2);
          $1058 = HEAP32[776>>2]|0;
          $1059 = ($1058>>>0)>(1000);
          $or$cond17 = $1057 & $1059;
          if ($or$cond17) {
           __THREW__ = 0;
           invoke_v(98);
           $1060 = __THREW__; __THREW__ = 0;
           if ((($1060|0) != 0) & ((threwValue|0) != 0)) { $1061 = _testSetjmp(HEAP32[$1060>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1061|0) == 0) { _longjmp($1060|0, threwValue|0); } tempRet0 = (threwValue); } else { $1061 = -1; };
           $1062 = tempRet0;
           $cond79 = ($1061|0)==(1);
           if ($cond79) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1062;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           break;
          }
          $1063 = HEAP32[776>>2]|0;
          $1064 = ($1063|0)==(9);
          if ($1064) {
           $1065 = $quality$0<<1;
           $1066 = (($1065) - 3)|0;
           __THREW__ = 0;
           invoke_vi(99,($1066|0));
           $1067 = __THREW__; __THREW__ = 0;
           if ((($1067|0) != 0) & ((threwValue|0) != 0)) { $1068 = _testSetjmp(HEAP32[$1067>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1068|0) == 0) { _longjmp($1067|0, threwValue|0); } tempRet0 = (threwValue); } else { $1068 = -1; };
           $1069 = tempRet0;
           $cond78 = ($1068|0)==(1);
           if ($cond78) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1069;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           break;
          } else {
           __THREW__ = 0;
           invoke_v(100);
           $1070 = __THREW__; __THREW__ = 0;
           if ((($1070|0) != 0) & ((threwValue|0) != 0)) { $1071 = _testSetjmp(HEAP32[$1070>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1071|0) == 0) { _longjmp($1070|0, threwValue|0); } tempRet0 = (threwValue); } else { $1071 = -1; };
           $1072 = tempRet0;
           $cond77 = ($1071|0)==(1);
           if ($cond77) {
            $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1072;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
            continue L141;
           }
           break;
          }
         }
        } while(0);
        $1073 = HEAP32[1788>>2]|0;
        $1074 = ($1073|0)!=(0);
        L447: do {
         if ($1074) {
          HEAP32[980>>2] = 3;
          $i$8 = 0;
          while(1) {
           $1075 = HEAP16[580074>>1]|0;
           $1076 = $1075&65535;
           $1077 = HEAP16[580076>>1]|0;
           $1078 = $1077&65535;
           $1079 = Math_imul($1076, $1078)|0;
           $1080 = ($i$8|0)<($1079|0);
           if (!($1080)) {
            break L447;
           }
           $1081 = HEAP32[972>>2]|0;
           $1082 = (($1081) + ($i$8<<3)|0);
           $1083 = ((($1082)) + 2|0);
           $1084 = HEAP16[$1083>>1]|0;
           $1085 = $1084&65535;
           $1086 = HEAP32[972>>2]|0;
           $1087 = (($1086) + ($i$8<<3)|0);
           $1088 = ((($1087)) + 6|0);
           $1089 = HEAP16[$1088>>1]|0;
           $1090 = $1089&65535;
           $1091 = (($1085) + ($1090))|0;
           $1092 = $1091 >> 1;
           $1093 = $1092&65535;
           $1094 = HEAP32[972>>2]|0;
           $1095 = (($1094) + ($i$8<<3)|0);
           $1096 = ((($1095)) + 2|0);
           HEAP16[$1096>>1] = $1093;
           $1097 = (($i$8) + 1)|0;
           $i$8 = $1097;
          }
         }
        } while(0);
        $1098 = HEAP32[294636>>2]|0;
        $1099 = ($1098|0)==(0);
        $1100 = HEAP32[980>>2]|0;
        $1101 = ($1100|0)==(3);
        $or$cond19 = $1099 & $1101;
        if ($or$cond19) {
         __THREW__ = 0;
         invoke_v(101);
         $1102 = __THREW__; __THREW__ = 0;
         if ((($1102|0) != 0) & ((threwValue|0) != 0)) { $1103 = _testSetjmp(HEAP32[$1102>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1103|0) == 0) { _longjmp($1102|0, threwValue|0); } tempRet0 = (threwValue); } else { $1103 = -1; };
         $1104 = tempRet0;
         $cond108 = ($1103|0)==(1);
         if ($cond108) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1104;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $1105 = HEAP32[294636>>2]|0;
        $1106 = ($1105|0)==(0);
        $1107 = HEAP32[708>>2]|0;
        $1108 = ($1107|0)==(2);
        $or$cond21 = $1106 & $1108;
        if ($or$cond21) {
         __THREW__ = 0;
         invoke_v(102);
         $1109 = __THREW__; __THREW__ = 0;
         if ((($1109|0) != 0) & ((threwValue|0) != 0)) { $1110 = _testSetjmp(HEAP32[$1109>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1110|0) == 0) { _longjmp($1109|0, threwValue|0); } tempRet0 = (threwValue); } else { $1110 = -1; };
         $1111 = tempRet0;
         $cond107 = ($1110|0)==(1);
         if ($cond107) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1111;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $1112 = HEAP32[294636>>2]|0;
        $1113 = ($1112|0)==(0);
        $1114 = HEAP32[708>>2]|0;
        $1115 = ($1114|0)>(2);
        $or$cond23 = $1113 & $1115;
        if ($or$cond23) {
         __THREW__ = 0;
         invoke_v(103);
         $1116 = __THREW__; __THREW__ = 0;
         if ((($1116|0) != 0) & ((threwValue|0) != 0)) { $1117 = _testSetjmp(HEAP32[$1116>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1117|0) == 0) { _longjmp($1116|0, threwValue|0); } tempRet0 = (threwValue); } else { $1117 = -1; };
         $1118 = tempRet0;
         $cond106 = ($1117|0)==(1);
         if ($cond106) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1118;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $1119 = ($use_fuji_rotate$2|0)!=(0);
        if ($1119) {
         __THREW__ = 0;
         invoke_v(104);
         $1120 = __THREW__; __THREW__ = 0;
         if ((($1120|0) != 0) & ((threwValue|0) != 0)) { $1121 = _testSetjmp(HEAP32[$1120>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1121|0) == 0) { _longjmp($1120|0, threwValue|0); } tempRet0 = (threwValue); } else { $1121 = -1; };
         $1122 = tempRet0;
         $cond105 = ($1121|0)==(1);
         if ($cond105) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1122;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        __THREW__ = 0;
        invoke_v(105);
        $1123 = __THREW__; __THREW__ = 0;
        if ((($1123|0) != 0) & ((threwValue|0) != 0)) { $1124 = _testSetjmp(HEAP32[$1123>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1124|0) == 0) { _longjmp($1123|0, threwValue|0); } tempRet0 = (threwValue); } else { $1124 = -1; };
        $1125 = tempRet0;
        $cond82 = ($1124|0)==(1);
        if ($cond82) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1125;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $1126 = ($use_fuji_rotate$2|0)!=(0);
        if (!($1126)) {
         $status$4 = $status$2;
         break;
        }
        __THREW__ = 0;
        invoke_v(106);
        $1127 = __THREW__; __THREW__ = 0;
        if ((($1127|0) != 0) & ((threwValue|0) != 0)) { $1128 = _testSetjmp(HEAP32[$1127>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1128|0) == 0) { _longjmp($1127|0, threwValue|0); } tempRet0 = (threwValue); } else { $1128 = -1; };
        $1129 = tempRet0;
        $cond104 = ($1128|0)==(1);
        if ($cond104) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1129;$status$1 = $status$2;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $status$4 = $status$2;
       }
      } while(0);
      $1130 = HEAP32[447700>>2]|0;
      $1131 = ($1130|0)==(42|0);
      do {
       if ($1131) {
        $write_ext$0 = 615197;
       } else {
        $1132 = HEAP32[736>>2]|0;
        $1133 = ($1132|0)!=(0);
        $1134 = HEAP32[447700>>2]|0;
        $1135 = ($1134|0)==(77|0);
        $or$cond25 = $1133 & $1135;
        if ($or$cond25) {
         $write_ext$0 = 627534;
         break;
        } else {
         $1136 = HEAP32[980>>2]|0;
         $1137 = ($1136*5)|0;
         $1138 = (627540 + ($1137)|0);
         $1139 = ((($1138)) + -5|0);
         $write_ext$0 = $1139;
         break;
        }
       }
      } while(0);
      $1140 = HEAP32[780>>2]|0;
      __THREW__ = 0;
      $1141 = (invoke_ii(107,($1140|0))|0);
      $1142 = __THREW__; __THREW__ = 0;
      if ((($1142|0) != 0) & ((threwValue|0) != 0)) { $1143 = _testSetjmp(HEAP32[$1142>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1143|0) == 0) { _longjmp($1142|0, threwValue|0); } tempRet0 = (threwValue); } else { $1143 = -1; };
      $1144 = tempRet0;
      $cond83 = ($1143|0)==(1);
      if ($cond83) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1144;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      $1145 = (($1141) + 64)|0;
      __THREW__ = 0;
      $1146 = (invoke_ii(83,($1145|0))|0);
      $1147 = __THREW__; __THREW__ = 0;
      if ((($1147|0) != 0) & ((threwValue|0) != 0)) { $1148 = _testSetjmp(HEAP32[$1147>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1148|0) == 0) { _longjmp($1147|0, threwValue|0); } tempRet0 = (threwValue); } else { $1148 = -1; };
      $1149 = tempRet0;
      $cond84 = ($1148|0)==(1);
      if ($cond84) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1149;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      __THREW__ = 0;
      invoke_vii(84,($1146|0),(627451|0));
      $1150 = __THREW__; __THREW__ = 0;
      if ((($1150|0) != 0) & ((threwValue|0) != 0)) { $1151 = _testSetjmp(HEAP32[$1150>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1151|0) == 0) { _longjmp($1150|0, threwValue|0); } tempRet0 = (threwValue); } else { $1151 = -1; };
      $1152 = tempRet0;
      $cond85 = ($1151|0)==(1);
      if ($cond85) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1152;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      $1153 = ($write_to_stdout$2|0)!=(0);
      do {
       if ($1153) {
        __THREW__ = 0;
        (invoke_iii(108,($1146|0),(627560|0))|0);
        $1154 = __THREW__; __THREW__ = 0;
        if ((($1154|0) != 0) & ((threwValue|0) != 0)) { $1155 = _testSetjmp(HEAP32[$1154>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1155|0) == 0) { _longjmp($1154|0, threwValue|0); } tempRet0 = (threwValue); } else { $1155 = -1; };
        $1156 = tempRet0;
        $cond103 = ($1155|0)==(1);
        if ($cond103) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1156;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
       } else {
        $1157 = HEAP32[780>>2]|0;
        __THREW__ = 0;
        (invoke_iii(108,($1146|0),($1157|0))|0);
        $1158 = __THREW__; __THREW__ = 0;
        if ((($1158|0) != 0) & ((threwValue|0) != 0)) { $1159 = _testSetjmp(HEAP32[$1158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1159|0) == 0) { _longjmp($1158|0, threwValue|0); } tempRet0 = (threwValue); } else { $1159 = -1; };
        $1160 = tempRet0;
        $cond86 = ($1159|0)==(1);
        if ($cond86) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1160;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        __THREW__ = 0;
        $1161 = (invoke_iii(109,($1146|0),46)|0);
        $1162 = __THREW__; __THREW__ = 0;
        if ((($1162|0) != 0) & ((threwValue|0) != 0)) { $1163 = _testSetjmp(HEAP32[$1162>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1163|0) == 0) { _longjmp($1162|0, threwValue|0); } tempRet0 = (threwValue); } else { $1163 = -1; };
        $1164 = tempRet0;
        $cond87 = ($1163|0)==(1);
        if ($cond87) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1164;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $1165 = ($1161|0)!=(0|0);
        if ($1165) {
         HEAP8[$1161>>0] = 0;
        }
        $1166 = HEAP32[668>>2]|0;
        $1167 = ($1166|0)!=(0);
        if ($1167) {
         __THREW__ = 0;
         $1168 = (invoke_ii(107,($1146|0))|0);
         $1169 = __THREW__; __THREW__ = 0;
         if ((($1169|0) != 0) & ((threwValue|0) != 0)) { $1170 = _testSetjmp(HEAP32[$1169>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1170|0) == 0) { _longjmp($1169|0, threwValue|0); } tempRet0 = (threwValue); } else { $1170 = -1; };
         $1171 = tempRet0;
         $cond100 = ($1170|0)==(1);
         if ($cond100) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1171;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $1172 = (($1146) + ($1168)|0);
         $1173 = HEAP32[1508>>2]|0;
         $1174 = (($1173) - 1)|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer695>>2] = $1174;
         $1175 = (invoke_iiiii(110,(0|0),0,(614269|0),($vararg_buffer695|0))|0);
         $1176 = __THREW__; __THREW__ = 0;
         if ((($1176|0) != 0) & ((threwValue|0) != 0)) { $1177 = _testSetjmp(HEAP32[$1176>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1177|0) == 0) { _longjmp($1176|0, threwValue|0); } tempRet0 = (threwValue); } else { $1177 = -1; };
         $1178 = tempRet0;
         $cond101 = ($1177|0)==(1);
         if ($cond101) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1178;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
         $1179 = HEAP32[664>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer698>>2] = $1175;
         $vararg_ptr701 = ((($vararg_buffer698)) + 4|0);
         HEAP32[$vararg_ptr701>>2] = $1179;
         (invoke_iiii(111,($1172|0),(627576|0),($vararg_buffer698|0))|0);
         $1180 = __THREW__; __THREW__ = 0;
         if ((($1180|0) != 0) & ((threwValue|0) != 0)) { $1181 = _testSetjmp(HEAP32[$1180>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1181|0) == 0) { _longjmp($1180|0, threwValue|0); } tempRet0 = (threwValue); } else { $1181 = -1; };
         $1182 = tempRet0;
         $cond102 = ($1181|0)==(1);
         if ($cond102) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1182;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        $1183 = ($thumbnail_only$2|0)!=(0);
        if ($1183) {
         __THREW__ = 0;
         (invoke_iii(112,($1146|0),(627582|0))|0);
         $1184 = __THREW__; __THREW__ = 0;
         if ((($1184|0) != 0) & ((threwValue|0) != 0)) { $1185 = _testSetjmp(HEAP32[$1184>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1185|0) == 0) { _longjmp($1184|0, threwValue|0); } tempRet0 = (threwValue); } else { $1185 = -1; };
         $1186 = tempRet0;
         $cond99 = ($1185|0)==(1);
         if ($cond99) {
          $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1186;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
          continue L141;
         }
        }
        __THREW__ = 0;
        (invoke_iii(112,($1146|0),($write_ext$0|0))|0);
        $1187 = __THREW__; __THREW__ = 0;
        if ((($1187|0) != 0) & ((threwValue|0) != 0)) { $1188 = _testSetjmp(HEAP32[$1187>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1188|0) == 0) { _longjmp($1187|0, threwValue|0); } tempRet0 = (threwValue); } else { $1188 = -1; };
        $1189 = tempRet0;
        $cond88 = ($1188|0)==(1);
        if ($cond88) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1189;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        __THREW__ = 0;
        $1190 = (invoke_iii(73,($1146|0),(627589|0))|0);
        $1191 = __THREW__; __THREW__ = 0;
        if ((($1191|0) != 0) & ((threwValue|0) != 0)) { $1192 = _testSetjmp(HEAP32[$1191>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1192|0) == 0) { _longjmp($1191|0, threwValue|0); } tempRet0 = (threwValue); } else { $1192 = -1; };
        $1193 = tempRet0;
        $cond89 = ($1192|0)==(1);
        if ($cond89) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1193;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        HEAP32[1676>>2] = $1190;
        $1194 = HEAP32[1676>>2]|0;
        $1195 = ($1194|0)!=(0|0);
        if ($1195) {
         break;
        }
        __THREW__ = 0;
        invoke_vi(74,($1146|0));
        $1196 = __THREW__; __THREW__ = 0;
        if ((($1196|0) != 0) & ((threwValue|0) != 0)) { $1197 = _testSetjmp(HEAP32[$1196>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1197|0) == 0) { _longjmp($1196|0, threwValue|0); } tempRet0 = (threwValue); } else { $1197 = -1; };
        $1198 = tempRet0;
        $cond90 = ($1197|0)==(1);
        if ($cond90) {
         $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1198;$ofname$0 = $1146;$status$1 = 1;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
         continue L141;
        }
        $ofname$1 = $1146;$status$5 = 1;
        label = 416;
        break L147;
       }
      } while(0);
      $1199 = HEAP32[712>>2]|0;
      $1200 = ($1199|0)!=(0);
      if ($1200) {
       $1201 = HEAP32[447952>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer702>>2] = $1146;
       (invoke_iiii(65,($1201|0),(627592|0),($vararg_buffer702|0))|0);
       $1202 = __THREW__; __THREW__ = 0;
       if ((($1202|0) != 0) & ((threwValue|0) != 0)) { $1203 = _testSetjmp(HEAP32[$1202>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1203|0) == 0) { _longjmp($1202|0, threwValue|0); } tempRet0 = (threwValue); } else { $1203 = -1; };
       $1204 = tempRet0;
       $cond98 = ($1203|0)==(1);
       if ($cond98) {
        $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1204;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
        continue L141;
       }
      }
      $1205 = HEAP32[447700>>2]|0;
      __THREW__ = 0;
      invoke_v($1205|0);
      $1206 = __THREW__; __THREW__ = 0;
      if ((($1206|0) != 0) & ((threwValue|0) != 0)) { $1207 = _testSetjmp(HEAP32[$1206>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1207|0) == 0) { _longjmp($1206|0, threwValue|0); } tempRet0 = (threwValue); } else { $1207 = -1; };
      $1208 = tempRet0;
      $cond95 = ($1207|0)==(1);
      if ($cond95) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1208;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      $1209 = HEAP32[944>>2]|0;
      __THREW__ = 0;
      (invoke_ii(72,($1209|0))|0);
      $1210 = __THREW__; __THREW__ = 0;
      if ((($1210|0) != 0) & ((threwValue|0) != 0)) { $1211 = _testSetjmp(HEAP32[$1210>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1211|0) == 0) { _longjmp($1210|0, threwValue|0); } tempRet0 = (threwValue); } else { $1211 = -1; };
      $1212 = tempRet0;
      $cond96 = ($1211|0)==(1);
      if ($cond96) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1212;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      $1213 = HEAP32[1676>>2]|0;
      $1214 = HEAP32[447960>>2]|0;
      $1215 = ($1213|0)!=($1214|0);
      if (!($1215)) {
       $ofname$1 = $1146;$status$5 = $status$4;
       label = 416;
       break L147;
      }
      $1216 = HEAP32[1676>>2]|0;
      __THREW__ = 0;
      (invoke_ii(72,($1216|0))|0);
      $1217 = __THREW__; __THREW__ = 0;
      if ((($1217|0) != 0) & ((threwValue|0) != 0)) { $1218 = _testSetjmp(HEAP32[$1217>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1218|0) == 0) { _longjmp($1217|0, threwValue|0); } tempRet0 = (threwValue); } else { $1218 = -1; };
      $1219 = tempRet0;
      $cond97 = ($1218|0)==(1);
      if ($cond97) {
       $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1219;$ofname$0 = $1146;$status$1 = $status$4;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
       continue L141;
      }
      $ofname$1 = $1146;$status$5 = $status$4;
      label = 416;
      break L147;
     }
    } while(0);
    $803 = HEAP32[944>>2]|0;
    __THREW__ = 0;
    (invoke_ii(72,($803|0))|0);
    $804 = __THREW__; __THREW__ = 0;
    if ((($804|0) != 0) & ((threwValue|0) != 0)) { $805 = _testSetjmp(HEAP32[$804>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($805|0) == 0) { _longjmp($804|0, threwValue|0); } tempRet0 = (threwValue); } else { $805 = -1; };
    $806 = tempRet0;
    $cond70 = ($805|0)==(1);
    if ($cond70) {
     $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$ofname$0$phi = $ofname$0;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $806;$status$1 = $status$3;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$ofname$0 = $ofname$0$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
     continue L141;
    }
    $arg$6 = $arg$5;$status$6 = $status$3;
   }
  } while(0);
  do {
   if ((label|0) == 416) {
    label = 0;
    $1220 = HEAP32[31024>>2]|0;
    $1221 = ($1220|0)!=(0|0);
    if ($1221) {
     $1222 = HEAP32[31024>>2]|0;
     __THREW__ = 0;
     invoke_vi(89,($1222|0));
     $1223 = __THREW__; __THREW__ = 0;
     if ((($1223|0) != 0) & ((threwValue|0) != 0)) { $1224 = _testSetjmp(HEAP32[$1223>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1224|0) == 0) { _longjmp($1223|0, threwValue|0); } tempRet0 = (threwValue); } else { $1224 = -1; };
     $1225 = tempRet0;
     $cond94 = ($1224|0)==(1);
     if ($cond94) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1225;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
    }
    $1226 = ($ofname$1|0)!=(0|0);
    if ($1226) {
     __THREW__ = 0;
     invoke_vi(89,($ofname$1|0));
     $1227 = __THREW__; __THREW__ = 0;
     if ((($1227|0) != 0) & ((threwValue|0) != 0)) { $1228 = _testSetjmp(HEAP32[$1227>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1228|0) == 0) { _longjmp($1227|0, threwValue|0); } tempRet0 = (threwValue); } else { $1228 = -1; };
     $1229 = tempRet0;
     $cond93 = ($1228|0)==(1);
     if ($cond93) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1229;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
    }
    $1230 = HEAP32[316624>>2]|0;
    $1231 = ($1230|0)!=(0|0);
    if ($1231) {
     $1232 = HEAP32[316624>>2]|0;
     __THREW__ = 0;
     invoke_vi(89,($1232|0));
     $1233 = __THREW__; __THREW__ = 0;
     if ((($1233|0) != 0) & ((threwValue|0) != 0)) { $1234 = _testSetjmp(HEAP32[$1233>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1234|0) == 0) { _longjmp($1233|0, threwValue|0); } tempRet0 = (threwValue); } else { $1234 = -1; };
     $1235 = tempRet0;
     $cond92 = ($1234|0)==(1);
     if ($cond92) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1235;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
    }
    $1236 = HEAP32[972>>2]|0;
    $1237 = ($1236|0)!=(0|0);
    if ($1237) {
     $1238 = HEAP32[972>>2]|0;
     __THREW__ = 0;
     invoke_vi(89,($1238|0));
     $1239 = __THREW__; __THREW__ = 0;
     if ((($1239|0) != 0) & ((threwValue|0) != 0)) { $1240 = _testSetjmp(HEAP32[$1239>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1240|0) == 0) { _longjmp($1239|0, threwValue|0); } tempRet0 = (threwValue); } else { $1240 = -1; };
     $1241 = tempRet0;
     $cond91 = ($1240|0)==(1);
     if ($cond91) {
      $write_to_stdout$2$phi = $write_to_stdout$2;$user_sat$2$phi = $user_sat$2;$user_qual$2$phi = $user_qual$2;$user_flip$2$phi = $user_flip$2;$user_black$2$phi = $user_black$2;$use_fuji_rotate$2$phi = $use_fuji_rotate$2;$timestamp_only$2$phi = $timestamp_only$2;$thumbnail_only$2$phi = $thumbnail_only$2;$read_from_stdin$2$phi = $read_from_stdin$2;$identify_only$2$phi = $identify_only$2;$dark_frame$2$phi = $dark_frame$2;$bpfile$2$phi = $bpfile$2;$arg$5$phi = $arg$5;$$reg2mem571$0 = $1241;$ofname$0 = $ofname$1;$status$1 = $status$5;$write_to_stdout$2 = $write_to_stdout$2$phi;$user_sat$2 = $user_sat$2$phi;$user_qual$2 = $user_qual$2$phi;$user_flip$2 = $user_flip$2$phi;$user_black$2 = $user_black$2$phi;$use_fuji_rotate$2 = $use_fuji_rotate$2$phi;$timestamp_only$2 = $timestamp_only$2$phi;$thumbnail_only$2 = $thumbnail_only$2$phi;$read_from_stdin$2 = $read_from_stdin$2$phi;$identify_only$2 = $identify_only$2$phi;$dark_frame$2 = $dark_frame$2$phi;$bpfile$2 = $bpfile$2$phi;$arg$5 = $arg$5$phi;
      continue L141;
     }
    }
    $1242 = HEAP32[668>>2]|0;
    $1243 = ($1242|0)!=(0);
    if ($1243) {
     $1244 = HEAP32[664>>2]|0;
     $1245 = (($1244) + 1)|0;
     HEAP32[664>>2] = $1245;
     $1246 = HEAP32[1508>>2]|0;
     $1247 = ($1245>>>0)<($1246>>>0);
     if ($1247) {
      $1248 = (($arg$5) + -1)|0;
      $arg$6 = $1248;$status$6 = $status$5;
      break;
     } else {
      HEAP32[664>>2] = 0;
      $arg$6 = $arg$5;$status$6 = $status$5;
      break;
     }
    } else {
     $arg$6 = $arg$5;$status$6 = $status$5;
    }
   }
  } while(0);
  $1249 = (($arg$6) + 1)|0;
  $arg$4 = $1249;$bpfile$1 = $bpfile$2;$dark_frame$1 = $dark_frame$2;$identify_only$1 = $identify_only$2;$read_from_stdin$1 = $read_from_stdin$2;$status$0 = $status$6;$thumbnail_only$1 = $thumbnail_only$2;$timestamp_only$1 = $timestamp_only$2;$use_fuji_rotate$1 = $use_fuji_rotate$2;$user_black$1 = $user_black$2;$user_flip$1 = $user_flip$2;$user_qual$1 = $user_qual$2;$user_sat$1 = $user_sat$2;$write_to_stdout$1 = $write_to_stdout$2;
  label = 125;
 }
 $$0 = $status$0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[447704>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 447968;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (627616 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 627704;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 627704;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 627704;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (629508 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (632423 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $77 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $77 = $75;
      }
      $76 = ($77|0)==(40);
      if ($76) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $159 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $159 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $158 = ($159|0)==(48);
           if ($158) {
            $154 = $156;$155 = $157;
           } else {
            $169 = 0;$171 = 0;$694 = $156;$695 = $157;$c$2$i = $159;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $169 = 0;$171 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $171;$697 = $169;$698 = $171;$699 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $213 = $171;$214 = $694;$216 = $169;$217 = $695;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $168 = ($169|0)<(0);
          $170 = ($171>>>0)<(8);
          $172 = ($169|0)==(0);
          $173 = $172 & $170;
          $174 = $168 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($169|0)<(0);
            $178 = ($171>>>0)<(14);
            $179 = ($169|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($171|0),($169|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $169 = $699;$171 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $212 = $211 ? $213 : $214;
        $215 = $211 ? $216 : $217;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($212|0),($215|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$394 = $708;$395 = $706;$397 = $709;$398 = $707;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$394 = 0;$395 = $700;$397 = 0;$398 = $701;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $393 = $392 ? $394 : $395;
        $396 = $392 ? $397 : $398;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $393;$717 = $396;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $393;$723 = $396;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($393|0),($396|0))|0);
        $415 = tempRet0;
        $427 = $414;$428 = $394;$430 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $427 = $716;$428 = $714;$430 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $427 = $722;$428 = $719;$430 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $426 = ($427|0)==($428|0);
        $429 = ($430|0)==($431|0);
        $432 = $426 & $429;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($430|0)>($446|0);
        $448 = ($427>>>0)>($444>>>0);
        $449 = ($430|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($430|0)<($458|0);
        $460 = ($427>>>0)<($456>>>0);
        $461 = ($430|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($427|0);
         $477 = ($427|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($427|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($427|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($427))|0;
           $489 = (447972 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($427, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($427) + -10)|0;
           $502 = (447972 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($427|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $427;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($427|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (447972 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $427;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $427;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $604 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $603 = ($604|0)==($a$5$i$lcssa|0);
          if (!($603)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $604;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($604) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $604;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (629517 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (629517 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$90 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $89 = ($90|0)<(0);
       $91 = $89 << 31 >> 31;
       $92 = $90 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $90;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($90|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$90 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $260 = $291;$262 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $260 = $289;$262 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (629774 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (629517 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (629517 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$155 = 0;$157 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$155 = 0;$157 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $154 = ($155>>>0)>($150>>>0);
      $156 = ($157>>>0)>($149>>>0);
      $158 = ($155|0)==($150|0);
      $159 = $158 & $156;
      $160 = $154 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $157;$293 = $155;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $157;$162 = $155;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (629517 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (629517 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (629517 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $206 = $295;$208 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $205 = ($206>>>0)>($204>>>0);
       $207 = ($208>>>0)>($203>>>0);
       $209 = ($206|0)==($204|0);
       $210 = $209 & $207;
       $211 = $205 | $210;
       if ($211) {
        $$122 = $$123;$292 = $208;$293 = $206;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($208|0),($206|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $208;$293 = $206;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (629517 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $206 = $223;$208 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (629517 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (629517 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $260 = $1;$262 = $0;$neg$1 = $neg$0$;
    } else {
     $260 = $293;$262 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $259 = ($260>>>0)<($1>>>0);
   $261 = ($262>>>0)<($0>>>0);
   $263 = ($260|0)==($1|0);
   $264 = $263 & $261;
   $265 = $259 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($260>>>0)>($1>>>0);
    $275 = ($262>>>0)>($0>>>0);
    $276 = ($260|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $262 ^ $neg$1;
   $283 = $260 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $28 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $28 = $41;
   }
   $27 = ($28|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($27)) {
    $29 = $28;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0;
 var $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(1078159481);
 do {
  if ($5) {
   $6 = $1 & 2147483647;
   $7 = ($6>>>0)>(2146435072);
   $8 = ($0>>>0)>(0);
   $9 = ($6|0)==(2146435072);
   $10 = $9 & $8;
   $11 = $7 | $10;
   if ($11) {
    $$0 = $x;
   } else {
    $12 = ($3|0)==(0);
    if ($12) {
     $13 = $x > 709.78271289338397;
     if ($13) {
      $14 = $x * 8.9884656743115795E+307;
      $$0 = $14;
     } else {
      label = 11;
     }
    } else {
     $$0 = -1.0;
    }
   }
  } else {
   $15 = ($2>>>0)>(1071001154);
   if (!($15)) {
    $32 = ($2>>>0)<(1016070144);
    if ($32) {
     $$0 = $x;
     break;
    } else {
     $$02 = $x;$c$0 = 0.0;$k$1 = 0;
     label = 14;
     break;
    }
   }
   $16 = ($2>>>0)<(1072734898);
   if ($16) {
    $17 = ($3|0)==(0);
    if ($17) {
     $18 = $x + -0.69314718036912382;
     $hi$0 = $18;$k$0 = 1;$lo$0 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $19 = $x + 0.69314718036912382;
     $hi$0 = $19;$k$0 = -1;$lo$0 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   } else {
    label = 11;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $20 = $x * 1.4426950408889634;
  $21 = ($3|0)!=(0);
  $22 = $21 ? -0.5 : 0.5;
  $23 = $20 + $22;
  $24 = (~~(($23)));
  $25 = (+($24|0));
  $26 = $25 * 0.69314718036912382;
  $27 = $x - $26;
  $28 = $25 * 1.9082149292705877E-10;
  $hi$0 = $27;$k$0 = $24;$lo$0 = $28;
  label = 12;
 }
 if ((label|0) == 12) {
  $29 = $hi$0 - $lo$0;
  $30 = $hi$0 - $29;
  $31 = $30 - $lo$0;
  $$02 = $29;$c$0 = $31;$k$1 = $k$0;
  label = 14;
 }
 L18: do {
  if ((label|0) == 14) {
   $33 = $$02 * 0.5;
   $34 = $$02 * $33;
   $35 = $34 * 2.0109921818362437E-7;
   $36 = 4.0082178273293624E-6 - $35;
   $37 = $34 * $36;
   $38 = $37 + -7.9365075786748794E-5;
   $39 = $34 * $38;
   $40 = $39 + 0.0015873015872548146;
   $41 = $34 * $40;
   $42 = $41 + -0.033333333333333132;
   $43 = $34 * $42;
   $44 = $43 + 1.0;
   $45 = $33 * $44;
   $46 = 3.0 - $45;
   $47 = $44 - $46;
   $48 = $$02 * $46;
   $49 = 6.0 - $48;
   $50 = $47 / $49;
   $51 = $34 * $50;
   $52 = ($k$1|0)==(0);
   if ($52) {
    $53 = $$02 * $51;
    $54 = $53 - $34;
    $55 = $$02 - $54;
    $$0 = $55;
    break;
   }
   $56 = $51 - $c$0;
   $57 = $$02 * $56;
   $58 = $57 - $c$0;
   $59 = $58 - $34;
   switch ($k$1|0) {
   case -1:  {
    $60 = $$02 - $59;
    $61 = $60 * 0.5;
    $62 = $61 + -0.5;
    $$0 = $62;
    break L18;
    break;
   }
   case 1:  {
    $63 = $$02 < -0.25;
    if ($63) {
     $64 = $$02 + 0.5;
     $65 = $59 - $64;
     $66 = $65 * -2.0;
     $$0 = $66;
     break L18;
    } else {
     $67 = $$02 - $59;
     $68 = $67 * 2.0;
     $69 = $68 + 1.0;
     $$0 = $69;
     break L18;
    }
    break;
   }
   default: {
    $70 = (($k$1) + 1023)|0;
    $71 = (_bitshift64Shl(($70|0),0,52)|0);
    $72 = tempRet0;
    HEAP32[tempDoublePtr>>2] = $71;HEAP32[tempDoublePtr+4>>2] = $72;$73 = +HEAPF64[tempDoublePtr>>3];
    $74 = ($k$1>>>0)>(56);
    if ($74) {
     $75 = $$02 - $59;
     $76 = $75 + 1.0;
     $77 = ($k$1|0)==(1024);
     $78 = $76 * 2.0;
     $79 = $78 * 8.9884656743115795E+307;
     $80 = $73 * $76;
     $y$0 = $77 ? $79 : $80;
     $81 = $y$0 + -1.0;
     $$0 = $81;
     break L18;
    }
    $82 = (1023 - ($k$1))|0;
    $83 = (_bitshift64Shl(($82|0),0,52)|0);
    $84 = tempRet0;
    $85 = ($k$1|0)<(20);
    if ($85) {
     $86 = $$02 - $59;
     HEAP32[tempDoublePtr>>2] = $83;HEAP32[tempDoublePtr+4>>2] = $84;$87 = +HEAPF64[tempDoublePtr>>3];
     $88 = 1.0 - $87;
     $89 = $88 + $86;
     $$pn = $89;
    } else {
     HEAP32[tempDoublePtr>>2] = $83;HEAP32[tempDoublePtr+4>>2] = $84;$90 = +HEAPF64[tempDoublePtr>>3];
     $91 = $90 + $59;
     $92 = $$02 - $91;
     $93 = $92 + 1.0;
     $$pn = $93;
    }
    $y$1 = $73 * $$pn;
    $$0 = $y$1;
    break L18;
   }
   }
  }
 } while(0);
 return (+$$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $94 = ($95|0)==($85|0);
        $96 = ($97|0)==($86|0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $95;$101 = $97;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $113 = ($114|0)==($85|0);
     $115 = ($116|0)==($86|0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;$121 = $155;
     }
    } else {
     $119 = $116;$121 = $114;
    }
    $118 = ($119>>>0)<(1048576);
    $120 = ($121>>>0)<(0);
    $122 = ($119|0)==(1048576);
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$150 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $151;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _tanh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $t$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)>(1071748074);
 do {
  if ($4) {
   $5 = ($2>>>0)>(1077149696);
   if ($5) {
    $6 = 0.0 / $3;
    $7 = 1.0 - $6;
    $t$0 = $7;
    break;
   } else {
    $8 = $3 * 2.0;
    $9 = (+_expm1($8));
    $10 = $9 + 2.0;
    $11 = 2.0 / $10;
    $12 = 1.0 - $11;
    $t$0 = $12;
    break;
   }
  } else {
   $13 = ($2>>>0)>(1070618798);
   if ($13) {
    $14 = $3 * 2.0;
    $15 = (+_expm1($14));
    $16 = $15 + 2.0;
    $17 = $15 / $16;
    $t$0 = $17;
    break;
   }
   $18 = ($2>>>0)>(1048575);
   if ($18) {
    $19 = $3 * -2.0;
    $20 = (+_expm1($19));
    $21 = -$20;
    $22 = $20 + 2.0;
    $23 = $21 / $22;
    $t$0 = $23;
   } else {
    $t$0 = $3;
   }
  }
 } while(0);
 $24 = ($1|0)<(0);
 $25 = -$t$0;
 $26 = $24 ? $25 : $t$0;
 return (+$26);
}
function _ioctl($fd,$req,$varargs) {
 $fd = $fd|0;
 $req = $req|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $req;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $7 = (___syscall54(54,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 448004 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (447748 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _ntohl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(629783,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $13 = $$pre;
   }
   $12 = ($13<<24>>24)==(97);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 5;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 3;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 4;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 2;
   $34 = HEAP32[(447708)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((447732)|0));
   $37 = HEAP32[(447728)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(447728)>>2] = $4;
   ___unlock(((447732)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 127]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[447704>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((113|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[447704>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((114|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 3;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 127]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 127]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((447732)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(447728)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(447728)>>2] = $14;
  }
  ___unlock(((447732)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 127]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[447964>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[447964>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((447732)|0));
   $$012 = HEAP32[(447728)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((447732)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$048 = 0, $$05 = 0, $$lcssa14 = 0, $$old2 = 0, $$pre = 0, $$sum$pre$phiZZ2D = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $13 = $3;
 } else {
  $13 = 0;
 }
 $4 = (($n) + -1)|0;
 $5 = ($n|0)<(2);
 if ($5) {
  $6 = ((($f)) + 74|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = (($8) + 255)|0;
  $10 = $9 | $8;
  $11 = $10&255;
  HEAP8[$6>>0] = $11;
  $12 = ($13|0)==(0);
  if (!($12)) {
   ___unlockfile($f);
  }
  $14 = ($4|0)==(0);
  if ($14) {
   HEAP8[$s>>0] = 0;
   $$0 = $s;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($4|0)==(0);
  L11: do {
   if ($$old2) {
    $p$1 = $s;
    label = 18;
   } else {
    $15 = ((($f)) + 4|0);
    $16 = ((($f)) + 8|0);
    $$05 = $4;$p$0 = $s;
    while(1) {
     $17 = HEAP32[$15>>2]|0;
     $18 = HEAP32[$16>>2]|0;
     $19 = $18;
     $20 = $17;
     $21 = (($19) - ($20))|0;
     $22 = (_memchr($17,10,$21)|0);
     $23 = ($22|0)==(0|0);
     $24 = $22;
     $25 = (1 - ($20))|0;
     $26 = (($25) + ($24))|0;
     $27 = $23 ? $21 : $26;
     $28 = ($27>>>0)<($$05>>>0);
     $29 = $28 ? $27 : $$05;
     _memcpy(($p$0|0),($17|0),($29|0))|0;
     $30 = HEAP32[$15>>2]|0;
     $31 = (($30) + ($29)|0);
     HEAP32[$15>>2] = $31;
     $32 = (($p$0) + ($29)|0);
     $33 = (($$05) - ($29))|0;
     $or$cond = $23 & $28;
     if (!($or$cond)) {
      $p$1 = $32;
      label = 18;
      break L11;
     }
     $34 = HEAP32[$16>>2]|0;
     $35 = ($31>>>0)<($34>>>0);
     if ($35) {
      $$sum6 = (($29) + 1)|0;
      $36 = (($30) + ($$sum6)|0);
      HEAP32[$15>>2] = $36;
      $37 = HEAP8[$31>>0]|0;
      $38 = $37&255;
      $$sum$pre$phiZZ2D = $$sum6;$47 = $38;
     } else {
      $39 = (___uflow($f)|0);
      $40 = ($39|0)<(0);
      if ($40) {
       $$lcssa14 = $32;
       break;
      }
      $$pre = (($29) + 1)|0;
      $$sum$pre$phiZZ2D = $$pre;$47 = $39;
     }
     $45 = (($33) + -1)|0;
     $46 = $47&255;
     $48 = (($p$0) + ($$sum$pre$phiZZ2D)|0);
     HEAP8[$32>>0] = $46;
     $sext$mask = $47 & 255;
     $49 = ($sext$mask|0)!=(10);
     $50 = ($45|0)!=(0);
     $or$cond3 = $50 & $49;
     if ($or$cond3) {
      $$05 = $45;$p$0 = $48;
     } else {
      $p$1 = $48;
      label = 18;
      break L11;
     }
    }
    $41 = ($$lcssa14|0)==($s|0);
    if ($41) {
     $$048 = 0;
    } else {
     $42 = HEAP32[$f>>2]|0;
     $43 = $42 & 16;
     $44 = ($43|0)==(0);
     if ($44) {
      $$048 = 0;
     } else {
      $p$1 = $$lcssa14;
      label = 18;
     }
    }
   }
  } while(0);
  if ((label|0) == 18) {
   $51 = ($s|0)==(0|0);
   if ($51) {
    $$048 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$048 = $s;
   }
  }
  $52 = ($13|0)==(0);
  if ($52) {
   $$0 = $$048;
  } else {
   ___unlockfile($f);
   $$0 = $$048;
  }
 }
 return ($$0|0);
}
function _fileno($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $3 = (___lockfile($f)|0);
  $phitmp = ($3|0)==(0);
  if (!($phitmp)) {
  }
 }
 $4 = ((($f)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 return ($5|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(629783,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $32 = $4;
 } else {
  $32 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 127]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $31 = ($32|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($32|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function _fscanf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 127]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 127]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 127]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $8 = $6;
  } else {
   ___unlockfile($f);
   $8 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $8 = $4;
 }
 $7 = ($8|0)==($0|0);
 if ($7) {
  $10 = $nmemb;
 } else {
  $9 = (($8>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _getc($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $14 = ((($f)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($f)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($15>>>0)<($17>>>0);
   if ($18) {
    $19 = ((($15)) + 1|0);
    HEAP32[$14>>2] = $19;
    $20 = HEAP8[$15>>0]|0;
    $21 = $20&255;
    $23 = $21;
   } else {
    $22 = (___uflow($f)|0);
    $23 = $22;
   }
   $$0 = $23;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($f)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = ((($6)) + 1|0);
    HEAP32[$5>>2] = $10;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $$0 = $12;
    break;
   } else {
    $13 = (___uflow($f)|0);
    $$0 = $13;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _getc_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___uflow($f)|0);
  $9 = $8;
 }
 return ($9|0);
}
function _perror($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[447952>>2]|0;
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strerror($2)|0);
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if ($6) {
  $7 = (___lockfile($0)|0);
  $14 = $7;
 } else {
  $14 = 0;
 }
 $8 = ($msg|0)==(0|0);
 if (!($8)) {
  $9 = HEAP8[$msg>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if (!($10)) {
   $11 = (_strlen($msg)|0);
   (_fwrite($msg,$11,1,$0)|0);
   (_fputc(58,$0)|0);
   (_fputc(32,$0)|0);
  }
 }
 $12 = (_strlen($3)|0);
 (_fwrite($3,$12,1,$0)|0);
 (_fputc(10,$0)|0);
 $13 = ($14|0)==(0);
 if (!($13)) {
  ___unlockfile($0);
 }
 return;
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[447960>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _putc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _putchar($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[447960>>2]|0;
 $1 = (_fputc($c,$0)|0);
 return ($1|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[447960>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $20 = $4;
 } else {
  $20 = 0;
 }
 $5 = (_fputs($s,$0)|0);
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $18 = 1;
  } else {
   $7 = ((($0)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(10);
   if (!($9)) {
    $10 = ((($0)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = 10;
     $18 = 0;
     break;
    }
   }
   $16 = (___overflow($0,10)|0);
   $phitmp = ($16|0)<(0);
   $18 = $phitmp;
  }
 } while(0);
 $17 = $18 << 31 >> 31;
 $19 = ($20|0)==(0);
 if (!($19)) {
  ___unlockfile($0);
 }
 return ($17|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _tmpfile() {
 var $$0 = 0, $$lcssa = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $try$02 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $buf = sp + 20|0;
 $try$02 = 0;
 while(1) {
  $2 = (_tmpnam($buf)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 0;
   break;
  }
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 32962;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 384;
  $4 = (___syscall5(5,($vararg_buffer|0))|0);
  $5 = (___syscall_ret($4)|0);
  $6 = ($5|0)>(-1);
  $1 = (($try$02) + 1)|0;
  if ($6) {
   $$lcssa = $5;$$lcssa7 = $2;
   label = 5;
   break;
  }
  $0 = ($1|0)<(100);
  if ($0) {
   $try$02 = $1;
  } else {
   $$0 = 0;
   break;
  }
 }
 if ((label|0) == 5) {
  $7 = (___fdopen($$lcssa,629787)|0);
  HEAP32[$vararg_buffer3>>2] = $$lcssa7;
  (___syscall10(10,($vararg_buffer3|0))|0);
  $$0 = $7;
 }
 STACKTOP = sp;return ($$0|0);
}
function _tmpnam($s) {
 $s = $s|0;
 var $$0 = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $try$0 = 0, $try$1 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 48|0;
 $ts = sp + 40|0;
 $1 = ($s|0)==(0|0);
 $$s = $1 ? 629790 : $s;
 HEAP32[$0>>2] = $$s;
 HEAP32[$vararg_buffer>>2] = 629810;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 7;
 $2 = (___syscall33(33,($vararg_buffer|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($ts)) + 4|0);
  $5 = $0;
  $try$0 = 0;
  while(1) {
   HEAP32[$vararg_buffer2>>2] = 0;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $ts;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = 0;
   (___syscall265(265,($vararg_buffer2|0))|0);
   $6 = HEAP32[$4>>2]|0;
   $7 = $6 ^ $5;
   $8 = HEAP32[$0>>2]|0;
   $9 = $8;
   $10 = $7 ^ $9;
   $11 = HEAP32[448008>>2]|0;HEAP32[448008>>2] = (($11+1)|0);
   HEAP32[$vararg_buffer7>>2] = $11;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $10;
   (_snprintf($8,20,629815,$vararg_buffer7)|0);
   $12 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer11>>2] = $12;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = 0;
   $13 = (___syscall33(33,($vararg_buffer11|0))|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $try$1 = $try$0;
    break;
   }
   $15 = (($try$0) + 1)|0;
   $16 = ($try$0|0)<(100);
   if ($16) {
    $try$0 = $15;
   } else {
    $try$1 = $15;
    break;
   }
  }
  $17 = ($try$1|0)>(99);
  $18 = HEAP32[$0>>2]|0;
  $19 = $17 ? 0 : $18;
  $$0 = $19;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 127]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $334 = $4;
 } else {
  $334 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $145 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $145 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $144 = $145;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($144))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $157 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $157 = $$pre172;
        }
        $156 = ($157|0)==(0|0);
        if (!($156)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $157;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $157;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $281 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $281 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $280 = $281;
          $282 = $279;
          $283 = (($280) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $62 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $62 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $61 = ($62|0)==($60|0);
      if (!($61)) {
       $$lcssa384 = $62;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $41 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $41 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $40 = $41;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($40))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $333 = ($334|0)==(0);
 if (!($333)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=448012; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 115;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtox($s,$p,1));
 return (+$0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa61>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
   } else {
    $19 = ($$0$lcssa60>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa28 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $21 = 0;$r$0$lcssa = $_r;
   } else {
    $3 = $1&255;
    $$08$in = $n;$8 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $4 = HEAP8[$r$07>>0]|0;
     $5 = ($4<<24>>24)!=(0);
     $6 = ($$08|0)!=(0);
     $or$cond = $6 & $5;
     if (!($or$cond)) {
      $21 = $8;$r$0$lcssa = $r$07;
      break L3;
     }
     $7 = ($8<<24>>24)==($4<<24>>24);
     if (!($7)) {
      $10 = (_tolower($9)|0);
      $11 = HEAP8[$r$07>>0]|0;
      $12 = $11&255;
      $13 = (_tolower($12)|0);
      $14 = ($10|0)==($13|0);
      if (!($14)) {
       $l$06$lcssa28 = $l$06;$r$07$lcssa27 = $r$07;
       break;
      }
     }
     $15 = ((($l$06)) + 1|0);
     $16 = ((($r$07)) + 1|0);
     $17 = HEAP8[$15>>0]|0;
     $18 = $17&255;
     $19 = ($17<<24>>24)==(0);
     if ($19) {
      $21 = 0;$r$0$lcssa = $16;
      break L3;
     } else {
      $$08$in = $$08;$8 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
     }
    }
    $$pre = HEAP8[$l$06$lcssa28>>0]|0;
    $21 = $$pre;$r$0$lcssa = $r$07$lcssa27;
   }
  } while(0);
  $20 = $21&255;
  $22 = (_tolower($20)|0);
  $23 = HEAP8[$r$0$lcssa>>0]|0;
  $24 = $23&255;
  $25 = (_tolower($24)|0);
  $26 = (($22) - ($25))|0;
  $$04 = $26;
 }
 return ($$04|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$7 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $6 = ($7<<24>>24)==($3<<24>>24);
     $or$cond4 = $6 & $or$cond;
     if (!($or$cond4)) {
      $13 = $7;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$7 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _strnlen($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memchr($s,0,$n)|0);
 $1 = ($0|0)==(0|0);
 $2 = $0;
 $3 = $s;
 $4 = (($2) - ($3))|0;
 $5 = $1 ? $n : $4;
 return ($5|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$32 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$32 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $31 = ($32<<24>>24)!=(0);
       $33 = $31 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _swab($_src,$_dest,$n) {
 $_src = $_src|0;
 $_dest = $_dest|0;
 $n = $n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $dest$03 = 0, $src$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1);
 if ($0) {
  $$01 = $n;$dest$03 = $_dest;$src$02 = $_src;
  while(1) {
   $1 = ((($src$02)) + 1|0);
   $2 = HEAP8[$1>>0]|0;
   HEAP8[$dest$03>>0] = $2;
   $3 = HEAP8[$src$02>>0]|0;
   $4 = ((($dest$03)) + 1|0);
   HEAP8[$4>>0] = $3;
   $5 = ((($dest$03)) + 2|0);
   $6 = ((($src$02)) + 2|0);
   $7 = (($$01) + -2)|0;
   $8 = ($7|0)>(1);
   if ($8) {
    $$01 = $7;$dest$03 = $5;$src$02 = $6;
   } else {
    break;
   }
  }
 }
 return;
}
function _tcgetattr($fd,$tio) {
 $fd = $fd|0;
 $tio = $tio|0;
 var $$ = 0, $0 = 0, $not$ = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $tio;
 $0 = (_ioctl($fd,21505,$vararg_buffer)|0);
 $not$ = ($0|0)!=(0);
 $$ = $not$ << 31 >> 31;
 STACKTOP = sp;return ($$|0);
}
function _getcwd($buf,$size) {
 $buf = $buf|0;
 $size = $size|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tmp = sp + 8|0;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 4096;$$01 = $tmp;
  label = 4;
 } else {
  $1 = ($size|0)==(0);
  if ($1) {
   $2 = (___errno_location()|0);
   HEAP32[$2>>2] = 22;
   $$02 = 0;
  } else {
   $$0 = $size;$$01 = $buf;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer>>2] = $$01;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $3 = (___syscall183(183,($vararg_buffer|0))|0);
  $4 = (___syscall_ret($3)|0);
  $5 = ($4|0)<(0);
  if ($5) {
   $$02 = 0;
  } else {
   $6 = ($$01|0)==($tmp|0);
   if ($6) {
    $7 = (___strdup($tmp)|0);
    $$02 = $7;
   } else {
    $$02 = $$01;
   }
  }
 }
 STACKTOP = sp;return ($$02|0);
}
function _isatty($fd) {
 $fd = $fd|0;
 var $0 = 0, $1 = 0, $2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = (_tcgetattr($fd,$t)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function _cleanup387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 127]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((631899 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 632379;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 632379;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 632379;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 632379 : (632381);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (632380);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 632379;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 632379;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 632389;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 632396;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (632397) : (632402);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (632399);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (632363 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(632431,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(632431,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 632415 : 632419;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 632423 : 632427;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 632379;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 632379;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (632363 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 632379;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (632379 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 632379;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _strtox($s,$p,$prec) {
 $s = $s|0;
 $p = $p|0;
 $prec = $prec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($f)) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = ((($f)) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f,0);
 $4 = (+___floatscan($f,$prec,1));
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if (!($13)) {
  $14 = ($12|0)!=(0);
  $15 = (($s) + ($12)|0);
  $16 = $14 ? $15 : $s;
  HEAP32[$p>>2] = $16;
 }
 STACKTOP = sp;return (+$4);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[448460>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (448500 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (448500 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[448460>>2] = $22;
     } else {
      $23 = HEAP32[(448476)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(448468)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (448500 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (448500 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[448460>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(448476)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(448468)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(448480)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (448500 + ($92<<2)|0);
      $94 = HEAP32[448460>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[448460>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (448500 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (448500 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(448476)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(448468)>>2] = $81;
     HEAP32[(448480)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(448464)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (448764 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(448476)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (448764 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(448464)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(448464)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(448476)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(448476)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(448476)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(448468)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(448480)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (448500 + ($229<<2)|0);
       $231 = HEAP32[448460>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[448460>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (448500 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (448500 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(448476)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(448468)>>2] = $rsize$0$i$lcssa;
      HEAP32[(448480)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(448464)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (448764 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (448764 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(448468)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(448476)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (448764 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(448464)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(448464)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(448476)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(448476)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(448476)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (448500 + ($424<<2)|0);
          $426 = HEAP32[448460>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[448460>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (448500 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (448500 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(448476)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (448764 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(448464)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(448464)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(448476)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(448476)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(448468)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(448480)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(448480)>>2] = $514;
   HEAP32[(448468)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(448468)>>2] = 0;
   HEAP32[(448480)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(448472)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(448472)>>2] = $528;
  $529 = HEAP32[(448484)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(448484)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[448932>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(448940)>>2] = $538;
    HEAP32[(448936)>>2] = $538;
    HEAP32[(448944)>>2] = -1;
    HEAP32[(448948)>>2] = -1;
    HEAP32[(448952)>>2] = 0;
    HEAP32[(448904)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[448932>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(448940)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(448900)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(448892)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(448904)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(448484)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (448908);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(448472)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(448936)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(448892)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(448900)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(448940)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(448904)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(448904)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(448892)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(448892)>>2] = $632;
  $633 = HEAP32[(448896)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(448896)>>2] = $632;
  }
  $635 = HEAP32[(448484)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(448476)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(448476)>>2] = $tbase$255$i;
    }
    HEAP32[(448908)>>2] = $tbase$255$i;
    HEAP32[(448912)>>2] = $tsize$254$i;
    HEAP32[(448920)>>2] = 0;
    $640 = HEAP32[448932>>2]|0;
    HEAP32[(448496)>>2] = $640;
    HEAP32[(448492)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (448500 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (448500 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (448500 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(448484)>>2] = $654;
    HEAP32[(448472)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(448948)>>2]|0;
    HEAP32[(448488)>>2] = $659;
   } else {
    $sp$084$i = (448908);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(448472)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(448484)>>2] = $684;
       HEAP32[(448472)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(448948)>>2]|0;
       HEAP32[(448488)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(448476)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(448476)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (448908);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (448908);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(448472)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(448472)>>2] = $730;
        HEAP32[(448484)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(448480)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(448468)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(448468)>>2] = $736;
         HEAP32[(448480)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (448500 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[448460>>2]|0;
            $763 = $762 & $761;
            HEAP32[448460>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (448764 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(448464)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(448464)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(448476)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(448476)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(448476)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (448500 + ($840<<2)|0);
         $842 = HEAP32[448460>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[448460>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (448500 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (448500 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(448476)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (448764 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(448464)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(448464)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(448476)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(448476)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (448908);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(448484)>>2] = $953;
    HEAP32[(448472)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(448948)>>2]|0;
    HEAP32[(448488)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(448908)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(448908)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(448908)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(448908)+12>>2]|0;
    HEAP32[(448908)>>2] = $tbase$255$i;
    HEAP32[(448912)>>2] = $tsize$254$i;
    HEAP32[(448920)>>2] = 0;
    HEAP32[(448916)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (448500 + ($977<<2)|0);
      $979 = HEAP32[448460>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[448460>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (448500 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (448500 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(448476)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (448764 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(448464)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(448464)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(448476)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(448476)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(448472)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(448472)>>2] = $1062;
   $1063 = HEAP32[(448484)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(448484)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(448476)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(448480)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(448468)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (448500 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[448460>>2]|0;
     $36 = $35 & $34;
     HEAP32[448460>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (448764 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(448464)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(448464)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(448476)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(448476)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(448476)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(448484)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(448472)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(448472)>>2] = $120;
   HEAP32[(448484)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(448480)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(448480)>>2] = 0;
   HEAP32[(448468)>>2] = 0;
   return;
  }
  $125 = HEAP32[(448480)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(448468)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(448468)>>2] = $128;
   HEAP32[(448480)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (448500 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(448476)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[448460>>2]|0;
     $152 = $151 & $150;
     HEAP32[448460>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(448476)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(448476)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(448476)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (448764 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(448464)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(448464)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(448476)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(448476)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(448476)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(448480)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(448468)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (448500 + ($233<<2)|0);
  $235 = HEAP32[448460>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[448460>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (448500 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (448500 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(448476)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (448764 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(448464)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(448464)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(448476)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(448476)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(448492)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(448492)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (448916);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(448492)>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = ((($6)) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(448476)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(448940)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(448484)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(448472)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(448484)>>2] = $36;
  HEAP32[(448472)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(448480)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(448468)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(448468)>>2] = $storemerge21;
  HEAP32[(448480)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (448500 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[448460>>2]|0;
    $88 = $87 & $86;
    HEAP32[448460>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (448764 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(448464)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(448464)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(448476)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(448476)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(448476)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(448476)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(448480)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(448468)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (448500 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[448460>>2]|0;
     $32 = $31 & $30;
     HEAP32[448460>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (448764 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(448464)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(448464)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(448476)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(448476)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(448476)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(448476)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(448484)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(448472)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(448472)>>2] = $115;
   HEAP32[(448484)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(448480)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(448480)>>2] = 0;
   HEAP32[(448468)>>2] = 0;
   return;
  }
  $120 = HEAP32[(448480)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(448468)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(448468)>>2] = $123;
   HEAP32[(448480)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (448500 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[448460>>2]|0;
     $146 = $145 & $144;
     HEAP32[448460>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (448764 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(448464)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(448464)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(448476)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(448476)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(448476)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(448480)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(448468)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (448500 + ($224<<2)|0);
  $226 = HEAP32[448460>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[448460>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (448500 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (448500 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(448476)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (448764 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(448464)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(448464)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(448476)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(448476)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&127](a1|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_dd(index,a1) {
  index = index|0;
  a1=+a1;
  return +FUNCTION_TABLE_dd[index&127](+a1);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_di(1);return +0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0) {
 p0 = +p0; nullFunc_dd(3);return +0;
}
function _sqrt__wrapper(p0) {
 p0 = +p0; return +_sqrt(+p0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _putenv__wrapper(p0) {
 p0 = p0|0; return _putenv(p0|0)|0;
}
function _abs__wrapper(p0) {
 p0 = p0|0; return _abs(p0|0)|0;
}
function _ctime__wrapper(p0) {
 p0 = p0|0; return _ctime(p0|0)|0;
}
function b6() {
 ; nullFunc_v(6);
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(7);return 0;
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function _utime__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _utime(p0|0,p1|0)|0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,b0,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,_fprintf,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_fseek,b0,b0,b0,b0,b0,b0,b0,___fseeko,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_sprintf,b0,b0,b0,_do_read,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_di = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,_atof,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_perror,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,_free,b2,_bad_pixels,_subtract,b2,b2,b2,b2,b2,b2,_xtrans_interpolate,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_cleanup387,_cleanup392,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_dd = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_sqrt__wrapper,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_merror,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,_putenv__wrapper,b5,_puts,b5,_isdigit,b5,b5,_atoi,_abs__wrapper,b5,_isatty,_fileno,_fclose,b5,b5,b5,b5,b5,b5,_ctime__wrapper,b5,_putchar,b5,_malloc,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_strlen,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,_phase_one_load_raw,_phase_one_load_raw_c,_canon_load_raw,_lossless_jpeg_load_raw,_canon_600_load_raw,_sony_load_raw,_eight_bit_load_raw,_kodak_262_load_raw,_packed_load_raw,_nokia_load_raw,_panasonic_load_raw,_sinar_4shot_load_raw,_sony_arw_load_raw,_samsung_load_raw,_samsung2_load_raw,_samsung3_load_raw,_imacon_full_load_raw,_unpacked_load_raw,_sony_arw2_load_raw,_olympus_load_raw,_nikon_yuv_load_raw,_nikon_load_raw
,_pentax_load_raw,_kodak_rgb_load_raw,_kodak_ycbcr_load_raw,_kodak_65000_load_raw,_layer_thumb,_ppm_thumb,_ppm16_thumb,_kodak_thumb_load_raw,_rollei_thumb,_smal_v6_load_raw,_smal_v9_load_raw,_foveon_sd_load_raw,_foveon_dp_load_raw,_jpeg_thumb,_foveon_thumb,_quicktake_100_load_raw,_kodak_radc_load_raw,_canon_rmf_load_raw,_redcine_load_raw,_minolta_rd175_load_raw,_packed_dng_load_raw,_lossless_dng_load_raw,_lossy_dng_load_raw,_canon_sraw_load_raw,_hasselblad_load_raw,_leaf_hdr_load_raw,_kodak_c603_load_raw,_kodak_c330_load_raw,_kodak_jpeg_load_raw,_kodak_dc120_load_raw
,_rollei_load_raw,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_identify,b6,_write_ppm_tiff,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_crop_masked_pixels
,b6,_remove_zeroes,b6,b6,_foveon_interpolate,_scale_colors,_pre_interpolate,_lin_interpolate,_vng_interpolate,_ppg_interpolate,b6,_ahd_interpolate,_median_filter,_blend_highlights,_recover_highlights,_fuji_rotate,_convert_to_rgb,_stretch,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_fread,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_snprintf,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,_printf,b8,_strchr,b8,b8,b8,b8,b8,_strcmp,b8,b8,b8,_fopen,b8,b8,_utime__wrapper,b8,b8,b8,b8,b8,_fcol,b8,b8,_calloc,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_strcpy,_strrchr,b8,b8,_strcat,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _bitshift64Ashr: _bitshift64Ashr, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_di: dynCall_di, dynCall_vi: dynCall_vi, dynCall_dd: dynCall_dd, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


// run();

FS.createDataFile('/', fname, data, true, true)
setTimeout(function(){
  run(polarr_rf_arguments);
  setTimeout(function(){
    var name = fname.substr(0, fname.lastIndexOf('.'));
    var thumb_name = name + '.thumb.jpg';
    var thumb_name_ppm = name + '.thumb.ppm';
    if (FS.root.contents[thumb_name]){
      var fcontent = FS.root.contents[thumb_name].contents;
      polarr_rf_finish_callback(new Uint8Array(fcontent).buffer, false)
    } else if (FS.root.contents[thumb_name_ppm]){ // thumb_name_ppm is valid
      polarr_rf_error_callback(FS.root.contents)
    } else {
      polarr_rf_error_callback(FS.root.contents)
    }
  },1);
},1);
};
module.exports = polarr_rf
